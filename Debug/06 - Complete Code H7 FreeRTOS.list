
06 - Complete Code H7 FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001df90  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001bfc  0801e260  0801e260  0001f260  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801fe5c  0801fe5c  00020e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801fe64  0801fe64  00020e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801fe68  0801fe68  00020e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001f4  24000000  0801fe6c  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005b14  240001f4  08020060  000211f4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24005d08  08020060  00021d08  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000211f4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003d816  00000000  00000000  00021222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007f0a  00000000  00000000  0005ea38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002db0  00000000  00000000  00066948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00002341  00000000  00000000  000696f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00042799  00000000  00000000  0006ba39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000395c7  00000000  00000000  000ae1d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001824fa  00000000  00000000  000e7799  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00269c93  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000d724  00000000  00000000  00269cd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000075  00000000  00000000  002773fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001f4 	.word	0x240001f4
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801e248 	.word	0x0801e248

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001f8 	.word	0x240001f8
 800030c:	0801e248 	.word	0x0801e248

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <strlen>:
 80003d0:	4603      	mov	r3, r0
 80003d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003d6:	2a00      	cmp	r2, #0
 80003d8:	d1fb      	bne.n	80003d2 <strlen+0x2>
 80003da:	1a18      	subs	r0, r3, r0
 80003dc:	3801      	subs	r0, #1
 80003de:	4770      	bx	lr

080003e0 <__aeabi_drsub>:
 80003e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003e4:	e002      	b.n	80003ec <__adddf3>
 80003e6:	bf00      	nop

080003e8 <__aeabi_dsub>:
 80003e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003ec <__adddf3>:
 80003ec:	b530      	push	{r4, r5, lr}
 80003ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	bf1f      	itttt	ne
 8000402:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000406:	ea55 0c02 	orrsne.w	ip, r5, r2
 800040a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800040e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000412:	f000 80e2 	beq.w	80005da <__adddf3+0x1ee>
 8000416:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800041a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800041e:	bfb8      	it	lt
 8000420:	426d      	neglt	r5, r5
 8000422:	dd0c      	ble.n	800043e <__adddf3+0x52>
 8000424:	442c      	add	r4, r5
 8000426:	ea80 0202 	eor.w	r2, r0, r2
 800042a:	ea81 0303 	eor.w	r3, r1, r3
 800042e:	ea82 0000 	eor.w	r0, r2, r0
 8000432:	ea83 0101 	eor.w	r1, r3, r1
 8000436:	ea80 0202 	eor.w	r2, r0, r2
 800043a:	ea81 0303 	eor.w	r3, r1, r3
 800043e:	2d36      	cmp	r5, #54	@ 0x36
 8000440:	bf88      	it	hi
 8000442:	bd30      	pophi	{r4, r5, pc}
 8000444:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000448:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800044c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000450:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000454:	d002      	beq.n	800045c <__adddf3+0x70>
 8000456:	4240      	negs	r0, r0
 8000458:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800045c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000460:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000464:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000468:	d002      	beq.n	8000470 <__adddf3+0x84>
 800046a:	4252      	negs	r2, r2
 800046c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000470:	ea94 0f05 	teq	r4, r5
 8000474:	f000 80a7 	beq.w	80005c6 <__adddf3+0x1da>
 8000478:	f1a4 0401 	sub.w	r4, r4, #1
 800047c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000480:	db0d      	blt.n	800049e <__adddf3+0xb2>
 8000482:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000486:	fa22 f205 	lsr.w	r2, r2, r5
 800048a:	1880      	adds	r0, r0, r2
 800048c:	f141 0100 	adc.w	r1, r1, #0
 8000490:	fa03 f20e 	lsl.w	r2, r3, lr
 8000494:	1880      	adds	r0, r0, r2
 8000496:	fa43 f305 	asr.w	r3, r3, r5
 800049a:	4159      	adcs	r1, r3
 800049c:	e00e      	b.n	80004bc <__adddf3+0xd0>
 800049e:	f1a5 0520 	sub.w	r5, r5, #32
 80004a2:	f10e 0e20 	add.w	lr, lr, #32
 80004a6:	2a01      	cmp	r2, #1
 80004a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004ac:	bf28      	it	cs
 80004ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004b2:	fa43 f305 	asr.w	r3, r3, r5
 80004b6:	18c0      	adds	r0, r0, r3
 80004b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004c0:	d507      	bpl.n	80004d2 <__adddf3+0xe6>
 80004c2:	f04f 0e00 	mov.w	lr, #0
 80004c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80004d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004d6:	d31b      	bcc.n	8000510 <__adddf3+0x124>
 80004d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004dc:	d30c      	bcc.n	80004f8 <__adddf3+0x10c>
 80004de:	0849      	lsrs	r1, r1, #1
 80004e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004e8:	f104 0401 	add.w	r4, r4, #1
 80004ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004f4:	f080 809a 	bcs.w	800062c <__adddf3+0x240>
 80004f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004fc:	bf08      	it	eq
 80004fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000502:	f150 0000 	adcs.w	r0, r0, #0
 8000506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800050a:	ea41 0105 	orr.w	r1, r1, r5
 800050e:	bd30      	pop	{r4, r5, pc}
 8000510:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000514:	4140      	adcs	r0, r0
 8000516:	eb41 0101 	adc.w	r1, r1, r1
 800051a:	3c01      	subs	r4, #1
 800051c:	bf28      	it	cs
 800051e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000522:	d2e9      	bcs.n	80004f8 <__adddf3+0x10c>
 8000524:	f091 0f00 	teq	r1, #0
 8000528:	bf04      	itt	eq
 800052a:	4601      	moveq	r1, r0
 800052c:	2000      	moveq	r0, #0
 800052e:	fab1 f381 	clz	r3, r1
 8000532:	bf08      	it	eq
 8000534:	3320      	addeq	r3, #32
 8000536:	f1a3 030b 	sub.w	r3, r3, #11
 800053a:	f1b3 0220 	subs.w	r2, r3, #32
 800053e:	da0c      	bge.n	800055a <__adddf3+0x16e>
 8000540:	320c      	adds	r2, #12
 8000542:	dd08      	ble.n	8000556 <__adddf3+0x16a>
 8000544:	f102 0c14 	add.w	ip, r2, #20
 8000548:	f1c2 020c 	rsb	r2, r2, #12
 800054c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000550:	fa21 f102 	lsr.w	r1, r1, r2
 8000554:	e00c      	b.n	8000570 <__adddf3+0x184>
 8000556:	f102 0214 	add.w	r2, r2, #20
 800055a:	bfd8      	it	le
 800055c:	f1c2 0c20 	rsble	ip, r2, #32
 8000560:	fa01 f102 	lsl.w	r1, r1, r2
 8000564:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000568:	bfdc      	itt	le
 800056a:	ea41 010c 	orrle.w	r1, r1, ip
 800056e:	4090      	lslle	r0, r2
 8000570:	1ae4      	subs	r4, r4, r3
 8000572:	bfa2      	ittt	ge
 8000574:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000578:	4329      	orrge	r1, r5
 800057a:	bd30      	popge	{r4, r5, pc}
 800057c:	ea6f 0404 	mvn.w	r4, r4
 8000580:	3c1f      	subs	r4, #31
 8000582:	da1c      	bge.n	80005be <__adddf3+0x1d2>
 8000584:	340c      	adds	r4, #12
 8000586:	dc0e      	bgt.n	80005a6 <__adddf3+0x1ba>
 8000588:	f104 0414 	add.w	r4, r4, #20
 800058c:	f1c4 0220 	rsb	r2, r4, #32
 8000590:	fa20 f004 	lsr.w	r0, r0, r4
 8000594:	fa01 f302 	lsl.w	r3, r1, r2
 8000598:	ea40 0003 	orr.w	r0, r0, r3
 800059c:	fa21 f304 	lsr.w	r3, r1, r4
 80005a0:	ea45 0103 	orr.w	r1, r5, r3
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f1c4 040c 	rsb	r4, r4, #12
 80005aa:	f1c4 0220 	rsb	r2, r4, #32
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	fa01 f304 	lsl.w	r3, r1, r4
 80005b6:	ea40 0003 	orr.w	r0, r0, r3
 80005ba:	4629      	mov	r1, r5
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	fa21 f004 	lsr.w	r0, r1, r4
 80005c2:	4629      	mov	r1, r5
 80005c4:	bd30      	pop	{r4, r5, pc}
 80005c6:	f094 0f00 	teq	r4, #0
 80005ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005ce:	bf06      	itte	eq
 80005d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005d4:	3401      	addeq	r4, #1
 80005d6:	3d01      	subne	r5, #1
 80005d8:	e74e      	b.n	8000478 <__adddf3+0x8c>
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf18      	it	ne
 80005e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005e4:	d029      	beq.n	800063a <__adddf3+0x24e>
 80005e6:	ea94 0f05 	teq	r4, r5
 80005ea:	bf08      	it	eq
 80005ec:	ea90 0f02 	teqeq	r0, r2
 80005f0:	d005      	beq.n	80005fe <__adddf3+0x212>
 80005f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005f6:	bf04      	itt	eq
 80005f8:	4619      	moveq	r1, r3
 80005fa:	4610      	moveq	r0, r2
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea91 0f03 	teq	r1, r3
 8000602:	bf1e      	ittt	ne
 8000604:	2100      	movne	r1, #0
 8000606:	2000      	movne	r0, #0
 8000608:	bd30      	popne	{r4, r5, pc}
 800060a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800060e:	d105      	bne.n	800061c <__adddf3+0x230>
 8000610:	0040      	lsls	r0, r0, #1
 8000612:	4149      	adcs	r1, r1
 8000614:	bf28      	it	cs
 8000616:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800061a:	bd30      	pop	{r4, r5, pc}
 800061c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000620:	bf3c      	itt	cc
 8000622:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000626:	bd30      	popcc	{r4, r5, pc}
 8000628:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800062c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000630:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000634:	f04f 0000 	mov.w	r0, #0
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063e:	bf1a      	itte	ne
 8000640:	4619      	movne	r1, r3
 8000642:	4610      	movne	r0, r2
 8000644:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000648:	bf1c      	itt	ne
 800064a:	460b      	movne	r3, r1
 800064c:	4602      	movne	r2, r0
 800064e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000652:	bf06      	itte	eq
 8000654:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000658:	ea91 0f03 	teqeq	r1, r3
 800065c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	bf00      	nop

08000664 <__aeabi_ui2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000678:	f04f 0500 	mov.w	r5, #0
 800067c:	f04f 0100 	mov.w	r1, #0
 8000680:	e750      	b.n	8000524 <__adddf3+0x138>
 8000682:	bf00      	nop

08000684 <__aeabi_i2d>:
 8000684:	f090 0f00 	teq	r0, #0
 8000688:	bf04      	itt	eq
 800068a:	2100      	moveq	r1, #0
 800068c:	4770      	bxeq	lr
 800068e:	b530      	push	{r4, r5, lr}
 8000690:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000694:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000698:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800069c:	bf48      	it	mi
 800069e:	4240      	negmi	r0, r0
 80006a0:	f04f 0100 	mov.w	r1, #0
 80006a4:	e73e      	b.n	8000524 <__adddf3+0x138>
 80006a6:	bf00      	nop

080006a8 <__aeabi_f2d>:
 80006a8:	0042      	lsls	r2, r0, #1
 80006aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80006b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006b6:	bf1f      	itttt	ne
 80006b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006c4:	4770      	bxne	lr
 80006c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006ca:	bf08      	it	eq
 80006cc:	4770      	bxeq	lr
 80006ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006d2:	bf04      	itt	eq
 80006d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006e8:	e71c      	b.n	8000524 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_ul2d>:
 80006ec:	ea50 0201 	orrs.w	r2, r0, r1
 80006f0:	bf08      	it	eq
 80006f2:	4770      	bxeq	lr
 80006f4:	b530      	push	{r4, r5, lr}
 80006f6:	f04f 0500 	mov.w	r5, #0
 80006fa:	e00a      	b.n	8000712 <__aeabi_l2d+0x16>

080006fc <__aeabi_l2d>:
 80006fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000700:	bf08      	it	eq
 8000702:	4770      	bxeq	lr
 8000704:	b530      	push	{r4, r5, lr}
 8000706:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800070a:	d502      	bpl.n	8000712 <__aeabi_l2d+0x16>
 800070c:	4240      	negs	r0, r0
 800070e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000712:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000716:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800071a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800071e:	f43f aed8 	beq.w	80004d2 <__adddf3+0xe6>
 8000722:	f04f 0203 	mov.w	r2, #3
 8000726:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800072a:	bf18      	it	ne
 800072c:	3203      	addne	r2, #3
 800072e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000732:	bf18      	it	ne
 8000734:	3203      	addne	r2, #3
 8000736:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800073a:	f1c2 0320 	rsb	r3, r2, #32
 800073e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000742:	fa20 f002 	lsr.w	r0, r0, r2
 8000746:	fa01 fe03 	lsl.w	lr, r1, r3
 800074a:	ea40 000e 	orr.w	r0, r0, lr
 800074e:	fa21 f102 	lsr.w	r1, r1, r2
 8000752:	4414      	add	r4, r2
 8000754:	e6bd      	b.n	80004d2 <__adddf3+0xe6>
 8000756:	bf00      	nop

08000758 <__aeabi_ldivmod>:
 8000758:	b97b      	cbnz	r3, 800077a <__aeabi_ldivmod+0x22>
 800075a:	b972      	cbnz	r2, 800077a <__aeabi_ldivmod+0x22>
 800075c:	2900      	cmp	r1, #0
 800075e:	bfbe      	ittt	lt
 8000760:	2000      	movlt	r0, #0
 8000762:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000766:	e006      	blt.n	8000776 <__aeabi_ldivmod+0x1e>
 8000768:	bf08      	it	eq
 800076a:	2800      	cmpeq	r0, #0
 800076c:	bf1c      	itt	ne
 800076e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000772:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000776:	f000 ba0b 	b.w	8000b90 <__aeabi_idiv0>
 800077a:	f1ad 0c08 	sub.w	ip, sp, #8
 800077e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000782:	2900      	cmp	r1, #0
 8000784:	db09      	blt.n	800079a <__aeabi_ldivmod+0x42>
 8000786:	2b00      	cmp	r3, #0
 8000788:	db1a      	blt.n	80007c0 <__aeabi_ldivmod+0x68>
 800078a:	f000 f885 	bl	8000898 <__udivmoddi4>
 800078e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000792:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000796:	b004      	add	sp, #16
 8000798:	4770      	bx	lr
 800079a:	4240      	negs	r0, r0
 800079c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	db1b      	blt.n	80007dc <__aeabi_ldivmod+0x84>
 80007a4:	f000 f878 	bl	8000898 <__udivmoddi4>
 80007a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007b0:	b004      	add	sp, #16
 80007b2:	4240      	negs	r0, r0
 80007b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b8:	4252      	negs	r2, r2
 80007ba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007be:	4770      	bx	lr
 80007c0:	4252      	negs	r2, r2
 80007c2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007c6:	f000 f867 	bl	8000898 <__udivmoddi4>
 80007ca:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007d2:	b004      	add	sp, #16
 80007d4:	4240      	negs	r0, r0
 80007d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007da:	4770      	bx	lr
 80007dc:	4252      	negs	r2, r2
 80007de:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007e2:	f000 f859 	bl	8000898 <__udivmoddi4>
 80007e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007ee:	b004      	add	sp, #16
 80007f0:	4252      	negs	r2, r2
 80007f2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007f6:	4770      	bx	lr

080007f8 <__aeabi_uldivmod>:
 80007f8:	b953      	cbnz	r3, 8000810 <__aeabi_uldivmod+0x18>
 80007fa:	b94a      	cbnz	r2, 8000810 <__aeabi_uldivmod+0x18>
 80007fc:	2900      	cmp	r1, #0
 80007fe:	bf08      	it	eq
 8000800:	2800      	cmpeq	r0, #0
 8000802:	bf1c      	itt	ne
 8000804:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000808:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800080c:	f000 b9c0 	b.w	8000b90 <__aeabi_idiv0>
 8000810:	f1ad 0c08 	sub.w	ip, sp, #8
 8000814:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000818:	f000 f83e 	bl	8000898 <__udivmoddi4>
 800081c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000820:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000824:	b004      	add	sp, #16
 8000826:	4770      	bx	lr

08000828 <__aeabi_d2lz>:
 8000828:	b508      	push	{r3, lr}
 800082a:	4602      	mov	r2, r0
 800082c:	460b      	mov	r3, r1
 800082e:	ec43 2b17 	vmov	d7, r2, r3
 8000832:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800083a:	d403      	bmi.n	8000844 <__aeabi_d2lz+0x1c>
 800083c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000840:	f000 b80a 	b.w	8000858 <__aeabi_d2ulz>
 8000844:	eeb1 7b47 	vneg.f64	d7, d7
 8000848:	ec51 0b17 	vmov	r0, r1, d7
 800084c:	f000 f804 	bl	8000858 <__aeabi_d2ulz>
 8000850:	4240      	negs	r0, r0
 8000852:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000856:	bd08      	pop	{r3, pc}

08000858 <__aeabi_d2ulz>:
 8000858:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000888 <__aeabi_d2ulz+0x30>
 800085c:	ec41 0b17 	vmov	d7, r0, r1
 8000860:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 8000890 <__aeabi_d2ulz+0x38>
 8000864:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000868:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800086c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000870:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000874:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000878:	ee16 1a10 	vmov	r1, s12
 800087c:	ee17 0a90 	vmov	r0, s15
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	f3af 8000 	nop.w
 8000888:	00000000 	.word	0x00000000
 800088c:	3df00000 	.word	0x3df00000
 8000890:	00000000 	.word	0x00000000
 8000894:	41f00000 	.word	0x41f00000

08000898 <__udivmoddi4>:
 8000898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800089c:	9d08      	ldr	r5, [sp, #32]
 800089e:	468e      	mov	lr, r1
 80008a0:	4604      	mov	r4, r0
 80008a2:	4688      	mov	r8, r1
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d14a      	bne.n	800093e <__udivmoddi4+0xa6>
 80008a8:	428a      	cmp	r2, r1
 80008aa:	4617      	mov	r7, r2
 80008ac:	d962      	bls.n	8000974 <__udivmoddi4+0xdc>
 80008ae:	fab2 f682 	clz	r6, r2
 80008b2:	b14e      	cbz	r6, 80008c8 <__udivmoddi4+0x30>
 80008b4:	f1c6 0320 	rsb	r3, r6, #32
 80008b8:	fa01 f806 	lsl.w	r8, r1, r6
 80008bc:	fa20 f303 	lsr.w	r3, r0, r3
 80008c0:	40b7      	lsls	r7, r6
 80008c2:	ea43 0808 	orr.w	r8, r3, r8
 80008c6:	40b4      	lsls	r4, r6
 80008c8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008cc:	fa1f fc87 	uxth.w	ip, r7
 80008d0:	fbb8 f1fe 	udiv	r1, r8, lr
 80008d4:	0c23      	lsrs	r3, r4, #16
 80008d6:	fb0e 8811 	mls	r8, lr, r1, r8
 80008da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80008de:	fb01 f20c 	mul.w	r2, r1, ip
 80008e2:	429a      	cmp	r2, r3
 80008e4:	d909      	bls.n	80008fa <__udivmoddi4+0x62>
 80008e6:	18fb      	adds	r3, r7, r3
 80008e8:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80008ec:	f080 80ea 	bcs.w	8000ac4 <__udivmoddi4+0x22c>
 80008f0:	429a      	cmp	r2, r3
 80008f2:	f240 80e7 	bls.w	8000ac4 <__udivmoddi4+0x22c>
 80008f6:	3902      	subs	r1, #2
 80008f8:	443b      	add	r3, r7
 80008fa:	1a9a      	subs	r2, r3, r2
 80008fc:	b2a3      	uxth	r3, r4
 80008fe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000902:	fb0e 2210 	mls	r2, lr, r0, r2
 8000906:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800090a:	fb00 fc0c 	mul.w	ip, r0, ip
 800090e:	459c      	cmp	ip, r3
 8000910:	d909      	bls.n	8000926 <__udivmoddi4+0x8e>
 8000912:	18fb      	adds	r3, r7, r3
 8000914:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000918:	f080 80d6 	bcs.w	8000ac8 <__udivmoddi4+0x230>
 800091c:	459c      	cmp	ip, r3
 800091e:	f240 80d3 	bls.w	8000ac8 <__udivmoddi4+0x230>
 8000922:	443b      	add	r3, r7
 8000924:	3802      	subs	r0, #2
 8000926:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800092a:	eba3 030c 	sub.w	r3, r3, ip
 800092e:	2100      	movs	r1, #0
 8000930:	b11d      	cbz	r5, 800093a <__udivmoddi4+0xa2>
 8000932:	40f3      	lsrs	r3, r6
 8000934:	2200      	movs	r2, #0
 8000936:	e9c5 3200 	strd	r3, r2, [r5]
 800093a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800093e:	428b      	cmp	r3, r1
 8000940:	d905      	bls.n	800094e <__udivmoddi4+0xb6>
 8000942:	b10d      	cbz	r5, 8000948 <__udivmoddi4+0xb0>
 8000944:	e9c5 0100 	strd	r0, r1, [r5]
 8000948:	2100      	movs	r1, #0
 800094a:	4608      	mov	r0, r1
 800094c:	e7f5      	b.n	800093a <__udivmoddi4+0xa2>
 800094e:	fab3 f183 	clz	r1, r3
 8000952:	2900      	cmp	r1, #0
 8000954:	d146      	bne.n	80009e4 <__udivmoddi4+0x14c>
 8000956:	4573      	cmp	r3, lr
 8000958:	d302      	bcc.n	8000960 <__udivmoddi4+0xc8>
 800095a:	4282      	cmp	r2, r0
 800095c:	f200 8105 	bhi.w	8000b6a <__udivmoddi4+0x2d2>
 8000960:	1a84      	subs	r4, r0, r2
 8000962:	eb6e 0203 	sbc.w	r2, lr, r3
 8000966:	2001      	movs	r0, #1
 8000968:	4690      	mov	r8, r2
 800096a:	2d00      	cmp	r5, #0
 800096c:	d0e5      	beq.n	800093a <__udivmoddi4+0xa2>
 800096e:	e9c5 4800 	strd	r4, r8, [r5]
 8000972:	e7e2      	b.n	800093a <__udivmoddi4+0xa2>
 8000974:	2a00      	cmp	r2, #0
 8000976:	f000 8090 	beq.w	8000a9a <__udivmoddi4+0x202>
 800097a:	fab2 f682 	clz	r6, r2
 800097e:	2e00      	cmp	r6, #0
 8000980:	f040 80a4 	bne.w	8000acc <__udivmoddi4+0x234>
 8000984:	1a8a      	subs	r2, r1, r2
 8000986:	0c03      	lsrs	r3, r0, #16
 8000988:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800098c:	b280      	uxth	r0, r0
 800098e:	b2bc      	uxth	r4, r7
 8000990:	2101      	movs	r1, #1
 8000992:	fbb2 fcfe 	udiv	ip, r2, lr
 8000996:	fb0e 221c 	mls	r2, lr, ip, r2
 800099a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800099e:	fb04 f20c 	mul.w	r2, r4, ip
 80009a2:	429a      	cmp	r2, r3
 80009a4:	d907      	bls.n	80009b6 <__udivmoddi4+0x11e>
 80009a6:	18fb      	adds	r3, r7, r3
 80009a8:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80009ac:	d202      	bcs.n	80009b4 <__udivmoddi4+0x11c>
 80009ae:	429a      	cmp	r2, r3
 80009b0:	f200 80e0 	bhi.w	8000b74 <__udivmoddi4+0x2dc>
 80009b4:	46c4      	mov	ip, r8
 80009b6:	1a9b      	subs	r3, r3, r2
 80009b8:	fbb3 f2fe 	udiv	r2, r3, lr
 80009bc:	fb0e 3312 	mls	r3, lr, r2, r3
 80009c0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80009c4:	fb02 f404 	mul.w	r4, r2, r4
 80009c8:	429c      	cmp	r4, r3
 80009ca:	d907      	bls.n	80009dc <__udivmoddi4+0x144>
 80009cc:	18fb      	adds	r3, r7, r3
 80009ce:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80009d2:	d202      	bcs.n	80009da <__udivmoddi4+0x142>
 80009d4:	429c      	cmp	r4, r3
 80009d6:	f200 80ca 	bhi.w	8000b6e <__udivmoddi4+0x2d6>
 80009da:	4602      	mov	r2, r0
 80009dc:	1b1b      	subs	r3, r3, r4
 80009de:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80009e2:	e7a5      	b.n	8000930 <__udivmoddi4+0x98>
 80009e4:	f1c1 0620 	rsb	r6, r1, #32
 80009e8:	408b      	lsls	r3, r1
 80009ea:	fa22 f706 	lsr.w	r7, r2, r6
 80009ee:	431f      	orrs	r7, r3
 80009f0:	fa0e f401 	lsl.w	r4, lr, r1
 80009f4:	fa20 f306 	lsr.w	r3, r0, r6
 80009f8:	fa2e fe06 	lsr.w	lr, lr, r6
 80009fc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000a00:	4323      	orrs	r3, r4
 8000a02:	fa00 f801 	lsl.w	r8, r0, r1
 8000a06:	fa1f fc87 	uxth.w	ip, r7
 8000a0a:	fbbe f0f9 	udiv	r0, lr, r9
 8000a0e:	0c1c      	lsrs	r4, r3, #16
 8000a10:	fb09 ee10 	mls	lr, r9, r0, lr
 8000a14:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000a18:	fb00 fe0c 	mul.w	lr, r0, ip
 8000a1c:	45a6      	cmp	lr, r4
 8000a1e:	fa02 f201 	lsl.w	r2, r2, r1
 8000a22:	d909      	bls.n	8000a38 <__udivmoddi4+0x1a0>
 8000a24:	193c      	adds	r4, r7, r4
 8000a26:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000a2a:	f080 809c 	bcs.w	8000b66 <__udivmoddi4+0x2ce>
 8000a2e:	45a6      	cmp	lr, r4
 8000a30:	f240 8099 	bls.w	8000b66 <__udivmoddi4+0x2ce>
 8000a34:	3802      	subs	r0, #2
 8000a36:	443c      	add	r4, r7
 8000a38:	eba4 040e 	sub.w	r4, r4, lr
 8000a3c:	fa1f fe83 	uxth.w	lr, r3
 8000a40:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a44:	fb09 4413 	mls	r4, r9, r3, r4
 8000a48:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000a4c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a50:	45a4      	cmp	ip, r4
 8000a52:	d908      	bls.n	8000a66 <__udivmoddi4+0x1ce>
 8000a54:	193c      	adds	r4, r7, r4
 8000a56:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000a5a:	f080 8082 	bcs.w	8000b62 <__udivmoddi4+0x2ca>
 8000a5e:	45a4      	cmp	ip, r4
 8000a60:	d97f      	bls.n	8000b62 <__udivmoddi4+0x2ca>
 8000a62:	3b02      	subs	r3, #2
 8000a64:	443c      	add	r4, r7
 8000a66:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000a6a:	eba4 040c 	sub.w	r4, r4, ip
 8000a6e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000a72:	4564      	cmp	r4, ip
 8000a74:	4673      	mov	r3, lr
 8000a76:	46e1      	mov	r9, ip
 8000a78:	d362      	bcc.n	8000b40 <__udivmoddi4+0x2a8>
 8000a7a:	d05f      	beq.n	8000b3c <__udivmoddi4+0x2a4>
 8000a7c:	b15d      	cbz	r5, 8000a96 <__udivmoddi4+0x1fe>
 8000a7e:	ebb8 0203 	subs.w	r2, r8, r3
 8000a82:	eb64 0409 	sbc.w	r4, r4, r9
 8000a86:	fa04 f606 	lsl.w	r6, r4, r6
 8000a8a:	fa22 f301 	lsr.w	r3, r2, r1
 8000a8e:	431e      	orrs	r6, r3
 8000a90:	40cc      	lsrs	r4, r1
 8000a92:	e9c5 6400 	strd	r6, r4, [r5]
 8000a96:	2100      	movs	r1, #0
 8000a98:	e74f      	b.n	800093a <__udivmoddi4+0xa2>
 8000a9a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000a9e:	0c01      	lsrs	r1, r0, #16
 8000aa0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000aa4:	b280      	uxth	r0, r0
 8000aa6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000aaa:	463b      	mov	r3, r7
 8000aac:	4638      	mov	r0, r7
 8000aae:	463c      	mov	r4, r7
 8000ab0:	46b8      	mov	r8, r7
 8000ab2:	46be      	mov	lr, r7
 8000ab4:	2620      	movs	r6, #32
 8000ab6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000aba:	eba2 0208 	sub.w	r2, r2, r8
 8000abe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ac2:	e766      	b.n	8000992 <__udivmoddi4+0xfa>
 8000ac4:	4601      	mov	r1, r0
 8000ac6:	e718      	b.n	80008fa <__udivmoddi4+0x62>
 8000ac8:	4610      	mov	r0, r2
 8000aca:	e72c      	b.n	8000926 <__udivmoddi4+0x8e>
 8000acc:	f1c6 0220 	rsb	r2, r6, #32
 8000ad0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ad4:	40b7      	lsls	r7, r6
 8000ad6:	40b1      	lsls	r1, r6
 8000ad8:	fa20 f202 	lsr.w	r2, r0, r2
 8000adc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ae0:	430a      	orrs	r2, r1
 8000ae2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ae6:	b2bc      	uxth	r4, r7
 8000ae8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000aec:	0c11      	lsrs	r1, r2, #16
 8000aee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000af2:	fb08 f904 	mul.w	r9, r8, r4
 8000af6:	40b0      	lsls	r0, r6
 8000af8:	4589      	cmp	r9, r1
 8000afa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000afe:	b280      	uxth	r0, r0
 8000b00:	d93e      	bls.n	8000b80 <__udivmoddi4+0x2e8>
 8000b02:	1879      	adds	r1, r7, r1
 8000b04:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000b08:	d201      	bcs.n	8000b0e <__udivmoddi4+0x276>
 8000b0a:	4589      	cmp	r9, r1
 8000b0c:	d81f      	bhi.n	8000b4e <__udivmoddi4+0x2b6>
 8000b0e:	eba1 0109 	sub.w	r1, r1, r9
 8000b12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b16:	fb09 f804 	mul.w	r8, r9, r4
 8000b1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000b1e:	b292      	uxth	r2, r2
 8000b20:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b24:	4542      	cmp	r2, r8
 8000b26:	d229      	bcs.n	8000b7c <__udivmoddi4+0x2e4>
 8000b28:	18ba      	adds	r2, r7, r2
 8000b2a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000b2e:	d2c4      	bcs.n	8000aba <__udivmoddi4+0x222>
 8000b30:	4542      	cmp	r2, r8
 8000b32:	d2c2      	bcs.n	8000aba <__udivmoddi4+0x222>
 8000b34:	f1a9 0102 	sub.w	r1, r9, #2
 8000b38:	443a      	add	r2, r7
 8000b3a:	e7be      	b.n	8000aba <__udivmoddi4+0x222>
 8000b3c:	45f0      	cmp	r8, lr
 8000b3e:	d29d      	bcs.n	8000a7c <__udivmoddi4+0x1e4>
 8000b40:	ebbe 0302 	subs.w	r3, lr, r2
 8000b44:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000b48:	3801      	subs	r0, #1
 8000b4a:	46e1      	mov	r9, ip
 8000b4c:	e796      	b.n	8000a7c <__udivmoddi4+0x1e4>
 8000b4e:	eba7 0909 	sub.w	r9, r7, r9
 8000b52:	4449      	add	r1, r9
 8000b54:	f1a8 0c02 	sub.w	ip, r8, #2
 8000b58:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b5c:	fb09 f804 	mul.w	r8, r9, r4
 8000b60:	e7db      	b.n	8000b1a <__udivmoddi4+0x282>
 8000b62:	4673      	mov	r3, lr
 8000b64:	e77f      	b.n	8000a66 <__udivmoddi4+0x1ce>
 8000b66:	4650      	mov	r0, sl
 8000b68:	e766      	b.n	8000a38 <__udivmoddi4+0x1a0>
 8000b6a:	4608      	mov	r0, r1
 8000b6c:	e6fd      	b.n	800096a <__udivmoddi4+0xd2>
 8000b6e:	443b      	add	r3, r7
 8000b70:	3a02      	subs	r2, #2
 8000b72:	e733      	b.n	80009dc <__udivmoddi4+0x144>
 8000b74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b78:	443b      	add	r3, r7
 8000b7a:	e71c      	b.n	80009b6 <__udivmoddi4+0x11e>
 8000b7c:	4649      	mov	r1, r9
 8000b7e:	e79c      	b.n	8000aba <__udivmoddi4+0x222>
 8000b80:	eba1 0109 	sub.w	r1, r1, r9
 8000b84:	46c4      	mov	ip, r8
 8000b86:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b8a:	fb09 f804 	mul.w	r8, r9, r4
 8000b8e:	e7c4      	b.n	8000b1a <__udivmoddi4+0x282>

08000b90 <__aeabi_idiv0>:
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop

08000b94 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f043 0201 	orr.w	r2, r3, #1
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	601a      	str	r2, [r3, #0]
}
 8000ba8:	bf00      	nop
 8000baa:	370c      	adds	r7, #12
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <LL_TIM_DisableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_DisableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableCounter(TIM_TypeDef *TIMx)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f023 0201 	bic.w	r2, r3, #1
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	601a      	str	r2, [r3, #0]
}
 8000bc8:	bf00      	nop
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6a1a      	ldr	r2, [r3, #32]
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	431a      	orrs	r2, r3
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	621a      	str	r2, [r3, #32]
}
 8000bea:	bf00      	nop
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	b083      	sub	sp, #12
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
 8000bfe:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	6a1a      	ldr	r2, [r3, #32]
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	43db      	mvns	r3, r3
 8000c08:	401a      	ands	r2, r3
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	621a      	str	r2, [r3, #32]
}
 8000c0e:	bf00      	nop
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
	...

08000c1c <Buzzer_PlayTone>:
  * @param  delays: Array of delay durations in milliseconds for each tone
  * @param  numTones: Number of tones to play
  * @retval None
  */
void Buzzer_PlayTone(uint16_t *prescalers, uint16_t *delays, uint8_t numTones)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b086      	sub	sp, #24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	4613      	mov	r3, r2
 8000c28:	71fb      	strb	r3, [r7, #7]
    // Enable the timer and channel
    LL_TIM_EnableCounter(BUZZER_TIM);
 8000c2a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000c2e:	f7ff ffb1 	bl	8000b94 <LL_TIM_EnableCounter>
    LL_TIM_CC_EnableChannel(BUZZER_TIM, BUZZER_TIM_CHANNEL);
 8000c32:	2101      	movs	r1, #1
 8000c34:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000c38:	f7ff ffcc 	bl	8000bd4 <LL_TIM_CC_EnableChannel>

    // Set duty cycle (e.g., 25% as in original code)
    BUZZER_TIM->CCR1 = BUZZER_TIM->ARR * BUZZER_DEFAULT_DUTY / 100;
 8000c3c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c42:	4613      	mov	r3, r2
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	4413      	add	r3, r2
 8000c48:	009a      	lsls	r2, r3, #2
 8000c4a:	4413      	add	r3, r2
 8000c4c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c50:	4913      	ldr	r1, [pc, #76]	@ (8000ca0 <Buzzer_PlayTone+0x84>)
 8000c52:	fba1 1303 	umull	r1, r3, r1, r3
 8000c56:	095b      	lsrs	r3, r3, #5
 8000c58:	6353      	str	r3, [r2, #52]	@ 0x34

    // Play each tone
    for (uint8_t i = 0; i < numTones; i++)
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	75fb      	strb	r3, [r7, #23]
 8000c5e:	e012      	b.n	8000c86 <Buzzer_PlayTone+0x6a>
    {
        BUZZER_TIM->PSC = prescalers[i];
 8000c60:	7dfb      	ldrb	r3, [r7, #23]
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	68fa      	ldr	r2, [r7, #12]
 8000c66:	4413      	add	r3, r2
 8000c68:	881a      	ldrh	r2, [r3, #0]
 8000c6a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c6e:	629a      	str	r2, [r3, #40]	@ 0x28
        HAL_Delay(delays[i]);
 8000c70:	7dfb      	ldrb	r3, [r7, #23]
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	68ba      	ldr	r2, [r7, #8]
 8000c76:	4413      	add	r3, r2
 8000c78:	881b      	ldrh	r3, [r3, #0]
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f005 ffa0 	bl	8006bc0 <HAL_Delay>
    for (uint8_t i = 0; i < numTones; i++)
 8000c80:	7dfb      	ldrb	r3, [r7, #23]
 8000c82:	3301      	adds	r3, #1
 8000c84:	75fb      	strb	r3, [r7, #23]
 8000c86:	7dfa      	ldrb	r2, [r7, #23]
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	429a      	cmp	r2, r3
 8000c8c:	d3e8      	bcc.n	8000c60 <Buzzer_PlayTone+0x44>
    }

    // Disable the timer to stop the buzzer
    LL_TIM_DisableCounter(BUZZER_TIM);
 8000c8e:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000c92:	f7ff ff8f 	bl	8000bb4 <LL_TIM_DisableCounter>
}
 8000c96:	bf00      	nop
 8000c98:	3718      	adds	r7, #24
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	51eb851f 	.word	0x51eb851f

08000ca4 <Buzzer_On>:
  * @brief  Turn the buzzer on with a specific prescaler
  * @param  prescaler: Timer prescaler value
  * @retval None
  */
void Buzzer_On(uint16_t prescaler)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	80fb      	strh	r3, [r7, #6]
    BUZZER_TIM->PSC = prescaler;
 8000cae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cb2:	88fb      	ldrh	r3, [r7, #6]
 8000cb4:	6293      	str	r3, [r2, #40]	@ 0x28
    BUZZER_TIM->CCR1 = BUZZER_TIM->ARR * BUZZER_DEFAULT_DUTY / 100;
 8000cb6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000cba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000cbc:	4613      	mov	r3, r2
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	4413      	add	r3, r2
 8000cc2:	009a      	lsls	r2, r3, #2
 8000cc4:	4413      	add	r3, r2
 8000cc6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cca:	4909      	ldr	r1, [pc, #36]	@ (8000cf0 <Buzzer_On+0x4c>)
 8000ccc:	fba1 1303 	umull	r1, r3, r1, r3
 8000cd0:	095b      	lsrs	r3, r3, #5
 8000cd2:	6353      	str	r3, [r2, #52]	@ 0x34
    LL_TIM_EnableCounter(BUZZER_TIM);
 8000cd4:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000cd8:	f7ff ff5c 	bl	8000b94 <LL_TIM_EnableCounter>
    LL_TIM_CC_EnableChannel(BUZZER_TIM, BUZZER_TIM_CHANNEL);
 8000cdc:	2101      	movs	r1, #1
 8000cde:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000ce2:	f7ff ff77 	bl	8000bd4 <LL_TIM_CC_EnableChannel>
}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	51eb851f 	.word	0x51eb851f

08000cf4 <Buzzer_Off>:
/**
  * @brief  Turn the buzzer off
  * @retval None
  */
void Buzzer_Off(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
//    LL_TIM_DisableCounter(BUZZER_TIM);
    LL_TIM_CC_DisableChannel(BUZZER_TIM, BUZZER_TIM_CHANNEL);
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000cfe:	f7ff ff7a 	bl	8000bf6 <LL_TIM_CC_DisableChannel>
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
	...

08000d08 <StartupTone>:
/**
  * @brief  Play the startup tone sequence
  * @retval None
  */
void StartupTone(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
    // Define the startup tone sequence
    uint16_t prescalers[] = {1092, 592, 292};
 8000d0e:	4a0e      	ldr	r2, [pc, #56]	@ (8000d48 <StartupTone+0x40>)
 8000d10:	f107 0308 	add.w	r3, r7, #8
 8000d14:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d18:	6018      	str	r0, [r3, #0]
 8000d1a:	3304      	adds	r3, #4
 8000d1c:	8019      	strh	r1, [r3, #0]
    uint16_t delays[] = {100, 100, 100};
 8000d1e:	4a0b      	ldr	r2, [pc, #44]	@ (8000d4c <StartupTone+0x44>)
 8000d20:	463b      	mov	r3, r7
 8000d22:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d26:	6018      	str	r0, [r3, #0]
 8000d28:	3304      	adds	r3, #4
 8000d2a:	8019      	strh	r1, [r3, #0]
    uint8_t numTones = 3;
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	73fb      	strb	r3, [r7, #15]

    // Play the sequence using Buzzer_PlayTone
    Buzzer_PlayTone(prescalers, delays, numTones);
 8000d30:	7bfa      	ldrb	r2, [r7, #15]
 8000d32:	4639      	mov	r1, r7
 8000d34:	f107 0308 	add.w	r3, r7, #8
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff ff6f 	bl	8000c1c <Buzzer_PlayTone>
}
 8000d3e:	bf00      	nop
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	0801e260 	.word	0x0801e260
 8000d4c:	0801e268 	.word	0x0801e268

08000d50 <ICM42688P_Calibrate>:
extern Struct_ICM42688P ICM42688P;

static int32_t acc_x_offset, acc_y_offset, acc_z_offset;

void ICM42688P_Calibrate(void)
{
 8000d50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000d54:	b0a4      	sub	sp, #144	@ 0x90
 8000d56:	af00      	add	r7, sp, #0
    int64_t acc_x_sum = 0, acc_y_sum = 0, acc_z_sum = 0;
 8000d58:	f04f 0200 	mov.w	r2, #0
 8000d5c:	f04f 0300 	mov.w	r3, #0
 8000d60:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
 8000d64:	f04f 0200 	mov.w	r2, #0
 8000d68:	f04f 0300 	mov.w	r3, #0
 8000d6c:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
 8000d70:	f04f 0200 	mov.w	r2, #0
 8000d74:	f04f 0300 	mov.w	r3, #0
 8000d78:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
    int64_t gyro_x_sum = 0, gyro_y_sum = 0, gyro_z_sum = 0;
 8000d7c:	f04f 0200 	mov.w	r2, #0
 8000d80:	f04f 0300 	mov.w	r3, #0
 8000d84:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 8000d88:	f04f 0200 	mov.w	r2, #0
 8000d8c:	f04f 0300 	mov.w	r3, #0
 8000d90:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
 8000d94:	f04f 0200 	mov.w	r2, #0
 8000d98:	f04f 0300 	mov.w	r3, #0
 8000d9c:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60

    int16_t accel_raw[3], gyro_raw[3];

    printf("ICM42688P Calibration Started. Keep sensor still...\n");
 8000da0:	4872      	ldr	r0, [pc, #456]	@ (8000f6c <ICM42688P_Calibrate+0x21c>)
 8000da2:	f019 ffe7 	bl	801ad74 <puts>

    for (int i = 0; i < CALIBRATION_SAMPLES; i++)
 8000da6:	2300      	movs	r3, #0
 8000da8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000daa:	e075      	b.n	8000e98 <ICM42688P_Calibrate+0x148>
    {
        ICM42688P_Get6AxisRawData(accel_raw, gyro_raw);
 8000dac:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8000db0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000db4:	4611      	mov	r1, r2
 8000db6:	4618      	mov	r0, r3
 8000db8:	f001 fdea 	bl	8002990 <ICM42688P_Get6AxisRawData>

        acc_x_sum += accel_raw[0];
 8000dbc:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	@ 0x54
 8000dc0:	b21b      	sxth	r3, r3
 8000dc2:	17da      	asrs	r2, r3, #31
 8000dc4:	643b      	str	r3, [r7, #64]	@ 0x40
 8000dc6:	647a      	str	r2, [r7, #68]	@ 0x44
 8000dc8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8000dcc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8000dce:	1851      	adds	r1, r2, r1
 8000dd0:	6239      	str	r1, [r7, #32]
 8000dd2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8000dd4:	414b      	adcs	r3, r1
 8000dd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8000dd8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000ddc:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
        acc_y_sum += accel_raw[1];
 8000de0:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	@ 0x56
 8000de4:	b21b      	sxth	r3, r3
 8000de6:	17da      	asrs	r2, r3, #31
 8000de8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000dea:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8000dec:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8000df0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8000df2:	1851      	adds	r1, r2, r1
 8000df4:	61b9      	str	r1, [r7, #24]
 8000df6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8000df8:	414b      	adcs	r3, r1
 8000dfa:	61fb      	str	r3, [r7, #28]
 8000dfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000e00:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
        acc_z_sum += accel_raw[2];
 8000e04:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	@ 0x58
 8000e08:	b21b      	sxth	r3, r3
 8000e0a:	17da      	asrs	r2, r3, #31
 8000e0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8000e0e:	637a      	str	r2, [r7, #52]	@ 0x34
 8000e10:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8000e14:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000e16:	1851      	adds	r1, r2, r1
 8000e18:	6139      	str	r1, [r7, #16]
 8000e1a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000e1c:	414b      	adcs	r3, r1
 8000e1e:	617b      	str	r3, [r7, #20]
 8000e20:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000e24:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
        gyro_x_sum += gyro_raw[0];
 8000e28:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8000e2c:	b21b      	sxth	r3, r3
 8000e2e:	17da      	asrs	r2, r3, #31
 8000e30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000e32:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000e34:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8000e38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000e3a:	1851      	adds	r1, r2, r1
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000e40:	414b      	adcs	r3, r1
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000e48:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
        gyro_y_sum += gyro_raw[1];
 8000e4c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8000e50:	b21b      	sxth	r3, r3
 8000e52:	17da      	asrs	r2, r3, #31
 8000e54:	469a      	mov	sl, r3
 8000e56:	4693      	mov	fp, r2
 8000e58:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8000e5c:	eb12 010a 	adds.w	r1, r2, sl
 8000e60:	6039      	str	r1, [r7, #0]
 8000e62:	eb43 030b 	adc.w	r3, r3, fp
 8000e66:	607b      	str	r3, [r7, #4]
 8000e68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000e6c:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
        gyro_z_sum += gyro_raw[2];
 8000e70:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	@ 0x50
 8000e74:	b21b      	sxth	r3, r3
 8000e76:	17da      	asrs	r2, r3, #31
 8000e78:	461c      	mov	r4, r3
 8000e7a:	4615      	mov	r5, r2
 8000e7c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8000e80:	eb12 0804 	adds.w	r8, r2, r4
 8000e84:	eb43 0905 	adc.w	r9, r3, r5
 8000e88:	e9c7 8918 	strd	r8, r9, [r7, #96]	@ 0x60

        HAL_Delay(CALIBRATION_DELAY_MS);
 8000e8c:	2005      	movs	r0, #5
 8000e8e:	f005 fe97 	bl	8006bc0 <HAL_Delay>
    for (int i = 0; i < CALIBRATION_SAMPLES; i++)
 8000e92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000e94:	3301      	adds	r3, #1
 8000e96:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000e98:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000e9a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000e9e:	db85      	blt.n	8000dac <ICM42688P_Calibrate+0x5c>
    }

    acc_x_offset = (int32_t)(acc_x_sum / CALIBRATION_SAMPLES);
 8000ea0:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8000ea4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000ea8:	f04f 0300 	mov.w	r3, #0
 8000eac:	f7ff fc54 	bl	8000758 <__aeabi_ldivmod>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	460b      	mov	r3, r1
 8000eb4:	4b2e      	ldr	r3, [pc, #184]	@ (8000f70 <ICM42688P_Calibrate+0x220>)
 8000eb6:	601a      	str	r2, [r3, #0]
    acc_y_offset = (int32_t)(acc_y_sum / CALIBRATION_SAMPLES);
 8000eb8:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8000ebc:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000ec0:	f04f 0300 	mov.w	r3, #0
 8000ec4:	f7ff fc48 	bl	8000758 <__aeabi_ldivmod>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	460b      	mov	r3, r1
 8000ecc:	4b29      	ldr	r3, [pc, #164]	@ (8000f74 <ICM42688P_Calibrate+0x224>)
 8000ece:	601a      	str	r2, [r3, #0]
    acc_z_offset = (int32_t)(acc_z_sum / CALIBRATION_SAMPLES) - (int32_t)(32768 / 16); // Remove 1g offset in Z
 8000ed0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8000ed4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000ed8:	f04f 0300 	mov.w	r3, #0
 8000edc:	f7ff fc3c 	bl	8000758 <__aeabi_ldivmod>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	460b      	mov	r3, r1
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8000eea:	4a23      	ldr	r2, [pc, #140]	@ (8000f78 <ICM42688P_Calibrate+0x228>)
 8000eec:	6013      	str	r3, [r2, #0]

    gyro_x_offset = (int32_t)(gyro_x_sum / CALIBRATION_SAMPLES);
 8000eee:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8000ef2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000ef6:	f04f 0300 	mov.w	r3, #0
 8000efa:	f7ff fc2d 	bl	8000758 <__aeabi_ldivmod>
 8000efe:	4602      	mov	r2, r0
 8000f00:	460b      	mov	r3, r1
 8000f02:	4b1e      	ldr	r3, [pc, #120]	@ (8000f7c <ICM42688P_Calibrate+0x22c>)
 8000f04:	601a      	str	r2, [r3, #0]
    gyro_y_offset = (int32_t)(gyro_y_sum / CALIBRATION_SAMPLES);
 8000f06:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8000f0a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000f0e:	f04f 0300 	mov.w	r3, #0
 8000f12:	f7ff fc21 	bl	8000758 <__aeabi_ldivmod>
 8000f16:	4602      	mov	r2, r0
 8000f18:	460b      	mov	r3, r1
 8000f1a:	4b19      	ldr	r3, [pc, #100]	@ (8000f80 <ICM42688P_Calibrate+0x230>)
 8000f1c:	601a      	str	r2, [r3, #0]
    gyro_z_offset = (int32_t)(gyro_z_sum / CALIBRATION_SAMPLES);
 8000f1e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8000f22:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000f26:	f04f 0300 	mov.w	r3, #0
 8000f2a:	f7ff fc15 	bl	8000758 <__aeabi_ldivmod>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	460b      	mov	r3, r1
 8000f32:	4b14      	ldr	r3, [pc, #80]	@ (8000f84 <ICM42688P_Calibrate+0x234>)
 8000f34:	601a      	str	r2, [r3, #0]

    printf("Calibration Complete!\n");
 8000f36:	4814      	ldr	r0, [pc, #80]	@ (8000f88 <ICM42688P_Calibrate+0x238>)
 8000f38:	f019 ff1c 	bl	801ad74 <puts>
    printf("Accel offsets: X=%ld, Y=%ld, Z=%ld\n", (long)acc_x_offset, (long)acc_y_offset, (long)acc_z_offset);
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f70 <ICM42688P_Calibrate+0x220>)
 8000f3e:	6819      	ldr	r1, [r3, #0]
 8000f40:	4b0c      	ldr	r3, [pc, #48]	@ (8000f74 <ICM42688P_Calibrate+0x224>)
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	4b0c      	ldr	r3, [pc, #48]	@ (8000f78 <ICM42688P_Calibrate+0x228>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4810      	ldr	r0, [pc, #64]	@ (8000f8c <ICM42688P_Calibrate+0x23c>)
 8000f4a:	f019 feab 	bl	801aca4 <iprintf>
    printf("Gyro offsets : X=%ld, Y=%ld, Z=%ld\n", (long)gyro_x_offset, (long)gyro_y_offset, (long)gyro_z_offset);
 8000f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f7c <ICM42688P_Calibrate+0x22c>)
 8000f50:	6819      	ldr	r1, [r3, #0]
 8000f52:	4b0b      	ldr	r3, [pc, #44]	@ (8000f80 <ICM42688P_Calibrate+0x230>)
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	4b0b      	ldr	r3, [pc, #44]	@ (8000f84 <ICM42688P_Calibrate+0x234>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	480d      	ldr	r0, [pc, #52]	@ (8000f90 <ICM42688P_Calibrate+0x240>)
 8000f5c:	f019 fea2 	bl	801aca4 <iprintf>
}
 8000f60:	bf00      	nop
 8000f62:	3790      	adds	r7, #144	@ 0x90
 8000f64:	46bd      	mov	sp, r7
 8000f66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000f6a:	bf00      	nop
 8000f6c:	0801e270 	.word	0x0801e270
 8000f70:	24000210 	.word	0x24000210
 8000f74:	24000214 	.word	0x24000214
 8000f78:	24000218 	.word	0x24000218
 8000f7c:	2400024c 	.word	0x2400024c
 8000f80:	24000250 	.word	0x24000250
 8000f84:	24000254 	.word	0x24000254
 8000f88:	0801e2a4 	.word	0x0801e2a4
 8000f8c:	0801e2bc 	.word	0x0801e2bc
 8000f90:	0801e2e0 	.word	0x0801e2e0

08000f94 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f98:	f3bf 8f4f 	dsb	sy
}
 8000f9c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000f9e:	4b06      	ldr	r3, [pc, #24]	@ (8000fb8 <__NVIC_SystemReset+0x24>)
 8000fa0:	68db      	ldr	r3, [r3, #12]
 8000fa2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000fa6:	4904      	ldr	r1, [pc, #16]	@ (8000fb8 <__NVIC_SystemReset+0x24>)
 8000fa8:	4b04      	ldr	r3, [pc, #16]	@ (8000fbc <__NVIC_SystemReset+0x28>)
 8000faa:	4313      	orrs	r3, r2
 8000fac:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000fae:	f3bf 8f4f 	dsb	sy
}
 8000fb2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000fb4:	bf00      	nop
 8000fb6:	e7fd      	b.n	8000fb4 <__NVIC_SystemReset+0x20>
 8000fb8:	e000ed00 	.word	0xe000ed00
 8000fbc:	05fa0004 	.word	0x05fa0004

08000fc0 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	69db      	ldr	r3, [r3, #28]
 8000fcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fd0:	2b40      	cmp	r3, #64	@ 0x40
 8000fd2:	d101      	bne.n	8000fd8 <LL_USART_IsActiveFlag_TC+0x18>
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	e000      	b.n	8000fda <LL_USART_IsActiveFlag_TC+0x1a>
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
	...

08000fe8 <parse_float>:


volatile uint8_t cmd_mode = 0; // Command mode flag (0 = normal, 1 = command mode)

// Helper function to parse a float from a string, advancing the pointer
static bool parse_float(const char **str, float *result) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	6039      	str	r1, [r7, #0]
    char *endptr;
    // Skip leading whitespace
    while (**str == ' ') (*str)++;
 8000ff2:	e004      	b.n	8000ffe <parse_float+0x16>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	1c5a      	adds	r2, r3, #1
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2b20      	cmp	r3, #32
 8001006:	d0f5      	beq.n	8000ff4 <parse_float+0xc>

    *result = strtof(*str, &endptr);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f107 020c 	add.w	r2, r7, #12
 8001010:	4611      	mov	r1, r2
 8001012:	4618      	mov	r0, r3
 8001014:	f018 fefc 	bl	8019e10 <strtof>
 8001018:	eef0 7a40 	vmov.f32	s15, s0
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	edc3 7a00 	vstr	s15, [r3]
    if (endptr == *str) {
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	429a      	cmp	r2, r3
 800102a:	d107      	bne.n	800103c <parse_float+0x54>
        printf("parse_float: Failed to parse float at '%s'\n", *str); // Debug output
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4619      	mov	r1, r3
 8001032:	481e      	ldr	r0, [pc, #120]	@ (80010ac <parse_float+0xc4>)
 8001034:	f019 fe36 	bl	801aca4 <iprintf>
        return false; // No valid conversion
 8001038:	2300      	movs	r3, #0
 800103a:	e033      	b.n	80010a4 <parse_float+0xbc>
    }
    // Check if the parsed value is reasonable (avoid overflow/underflow)
    if (*result > 1e6 || *result < -1e6) {
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	edd3 7a00 	vldr	s15, [r3]
 8001042:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 80010b0 <parse_float+0xc8>
 8001046:	eef4 7ac7 	vcmpe.f32	s15, s14
 800104a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800104e:	dc09      	bgt.n	8001064 <parse_float+0x7c>
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	edd3 7a00 	vldr	s15, [r3]
 8001056:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80010b4 <parse_float+0xcc>
 800105a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800105e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001062:	d50b      	bpl.n	800107c <parse_float+0x94>
        printf("parse_float: Value out of range: %f\n", *result); // Debugging
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	edd3 7a00 	vldr	s15, [r3]
 800106a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800106e:	ec53 2b17 	vmov	r2, r3, d7
 8001072:	4811      	ldr	r0, [pc, #68]	@ (80010b8 <parse_float+0xd0>)
 8001074:	f019 fe16 	bl	801aca4 <iprintf>
        return false;
 8001078:	2300      	movs	r3, #0
 800107a:	e013      	b.n	80010a4 <parse_float+0xbc>
    }
    *str = endptr;
 800107c:	68fa      	ldr	r2, [r7, #12]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	601a      	str	r2, [r3, #0]
    // Skip whitespace and commas
    while (**str == ' ' || **str == ',') (*str)++;
 8001082:	e004      	b.n	800108e <parse_float+0xa6>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	1c5a      	adds	r2, r3, #1
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2b20      	cmp	r3, #32
 8001096:	d0f5      	beq.n	8001084 <parse_float+0x9c>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	2b2c      	cmp	r3, #44	@ 0x2c
 80010a0:	d0f0      	beq.n	8001084 <parse_float+0x9c>
    return true;
 80010a2:	2301      	movs	r3, #1
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	0801e304 	.word	0x0801e304
 80010b0:	49742400 	.word	0x49742400
 80010b4:	c9742400 	.word	0xc9742400
 80010b8:	0801e330 	.word	0x0801e330

080010bc <parse_pid_params>:

// Custom parser for PID parameters in format ({kp,ki,kd},{kp,ki,kd}) or ({kp,ki,kd})
static bool parse_pid_params(const char *params, float *values, int expected_count) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
    if (!params || *params != '(') {
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <parse_pid_params+0x1a>
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	2b28      	cmp	r3, #40	@ 0x28
 80010d4:	d004      	beq.n	80010e0 <parse_pid_params+0x24>
        printf("parse_pid_params: Missing opening parenthesis\n"); // Debug output
 80010d6:	483b      	ldr	r0, [pc, #236]	@ (80011c4 <parse_pid_params+0x108>)
 80010d8:	f019 fe4c 	bl	801ad74 <puts>
        return false;
 80010dc:	2300      	movs	r3, #0
 80010de:	e06c      	b.n	80011ba <parse_pid_params+0xfe>
    }
    params++; // Skip '('
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	3301      	adds	r3, #1
 80010e4:	60fb      	str	r3, [r7, #12]

    for (int i = 0; i < expected_count; i++) {
 80010e6:	2300      	movs	r3, #0
 80010e8:	617b      	str	r3, [r7, #20]
 80010ea:	e058      	b.n	800119e <parse_pid_params+0xe2>
        // Check for nested '{' for DualPID
        if (expected_count == 6 && (i == 0 || i == 3)) {
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2b06      	cmp	r3, #6
 80010f0:	d112      	bne.n	8001118 <parse_pid_params+0x5c>
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d002      	beq.n	80010fe <parse_pid_params+0x42>
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	2b03      	cmp	r3, #3
 80010fc:	d10c      	bne.n	8001118 <parse_pid_params+0x5c>
            if (*params != '{') {
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	2b7b      	cmp	r3, #123	@ 0x7b
 8001104:	d005      	beq.n	8001112 <parse_pid_params+0x56>
                printf("parse_pid_params: Missing opening brace at position %d\n", i); // Debug output
 8001106:	6979      	ldr	r1, [r7, #20]
 8001108:	482f      	ldr	r0, [pc, #188]	@ (80011c8 <parse_pid_params+0x10c>)
 800110a:	f019 fdcb 	bl	801aca4 <iprintf>
                return false;
 800110e:	2300      	movs	r3, #0
 8001110:	e053      	b.n	80011ba <parse_pid_params+0xfe>
            }
            params++; // Skip '{'
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	3301      	adds	r3, #1
 8001116:	60fb      	str	r3, [r7, #12]
        }
        if (!parse_float(&params, &values[i])) { // Corrected: Pass &params and &values[i]
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	68ba      	ldr	r2, [r7, #8]
 800111e:	441a      	add	r2, r3
 8001120:	f107 030c 	add.w	r3, r7, #12
 8001124:	4611      	mov	r1, r2
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff ff5e 	bl	8000fe8 <parse_float>
 800112c:	4603      	mov	r3, r0
 800112e:	f083 0301 	eor.w	r3, r3, #1
 8001132:	b2db      	uxtb	r3, r3
 8001134:	2b00      	cmp	r3, #0
 8001136:	d007      	beq.n	8001148 <parse_pid_params+0x8c>
            printf("parse_pid_params: Failed to parse float %d\n", i + 1); // Debug output
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	3301      	adds	r3, #1
 800113c:	4619      	mov	r1, r3
 800113e:	4823      	ldr	r0, [pc, #140]	@ (80011cc <parse_pid_params+0x110>)
 8001140:	f019 fdb0 	bl	801aca4 <iprintf>
            return false;
 8001144:	2300      	movs	r3, #0
 8001146:	e038      	b.n	80011ba <parse_pid_params+0xfe>
        }
        // Check for closing '}' for DualPID
        if (expected_count == 6 && (i == 2 || i == 5)) {
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2b06      	cmp	r3, #6
 800114c:	d124      	bne.n	8001198 <parse_pid_params+0xdc>
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	2b02      	cmp	r3, #2
 8001152:	d002      	beq.n	800115a <parse_pid_params+0x9e>
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	2b05      	cmp	r3, #5
 8001158:	d11e      	bne.n	8001198 <parse_pid_params+0xdc>
            if (*params != '}') {
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	2b7d      	cmp	r3, #125	@ 0x7d
 8001160:	d005      	beq.n	800116e <parse_pid_params+0xb2>
                printf("parse_pid_params: Missing closing brace at position %d\n", i); // Debug output
 8001162:	6979      	ldr	r1, [r7, #20]
 8001164:	481a      	ldr	r0, [pc, #104]	@ (80011d0 <parse_pid_params+0x114>)
 8001166:	f019 fd9d 	bl	801aca4 <iprintf>
                return false;
 800116a:	2300      	movs	r3, #0
 800116c:	e025      	b.n	80011ba <parse_pid_params+0xfe>
            }
            params++; // Skip '}'
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	3301      	adds	r3, #1
 8001172:	60fb      	str	r3, [r7, #12]
            if (i == 2 && *params != ',') {
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	2b02      	cmp	r3, #2
 8001178:	d108      	bne.n	800118c <parse_pid_params+0xd0>
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	2b2c      	cmp	r3, #44	@ 0x2c
 8001180:	d004      	beq.n	800118c <parse_pid_params+0xd0>
                printf("parse_pid_params: Missing comma after first PID set\n"); // Debug output
 8001182:	4814      	ldr	r0, [pc, #80]	@ (80011d4 <parse_pid_params+0x118>)
 8001184:	f019 fdf6 	bl	801ad74 <puts>
                return false;
 8001188:	2300      	movs	r3, #0
 800118a:	e016      	b.n	80011ba <parse_pid_params+0xfe>
            }
            if (i == 2) params++; // Skip ','
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	2b02      	cmp	r3, #2
 8001190:	d102      	bne.n	8001198 <parse_pid_params+0xdc>
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	3301      	adds	r3, #1
 8001196:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < expected_count; i++) {
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	3301      	adds	r3, #1
 800119c:	617b      	str	r3, [r7, #20]
 800119e:	697a      	ldr	r2, [r7, #20]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	dba2      	blt.n	80010ec <parse_pid_params+0x30>
        }
    }
    // Check for closing ')'
    if (*params != ')') {
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	2b29      	cmp	r3, #41	@ 0x29
 80011ac:	d004      	beq.n	80011b8 <parse_pid_params+0xfc>
        printf("parse_pid_params: Missing closing parenthesis\n"); // Debug output
 80011ae:	480a      	ldr	r0, [pc, #40]	@ (80011d8 <parse_pid_params+0x11c>)
 80011b0:	f019 fde0 	bl	801ad74 <puts>
        return false;
 80011b4:	2300      	movs	r3, #0
 80011b6:	e000      	b.n	80011ba <parse_pid_params+0xfe>
    }
    return true;
 80011b8:	2301      	movs	r3, #1
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3718      	adds	r7, #24
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	0801e358 	.word	0x0801e358
 80011c8:	0801e388 	.word	0x0801e388
 80011cc:	0801e3c0 	.word	0x0801e3c0
 80011d0:	0801e3ec 	.word	0x0801e3ec
 80011d4:	0801e424 	.word	0x0801e424
 80011d8:	0801e458 	.word	0x0801e458

080011dc <is_cmd_mode>:

uint8_t is_cmd_mode(void) {
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
    return cmd_mode;
 80011e0:	4b03      	ldr	r3, [pc, #12]	@ (80011f0 <is_cmd_mode+0x14>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	b2db      	uxtb	r3, r3
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	2400021c 	.word	0x2400021c

080011f4 <strip_brackets>:

void strip_brackets(char *str) {
 80011f4:	b590      	push	{r4, r7, lr}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
    if (str[0] == '[') {
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b5b      	cmp	r3, #91	@ 0x5b
 8001202:	d10a      	bne.n	800121a <strip_brackets+0x26>
        memmove(str, str + 1, strlen(str));
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	1c5c      	adds	r4, r3, #1
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f7ff f8e1 	bl	80003d0 <strlen>
 800120e:	4603      	mov	r3, r0
 8001210:	461a      	mov	r2, r3
 8001212:	4621      	mov	r1, r4
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f019 fedd 	bl	801afd4 <memmove>
    }
    char *end = strchr(str, ']');
 800121a:	215d      	movs	r1, #93	@ 0x5d
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f019 fefb 	bl	801b018 <strchr>
 8001222:	60f8      	str	r0, [r7, #12]
    if (end) *end = '\0';
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d002      	beq.n	8001230 <strip_brackets+0x3c>
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	2200      	movs	r2, #0
 800122e:	701a      	strb	r2, [r3, #0]
}
 8001230:	bf00      	nop
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	bd90      	pop	{r4, r7, pc}

08001238 <process_command>:

void process_command(char *cmd) {
 8001238:	b580      	push	{r7, lr}
 800123a:	b0c4      	sub	sp, #272	@ 0x110
 800123c:	af0a      	add	r7, sp, #40	@ 0x28
 800123e:	6078      	str	r0, [r7, #4]
    strip_brackets(cmd);
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f7ff ffd7 	bl	80011f4 <strip_brackets>

    if (strcmp(cmd, "CMD") == 0) {
 8001246:	49b8      	ldr	r1, [pc, #736]	@ (8001528 <process_command+0x2f0>)
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f7ff f861 	bl	8000310 <strcmp>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d10e      	bne.n	8001272 <process_command+0x3a>
        cmd_mode = 1;
 8001254:	4bb5      	ldr	r3, [pc, #724]	@ (800152c <process_command+0x2f4>)
 8001256:	2201      	movs	r2, #1
 8001258:	701a      	strb	r2, [r3, #0]
        printf("\r\n\r\nEntered command mode\r\n\r\n");
 800125a:	48b5      	ldr	r0, [pc, #724]	@ (8001530 <process_command+0x2f8>)
 800125c:	f019 fd8a 	bl	801ad74 <puts>
        main_led(0, 255, 0, 255, 1);
 8001260:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001264:	23ff      	movs	r3, #255	@ 0xff
 8001266:	2200      	movs	r2, #0
 8001268:	21ff      	movs	r1, #255	@ 0xff
 800126a:	2000      	movs	r0, #0
 800126c:	f001 fdce 	bl	8002e0c <main_led>
        return;
 8001270:	e2f8      	b.n	8001864 <process_command+0x62c>
    }

    if (!cmd_mode) {
 8001272:	4bae      	ldr	r3, [pc, #696]	@ (800152c <process_command+0x2f4>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	b2db      	uxtb	r3, r3
 8001278:	2b00      	cmp	r3, #0
 800127a:	d103      	bne.n	8001284 <process_command+0x4c>
        printf("Not in command mode\n");
 800127c:	48ad      	ldr	r0, [pc, #692]	@ (8001534 <process_command+0x2fc>)
 800127e:	f019 fd79 	bl	801ad74 <puts>
        return;
 8001282:	e2ef      	b.n	8001864 <process_command+0x62c>
    }

    if (strcmp(cmd, "exit") == 0) {
 8001284:	49ac      	ldr	r1, [pc, #688]	@ (8001538 <process_command+0x300>)
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f7ff f842 	bl	8000310 <strcmp>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d138      	bne.n	8001304 <process_command+0xcc>
        cmd_mode = 0;
 8001292:	4ba6      	ldr	r3, [pc, #664]	@ (800152c <process_command+0x2f4>)
 8001294:	2200      	movs	r2, #0
 8001296:	701a      	strb	r2, [r3, #0]
        printf("\r\nExiting command mode, rebooting...\r\n\r\n");
 8001298:	48a8      	ldr	r0, [pc, #672]	@ (800153c <process_command+0x304>)
 800129a:	f019 fd6b 	bl	801ad74 <puts>
        // Wait for UART transmission to complete
        while (!LL_USART_IsActiveFlag_TC(USART6)); // Ensure transmission complete
 800129e:	bf00      	nop
 80012a0:	48a7      	ldr	r0, [pc, #668]	@ (8001540 <process_command+0x308>)
 80012a2:	f7ff fe8d 	bl	8000fc0 <LL_USART_IsActiveFlag_TC>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d0f9      	beq.n	80012a0 <process_command+0x68>
        // Busy-wait instead of HAL_Delay
        for (volatile uint32_t i = 0; i < 1000000; i++); // ~200ms at 480MHz
 80012ac:	2300      	movs	r3, #0
 80012ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80012b2:	e004      	b.n	80012be <process_command+0x86>
 80012b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80012b8:	3301      	adds	r3, #1
 80012ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80012be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80012c2:	4aa0      	ldr	r2, [pc, #640]	@ (8001544 <process_command+0x30c>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d9f5      	bls.n	80012b4 <process_command+0x7c>
        // Check for pending faults
        if (SCB->HFSR) {
 80012c8:	4b9f      	ldr	r3, [pc, #636]	@ (8001548 <process_command+0x310>)
 80012ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d005      	beq.n	80012dc <process_command+0xa4>
            printf("Hard Fault pending: HFSR=0x%08lX\r\n", SCB->HFSR);
 80012d0:	4b9d      	ldr	r3, [pc, #628]	@ (8001548 <process_command+0x310>)
 80012d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012d4:	4619      	mov	r1, r3
 80012d6:	489d      	ldr	r0, [pc, #628]	@ (800154c <process_command+0x314>)
 80012d8:	f019 fce4 	bl	801aca4 <iprintf>
        }
        if (SCB->CFSR) {
 80012dc:	4b9a      	ldr	r3, [pc, #616]	@ (8001548 <process_command+0x310>)
 80012de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d005      	beq.n	80012f0 <process_command+0xb8>
            printf("Configurable Fault pending: CFSR=0x%08lX\r\n", SCB->CFSR);
 80012e4:	4b98      	ldr	r3, [pc, #608]	@ (8001548 <process_command+0x310>)
 80012e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012e8:	4619      	mov	r1, r3
 80012ea:	4899      	ldr	r0, [pc, #612]	@ (8001550 <process_command+0x318>)
 80012ec:	f019 fcda 	bl	801aca4 <iprintf>
        }
        printf("Disabling interrupts\r\n"); // Debug
 80012f0:	4898      	ldr	r0, [pc, #608]	@ (8001554 <process_command+0x31c>)
 80012f2:	f019 fd3f 	bl	801ad74 <puts>
  __ASM volatile ("cpsid i" : : : "memory");
 80012f6:	b672      	cpsid	i
}
 80012f8:	bf00      	nop
        __disable_irq(); // Disable all interrupts
        printf("Triggering NVIC_SystemReset\r\n"); // Debug
 80012fa:	4897      	ldr	r0, [pc, #604]	@ (8001558 <process_command+0x320>)
 80012fc:	f019 fd3a 	bl	801ad74 <puts>
        NVIC_SystemReset(); // Primary reset
 8001300:	f7ff fe48 	bl	8000f94 <__NVIC_SystemReset>
        printf("NVIC_SystemReset failed, trying SCB reset\r\n"); // Debug (should not reach)
        SCB->AIRCR = (0x5FA << SCB_AIRCR_VECTKEY_Pos) | SCB_AIRCR_SYSRESETREQ_Msk;
        printf("SCB reset triggered\r\n"); // Debug (should not reach)
        while (true); // Trap if reset fails
    }
    else if (strcmp(cmd, "cal_accel_gyro") == 0) {
 8001304:	4995      	ldr	r1, [pc, #596]	@ (800155c <process_command+0x324>)
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff f802 	bl	8000310 <strcmp>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d102      	bne.n	8001318 <process_command+0xe0>
    	  ICM42688P_Calibrate();
 8001312:	f7ff fd1d 	bl	8000d50 <ICM42688P_Calibrate>
 8001316:	e2a5      	b.n	8001864 <process_command+0x62c>
    }
    else if (strcmp(cmd, "cal_mag") == 0) {
 8001318:	4991      	ldr	r1, [pc, #580]	@ (8001560 <process_command+0x328>)
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f7fe fff8 	bl	8000310 <strcmp>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	f000 829e 	beq.w	8001864 <process_command+0x62c>
//        start_mag_calibration(&filter_state);		// Mag-Calibration
    }
    else if (strcmp(cmd, "cal_all") == 0) {
 8001328:	498e      	ldr	r1, [pc, #568]	@ (8001564 <process_command+0x32c>)
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f7fe fff0 	bl	8000310 <strcmp>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	f000 8296 	beq.w	8001864 <process_command+0x62c>
//        start_full_calibration(&filter_state);	// Full-Calibration
    }
    else if (strcmp(cmd, "cancel_cal") == 0) {
 8001338:	498b      	ldr	r1, [pc, #556]	@ (8001568 <process_command+0x330>)
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f7fe ffe8 	bl	8000310 <strcmp>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	f000 828e 	beq.w	8001864 <process_command+0x62c>
//        cancel_calibration();
    }
    else if (strcmp(cmd, "status") == 0) {
 8001348:	4988      	ldr	r1, [pc, #544]	@ (800156c <process_command+0x334>)
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f7fe ffe0 	bl	8000310 <strcmp>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d103      	bne.n	800135e <process_command+0x126>
        printf("Status OK\n");
 8001356:	4886      	ldr	r0, [pc, #536]	@ (8001570 <process_command+0x338>)
 8001358:	f019 fd0c 	bl	801ad74 <puts>
 800135c:	e282      	b.n	8001864 <process_command+0x62c>
    }
    else if (strcmp(cmd, "main_led_ON") == 0) {
 800135e:	4985      	ldr	r1, [pc, #532]	@ (8001574 <process_command+0x33c>)
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7fe ffd5 	bl	8000310 <strcmp>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d110      	bne.n	800138e <process_command+0x156>
        printf("CMD: Executing main_led_ON command\n");
 800136c:	4882      	ldr	r0, [pc, #520]	@ (8001578 <process_command+0x340>)
 800136e:	f019 fd01 	bl	801ad74 <puts>
        main_led(0, 255, 0, 255, 1.0);
 8001372:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001376:	23ff      	movs	r3, #255	@ 0xff
 8001378:	2200      	movs	r2, #0
 800137a:	21ff      	movs	r1, #255	@ 0xff
 800137c:	2000      	movs	r0, #0
 800137e:	f001 fd45 	bl	8002e0c <main_led>
        main_led_update();
 8001382:	f001 fe1f 	bl	8002fc4 <main_led_update>
        printf("Main LED ON\n");
 8001386:	487d      	ldr	r0, [pc, #500]	@ (800157c <process_command+0x344>)
 8001388:	f019 fcf4 	bl	801ad74 <puts>
 800138c:	e26a      	b.n	8001864 <process_command+0x62c>
    }
    else if (strcmp(cmd, "main_led_OFF") == 0) {
 800138e:	497c      	ldr	r1, [pc, #496]	@ (8001580 <process_command+0x348>)
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f7fe ffbd 	bl	8000310 <strcmp>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d110      	bne.n	80013be <process_command+0x186>
        printf("CMD: Executing main_led_OFF command\n");
 800139c:	4879      	ldr	r0, [pc, #484]	@ (8001584 <process_command+0x34c>)
 800139e:	f019 fce9 	bl	801ad74 <puts>
        main_led(0, 0, 0, 0, 0);
 80013a2:	ed9f 0a79 	vldr	s0, [pc, #484]	@ 8001588 <process_command+0x350>
 80013a6:	2300      	movs	r3, #0
 80013a8:	2200      	movs	r2, #0
 80013aa:	2100      	movs	r1, #0
 80013ac:	2000      	movs	r0, #0
 80013ae:	f001 fd2d 	bl	8002e0c <main_led>
        main_led_update();
 80013b2:	f001 fe07 	bl	8002fc4 <main_led_update>
        printf("Main LED OFF\n");
 80013b6:	4875      	ldr	r0, [pc, #468]	@ (800158c <process_command+0x354>)
 80013b8:	f019 fcdc 	bl	801ad74 <puts>
 80013bc:	e252      	b.n	8001864 <process_command+0x62c>
    }
    else if (strncmp(cmd, "set_main_led", 12) == 0) {
 80013be:	220c      	movs	r2, #12
 80013c0:	4973      	ldr	r1, [pc, #460]	@ (8001590 <process_command+0x358>)
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f019 fe35 	bl	801b032 <strncmp>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d13a      	bne.n	8001444 <process_command+0x20c>
        int index, r, g, b;
        float brightness;
        char *params_start = strchr(cmd, '(');
 80013ce:	2128      	movs	r1, #40	@ 0x28
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f019 fe21 	bl	801b018 <strchr>
 80013d6:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
        if (params_start) {
 80013da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80013de:	2b00      	cmp	r3, #0
 80013e0:	f000 8240 	beq.w	8001864 <process_command+0x62c>
            if (sscanf(params_start, "(%d,%d,%d,%d,%f)", &index, &r, &g, &b, &brightness) == 5) {
 80013e4:	f107 01cc 	add.w	r1, r7, #204	@ 0xcc
 80013e8:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 80013ec:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80013f0:	9302      	str	r3, [sp, #8]
 80013f2:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 80013f6:	9301      	str	r3, [sp, #4]
 80013f8:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 80013fc:	9300      	str	r3, [sp, #0]
 80013fe:	460b      	mov	r3, r1
 8001400:	4964      	ldr	r1, [pc, #400]	@ (8001594 <process_command+0x35c>)
 8001402:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 8001406:	f019 fcdf 	bl	801adc8 <siscanf>
 800140a:	4603      	mov	r3, r0
 800140c:	2b05      	cmp	r3, #5
 800140e:	d115      	bne.n	800143c <process_command+0x204>
                main_led(index, r, g, b, brightness);
 8001410:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001414:	4618      	mov	r0, r3
 8001416:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800141a:	b2d9      	uxtb	r1, r3
 800141c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001420:	b2da      	uxtb	r2, r3
 8001422:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001426:	b2db      	uxtb	r3, r3
 8001428:	edd7 7a30 	vldr	s15, [r7, #192]	@ 0xc0
 800142c:	eeb0 0a67 	vmov.f32	s0, s15
 8001430:	f001 fcec 	bl	8002e0c <main_led>
                printf("Main LED Set\n");
 8001434:	4858      	ldr	r0, [pc, #352]	@ (8001598 <process_command+0x360>)
 8001436:	f019 fc9d 	bl	801ad74 <puts>
 800143a:	e213      	b.n	8001864 <process_command+0x62c>
            } else {
                printf("Invalid Parameters\n");
 800143c:	4857      	ldr	r0, [pc, #348]	@ (800159c <process_command+0x364>)
 800143e:	f019 fc99 	bl	801ad74 <puts>
 8001442:	e20f      	b.n	8001864 <process_command+0x62c>
            }
        }
    }
    else if (strncmp(cmd, "SetRollPID", 10) == 0) {
 8001444:	220a      	movs	r2, #10
 8001446:	4956      	ldr	r1, [pc, #344]	@ (80015a0 <process_command+0x368>)
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f019 fdf2 	bl	801b032 <strncmp>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	f040 80af 	bne.w	80015b4 <process_command+0x37c>
        float pid_values[6]; // outer_kp, outer_ki, outer_kd, inner_kp, inner_ki, inner_kd
        char *params_start = strchr(cmd, '(');
 8001456:	2128      	movs	r1, #40	@ 0x28
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f019 fddd 	bl	801b018 <strchr>
 800145e:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
        if (params_start) {
 8001462:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001466:	2b00      	cmp	r3, #0
 8001468:	d05a      	beq.n	8001520 <process_command+0x2e8>
            if (parse_pid_params(params_start, pid_values, 6)) {
 800146a:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800146e:	2206      	movs	r2, #6
 8001470:	4619      	mov	r1, r3
 8001472:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8001476:	f7ff fe21 	bl	80010bc <parse_pid_params>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d04b      	beq.n	8001518 <process_command+0x2e0>
                DualPID_t roll_pid = {
                    .out = {pid_values[0], pid_values[1], pid_values[2]},
 8001480:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
                DualPID_t roll_pid = {
 8001484:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
                    .out = {pid_values[0], pid_values[1], pid_values[2]},
 8001488:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
                DualPID_t roll_pid = {
 800148c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                    .out = {pid_values[0], pid_values[1], pid_values[2]},
 8001490:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
                DualPID_t roll_pid = {
 8001494:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
                    .in = {pid_values[3], pid_values[4], pid_values[5]}
 8001498:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
                DualPID_t roll_pid = {
 800149c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                    .in = {pid_values[3], pid_values[4], pid_values[5]}
 80014a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
                DualPID_t roll_pid = {
 80014a4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
                    .in = {pid_values[3], pid_values[4], pid_values[5]}
 80014a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
                DualPID_t roll_pid = {
 80014ac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                };
                if (EEPROM_SetRollPID(&roll_pid) == W25Qxx_OK) {
 80014b0:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80014b4:	4618      	mov	r0, r3
 80014b6:	f000 fbf3 	bl	8001ca0 <EEPROM_SetRollPID>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d127      	bne.n	8001510 <process_command+0x2d8>
                    printf("Roll PID Set: Out Kp=%.8f, Ki=%.8f, Kd=%.8f; In Kp=%.8f, Ki=%.8f, Kd=%.8f\n",
                           pid_values[0], pid_values[1], pid_values[2],
 80014c0:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
                    printf("Roll PID Set: Out Kp=%.8f, Ki=%.8f, Kd=%.8f; In Kp=%.8f, Ki=%.8f, Kd=%.8f\n",
 80014c4:	eeb7 2ae7 	vcvt.f64.f32	d2, s15
                           pid_values[0], pid_values[1], pid_values[2],
 80014c8:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
                    printf("Roll PID Set: Out Kp=%.8f, Ki=%.8f, Kd=%.8f; In Kp=%.8f, Ki=%.8f, Kd=%.8f\n",
 80014cc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
                           pid_values[0], pid_values[1], pid_values[2],
 80014d0:	edd7 6a2c 	vldr	s13, [r7, #176]	@ 0xb0
                    printf("Roll PID Set: Out Kp=%.8f, Ki=%.8f, Kd=%.8f; In Kp=%.8f, Ki=%.8f, Kd=%.8f\n",
 80014d4:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
                           pid_values[3], pid_values[4], pid_values[5]);
 80014d8:	edd7 5a2d 	vldr	s11, [r7, #180]	@ 0xb4
                    printf("Roll PID Set: Out Kp=%.8f, Ki=%.8f, Kd=%.8f; In Kp=%.8f, Ki=%.8f, Kd=%.8f\n",
 80014dc:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
                           pid_values[3], pid_values[4], pid_values[5]);
 80014e0:	edd7 4a2e 	vldr	s9, [r7, #184]	@ 0xb8
                    printf("Roll PID Set: Out Kp=%.8f, Ki=%.8f, Kd=%.8f; In Kp=%.8f, Ki=%.8f, Kd=%.8f\n",
 80014e4:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
                           pid_values[3], pid_values[4], pid_values[5]);
 80014e8:	edd7 3a2f 	vldr	s7, [r7, #188]	@ 0xbc
                    printf("Roll PID Set: Out Kp=%.8f, Ki=%.8f, Kd=%.8f; In Kp=%.8f, Ki=%.8f, Kd=%.8f\n",
 80014ec:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 80014f0:	ed8d 3b08 	vstr	d3, [sp, #32]
 80014f4:	ed8d 4b06 	vstr	d4, [sp, #24]
 80014f8:	ed8d 5b04 	vstr	d5, [sp, #16]
 80014fc:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001500:	ed8d 7b00 	vstr	d7, [sp]
 8001504:	ec53 2b12 	vmov	r2, r3, d2
 8001508:	4826      	ldr	r0, [pc, #152]	@ (80015a4 <process_command+0x36c>)
 800150a:	f019 fbcb 	bl	801aca4 <iprintf>
 800150e:	e1a9      	b.n	8001864 <process_command+0x62c>
                } else {
                    printf("Failed to set Roll PID\n");
 8001510:	4825      	ldr	r0, [pc, #148]	@ (80015a8 <process_command+0x370>)
 8001512:	f019 fc2f 	bl	801ad74 <puts>
 8001516:	e1a5      	b.n	8001864 <process_command+0x62c>
                }
            } else {
                printf("Invalid Roll PID Parameters\n");
 8001518:	4824      	ldr	r0, [pc, #144]	@ (80015ac <process_command+0x374>)
 800151a:	f019 fc2b 	bl	801ad74 <puts>
 800151e:	e1a1      	b.n	8001864 <process_command+0x62c>
            }
        } else {
            printf("Invalid Roll PID Command Format\n");
 8001520:	4823      	ldr	r0, [pc, #140]	@ (80015b0 <process_command+0x378>)
 8001522:	f019 fc27 	bl	801ad74 <puts>
 8001526:	e19d      	b.n	8001864 <process_command+0x62c>
 8001528:	0801e488 	.word	0x0801e488
 800152c:	2400021c 	.word	0x2400021c
 8001530:	0801e48c 	.word	0x0801e48c
 8001534:	0801e4a8 	.word	0x0801e4a8
 8001538:	0801e4bc 	.word	0x0801e4bc
 800153c:	0801e4c4 	.word	0x0801e4c4
 8001540:	40011400 	.word	0x40011400
 8001544:	000f423f 	.word	0x000f423f
 8001548:	e000ed00 	.word	0xe000ed00
 800154c:	0801e4ec 	.word	0x0801e4ec
 8001550:	0801e510 	.word	0x0801e510
 8001554:	0801e53c 	.word	0x0801e53c
 8001558:	0801e554 	.word	0x0801e554
 800155c:	0801e574 	.word	0x0801e574
 8001560:	0801e584 	.word	0x0801e584
 8001564:	0801e58c 	.word	0x0801e58c
 8001568:	0801e594 	.word	0x0801e594
 800156c:	0801e5a0 	.word	0x0801e5a0
 8001570:	0801e5a8 	.word	0x0801e5a8
 8001574:	0801e5b4 	.word	0x0801e5b4
 8001578:	0801e5c0 	.word	0x0801e5c0
 800157c:	0801e5e4 	.word	0x0801e5e4
 8001580:	0801e5f0 	.word	0x0801e5f0
 8001584:	0801e600 	.word	0x0801e600
 8001588:	00000000 	.word	0x00000000
 800158c:	0801e624 	.word	0x0801e624
 8001590:	0801e634 	.word	0x0801e634
 8001594:	0801e644 	.word	0x0801e644
 8001598:	0801e658 	.word	0x0801e658
 800159c:	0801e668 	.word	0x0801e668
 80015a0:	0801e67c 	.word	0x0801e67c
 80015a4:	0801e688 	.word	0x0801e688
 80015a8:	0801e6d4 	.word	0x0801e6d4
 80015ac:	0801e6ec 	.word	0x0801e6ec
 80015b0:	0801e708 	.word	0x0801e708
        }
    }
    else if (strncmp(cmd, "SetPitchPID", 11) == 0) {
 80015b4:	220b      	movs	r2, #11
 80015b6:	49ad      	ldr	r1, [pc, #692]	@ (800186c <process_command+0x634>)
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f019 fd3a 	bl	801b032 <strncmp>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d160      	bne.n	8001686 <process_command+0x44e>
        float pid_values[6]; // outer_kp, outer_ki, outer_kd, inner_kp, inner_ki, inner_kd
        char *params_start = strchr(cmd, '(');
 80015c4:	2128      	movs	r1, #40	@ 0x28
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f019 fd26 	bl	801b018 <strchr>
 80015cc:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
        if (params_start) {
 80015d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d052      	beq.n	800167e <process_command+0x446>
            if (parse_pid_params(params_start, pid_values, 6)) {
 80015d8:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80015dc:	2206      	movs	r2, #6
 80015de:	4619      	mov	r1, r3
 80015e0:	f8d7 00e0 	ldr.w	r0, [r7, #224]	@ 0xe0
 80015e4:	f7ff fd6a 	bl	80010bc <parse_pid_params>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d043      	beq.n	8001676 <process_command+0x43e>
                DualPID_t pitch_pid = {
                    .out = {pid_values[0], pid_values[1], pid_values[2]},
 80015ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
                DualPID_t pitch_pid = {
 80015f0:	663b      	str	r3, [r7, #96]	@ 0x60
                    .out = {pid_values[0], pid_values[1], pid_values[2]},
 80015f2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
                DualPID_t pitch_pid = {
 80015f4:	667b      	str	r3, [r7, #100]	@ 0x64
                    .out = {pid_values[0], pid_values[1], pid_values[2]},
 80015f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
                DualPID_t pitch_pid = {
 80015fa:	66bb      	str	r3, [r7, #104]	@ 0x68
                    .in = {pid_values[3], pid_values[4], pid_values[5]}
 80015fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
                DualPID_t pitch_pid = {
 8001600:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    .in = {pid_values[3], pid_values[4], pid_values[5]}
 8001602:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
                DualPID_t pitch_pid = {
 8001606:	673b      	str	r3, [r7, #112]	@ 0x70
                    .in = {pid_values[3], pid_values[4], pid_values[5]}
 8001608:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
                DualPID_t pitch_pid = {
 800160c:	677b      	str	r3, [r7, #116]	@ 0x74
                };
                if (EEPROM_SetPitchPID(&pitch_pid) == W25Qxx_OK) {
 800160e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001612:	4618      	mov	r0, r3
 8001614:	f000 fb96 	bl	8001d44 <EEPROM_SetPitchPID>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d127      	bne.n	800166e <process_command+0x436>
                    printf("Pitch PID Set: Out Kp=%.8f, Ki=%.8f, Kd=%.8f; In Kp=%.8f, Ki=%.8f, Kd=%.8f\n",
                           pid_values[0], pid_values[1], pid_values[2],
 800161e:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
                    printf("Pitch PID Set: Out Kp=%.8f, Ki=%.8f, Kd=%.8f; In Kp=%.8f, Ki=%.8f, Kd=%.8f\n",
 8001622:	eeb7 2ae7 	vcvt.f64.f32	d2, s15
                           pid_values[0], pid_values[1], pid_values[2],
 8001626:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
                    printf("Pitch PID Set: Out Kp=%.8f, Ki=%.8f, Kd=%.8f; In Kp=%.8f, Ki=%.8f, Kd=%.8f\n",
 800162a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
                           pid_values[0], pid_values[1], pid_values[2],
 800162e:	edd7 6a20 	vldr	s13, [r7, #128]	@ 0x80
                    printf("Pitch PID Set: Out Kp=%.8f, Ki=%.8f, Kd=%.8f; In Kp=%.8f, Ki=%.8f, Kd=%.8f\n",
 8001632:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
                           pid_values[3], pid_values[4], pid_values[5]);
 8001636:	edd7 5a21 	vldr	s11, [r7, #132]	@ 0x84
                    printf("Pitch PID Set: Out Kp=%.8f, Ki=%.8f, Kd=%.8f; In Kp=%.8f, Ki=%.8f, Kd=%.8f\n",
 800163a:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
                           pid_values[3], pid_values[4], pid_values[5]);
 800163e:	edd7 4a22 	vldr	s9, [r7, #136]	@ 0x88
                    printf("Pitch PID Set: Out Kp=%.8f, Ki=%.8f, Kd=%.8f; In Kp=%.8f, Ki=%.8f, Kd=%.8f\n",
 8001642:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
                           pid_values[3], pid_values[4], pid_values[5]);
 8001646:	edd7 3a23 	vldr	s7, [r7, #140]	@ 0x8c
                    printf("Pitch PID Set: Out Kp=%.8f, Ki=%.8f, Kd=%.8f; In Kp=%.8f, Ki=%.8f, Kd=%.8f\n",
 800164a:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 800164e:	ed8d 3b08 	vstr	d3, [sp, #32]
 8001652:	ed8d 4b06 	vstr	d4, [sp, #24]
 8001656:	ed8d 5b04 	vstr	d5, [sp, #16]
 800165a:	ed8d 6b02 	vstr	d6, [sp, #8]
 800165e:	ed8d 7b00 	vstr	d7, [sp]
 8001662:	ec53 2b12 	vmov	r2, r3, d2
 8001666:	4882      	ldr	r0, [pc, #520]	@ (8001870 <process_command+0x638>)
 8001668:	f019 fb1c 	bl	801aca4 <iprintf>
 800166c:	e0fa      	b.n	8001864 <process_command+0x62c>
                } else {
                    printf("Failed to set Pitch PID\n");
 800166e:	4881      	ldr	r0, [pc, #516]	@ (8001874 <process_command+0x63c>)
 8001670:	f019 fb80 	bl	801ad74 <puts>
 8001674:	e0f6      	b.n	8001864 <process_command+0x62c>
                }
            } else {
                printf("Invalid Pitch PID Parameters\n");
 8001676:	4880      	ldr	r0, [pc, #512]	@ (8001878 <process_command+0x640>)
 8001678:	f019 fb7c 	bl	801ad74 <puts>
 800167c:	e0f2      	b.n	8001864 <process_command+0x62c>
            }
        } else {
            printf("Invalid Pitch PID Command Format\n");
 800167e:	487f      	ldr	r0, [pc, #508]	@ (800187c <process_command+0x644>)
 8001680:	f019 fb78 	bl	801ad74 <puts>
 8001684:	e0ee      	b.n	8001864 <process_command+0x62c>
        }
    }
    else if (strncmp(cmd, "SetYawRatePID", 13) == 0) {
 8001686:	220d      	movs	r2, #13
 8001688:	497d      	ldr	r1, [pc, #500]	@ (8001880 <process_command+0x648>)
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f019 fcd1 	bl	801b032 <strncmp>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d144      	bne.n	8001720 <process_command+0x4e8>
        float pid_values[3]; // kp, ki, kd
        char *params_start = strchr(cmd, '(');
 8001696:	2128      	movs	r1, #40	@ 0x28
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f019 fcbd 	bl	801b018 <strchr>
 800169e:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
        if (params_start) {
 80016a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d036      	beq.n	8001718 <process_command+0x4e0>
            if (parse_pid_params(params_start, pid_values, 3)) {
 80016aa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80016ae:	2203      	movs	r2, #3
 80016b0:	4619      	mov	r1, r3
 80016b2:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 80016b6:	f7ff fd01 	bl	80010bc <parse_pid_params>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d027      	beq.n	8001710 <process_command+0x4d8>
                PID_t yaw_rate_pid = {pid_values[0], pid_values[1], pid_values[2]};
 80016c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80016c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80016c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80016c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80016ca:	653b      	str	r3, [r7, #80]	@ 0x50
                if (EEPROM_SetYawRatePID(&yaw_rate_pid) == W25Qxx_OK) {
 80016cc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80016d0:	4618      	mov	r0, r3
 80016d2:	f000 fb89 	bl	8001de8 <EEPROM_SetYawRatePID>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d115      	bne.n	8001708 <process_command+0x4d0>
                    printf("Yaw Rate PID Set: Kp=%.8f, Ki=%.8f, Kd=%.8\n",
                           pid_values[0], pid_values[1], pid_values[2]);
 80016dc:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
                    printf("Yaw Rate PID Set: Kp=%.8f, Ki=%.8f, Kd=%.8\n",
 80016e0:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
                           pid_values[0], pid_values[1], pid_values[2]);
 80016e4:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
                    printf("Yaw Rate PID Set: Kp=%.8f, Ki=%.8f, Kd=%.8\n",
 80016e8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
                           pid_values[0], pid_values[1], pid_values[2]);
 80016ec:	edd7 6a17 	vldr	s13, [r7, #92]	@ 0x5c
                    printf("Yaw Rate PID Set: Kp=%.8f, Ki=%.8f, Kd=%.8\n",
 80016f0:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80016f4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80016f8:	ed8d 7b00 	vstr	d7, [sp]
 80016fc:	ec53 2b15 	vmov	r2, r3, d5
 8001700:	4860      	ldr	r0, [pc, #384]	@ (8001884 <process_command+0x64c>)
 8001702:	f019 facf 	bl	801aca4 <iprintf>
 8001706:	e0ad      	b.n	8001864 <process_command+0x62c>
                } else {
                    printf("Failed to set Yaw Rate PID\n");
 8001708:	485f      	ldr	r0, [pc, #380]	@ (8001888 <process_command+0x650>)
 800170a:	f019 fb33 	bl	801ad74 <puts>
 800170e:	e0a9      	b.n	8001864 <process_command+0x62c>
                }
            } else {
                printf("Invalid Yaw Rate PID Parameters\n");
 8001710:	485e      	ldr	r0, [pc, #376]	@ (800188c <process_command+0x654>)
 8001712:	f019 fb2f 	bl	801ad74 <puts>
 8001716:	e0a5      	b.n	8001864 <process_command+0x62c>
            }
        } else {
            printf("Invalid Yaw Rate PID Command Format\n");
 8001718:	485d      	ldr	r0, [pc, #372]	@ (8001890 <process_command+0x658>)
 800171a:	f019 fb2b 	bl	801ad74 <puts>
 800171e:	e0a1      	b.n	8001864 <process_command+0x62c>
        }
    }
    else if (strcmp(cmd, "get_roll_pid") == 0) {
 8001720:	495c      	ldr	r1, [pc, #368]	@ (8001894 <process_command+0x65c>)
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f7fe fdf4 	bl	8000310 <strcmp>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d133      	bne.n	8001796 <process_command+0x55e>
        DualPID_t roll_pid;
        if (EEPROM_GetRollPID(&roll_pid) == W25Qxx_OK) {
 800172e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001732:	4618      	mov	r0, r3
 8001734:	f000 fa92 	bl	8001c5c <EEPROM_GetRollPID>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d127      	bne.n	800178e <process_command+0x556>
            printf("Roll PID: Out Kp=%.8f, Ki=%.8f, Kd=%.8f; In Kp=%.8f, Ki=%.8f, Kd=%.8f\n",
                   roll_pid.out.kp, roll_pid.out.ki, roll_pid.out.kd,
 800173e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
            printf("Roll PID: Out Kp=%.8f, Ki=%.8f, Kd=%.8f; In Kp=%.8f, Ki=%.8f, Kd=%.8f\n",
 8001742:	eeb7 2ae7 	vcvt.f64.f32	d2, s15
                   roll_pid.out.kp, roll_pid.out.ki, roll_pid.out.kd,
 8001746:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
            printf("Roll PID: Out Kp=%.8f, Ki=%.8f, Kd=%.8f; In Kp=%.8f, Ki=%.8f, Kd=%.8f\n",
 800174a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
                   roll_pid.out.kp, roll_pid.out.ki, roll_pid.out.kd,
 800174e:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
            printf("Roll PID: Out Kp=%.8f, Ki=%.8f, Kd=%.8f; In Kp=%.8f, Ki=%.8f, Kd=%.8f\n",
 8001752:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
                   roll_pid.in.kp, roll_pid.in.ki, roll_pid.in.kd);
 8001756:	edd7 5a0f 	vldr	s11, [r7, #60]	@ 0x3c
            printf("Roll PID: Out Kp=%.8f, Ki=%.8f, Kd=%.8f; In Kp=%.8f, Ki=%.8f, Kd=%.8f\n",
 800175a:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
                   roll_pid.in.kp, roll_pid.in.ki, roll_pid.in.kd);
 800175e:	edd7 4a10 	vldr	s9, [r7, #64]	@ 0x40
            printf("Roll PID: Out Kp=%.8f, Ki=%.8f, Kd=%.8f; In Kp=%.8f, Ki=%.8f, Kd=%.8f\n",
 8001762:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
                   roll_pid.in.kp, roll_pid.in.ki, roll_pid.in.kd);
 8001766:	edd7 3a11 	vldr	s7, [r7, #68]	@ 0x44
            printf("Roll PID: Out Kp=%.8f, Ki=%.8f, Kd=%.8f; In Kp=%.8f, Ki=%.8f, Kd=%.8f\n",
 800176a:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 800176e:	ed8d 3b08 	vstr	d3, [sp, #32]
 8001772:	ed8d 4b06 	vstr	d4, [sp, #24]
 8001776:	ed8d 5b04 	vstr	d5, [sp, #16]
 800177a:	ed8d 6b02 	vstr	d6, [sp, #8]
 800177e:	ed8d 7b00 	vstr	d7, [sp]
 8001782:	ec53 2b12 	vmov	r2, r3, d2
 8001786:	4844      	ldr	r0, [pc, #272]	@ (8001898 <process_command+0x660>)
 8001788:	f019 fa8c 	bl	801aca4 <iprintf>
 800178c:	e06a      	b.n	8001864 <process_command+0x62c>
        } else {
            printf("Failed to get Roll PID\n");
 800178e:	4843      	ldr	r0, [pc, #268]	@ (800189c <process_command+0x664>)
 8001790:	f019 faf0 	bl	801ad74 <puts>
 8001794:	e066      	b.n	8001864 <process_command+0x62c>
        }
    }
    else if (strcmp(cmd, "get_pitch_pid") == 0) {
 8001796:	4942      	ldr	r1, [pc, #264]	@ (80018a0 <process_command+0x668>)
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f7fe fdb9 	bl	8000310 <strcmp>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d133      	bne.n	800180c <process_command+0x5d4>
        DualPID_t pitch_pid;
        if (EEPROM_GetPitchPID(&pitch_pid) == W25Qxx_OK) {
 80017a4:	f107 0318 	add.w	r3, r7, #24
 80017a8:	4618      	mov	r0, r3
 80017aa:	f000 faa9 	bl	8001d00 <EEPROM_GetPitchPID>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d127      	bne.n	8001804 <process_command+0x5cc>
            printf("Pitch PID: Out Kp=%.8f, Ki=%.8f, Kd=%.8f; In Kp=%.8f, Ki=%.8f, Kd=%.8f\n",
                   pitch_pid.out.kp, pitch_pid.out.ki, pitch_pid.out.kd,
 80017b4:	edd7 7a06 	vldr	s15, [r7, #24]
            printf("Pitch PID: Out Kp=%.8f, Ki=%.8f, Kd=%.8f; In Kp=%.8f, Ki=%.8f, Kd=%.8f\n",
 80017b8:	eeb7 2ae7 	vcvt.f64.f32	d2, s15
                   pitch_pid.out.kp, pitch_pid.out.ki, pitch_pid.out.kd,
 80017bc:	edd7 7a07 	vldr	s15, [r7, #28]
            printf("Pitch PID: Out Kp=%.8f, Ki=%.8f, Kd=%.8f; In Kp=%.8f, Ki=%.8f, Kd=%.8f\n",
 80017c0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
                   pitch_pid.out.kp, pitch_pid.out.ki, pitch_pid.out.kd,
 80017c4:	edd7 6a08 	vldr	s13, [r7, #32]
            printf("Pitch PID: Out Kp=%.8f, Ki=%.8f, Kd=%.8f; In Kp=%.8f, Ki=%.8f, Kd=%.8f\n",
 80017c8:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
                   pitch_pid.in.kp, pitch_pid.in.ki, pitch_pid.in.kd);
 80017cc:	edd7 5a09 	vldr	s11, [r7, #36]	@ 0x24
            printf("Pitch PID: Out Kp=%.8f, Ki=%.8f, Kd=%.8f; In Kp=%.8f, Ki=%.8f, Kd=%.8f\n",
 80017d0:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
                   pitch_pid.in.kp, pitch_pid.in.ki, pitch_pid.in.kd);
 80017d4:	edd7 4a0a 	vldr	s9, [r7, #40]	@ 0x28
            printf("Pitch PID: Out Kp=%.8f, Ki=%.8f, Kd=%.8f; In Kp=%.8f, Ki=%.8f, Kd=%.8f\n",
 80017d8:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
                   pitch_pid.in.kp, pitch_pid.in.ki, pitch_pid.in.kd);
 80017dc:	edd7 3a0b 	vldr	s7, [r7, #44]	@ 0x2c
            printf("Pitch PID: Out Kp=%.8f, Ki=%.8f, Kd=%.8f; In Kp=%.8f, Ki=%.8f, Kd=%.8f\n",
 80017e0:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 80017e4:	ed8d 3b08 	vstr	d3, [sp, #32]
 80017e8:	ed8d 4b06 	vstr	d4, [sp, #24]
 80017ec:	ed8d 5b04 	vstr	d5, [sp, #16]
 80017f0:	ed8d 6b02 	vstr	d6, [sp, #8]
 80017f4:	ed8d 7b00 	vstr	d7, [sp]
 80017f8:	ec53 2b12 	vmov	r2, r3, d2
 80017fc:	4829      	ldr	r0, [pc, #164]	@ (80018a4 <process_command+0x66c>)
 80017fe:	f019 fa51 	bl	801aca4 <iprintf>
 8001802:	e02f      	b.n	8001864 <process_command+0x62c>
        } else {
            printf("Failed to get Pitch PID\n");
 8001804:	4828      	ldr	r0, [pc, #160]	@ (80018a8 <process_command+0x670>)
 8001806:	f019 fab5 	bl	801ad74 <puts>
 800180a:	e02b      	b.n	8001864 <process_command+0x62c>
        }
    }
    else if (strcmp(cmd, "get_yaw_rate_pid") == 0) {
 800180c:	4927      	ldr	r1, [pc, #156]	@ (80018ac <process_command+0x674>)
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f7fe fd7e 	bl	8000310 <strcmp>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d121      	bne.n	800185e <process_command+0x626>
        PID_t yaw_rate_pid;
        if (EEPROM_GetYawRatePID(&yaw_rate_pid) == W25Qxx_OK) {
 800181a:	f107 030c 	add.w	r3, r7, #12
 800181e:	4618      	mov	r0, r3
 8001820:	f000 fac0 	bl	8001da4 <EEPROM_GetYawRatePID>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d115      	bne.n	8001856 <process_command+0x61e>
            printf("Yaw Rate PID: Kp=%.8f, Ki=%.8f, Kd=%.8f\n",
                   yaw_rate_pid.kp, yaw_rate_pid.ki, yaw_rate_pid.kd);
 800182a:	edd7 7a03 	vldr	s15, [r7, #12]
            printf("Yaw Rate PID: Kp=%.8f, Ki=%.8f, Kd=%.8f\n",
 800182e:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
                   yaw_rate_pid.kp, yaw_rate_pid.ki, yaw_rate_pid.kd);
 8001832:	edd7 7a04 	vldr	s15, [r7, #16]
            printf("Yaw Rate PID: Kp=%.8f, Ki=%.8f, Kd=%.8f\n",
 8001836:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
                   yaw_rate_pid.kp, yaw_rate_pid.ki, yaw_rate_pid.kd);
 800183a:	edd7 6a05 	vldr	s13, [r7, #20]
            printf("Yaw Rate PID: Kp=%.8f, Ki=%.8f, Kd=%.8f\n",
 800183e:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001842:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001846:	ed8d 7b00 	vstr	d7, [sp]
 800184a:	ec53 2b15 	vmov	r2, r3, d5
 800184e:	4818      	ldr	r0, [pc, #96]	@ (80018b0 <process_command+0x678>)
 8001850:	f019 fa28 	bl	801aca4 <iprintf>
 8001854:	e006      	b.n	8001864 <process_command+0x62c>
        } else {
            printf("Failed to get Yaw Rate PID\n");
 8001856:	4817      	ldr	r0, [pc, #92]	@ (80018b4 <process_command+0x67c>)
 8001858:	f019 fa8c 	bl	801ad74 <puts>
 800185c:	e002      	b.n	8001864 <process_command+0x62c>
        }
    }
    else {
        printf("Unknown Command\n");
 800185e:	4816      	ldr	r0, [pc, #88]	@ (80018b8 <process_command+0x680>)
 8001860:	f019 fa88 	bl	801ad74 <puts>
    }
}
 8001864:	37e8      	adds	r7, #232	@ 0xe8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	0801e728 	.word	0x0801e728
 8001870:	0801e734 	.word	0x0801e734
 8001874:	0801e780 	.word	0x0801e780
 8001878:	0801e798 	.word	0x0801e798
 800187c:	0801e7b8 	.word	0x0801e7b8
 8001880:	0801e7dc 	.word	0x0801e7dc
 8001884:	0801e7ec 	.word	0x0801e7ec
 8001888:	0801e818 	.word	0x0801e818
 800188c:	0801e834 	.word	0x0801e834
 8001890:	0801e854 	.word	0x0801e854
 8001894:	0801e878 	.word	0x0801e878
 8001898:	0801e888 	.word	0x0801e888
 800189c:	0801e8d0 	.word	0x0801e8d0
 80018a0:	0801e8e8 	.word	0x0801e8e8
 80018a4:	0801e8f8 	.word	0x0801e8f8
 80018a8:	0801e940 	.word	0x0801e940
 80018ac:	0801e958 	.word	0x0801e958
 80018b0:	0801e96c 	.word	0x0801e96c
 80018b4:	0801e998 	.word	0x0801e998
 80018b8:	0801e9b4 	.word	0x0801e9b4

080018bc <EEPROM_Init>:

/**
  * @brief Initialize the W25Qxx flash memory
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_Init(void) {
 80018bc:	b580      	push	{r7, lr}
 80018be:	b096      	sub	sp, #88	@ 0x58
 80018c0:	af00      	add	r7, sp, #0
    uint8_t jedec_id[3];
    OSPI_RegularCmdTypeDef cmd = {0};
 80018c2:	1d3b      	adds	r3, r7, #4
 80018c4:	2250      	movs	r2, #80	@ 0x50
 80018c6:	2100      	movs	r1, #0
 80018c8:	4618      	mov	r0, r3
 80018ca:	f019 fb9d 	bl	801b008 <memset>

    /* Configure command to read JEDEC ID */
    cmd.OperationType = HAL_OSPI_OPTYPE_COMMON_CFG;
 80018ce:	2300      	movs	r3, #0
 80018d0:	607b      	str	r3, [r7, #4]
    cmd.Instruction = W25Qxx_CMD_JEDEC_ID;
 80018d2:	239f      	movs	r3, #159	@ 0x9f
 80018d4:	60fb      	str	r3, [r7, #12]
    cmd.InstructionMode = HAL_OSPI_INSTRUCTION_1_LINE;
 80018d6:	2301      	movs	r3, #1
 80018d8:	613b      	str	r3, [r7, #16]
    cmd.InstructionSize = HAL_OSPI_INSTRUCTION_8_BITS;
 80018da:	2300      	movs	r3, #0
 80018dc:	617b      	str	r3, [r7, #20]
    cmd.AddressMode = HAL_OSPI_ADDRESS_NONE;
 80018de:	2300      	movs	r3, #0
 80018e0:	623b      	str	r3, [r7, #32]
    cmd.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80018e2:	2300      	movs	r3, #0
 80018e4:	633b      	str	r3, [r7, #48]	@ 0x30
    cmd.DataMode = HAL_OSPI_DATA_1_LINE;
 80018e6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80018ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
    cmd.NbData = 3;
 80018ec:	2303      	movs	r3, #3
 80018ee:	643b      	str	r3, [r7, #64]	@ 0x40
    cmd.DummyCycles = 0;
 80018f0:	2300      	movs	r3, #0
 80018f2:	64bb      	str	r3, [r7, #72]	@ 0x48
    cmd.DQSMode = HAL_OSPI_DQS_DISABLE;
 80018f4:	2300      	movs	r3, #0
 80018f6:	64fb      	str	r3, [r7, #76]	@ 0x4c

    if (HAL_OSPI_Command(&hospi1, &cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 80018f8:	1d3b      	adds	r3, r7, #4
 80018fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018fe:	4619      	mov	r1, r3
 8001900:	4815      	ldr	r0, [pc, #84]	@ (8001958 <EEPROM_Init+0x9c>)
 8001902:	f00a f883 	bl	800ba0c <HAL_OSPI_Command>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d005      	beq.n	8001918 <EEPROM_Init+0x5c>
        printf("Failed to configure JEDEC ID command\r\n");
 800190c:	4813      	ldr	r0, [pc, #76]	@ (800195c <EEPROM_Init+0xa0>)
 800190e:	f019 fa31 	bl	801ad74 <puts>
        return W25Qxx_ERROR;
 8001912:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001916:	e01b      	b.n	8001950 <EEPROM_Init+0x94>
    }

    if (HAL_OSPI_Receive(&hospi1, jedec_id, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8001918:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800191c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001920:	4619      	mov	r1, r3
 8001922:	480d      	ldr	r0, [pc, #52]	@ (8001958 <EEPROM_Init+0x9c>)
 8001924:	f00a f972 	bl	800bc0c <HAL_OSPI_Receive>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d005      	beq.n	800193a <EEPROM_Init+0x7e>
        printf("Failed to read JEDEC ID\r\n");
 800192e:	480c      	ldr	r0, [pc, #48]	@ (8001960 <EEPROM_Init+0xa4>)
 8001930:	f019 fa20 	bl	801ad74 <puts>
        return W25Qxx_ERROR;
 8001934:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001938:	e00a      	b.n	8001950 <EEPROM_Init+0x94>
    }

    /* Check for valid JEDEC ID (example: Winbond W25Q series) */
    if (jedec_id[0] != 0xEF) { // Manufacturer ID for Winbond
 800193a:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800193e:	2bef      	cmp	r3, #239	@ 0xef
 8001940:	d005      	beq.n	800194e <EEPROM_Init+0x92>
        printf("Invalid JEDEC ID\r\n");
 8001942:	4808      	ldr	r0, [pc, #32]	@ (8001964 <EEPROM_Init+0xa8>)
 8001944:	f019 fa16 	bl	801ad74 <puts>
        return W25Qxx_ERROR;
 8001948:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800194c:	e000      	b.n	8001950 <EEPROM_Init+0x94>
    }

    return W25Qxx_OK;
 800194e:	2300      	movs	r3, #0
}
 8001950:	4618      	mov	r0, r3
 8001952:	3758      	adds	r7, #88	@ 0x58
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	24000d2c 	.word	0x24000d2c
 800195c:	0801e9c4 	.word	0x0801e9c4
 8001960:	0801e9ec 	.word	0x0801e9ec
 8001964:	0801ea08 	.word	0x0801ea08

08001968 <EEPROM_ReadConfig>:
/**
  * @brief Read configuration from EEPROM
  * @param config Pointer to DroneConfig_t structure
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_ReadConfig(DroneConfig_t *config) {
 8001968:	b580      	push	{r7, lr}
 800196a:	b0a8      	sub	sp, #160	@ 0xa0
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
    uint8_t buffer[sizeof(DroneConfig_t)];
    if (W25Qxx_Read(W25Qxx_CONFIG_ADDRESS, buffer, sizeof(DroneConfig_t)) != W25Qxx_OK) {
 8001970:	f107 030c 	add.w	r3, r7, #12
 8001974:	2290      	movs	r2, #144	@ 0x90
 8001976:	4619      	mov	r1, r3
 8001978:	2000      	movs	r0, #0
 800197a:	f000 fad9 	bl	8001f30 <W25Qxx_Read>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d005      	beq.n	8001990 <EEPROM_ReadConfig+0x28>
        printf("Failed to read data from flash\r\n");
 8001984:	4812      	ldr	r0, [pc, #72]	@ (80019d0 <EEPROM_ReadConfig+0x68>)
 8001986:	f019 f9f5 	bl	801ad74 <puts>
        return W25Qxx_ERROR;
 800198a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800198e:	e01b      	b.n	80019c8 <EEPROM_ReadConfig+0x60>
    }

    memcpy(config, buffer, sizeof(DroneConfig_t));
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4618      	mov	r0, r3
 8001994:	f107 030c 	add.w	r3, r7, #12
 8001998:	2290      	movs	r2, #144	@ 0x90
 800199a:	4619      	mov	r1, r3
 800199c:	f019 fc31 	bl	801b202 <memcpy>
    uint32_t calculated_crc = CalculateCRC32((uint8_t*)config, sizeof(DroneConfig_t) - sizeof(uint32_t));
 80019a0:	218c      	movs	r1, #140	@ 0x8c
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f000 f83c 	bl	8001a20 <CalculateCRC32>
 80019a8:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
    if (calculated_crc != config->crc) {
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019b2:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d005      	beq.n	80019c6 <EEPROM_ReadConfig+0x5e>
        printf("EEPROM config CRC mismatch\r\n");
 80019ba:	4806      	ldr	r0, [pc, #24]	@ (80019d4 <EEPROM_ReadConfig+0x6c>)
 80019bc:	f019 f9da 	bl	801ad74 <puts>
        return W25Qxx_ERROR;
 80019c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019c4:	e000      	b.n	80019c8 <EEPROM_ReadConfig+0x60>
    }

    return W25Qxx_OK;
 80019c6:	2300      	movs	r3, #0
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	37a0      	adds	r7, #160	@ 0xa0
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	0801ea1c 	.word	0x0801ea1c
 80019d4:	0801ea3c 	.word	0x0801ea3c

080019d8 <EEPROM_WriteConfig>:
/**
  * @brief Write configuration to EEPROM
  * @param config Pointer to DroneConfig_t structure
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_WriteConfig(DroneConfig_t *config) {
 80019d8:	b580      	push	{r7, lr}
 80019da:	b0a6      	sub	sp, #152	@ 0x98
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
    uint8_t buffer[sizeof(DroneConfig_t)];
    memcpy(buffer, config, sizeof(DroneConfig_t));
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	f107 0308 	add.w	r3, r7, #8
 80019e6:	4611      	mov	r1, r2
 80019e8:	2290      	movs	r2, #144	@ 0x90
 80019ea:	4618      	mov	r0, r3
 80019ec:	f019 fc09 	bl	801b202 <memcpy>

    if (W25Qxx_Write(W25Qxx_CONFIG_ADDRESS, buffer, sizeof(DroneConfig_t)) != W25Qxx_OK) {
 80019f0:	f107 0308 	add.w	r3, r7, #8
 80019f4:	2290      	movs	r2, #144	@ 0x90
 80019f6:	4619      	mov	r1, r3
 80019f8:	2000      	movs	r0, #0
 80019fa:	f000 faed 	bl	8001fd8 <W25Qxx_Write>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d005      	beq.n	8001a10 <EEPROM_WriteConfig+0x38>
        printf("Failed to write data to flash\r\n");
 8001a04:	4805      	ldr	r0, [pc, #20]	@ (8001a1c <EEPROM_WriteConfig+0x44>)
 8001a06:	f019 f9b5 	bl	801ad74 <puts>
        return W25Qxx_ERROR;
 8001a0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a0e:	e000      	b.n	8001a12 <EEPROM_WriteConfig+0x3a>
    }

    return W25Qxx_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3798      	adds	r7, #152	@ 0x98
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	0801ea58 	.word	0x0801ea58

08001a20 <CalculateCRC32>:
  * @brief Calculate CRC32 for data integrity
  * @param data Pointer to data
  * @param length Length of data
  * @retval uint32_t CRC value
  */
uint32_t CalculateCRC32(const uint8_t *data, uint32_t length) {
 8001a20:	b480      	push	{r7}
 8001a22:	b087      	sub	sp, #28
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
    uint32_t crc = 0xFFFFFFFF;
 8001a2a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a2e:	617b      	str	r3, [r7, #20]
    const uint32_t polynomial = 0x04C11DB7;
 8001a30:	4b17      	ldr	r3, [pc, #92]	@ (8001a90 <CalculateCRC32+0x70>)
 8001a32:	60bb      	str	r3, [r7, #8]

    for (uint32_t i = 0; i < length; i++) {
 8001a34:	2300      	movs	r3, #0
 8001a36:	613b      	str	r3, [r7, #16]
 8001a38:	e01f      	b.n	8001a7a <CalculateCRC32+0x5a>
        crc ^= (uint32_t)data[i] << 24;
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	4413      	add	r3, r2
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	061b      	lsls	r3, r3, #24
 8001a44:	697a      	ldr	r2, [r7, #20]
 8001a46:	4053      	eors	r3, r2
 8001a48:	617b      	str	r3, [r7, #20]
        for (uint8_t j = 0; j < 8; j++) {
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	73fb      	strb	r3, [r7, #15]
 8001a4e:	e00e      	b.n	8001a6e <CalculateCRC32+0x4e>
            if (crc & 0x80000000) {
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	da05      	bge.n	8001a62 <CalculateCRC32+0x42>
                crc = (crc << 1) ^ polynomial;
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	68ba      	ldr	r2, [r7, #8]
 8001a5c:	4053      	eors	r3, r2
 8001a5e:	617b      	str	r3, [r7, #20]
 8001a60:	e002      	b.n	8001a68 <CalculateCRC32+0x48>
            } else {
                crc <<= 1;
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	617b      	str	r3, [r7, #20]
        for (uint8_t j = 0; j < 8; j++) {
 8001a68:	7bfb      	ldrb	r3, [r7, #15]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	73fb      	strb	r3, [r7, #15]
 8001a6e:	7bfb      	ldrb	r3, [r7, #15]
 8001a70:	2b07      	cmp	r3, #7
 8001a72:	d9ed      	bls.n	8001a50 <CalculateCRC32+0x30>
    for (uint32_t i = 0; i < length; i++) {
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	3301      	adds	r3, #1
 8001a78:	613b      	str	r3, [r7, #16]
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d3db      	bcc.n	8001a3a <CalculateCRC32+0x1a>
            }
        }
    }
    return crc;
 8001a82:	697b      	ldr	r3, [r7, #20]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	371c      	adds	r7, #28
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	04c11db7 	.word	0x04c11db7

08001a94 <EEPROM_GetAccelCalibration>:
/**
  * @brief Get accelerometer calibration data
  * @param accel_cal Array to store calibration values
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_GetAccelCalibration(float accel_cal[3]) {
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b0aa      	sub	sp, #168	@ 0xa8
 8001a98:	af04      	add	r7, sp, #16
 8001a9a:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 8001a9c:	f107 0308 	add.w	r3, r7, #8
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff ff61 	bl	8001968 <EEPROM_ReadConfig>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d012      	beq.n	8001ad2 <EEPROM_GetAccelCalibration+0x3e>
        printf("Failed to read config during GetAccelCalibration\r\n");
 8001aac:	481c      	ldr	r0, [pc, #112]	@ (8001b20 <EEPROM_GetAccelCalibration+0x8c>)
 8001aae:	f019 f961 	bl	801ad74 <puts>
        accel_cal[0] = accel_cal[1] = accel_cal[2] = 0.0f; // Initialize on error
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f103 0208 	add.w	r2, r3, #8
 8001ab8:	f04f 0300 	mov.w	r3, #0
 8001abc:	6013      	str	r3, [r2, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	3304      	adds	r3, #4
 8001ac2:	6812      	ldr	r2, [r2, #0]
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	601a      	str	r2, [r3, #0]
        return W25Qxx_ERROR;
 8001acc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ad0:	e021      	b.n	8001b16 <EEPROM_GetAccelCalibration+0x82>
    }
    memcpy(accel_cal, config.accel_cal, 3 * sizeof(float));
 8001ad2:	f107 0308 	add.w	r3, r7, #8
 8001ad6:	220c      	movs	r2, #12
 8001ad8:	4619      	mov	r1, r3
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f019 fb91 	bl	801b202 <memcpy>
    printf("Retrieved accel_cal: X=%f, Y=%f, Z=%f\r\n", accel_cal[0], accel_cal[1], accel_cal[2]);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	edd3 7a00 	vldr	s15, [r3]
 8001ae6:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	3304      	adds	r3, #4
 8001aee:	edd3 7a00 	vldr	s15, [r3]
 8001af2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	3308      	adds	r3, #8
 8001afa:	edd3 6a00 	vldr	s13, [r3]
 8001afe:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001b02:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001b06:	ed8d 7b00 	vstr	d7, [sp]
 8001b0a:	ec53 2b15 	vmov	r2, r3, d5
 8001b0e:	4805      	ldr	r0, [pc, #20]	@ (8001b24 <EEPROM_GetAccelCalibration+0x90>)
 8001b10:	f019 f8c8 	bl	801aca4 <iprintf>
    return W25Qxx_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3798      	adds	r7, #152	@ 0x98
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	0801ea78 	.word	0x0801ea78
 8001b24:	0801eaac 	.word	0x0801eaac

08001b28 <EEPROM_GetGyroCalibration>:
/**
  * @brief Get gyroscope calibration data
  * @param gyro_cal Array to store calibration values
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_GetGyroCalibration(float gyro_cal[3]) {
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b0aa      	sub	sp, #168	@ 0xa8
 8001b2c:	af04      	add	r7, sp, #16
 8001b2e:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 8001b30:	f107 0308 	add.w	r3, r7, #8
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff ff17 	bl	8001968 <EEPROM_ReadConfig>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d012      	beq.n	8001b66 <EEPROM_GetGyroCalibration+0x3e>
        printf("Failed to read config during GetGyroCalibration\r\n");
 8001b40:	481c      	ldr	r0, [pc, #112]	@ (8001bb4 <EEPROM_GetGyroCalibration+0x8c>)
 8001b42:	f019 f917 	bl	801ad74 <puts>
        gyro_cal[0] = gyro_cal[1] = gyro_cal[2] = 0.0f; // Initialize on error
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f103 0208 	add.w	r2, r3, #8
 8001b4c:	f04f 0300 	mov.w	r3, #0
 8001b50:	6013      	str	r3, [r2, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	3304      	adds	r3, #4
 8001b56:	6812      	ldr	r2, [r2, #0]
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	601a      	str	r2, [r3, #0]
        return W25Qxx_ERROR;
 8001b60:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b64:	e022      	b.n	8001bac <EEPROM_GetGyroCalibration+0x84>
    }
    memcpy(gyro_cal, config.gyro_cal, 3 * sizeof(float));
 8001b66:	f107 0308 	add.w	r3, r7, #8
 8001b6a:	330c      	adds	r3, #12
 8001b6c:	220c      	movs	r2, #12
 8001b6e:	4619      	mov	r1, r3
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f019 fb46 	bl	801b202 <memcpy>
    printf("Retrieved gyro_cal: X=%f, Y=%f, Z=%f\r\n", gyro_cal[0], gyro_cal[1], gyro_cal[2]);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	edd3 7a00 	vldr	s15, [r3]
 8001b7c:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	3304      	adds	r3, #4
 8001b84:	edd3 7a00 	vldr	s15, [r3]
 8001b88:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	3308      	adds	r3, #8
 8001b90:	edd3 6a00 	vldr	s13, [r3]
 8001b94:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001b98:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001b9c:	ed8d 7b00 	vstr	d7, [sp]
 8001ba0:	ec53 2b15 	vmov	r2, r3, d5
 8001ba4:	4804      	ldr	r0, [pc, #16]	@ (8001bb8 <EEPROM_GetGyroCalibration+0x90>)
 8001ba6:	f019 f87d 	bl	801aca4 <iprintf>
    return W25Qxx_OK;
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3798      	adds	r7, #152	@ 0x98
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	0801eb08 	.word	0x0801eb08
 8001bb8:	0801eb3c 	.word	0x0801eb3c

08001bbc <EEPROM_GetMagCalibration>:
/**
  * @brief Get magnetometer calibration data
  * @param mag_cal Array to store calibration values
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_GetMagCalibration(float mag_cal[3]) {
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b0a6      	sub	sp, #152	@ 0x98
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 8001bc4:	f107 0308 	add.w	r3, r7, #8
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff fecd 	bl	8001968 <EEPROM_ReadConfig>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d012      	beq.n	8001bfa <EEPROM_GetMagCalibration+0x3e>
        printf("Failed to read config during GetMagCalibration\r\n");
 8001bd4:	480f      	ldr	r0, [pc, #60]	@ (8001c14 <EEPROM_GetMagCalibration+0x58>)
 8001bd6:	f019 f8cd 	bl	801ad74 <puts>
        mag_cal[0] = mag_cal[1] = mag_cal[2] = 0.0f; // Initialize on error
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f103 0208 	add.w	r2, r3, #8
 8001be0:	f04f 0300 	mov.w	r3, #0
 8001be4:	6013      	str	r3, [r2, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	3304      	adds	r3, #4
 8001bea:	6812      	ldr	r2, [r2, #0]
 8001bec:	601a      	str	r2, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	601a      	str	r2, [r3, #0]
        return W25Qxx_ERROR;
 8001bf4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001bf8:	e008      	b.n	8001c0c <EEPROM_GetMagCalibration+0x50>
    }
    memcpy(mag_cal, config.mag_cal, 3 * sizeof(float));
 8001bfa:	f107 0308 	add.w	r3, r7, #8
 8001bfe:	3318      	adds	r3, #24
 8001c00:	220c      	movs	r2, #12
 8001c02:	4619      	mov	r1, r3
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f019 fafc 	bl	801b202 <memcpy>
    return W25Qxx_OK;
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3798      	adds	r7, #152	@ 0x98
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	0801eb98 	.word	0x0801eb98

08001c18 <EEPROM_GetPID>:
/**
  * @brief Get legacy PID values
  * @param pid Array to store PID values
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_GetPID(float pid[3]) {
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b0a6      	sub	sp, #152	@ 0x98
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 8001c20:	f107 0308 	add.w	r3, r7, #8
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff fe9f 	bl	8001968 <EEPROM_ReadConfig>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d005      	beq.n	8001c3c <EEPROM_GetPID+0x24>
        printf("Failed to read config during GetPID\r\n");
 8001c30:	4809      	ldr	r0, [pc, #36]	@ (8001c58 <EEPROM_GetPID+0x40>)
 8001c32:	f019 f89f 	bl	801ad74 <puts>
        return W25Qxx_ERROR;
 8001c36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c3a:	e008      	b.n	8001c4e <EEPROM_GetPID+0x36>
    }
    memcpy(pid, config.pid, 3 * sizeof(float));
 8001c3c:	f107 0308 	add.w	r3, r7, #8
 8001c40:	3324      	adds	r3, #36	@ 0x24
 8001c42:	220c      	movs	r2, #12
 8001c44:	4619      	mov	r1, r3
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f019 fadb 	bl	801b202 <memcpy>
    return W25Qxx_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3798      	adds	r7, #152	@ 0x98
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	0801ebf8 	.word	0x0801ebf8

08001c5c <EEPROM_GetRollPID>:
/**
  * @brief Get roll PID values
  * @param roll_pid Pointer to store roll PID
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_GetRollPID(DualPID_t *roll_pid) {
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b0a6      	sub	sp, #152	@ 0x98
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 8001c64:	f107 0308 	add.w	r3, r7, #8
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff fe7d 	bl	8001968 <EEPROM_ReadConfig>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d005      	beq.n	8001c80 <EEPROM_GetRollPID+0x24>
        printf("Failed to read config during GetRollPID\r\n");
 8001c74:	4809      	ldr	r0, [pc, #36]	@ (8001c9c <EEPROM_GetRollPID+0x40>)
 8001c76:	f019 f87d 	bl	801ad74 <puts>
        return W25Qxx_ERROR;
 8001c7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c7e:	e008      	b.n	8001c92 <EEPROM_GetRollPID+0x36>
    }
    memcpy(roll_pid, &config.roll_pid, sizeof(DualPID_t));
 8001c80:	f107 0308 	add.w	r3, r7, #8
 8001c84:	3340      	adds	r3, #64	@ 0x40
 8001c86:	2218      	movs	r2, #24
 8001c88:	4619      	mov	r1, r3
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f019 fab9 	bl	801b202 <memcpy>
    return W25Qxx_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3798      	adds	r7, #152	@ 0x98
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	0801ecf0 	.word	0x0801ecf0

08001ca0 <EEPROM_SetRollPID>:
/**
  * @brief Set roll PID values
  * @param roll_pid Pointer to roll PID
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_SetRollPID(const DualPID_t *roll_pid) {
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b0a6      	sub	sp, #152	@ 0x98
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 8001ca8:	f107 0308 	add.w	r3, r7, #8
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff fe5b 	bl	8001968 <EEPROM_ReadConfig>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d005      	beq.n	8001cc4 <EEPROM_SetRollPID+0x24>
        printf("Failed to read config during SetRollPID\r\n");
 8001cb8:	4810      	ldr	r0, [pc, #64]	@ (8001cfc <EEPROM_SetRollPID+0x5c>)
 8001cba:	f019 f85b 	bl	801ad74 <puts>
        return W25Qxx_ERROR;
 8001cbe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001cc2:	e016      	b.n	8001cf2 <EEPROM_SetRollPID+0x52>
    }
    memcpy(&config.roll_pid, roll_pid, sizeof(DualPID_t));
 8001cc4:	f107 0308 	add.w	r3, r7, #8
 8001cc8:	3340      	adds	r3, #64	@ 0x40
 8001cca:	2218      	movs	r2, #24
 8001ccc:	6879      	ldr	r1, [r7, #4]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f019 fa97 	bl	801b202 <memcpy>
    config.crc = CalculateCRC32((uint8_t*)&config, sizeof(DroneConfig_t) - sizeof(uint32_t));
 8001cd4:	f107 0308 	add.w	r3, r7, #8
 8001cd8:	218c      	movs	r1, #140	@ 0x8c
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff fea0 	bl	8001a20 <CalculateCRC32>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    return EEPROM_WriteConfig(&config);
 8001ce6:	f107 0308 	add.w	r3, r7, #8
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff fe74 	bl	80019d8 <EEPROM_WriteConfig>
 8001cf0:	4603      	mov	r3, r0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3798      	adds	r7, #152	@ 0x98
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	0801ed1c 	.word	0x0801ed1c

08001d00 <EEPROM_GetPitchPID>:
/**
  * @brief Get pitch PID values
  * @param pitch_pid Pointer to store pitch PID
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_GetPitchPID(DualPID_t *pitch_pid) {
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b0a6      	sub	sp, #152	@ 0x98
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 8001d08:	f107 0308 	add.w	r3, r7, #8
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff fe2b 	bl	8001968 <EEPROM_ReadConfig>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d005      	beq.n	8001d24 <EEPROM_GetPitchPID+0x24>
        printf("Failed to read config during GetPitchPID\r\n");
 8001d18:	4809      	ldr	r0, [pc, #36]	@ (8001d40 <EEPROM_GetPitchPID+0x40>)
 8001d1a:	f019 f82b 	bl	801ad74 <puts>
        return W25Qxx_ERROR;
 8001d1e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d22:	e008      	b.n	8001d36 <EEPROM_GetPitchPID+0x36>
    }
    memcpy(pitch_pid, &config.pitch_pid, sizeof(DualPID_t));
 8001d24:	f107 0308 	add.w	r3, r7, #8
 8001d28:	3358      	adds	r3, #88	@ 0x58
 8001d2a:	2218      	movs	r2, #24
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f019 fa67 	bl	801b202 <memcpy>
    return W25Qxx_OK;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3798      	adds	r7, #152	@ 0x98
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	0801ed48 	.word	0x0801ed48

08001d44 <EEPROM_SetPitchPID>:
/**
  * @brief Set pitch PID values
  * @param pitch_pid Pointer to pitch PID
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_SetPitchPID(const DualPID_t *pitch_pid) {
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b0a6      	sub	sp, #152	@ 0x98
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 8001d4c:	f107 0308 	add.w	r3, r7, #8
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff fe09 	bl	8001968 <EEPROM_ReadConfig>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d005      	beq.n	8001d68 <EEPROM_SetPitchPID+0x24>
        printf("Failed to read config during SetPitchPID\r\n");
 8001d5c:	4810      	ldr	r0, [pc, #64]	@ (8001da0 <EEPROM_SetPitchPID+0x5c>)
 8001d5e:	f019 f809 	bl	801ad74 <puts>
        return W25Qxx_ERROR;
 8001d62:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d66:	e016      	b.n	8001d96 <EEPROM_SetPitchPID+0x52>
    }
    memcpy(&config.pitch_pid, pitch_pid, sizeof(DualPID_t));
 8001d68:	f107 0308 	add.w	r3, r7, #8
 8001d6c:	3358      	adds	r3, #88	@ 0x58
 8001d6e:	2218      	movs	r2, #24
 8001d70:	6879      	ldr	r1, [r7, #4]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f019 fa45 	bl	801b202 <memcpy>
    config.crc = CalculateCRC32((uint8_t*)&config, sizeof(DroneConfig_t) - sizeof(uint32_t));
 8001d78:	f107 0308 	add.w	r3, r7, #8
 8001d7c:	218c      	movs	r1, #140	@ 0x8c
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff fe4e 	bl	8001a20 <CalculateCRC32>
 8001d84:	4603      	mov	r3, r0
 8001d86:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    return EEPROM_WriteConfig(&config);
 8001d8a:	f107 0308 	add.w	r3, r7, #8
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff fe22 	bl	80019d8 <EEPROM_WriteConfig>
 8001d94:	4603      	mov	r3, r0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3798      	adds	r7, #152	@ 0x98
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	0801ed74 	.word	0x0801ed74

08001da4 <EEPROM_GetYawRatePID>:
/**
  * @brief Get yaw rate PID values
  * @param yaw_rate_pid Pointer to store yaw rate PID
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_GetYawRatePID(PID_t *yaw_rate_pid) {
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b0a6      	sub	sp, #152	@ 0x98
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 8001dac:	f107 0308 	add.w	r3, r7, #8
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff fdd9 	bl	8001968 <EEPROM_ReadConfig>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d005      	beq.n	8001dc8 <EEPROM_GetYawRatePID+0x24>
        printf("Failed to read config during GetYawRatePID\r\n");
 8001dbc:	4809      	ldr	r0, [pc, #36]	@ (8001de4 <EEPROM_GetYawRatePID+0x40>)
 8001dbe:	f018 ffd9 	bl	801ad74 <puts>
        return W25Qxx_ERROR;
 8001dc2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001dc6:	e008      	b.n	8001dda <EEPROM_GetYawRatePID+0x36>
    }
    memcpy(yaw_rate_pid, &config.yaw_rate_pid, sizeof(PID_t));
 8001dc8:	f107 0308 	add.w	r3, r7, #8
 8001dcc:	3370      	adds	r3, #112	@ 0x70
 8001dce:	220c      	movs	r2, #12
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f019 fa15 	bl	801b202 <memcpy>
    return W25Qxx_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3798      	adds	r7, #152	@ 0x98
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	0801eda0 	.word	0x0801eda0

08001de8 <EEPROM_SetYawRatePID>:
/**
  * @brief Set yaw rate PID values
  * @param yaw_rate_pid Pointer to yaw rate PID
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_SetYawRatePID(const PID_t *yaw_rate_pid) {
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b0a6      	sub	sp, #152	@ 0x98
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 8001df0:	f107 0308 	add.w	r3, r7, #8
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff fdb7 	bl	8001968 <EEPROM_ReadConfig>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d005      	beq.n	8001e0c <EEPROM_SetYawRatePID+0x24>
        printf("Failed to read config during SetYawRatePID\r\n");
 8001e00:	4810      	ldr	r0, [pc, #64]	@ (8001e44 <EEPROM_SetYawRatePID+0x5c>)
 8001e02:	f018 ffb7 	bl	801ad74 <puts>
        return W25Qxx_ERROR;
 8001e06:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e0a:	e016      	b.n	8001e3a <EEPROM_SetYawRatePID+0x52>
    }
    memcpy(&config.yaw_rate_pid, yaw_rate_pid, sizeof(PID_t));
 8001e0c:	f107 0308 	add.w	r3, r7, #8
 8001e10:	3370      	adds	r3, #112	@ 0x70
 8001e12:	220c      	movs	r2, #12
 8001e14:	6879      	ldr	r1, [r7, #4]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f019 f9f3 	bl	801b202 <memcpy>
    config.crc = CalculateCRC32((uint8_t*)&config, sizeof(DroneConfig_t) - sizeof(uint32_t));
 8001e1c:	f107 0308 	add.w	r3, r7, #8
 8001e20:	218c      	movs	r1, #140	@ 0x8c
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff fdfc 	bl	8001a20 <CalculateCRC32>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    return EEPROM_WriteConfig(&config);
 8001e2e:	f107 0308 	add.w	r3, r7, #8
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff fdd0 	bl	80019d8 <EEPROM_WriteConfig>
 8001e38:	4603      	mov	r3, r0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3798      	adds	r7, #152	@ 0x98
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	0801edcc 	.word	0x0801edcc

08001e48 <EEPROM_GetAircraftLights>:
/**
  * @brief Get aircraft lights configuration
  * @param lights Pointer to store lights configuration
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_GetAircraftLights(AircraftLights_t *lights) {
 8001e48:	b590      	push	{r4, r7, lr}
 8001e4a:	b0a7      	sub	sp, #156	@ 0x9c
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 8001e50:	f107 0308 	add.w	r3, r7, #8
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff fd87 	bl	8001968 <EEPROM_ReadConfig>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d005      	beq.n	8001e6c <EEPROM_GetAircraftLights+0x24>
        printf("Failed to read config during GetAircraftLights\r\n");
 8001e60:	480a      	ldr	r0, [pc, #40]	@ (8001e8c <EEPROM_GetAircraftLights+0x44>)
 8001e62:	f018 ff87 	bl	801ad74 <puts>
        return W25Qxx_ERROR;
 8001e66:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e6a:	e00a      	b.n	8001e82 <EEPROM_GetAircraftLights+0x3a>
    }
    memcpy(lights, &config.lights, sizeof(AircraftLights_t));
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	461c      	mov	r4, r3
 8001e70:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001e74:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001e76:	6020      	str	r0, [r4, #0]
 8001e78:	6061      	str	r1, [r4, #4]
 8001e7a:	60a2      	str	r2, [r4, #8]
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	7323      	strb	r3, [r4, #12]
    return W25Qxx_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	379c      	adds	r7, #156	@ 0x9c
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd90      	pop	{r4, r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	0801edf8 	.word	0x0801edf8

08001e90 <W25Qxx_WaitForWriteEnd>:

/**
  * @brief Wait for write operation to complete
  * @retval W25Qxx_Result_t
  */
static W25Qxx_Result_t W25Qxx_WaitForWriteEnd(void) {
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b096      	sub	sp, #88	@ 0x58
 8001e94:	af00      	add	r7, sp, #0
    OSPI_RegularCmdTypeDef cmd = {0};
 8001e96:	f107 0308 	add.w	r3, r7, #8
 8001e9a:	2250      	movs	r2, #80	@ 0x50
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f019 f8b2 	bl	801b008 <memset>
    uint8_t status;

    cmd.OperationType = HAL_OSPI_OPTYPE_COMMON_CFG;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	60bb      	str	r3, [r7, #8]
    cmd.Instruction = W25Qxx_CMD_READ_STATUS1;
 8001ea8:	2305      	movs	r3, #5
 8001eaa:	613b      	str	r3, [r7, #16]
    cmd.InstructionMode = HAL_OSPI_INSTRUCTION_1_LINE;
 8001eac:	2301      	movs	r3, #1
 8001eae:	617b      	str	r3, [r7, #20]
    cmd.InstructionSize = HAL_OSPI_INSTRUCTION_8_BITS;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	61bb      	str	r3, [r7, #24]
    cmd.AddressMode = HAL_OSPI_ADDRESS_NONE;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	627b      	str	r3, [r7, #36]	@ 0x24
    cmd.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	637b      	str	r3, [r7, #52]	@ 0x34
    cmd.DataMode = HAL_OSPI_DATA_1_LINE;
 8001ebc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001ec0:	643b      	str	r3, [r7, #64]	@ 0x40
    cmd.NbData = 1;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	647b      	str	r3, [r7, #68]	@ 0x44
    cmd.DummyCycles = 0;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    cmd.DQSMode = HAL_OSPI_DQS_DISABLE;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	653b      	str	r3, [r7, #80]	@ 0x50

    do {
        if (HAL_OSPI_Command(&hospi1, &cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8001ece:	f107 0308 	add.w	r3, r7, #8
 8001ed2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4812      	ldr	r0, [pc, #72]	@ (8001f24 <W25Qxx_WaitForWriteEnd+0x94>)
 8001eda:	f009 fd97 	bl	800ba0c <HAL_OSPI_Command>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d005      	beq.n	8001ef0 <W25Qxx_WaitForWriteEnd+0x60>
            printf("Failed to configure read status command\r\n");
 8001ee4:	4810      	ldr	r0, [pc, #64]	@ (8001f28 <W25Qxx_WaitForWriteEnd+0x98>)
 8001ee6:	f018 ff45 	bl	801ad74 <puts>
            return W25Qxx_ERROR;
 8001eea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001eee:	e015      	b.n	8001f1c <W25Qxx_WaitForWriteEnd+0x8c>
        }
        if (HAL_OSPI_Receive(&hospi1, &status, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8001ef0:	1dfb      	adds	r3, r7, #7
 8001ef2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	480a      	ldr	r0, [pc, #40]	@ (8001f24 <W25Qxx_WaitForWriteEnd+0x94>)
 8001efa:	f009 fe87 	bl	800bc0c <HAL_OSPI_Receive>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d005      	beq.n	8001f10 <W25Qxx_WaitForWriteEnd+0x80>
            printf("Failed to read status\r\n");
 8001f04:	4809      	ldr	r0, [pc, #36]	@ (8001f2c <W25Qxx_WaitForWriteEnd+0x9c>)
 8001f06:	f018 ff35 	bl	801ad74 <puts>
            return W25Qxx_ERROR;
 8001f0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001f0e:	e005      	b.n	8001f1c <W25Qxx_WaitForWriteEnd+0x8c>
        }
    } while (status & 0x01); // Busy bit
 8001f10:	79fb      	ldrb	r3, [r7, #7]
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1d9      	bne.n	8001ece <W25Qxx_WaitForWriteEnd+0x3e>

    return W25Qxx_OK;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3758      	adds	r7, #88	@ 0x58
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	24000d2c 	.word	0x24000d2c
 8001f28:	0801ee58 	.word	0x0801ee58
 8001f2c:	0801ee84 	.word	0x0801ee84

08001f30 <W25Qxx_Read>:
  * @param address Start address
  * @param buffer Buffer to store data
  * @param length Length of data to read
  * @retval W25Qxx_Result_t
  */
static W25Qxx_Result_t W25Qxx_Read(uint32_t address, uint8_t *buffer, uint32_t length) {
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b098      	sub	sp, #96	@ 0x60
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
    OSPI_RegularCmdTypeDef cmd = {0};
 8001f3c:	f107 0310 	add.w	r3, r7, #16
 8001f40:	2250      	movs	r2, #80	@ 0x50
 8001f42:	2100      	movs	r1, #0
 8001f44:	4618      	mov	r0, r3
 8001f46:	f019 f85f 	bl	801b008 <memset>

    cmd.OperationType = HAL_OSPI_OPTYPE_COMMON_CFG;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	613b      	str	r3, [r7, #16]
    cmd.Instruction = W25Qxx_CMD_READ_DATA;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	61bb      	str	r3, [r7, #24]
    cmd.InstructionMode = HAL_OSPI_INSTRUCTION_1_LINE;
 8001f52:	2301      	movs	r3, #1
 8001f54:	61fb      	str	r3, [r7, #28]
    cmd.InstructionSize = HAL_OSPI_INSTRUCTION_8_BITS;
 8001f56:	2300      	movs	r3, #0
 8001f58:	623b      	str	r3, [r7, #32]
    cmd.Address = address;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
    cmd.AddressMode = HAL_OSPI_ADDRESS_1_LINE;
 8001f5e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    cmd.AddressSize = HAL_OSPI_ADDRESS_24_BITS;
 8001f64:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f68:	633b      	str	r3, [r7, #48]	@ 0x30
    cmd.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    cmd.DataMode = HAL_OSPI_DATA_1_LINE;
 8001f6e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001f72:	64bb      	str	r3, [r7, #72]	@ 0x48
    cmd.NbData = length;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	64fb      	str	r3, [r7, #76]	@ 0x4c
    cmd.DummyCycles = 0;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	657b      	str	r3, [r7, #84]	@ 0x54
    cmd.DQSMode = HAL_OSPI_DQS_DISABLE;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	65bb      	str	r3, [r7, #88]	@ 0x58

    if (HAL_OSPI_Command(&hospi1, &cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8001f80:	f107 0310 	add.w	r3, r7, #16
 8001f84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f88:	4619      	mov	r1, r3
 8001f8a:	4810      	ldr	r0, [pc, #64]	@ (8001fcc <W25Qxx_Read+0x9c>)
 8001f8c:	f009 fd3e 	bl	800ba0c <HAL_OSPI_Command>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d005      	beq.n	8001fa2 <W25Qxx_Read+0x72>
        printf("Failed to configure read command\r\n");
 8001f96:	480e      	ldr	r0, [pc, #56]	@ (8001fd0 <W25Qxx_Read+0xa0>)
 8001f98:	f018 feec 	bl	801ad74 <puts>
        return W25Qxx_ERROR;
 8001f9c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001fa0:	e00f      	b.n	8001fc2 <W25Qxx_Read+0x92>
    }

    if (HAL_OSPI_Receive(&hospi1, buffer, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8001fa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fa6:	68b9      	ldr	r1, [r7, #8]
 8001fa8:	4808      	ldr	r0, [pc, #32]	@ (8001fcc <W25Qxx_Read+0x9c>)
 8001faa:	f009 fe2f 	bl	800bc0c <HAL_OSPI_Receive>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d005      	beq.n	8001fc0 <W25Qxx_Read+0x90>
        printf("Failed to read data\r\n");
 8001fb4:	4807      	ldr	r0, [pc, #28]	@ (8001fd4 <W25Qxx_Read+0xa4>)
 8001fb6:	f018 fedd 	bl	801ad74 <puts>
        return W25Qxx_ERROR;
 8001fba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001fbe:	e000      	b.n	8001fc2 <W25Qxx_Read+0x92>
    }

    return W25Qxx_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3760      	adds	r7, #96	@ 0x60
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	24000d2c 	.word	0x24000d2c
 8001fd0:	0801ee9c 	.word	0x0801ee9c
 8001fd4:	0801eec0 	.word	0x0801eec0

08001fd8 <W25Qxx_Write>:
  * @param address Start address
  * @param buffer Pointer to data
  * @param length Length of data to write
  * @retval W25Qxx_Result_t
  */
static W25Qxx_Result_t W25Qxx_Write(uint32_t address, uint8_t *buffer, uint32_t length) {
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b09e      	sub	sp, #120	@ 0x78
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	607a      	str	r2, [r7, #4]
    OSPI_RegularCmdTypeDef cmd = {0};
 8001fe4:	f107 0314 	add.w	r3, r7, #20
 8001fe8:	2250      	movs	r2, #80	@ 0x50
 8001fea:	2100      	movs	r1, #0
 8001fec:	4618      	mov	r0, r3
 8001fee:	f019 f80b 	bl	801b008 <memset>
    uint32_t remaining = length;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	677b      	str	r3, [r7, #116]	@ 0x74
    uint32_t current_address = address;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	673b      	str	r3, [r7, #112]	@ 0x70
    uint8_t *current_buffer = buffer;
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* Erase sector if necessary */
    uint32_t sector = address / W25Qxx_SECTOR_SIZE;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	0b1b      	lsrs	r3, r3, #12
 8002002:	66bb      	str	r3, [r7, #104]	@ 0x68
    cmd.OperationType = HAL_OSPI_OPTYPE_COMMON_CFG;
 8002004:	2300      	movs	r3, #0
 8002006:	617b      	str	r3, [r7, #20]
    cmd.Instruction = W25Qxx_CMD_WRITE_ENABLE;
 8002008:	2306      	movs	r3, #6
 800200a:	61fb      	str	r3, [r7, #28]
    cmd.InstructionMode = HAL_OSPI_INSTRUCTION_1_LINE;
 800200c:	2301      	movs	r3, #1
 800200e:	623b      	str	r3, [r7, #32]
    cmd.InstructionSize = HAL_OSPI_INSTRUCTION_8_BITS;
 8002010:	2300      	movs	r3, #0
 8002012:	627b      	str	r3, [r7, #36]	@ 0x24
    cmd.AddressMode = HAL_OSPI_ADDRESS_NONE;
 8002014:	2300      	movs	r3, #0
 8002016:	633b      	str	r3, [r7, #48]	@ 0x30
    cmd.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8002018:	2300      	movs	r3, #0
 800201a:	643b      	str	r3, [r7, #64]	@ 0x40
    cmd.DataMode = HAL_OSPI_DATA_NONE;
 800201c:	2300      	movs	r3, #0
 800201e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    cmd.DummyCycles = 0;
 8002020:	2300      	movs	r3, #0
 8002022:	65bb      	str	r3, [r7, #88]	@ 0x58
    cmd.DQSMode = HAL_OSPI_DQS_DISABLE;
 8002024:	2300      	movs	r3, #0
 8002026:	65fb      	str	r3, [r7, #92]	@ 0x5c

    if (HAL_OSPI_Command(&hospi1, &cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8002028:	f107 0314 	add.w	r3, r7, #20
 800202c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002030:	4619      	mov	r1, r3
 8002032:	484f      	ldr	r0, [pc, #316]	@ (8002170 <W25Qxx_Write+0x198>)
 8002034:	f009 fcea 	bl	800ba0c <HAL_OSPI_Command>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d005      	beq.n	800204a <W25Qxx_Write+0x72>
        printf("Failed to enable write for sector erase\r\n");
 800203e:	484d      	ldr	r0, [pc, #308]	@ (8002174 <W25Qxx_Write+0x19c>)
 8002040:	f018 fe98 	bl	801ad74 <puts>
        return W25Qxx_ERROR;
 8002044:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002048:	e08e      	b.n	8002168 <W25Qxx_Write+0x190>
    }

    cmd.Instruction = W25Qxx_CMD_SECTOR_ERASE;
 800204a:	2320      	movs	r3, #32
 800204c:	61fb      	str	r3, [r7, #28]
    cmd.Address = sector * W25Qxx_SECTOR_SIZE;
 800204e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002050:	031b      	lsls	r3, r3, #12
 8002052:	62fb      	str	r3, [r7, #44]	@ 0x2c
    cmd.AddressMode = HAL_OSPI_ADDRESS_1_LINE;
 8002054:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002058:	633b      	str	r3, [r7, #48]	@ 0x30
    cmd.AddressSize = HAL_OSPI_ADDRESS_24_BITS;
 800205a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800205e:	637b      	str	r3, [r7, #52]	@ 0x34

    if (HAL_OSPI_Command(&hospi1, &cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8002060:	f107 0314 	add.w	r3, r7, #20
 8002064:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002068:	4619      	mov	r1, r3
 800206a:	4841      	ldr	r0, [pc, #260]	@ (8002170 <W25Qxx_Write+0x198>)
 800206c:	f009 fcce 	bl	800ba0c <HAL_OSPI_Command>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d005      	beq.n	8002082 <W25Qxx_Write+0xaa>
        printf("Failed to erase sector\r\n");
 8002076:	4840      	ldr	r0, [pc, #256]	@ (8002178 <W25Qxx_Write+0x1a0>)
 8002078:	f018 fe7c 	bl	801ad74 <puts>
        return W25Qxx_ERROR;
 800207c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002080:	e072      	b.n	8002168 <W25Qxx_Write+0x190>
    }

    if (W25Qxx_WaitForWriteEnd() != W25Qxx_OK) {
 8002082:	f7ff ff05 	bl	8001e90 <W25Qxx_WaitForWriteEnd>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d069      	beq.n	8002160 <W25Qxx_Write+0x188>
        printf("Timeout waiting for sector erase\r\n");
 800208c:	483b      	ldr	r0, [pc, #236]	@ (800217c <W25Qxx_Write+0x1a4>)
 800208e:	f018 fe71 	bl	801ad74 <puts>
        return W25Qxx_ERROR;
 8002092:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002096:	e067      	b.n	8002168 <W25Qxx_Write+0x190>
    }

    /* Write data in pages */
    while (remaining > 0) {
        uint32_t page_size = (remaining > W25Qxx_PAGE_SIZE) ? W25Qxx_PAGE_SIZE : remaining;
 8002098:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800209a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800209e:	bf28      	it	cs
 80020a0:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 80020a4:	667b      	str	r3, [r7, #100]	@ 0x64

        cmd.Instruction = W25Qxx_CMD_WRITE_ENABLE;
 80020a6:	2306      	movs	r3, #6
 80020a8:	61fb      	str	r3, [r7, #28]
        cmd.AddressMode = HAL_OSPI_ADDRESS_NONE;
 80020aa:	2300      	movs	r3, #0
 80020ac:	633b      	str	r3, [r7, #48]	@ 0x30
        cmd.DataMode = HAL_OSPI_DATA_NONE;
 80020ae:	2300      	movs	r3, #0
 80020b0:	64fb      	str	r3, [r7, #76]	@ 0x4c

        if (HAL_OSPI_Command(&hospi1, &cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 80020b2:	f107 0314 	add.w	r3, r7, #20
 80020b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020ba:	4619      	mov	r1, r3
 80020bc:	482c      	ldr	r0, [pc, #176]	@ (8002170 <W25Qxx_Write+0x198>)
 80020be:	f009 fca5 	bl	800ba0c <HAL_OSPI_Command>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d005      	beq.n	80020d4 <W25Qxx_Write+0xfc>
            printf("Failed to enable write for page program\r\n");
 80020c8:	482d      	ldr	r0, [pc, #180]	@ (8002180 <W25Qxx_Write+0x1a8>)
 80020ca:	f018 fe53 	bl	801ad74 <puts>
            return W25Qxx_ERROR;
 80020ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80020d2:	e049      	b.n	8002168 <W25Qxx_Write+0x190>
        }

        cmd.Instruction = W25Qxx_CMD_PAGE_PROGRAM;
 80020d4:	2302      	movs	r3, #2
 80020d6:	61fb      	str	r3, [r7, #28]
        cmd.Address = current_address;
 80020d8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80020da:	62fb      	str	r3, [r7, #44]	@ 0x2c
        cmd.AddressMode = HAL_OSPI_ADDRESS_1_LINE;
 80020dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020e0:	633b      	str	r3, [r7, #48]	@ 0x30
        cmd.AddressSize = HAL_OSPI_ADDRESS_24_BITS;
 80020e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80020e6:	637b      	str	r3, [r7, #52]	@ 0x34
        cmd.DataMode = HAL_OSPI_DATA_1_LINE;
 80020e8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80020ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
        cmd.NbData = page_size;
 80020ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80020f0:	653b      	str	r3, [r7, #80]	@ 0x50

        if (HAL_OSPI_Command(&hospi1, &cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 80020f2:	f107 0314 	add.w	r3, r7, #20
 80020f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020fa:	4619      	mov	r1, r3
 80020fc:	481c      	ldr	r0, [pc, #112]	@ (8002170 <W25Qxx_Write+0x198>)
 80020fe:	f009 fc85 	bl	800ba0c <HAL_OSPI_Command>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d005      	beq.n	8002114 <W25Qxx_Write+0x13c>
            printf("Failed to configure page program command\r\n");
 8002108:	481e      	ldr	r0, [pc, #120]	@ (8002184 <W25Qxx_Write+0x1ac>)
 800210a:	f018 fe33 	bl	801ad74 <puts>
            return W25Qxx_ERROR;
 800210e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002112:	e029      	b.n	8002168 <W25Qxx_Write+0x190>
        }

        if (HAL_OSPI_Transmit(&hospi1, current_buffer, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8002114:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002118:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800211a:	4815      	ldr	r0, [pc, #84]	@ (8002170 <W25Qxx_Write+0x198>)
 800211c:	f009 fd03 	bl	800bb26 <HAL_OSPI_Transmit>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d005      	beq.n	8002132 <W25Qxx_Write+0x15a>
            printf("Failed to write page data\r\n");
 8002126:	4818      	ldr	r0, [pc, #96]	@ (8002188 <W25Qxx_Write+0x1b0>)
 8002128:	f018 fe24 	bl	801ad74 <puts>
            return W25Qxx_ERROR;
 800212c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002130:	e01a      	b.n	8002168 <W25Qxx_Write+0x190>
        }

        if (W25Qxx_WaitForWriteEnd() != W25Qxx_OK) {
 8002132:	f7ff fead 	bl	8001e90 <W25Qxx_WaitForWriteEnd>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d005      	beq.n	8002148 <W25Qxx_Write+0x170>
            printf("Timeout waiting for page write\r\n");
 800213c:	4813      	ldr	r0, [pc, #76]	@ (800218c <W25Qxx_Write+0x1b4>)
 800213e:	f018 fe19 	bl	801ad74 <puts>
            return W25Qxx_ERROR;
 8002142:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002146:	e00f      	b.n	8002168 <W25Qxx_Write+0x190>
        }

        remaining -= page_size;
 8002148:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800214a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	677b      	str	r3, [r7, #116]	@ 0x74
        current_address += page_size;
 8002150:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002152:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002154:	4413      	add	r3, r2
 8002156:	673b      	str	r3, [r7, #112]	@ 0x70
        current_buffer += page_size;
 8002158:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800215a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800215c:	4413      	add	r3, r2
 800215e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    while (remaining > 0) {
 8002160:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002162:	2b00      	cmp	r3, #0
 8002164:	d198      	bne.n	8002098 <W25Qxx_Write+0xc0>
    }

    return W25Qxx_OK;
 8002166:	2300      	movs	r3, #0
}
 8002168:	4618      	mov	r0, r3
 800216a:	3778      	adds	r7, #120	@ 0x78
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	24000d2c 	.word	0x24000d2c
 8002174:	0801eed8 	.word	0x0801eed8
 8002178:	0801ef04 	.word	0x0801ef04
 800217c:	0801ef1c 	.word	0x0801ef1c
 8002180:	0801ef40 	.word	0x0801ef40
 8002184:	0801ef6c 	.word	0x0801ef6c
 8002188:	0801ef98 	.word	0x0801ef98
 800218c:	0801efb4 	.word	0x0801efb4

08002190 <ComplementaryFilter_Init>:
    q.y = cr * sp;
    q.z = -sr * sp;  // yaw is ignored
    return q;
}

void ComplementaryFilter_Init(Quaternion* q) {
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
    q->w = 1.0f;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800219e:	601a      	str	r2, [r3, #0]
    q->x = 0.0f;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f04f 0200 	mov.w	r2, #0
 80021a6:	605a      	str	r2, [r3, #4]
    q->y = 0.0f;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f04f 0200 	mov.w	r2, #0
 80021ae:	609a      	str	r2, [r3, #8]
    q->z = 0.0f;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f04f 0200 	mov.w	r2, #0
 80021b6:	60da      	str	r2, [r3, #12]
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <HMC5883L_WriteReg>:
static volatile uint8_t i2c_error = 0;
static uint32_t last_reset_time = 0;
static uint8_t reset_attempts = 0;
static const uint8_t max_reset_attempts = 5;

static void HMC5883L_WriteReg(uint8_t reg, uint8_t value) {
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af02      	add	r7, sp, #8
 80021ca:	4603      	mov	r3, r0
 80021cc:	460a      	mov	r2, r1
 80021ce:	71fb      	strb	r3, [r7, #7]
 80021d0:	4613      	mov	r3, r2
 80021d2:	71bb      	strb	r3, [r7, #6]
    uint8_t tx_data[2] = {reg, value};
 80021d4:	79fb      	ldrb	r3, [r7, #7]
 80021d6:	733b      	strb	r3, [r7, #12]
 80021d8:	79bb      	ldrb	r3, [r7, #6]
 80021da:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, HMC5883L_ADDR, tx_data, 2, 100);
 80021dc:	f107 020c 	add.w	r2, r7, #12
 80021e0:	2364      	movs	r3, #100	@ 0x64
 80021e2:	9300      	str	r3, [sp, #0]
 80021e4:	2302      	movs	r3, #2
 80021e6:	213c      	movs	r1, #60	@ 0x3c
 80021e8:	4803      	ldr	r0, [pc, #12]	@ (80021f8 <HMC5883L_WriteReg+0x34>)
 80021ea:	f007 ff23 	bl	800a034 <HAL_I2C_Master_Transmit>
}
 80021ee:	bf00      	nop
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	24000990 	.word	0x24000990

080021fc <HMC5883L_ReadReg>:

uint8_t HMC5883L_ReadReg(uint8_t reg) {
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af02      	add	r7, sp, #8
 8002202:	4603      	mov	r3, r0
 8002204:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_data;
    HAL_I2C_Master_Transmit(&hi2c1, HMC5883L_ADDR, &reg, 1, 100);
 8002206:	1dfa      	adds	r2, r7, #7
 8002208:	2364      	movs	r3, #100	@ 0x64
 800220a:	9300      	str	r3, [sp, #0]
 800220c:	2301      	movs	r3, #1
 800220e:	213c      	movs	r1, #60	@ 0x3c
 8002210:	4808      	ldr	r0, [pc, #32]	@ (8002234 <HMC5883L_ReadReg+0x38>)
 8002212:	f007 ff0f 	bl	800a034 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, HMC5883L_ADDR, &rx_data, 1, 100);
 8002216:	f107 020f 	add.w	r2, r7, #15
 800221a:	2364      	movs	r3, #100	@ 0x64
 800221c:	9300      	str	r3, [sp, #0]
 800221e:	2301      	movs	r3, #1
 8002220:	213c      	movs	r1, #60	@ 0x3c
 8002222:	4804      	ldr	r0, [pc, #16]	@ (8002234 <HMC5883L_ReadReg+0x38>)
 8002224:	f008 f81e 	bl	800a264 <HAL_I2C_Master_Receive>
    return rx_data;
 8002228:	7bfb      	ldrb	r3, [r7, #15]
}
 800222a:	4618      	mov	r0, r3
 800222c:	3710      	adds	r7, #16
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	24000990 	.word	0x24000990

08002238 <HMC5883L_Init>:

void HMC5883L_Init(void) {
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
    HMC5883L_WriteReg(HMC5883L_CONFIG_A, 0x80); // Soft reset
 800223c:	2180      	movs	r1, #128	@ 0x80
 800223e:	2000      	movs	r0, #0
 8002240:	f7ff ffc0 	bl	80021c4 <HMC5883L_WriteReg>
    HAL_Delay(100);
 8002244:	2064      	movs	r0, #100	@ 0x64
 8002246:	f004 fcbb 	bl	8006bc0 <HAL_Delay>
    HMC5883L_WriteReg(HMC5883L_CONFIG_A, 0x78); // 8-avg, 75 Hz, normal mode
 800224a:	2178      	movs	r1, #120	@ 0x78
 800224c:	2000      	movs	r0, #0
 800224e:	f7ff ffb9 	bl	80021c4 <HMC5883L_WriteReg>
    HMC5883L_WriteReg(HMC5883L_CONFIG_B, 0x20); // ±1.3 Gauss
 8002252:	2120      	movs	r1, #32
 8002254:	2001      	movs	r0, #1
 8002256:	f7ff ffb5 	bl	80021c4 <HMC5883L_WriteReg>
    HMC5883L_WriteReg(HMC5883L_MODE, 0x00);     // Continuous mode
 800225a:	2100      	movs	r1, #0
 800225c:	2002      	movs	r0, #2
 800225e:	f7ff ffb1 	bl	80021c4 <HMC5883L_WriteReg>
    HAL_Delay(10);
 8002262:	200a      	movs	r0, #10
 8002264:	f004 fcac 	bl	8006bc0 <HAL_Delay>
}
 8002268:	bf00      	nop
 800226a:	bd80      	pop	{r7, pc}

0800226c <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f043 0201 	orr.w	r2, r3, #1
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	601a      	str	r2, [r3, #0]
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <LL_SPI_Disable>:
  * @rmtoll CR1          SPE           LL_SPI_Disable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Disable(SPI_TypeDef *SPIx)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f023 0201 	bic.w	r2, r3, #1
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	601a      	str	r2, [r3, #0]
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <LL_SPI_SetMode>:
  *         @arg @ref LL_SPI_MODE_MASTER
  *         @arg @ref LL_SPI_MODE_SLAVE
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetMode(SPI_TypeDef *SPIx, uint32_t Mode)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG2, SPI_CFG2_MASTER, Mode);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	431a      	orrs	r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	60da      	str	r2, [r3, #12]
}
 80022c6:	bf00      	nop
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr

080022d2 <LL_SPI_StartMasterTransfer>:
  * @rmtoll CR1          CSTART        LL_SPI_StartMasterTransfer
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_StartMasterTransfer(SPI_TypeDef *SPIx)
{
 80022d2:	b480      	push	{r7}
 80022d4:	b083      	sub	sp, #12
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_CSTART);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	601a      	str	r2, [r3, #0]
}
 80022e6:	bf00      	nop
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr

080022f2 <LL_SPI_SetClockPhase>:
  *         @arg @ref LL_SPI_PHASE_1EDGE
  *         @arg @ref LL_SPI_PHASE_2EDGE
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetClockPhase(SPI_TypeDef *SPIx, uint32_t ClockPhase)
{
 80022f2:	b480      	push	{r7}
 80022f4:	b083      	sub	sp, #12
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
 80022fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG2, SPI_CFG2_CPHA, ClockPhase);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	431a      	orrs	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	60da      	str	r2, [r3, #12]
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <LL_SPI_SetClockPolarity>:
  *         @arg @ref LL_SPI_POLARITY_LOW
  *         @arg @ref LL_SPI_POLARITY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetClockPolarity(SPI_TypeDef *SPIx, uint32_t ClockPolarity)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG2, SPI_CFG2_CPOL, ClockPolarity);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	431a      	orrs	r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	60da      	str	r2, [r3, #12]
}
 8002332:	bf00      	nop
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr

0800233e <LL_SPI_SetBaudRatePrescaler>:
  *         @arg @ref LL_SPI_BAUDRATEPRESCALER_DIV128
  *         @arg @ref LL_SPI_BAUDRATEPRESCALER_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetBaudRatePrescaler(SPI_TypeDef *SPIx, uint32_t Baudrate)
{
 800233e:	b480      	push	{r7}
 8002340:	b083      	sub	sp, #12
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
 8002346:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG1, SPI_CFG1_MBR, Baudrate);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f023 42e0 	bic.w	r2, r3, #1879048192	@ 0x70000000
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	431a      	orrs	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	609a      	str	r2, [r3, #8]
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <LL_SPI_SetTransferBitOrder>:
  *         @arg @ref LL_SPI_LSB_FIRST
  *         @arg @ref LL_SPI_MSB_FIRST
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetTransferBitOrder(SPI_TypeDef *SPIx, uint32_t BitOrder)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG2, SPI_CFG2_LSBFRST, BitOrder);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	431a      	orrs	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	60da      	str	r2, [r3, #12]
}
 800237e:	bf00      	nop
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr

0800238a <LL_SPI_SetTransferDirection>:
  *         @arg @ref LL_SPI_HALF_DUPLEX_RX
  *         @arg @ref LL_SPI_HALF_DUPLEX_TX
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetTransferDirection(SPI_TypeDef *SPIx, uint32_t TransferDirection)
{
 800238a:	b480      	push	{r7}
 800238c:	b083      	sub	sp, #12
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
 8002392:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_HDDIR,  TransferDirection & SPI_CR1_HDDIR);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023a2:	431a      	orrs	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(SPIx->CFG2, SPI_CFG2_COMM, TransferDirection & SPI_CFG2_COMM);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80023b6:	431a      	orrs	r2, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	60da      	str	r2, [r3, #12]
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <LL_SPI_SetDataWidth>:
  *         @arg @ref LL_SPI_DATAWIDTH_31BIT
  *         @arg @ref LL_SPI_DATAWIDTH_32BIT
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetDataWidth(SPI_TypeDef *SPIx, uint32_t DataWidth)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG1, SPI_CFG1_DSIZE, DataWidth);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f023 021f 	bic.w	r2, r3, #31
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	431a      	orrs	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	609a      	str	r2, [r3, #8]
}
 80023e2:	bf00      	nop
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr

080023ee <LL_SPI_SetFIFOThreshold>:
  *         @arg @ref LL_SPI_FIFO_TH_15DATA
  *         @arg @ref LL_SPI_FIFO_TH_16DATA
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetFIFOThreshold(SPI_TypeDef *SPIx, uint32_t Threshold)
{
 80023ee:	b480      	push	{r7}
 80023f0:	b083      	sub	sp, #12
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
 80023f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG1, SPI_CFG1_FTHLV, Threshold);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f423 72f0 	bic.w	r2, r3, #480	@ 0x1e0
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	431a      	orrs	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	609a      	str	r2, [r3, #8]
}
 8002408:	bf00      	nop
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <LL_SPI_SetNSSMode>:
  *         @arg @ref LL_SPI_NSS_HARD_INPUT
  *         @arg @ref LL_SPI_NSS_HARD_OUTPUT
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetNSSMode(SPI_TypeDef *SPIx, uint32_t NSS)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG2, SPI_CFG2_SSM | SPI_CFG2_SSOE, NSS);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	f023 5210 	bic.w	r2, r3, #603979776	@ 0x24000000
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	431a      	orrs	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	60da      	str	r2, [r3, #12]
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr

0800243a <LL_SPI_IsActiveFlag_RXP>:
  * @rmtoll SR           RXP           LL_SPI_IsActiveFlag_RXP
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0)
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXP(const SPI_TypeDef *SPIx)
{
 800243a:	b480      	push	{r7}
 800243c:	b083      	sub	sp, #12
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXP) == (SPI_SR_RXP)) ? 1UL : 0UL);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	695b      	ldr	r3, [r3, #20]
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	2b01      	cmp	r3, #1
 800244c:	d101      	bne.n	8002452 <LL_SPI_IsActiveFlag_RXP+0x18>
 800244e:	2301      	movs	r3, #1
 8002450:	e000      	b.n	8002454 <LL_SPI_IsActiveFlag_RXP+0x1a>
 8002452:	2300      	movs	r3, #0
}
 8002454:	4618      	mov	r0, r3
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <LL_SPI_IsActiveFlag_TXP>:
  * @rmtoll SR           TXP           LL_SPI_IsActiveFlag_TXP
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0)
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXP(const SPI_TypeDef *SPIx)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXP) == (SPI_SR_TXP)) ? 1UL : 0UL);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	695b      	ldr	r3, [r3, #20]
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b02      	cmp	r3, #2
 8002472:	d101      	bne.n	8002478 <LL_SPI_IsActiveFlag_TXP+0x18>
 8002474:	2301      	movs	r3, #1
 8002476:	e000      	b.n	800247a <LL_SPI_IsActiveFlag_TXP+0x1a>
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr

08002486 <LL_SPI_ReceiveData8>:
  * @rmtoll RXDR         .       LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval 0..0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002486:	b480      	push	{r7}
 8002488:	b083      	sub	sp, #12
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->RXDR));
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	3330      	adds	r3, #48	@ 0x30
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	b2db      	uxtb	r3, r3
}
 8002496:	4618      	mov	r0, r3
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr

080024a2 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData 0..0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 80024a2:	b480      	push	{r7}
 80024a4:	b083      	sub	sp, #12
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
 80024aa:	460b      	mov	r3, r1
 80024ac:	70fb      	strb	r3, [r7, #3]
  *((__IO uint8_t *)&SPIx->TXDR) = TxData;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	3320      	adds	r3, #32
 80024b2:	78fa      	ldrb	r2, [r7, #3]
 80024b4:	701a      	strb	r2, [r3, #0]
}
 80024b6:	bf00      	nop
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
	...

080024c4 <LL_AHB4_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB4_GRP1_EnableClock(uint32_t Periphs)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB4ENR, Periphs);
 80024cc:	4b0a      	ldr	r3, [pc, #40]	@ (80024f8 <LL_AHB4_GRP1_EnableClock+0x34>)
 80024ce:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80024d2:	4909      	ldr	r1, [pc, #36]	@ (80024f8 <LL_AHB4_GRP1_EnableClock+0x34>)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 80024dc:	4b06      	ldr	r3, [pc, #24]	@ (80024f8 <LL_AHB4_GRP1_EnableClock+0x34>)
 80024de:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4013      	ands	r3, r2
 80024e6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80024e8:	68fb      	ldr	r3, [r7, #12]
}
 80024ea:	bf00      	nop
 80024ec:	3714      	adds	r7, #20
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	58024400 	.word	0x58024400

080024fc <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1LENR, Periphs);
 8002504:	4b0a      	ldr	r3, [pc, #40]	@ (8002530 <LL_APB1_GRP1_EnableClock+0x34>)
 8002506:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 800250a:	4909      	ldr	r1, [pc, #36]	@ (8002530 <LL_APB1_GRP1_EnableClock+0x34>)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4313      	orrs	r3, r2
 8002510:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1LENR, Periphs);
 8002514:	4b06      	ldr	r3, [pc, #24]	@ (8002530 <LL_APB1_GRP1_EnableClock+0x34>)
 8002516:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4013      	ands	r3, r2
 800251e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002520:	68fb      	ldr	r3, [r7, #12]
}
 8002522:	bf00      	nop
 8002524:	3714      	adds	r7, #20
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	58024400 	.word	0x58024400

08002534 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(const GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	691a      	ldr	r2, [r3, #16]
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	4013      	ands	r3, r2
 8002546:	683a      	ldr	r2, [r7, #0]
 8002548:	429a      	cmp	r2, r3
 800254a:	d101      	bne.n	8002550 <LL_GPIO_IsInputPinSet+0x1c>
 800254c:	2301      	movs	r3, #1
 800254e:	e000      	b.n	8002552 <LL_GPIO_IsInputPinSet+0x1e>
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr

0800255e <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800255e:	b480      	push	{r7}
 8002560:	b083      	sub	sp, #12
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
 8002566:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	683a      	ldr	r2, [r7, #0]
 800256c:	619a      	str	r2, [r3, #24]
}
 800256e:	bf00      	nop
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800257a:	b480      	push	{r7}
 800257c:	b083      	sub	sp, #12
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
 8002582:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask << 16U);
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	041a      	lsls	r2, r3, #16
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	619a      	str	r2, [r3, #24]
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <ICM42688P_GPIO_SPI_Initialization>:
static uint8_t dma_rx_buffer[ICM42688P_DMA_BUFFER_SIZE];
static volatile uint8_t dma_transfer_complete = 0;
static volatile uint8_t dma_transfer_error = 0;

void ICM42688P_GPIO_SPI_Initialization(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b090      	sub	sp, #64	@ 0x40
 800259c:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800259e:	f107 0318 	add.w	r3, r7, #24
 80025a2:	2228      	movs	r2, #40	@ 0x28
 80025a4:	2100      	movs	r1, #0
 80025a6:	4618      	mov	r0, r3
 80025a8:	f018 fd2e 	bl	801b008 <memset>
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ac:	463b      	mov	r3, r7
 80025ae:	2200      	movs	r2, #0
 80025b0:	601a      	str	r2, [r3, #0]
 80025b2:	605a      	str	r2, [r3, #4]
 80025b4:	609a      	str	r2, [r3, #8]
 80025b6:	60da      	str	r2, [r3, #12]
 80025b8:	611a      	str	r2, [r3, #16]
 80025ba:	615a      	str	r2, [r3, #20]

	/* Peripheral clock enable for STM32H7 */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 80025bc:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80025c0:	f7ff ff9c 	bl	80024fc <LL_APB1_GRP1_EnableClock>

	/* GPIO clock enable for STM32H7 */
	LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOA);
 80025c4:	2001      	movs	r0, #1
 80025c6:	f7ff ff7d 	bl	80024c4 <LL_AHB4_GRP1_EnableClock>
	LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOC);
 80025ca:	2004      	movs	r0, #4
 80025cc:	f7ff ff7a 	bl	80024c4 <LL_AHB4_GRP1_EnableClock>
	/**SPI3 GPIO Configuration for STM32H7
	 * PC10  ------> SPI3_SCK
	 * PC11  ------> SPI3_MISO
	 * PC12  ------> SPI3_MOSI
	 */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 80025d0:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80025d4:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80025d6:	2302      	movs	r3, #2
 80025d8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80025da:	2303      	movs	r3, #3
 80025dc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80025de:	2300      	movs	r3, #0
 80025e0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80025e2:	2300      	movs	r3, #0
 80025e4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_6; // SPI3 alternate function for STM32H7
 80025e6:	2306      	movs	r3, #6
 80025e8:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025ea:	463b      	mov	r3, r7
 80025ec:	4619      	mov	r1, r3
 80025ee:	4830      	ldr	r0, [pc, #192]	@ (80026b0 <ICM42688P_GPIO_SPI_Initialization+0x118>)
 80025f0:	f011 fd9a 	bl	8014128 <LL_GPIO_Init>
	 * PA15  ------> ICM42688P_SPI_CS_PIN (output)
	 * PC8   ------> ICM42688P_INT1_PIN (input)
	 */

	/* Chip Select Pin */
	LL_GPIO_SetOutputPin(ICM42688P_SPI_CS_PORT, ICM42688P_SPI_CS_PIN); // Start with CS high
 80025f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80025f8:	482e      	ldr	r0, [pc, #184]	@ (80026b4 <ICM42688P_GPIO_SPI_Initialization+0x11c>)
 80025fa:	f7ff ffb0 	bl	800255e <LL_GPIO_SetOutputPin>

	GPIO_InitStruct.Pin = ICM42688P_SPI_CS_PIN;
 80025fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002602:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002604:	2301      	movs	r3, #1
 8002606:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002608:	2303      	movs	r3, #3
 800260a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800260c:	2300      	movs	r3, #0
 800260e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002610:	2300      	movs	r3, #0
 8002612:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM42688P_SPI_CS_PORT, &GPIO_InitStruct);
 8002614:	463b      	mov	r3, r7
 8002616:	4619      	mov	r1, r3
 8002618:	4826      	ldr	r0, [pc, #152]	@ (80026b4 <ICM42688P_GPIO_SPI_Initialization+0x11c>)
 800261a:	f011 fd85 	bl	8014128 <LL_GPIO_Init>

	/* Interrupt Pin */
	GPIO_InitStruct.Pin = ICM42688P_INT1_PIN;
 800261e:	2310      	movs	r3, #16
 8002620:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002622:	2300      	movs	r3, #0
 8002624:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002626:	2301      	movs	r3, #1
 8002628:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM42688P_INT1_PORT, &GPIO_InitStruct);
 800262a:	463b      	mov	r3, r7
 800262c:	4619      	mov	r1, r3
 800262e:	4822      	ldr	r0, [pc, #136]	@ (80026b8 <ICM42688P_GPIO_SPI_Initialization+0x120>)
 8002630:	f011 fd7a 	bl	8014128 <LL_GPIO_Init>

	/* STM32H7 SPI3 configuration - Fixed for proper LL driver usage */
	// Disable SPI first
	LL_SPI_Disable(ICM42688P_SPI_CHANNEL);
 8002634:	4821      	ldr	r0, [pc, #132]	@ (80026bc <ICM42688P_GPIO_SPI_Initialization+0x124>)
 8002636:	f7ff fe29 	bl	800228c <LL_SPI_Disable>

	// Configure SPI3 - STM32H7 style
	LL_SPI_SetBaudRatePrescaler(ICM42688P_SPI_CHANNEL, LL_SPI_BAUDRATEPRESCALER_DIV32);
 800263a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800263e:	481f      	ldr	r0, [pc, #124]	@ (80026bc <ICM42688P_GPIO_SPI_Initialization+0x124>)
 8002640:	f7ff fe7d 	bl	800233e <LL_SPI_SetBaudRatePrescaler>
	LL_SPI_SetTransferDirection(ICM42688P_SPI_CHANNEL, LL_SPI_FULL_DUPLEX);
 8002644:	2100      	movs	r1, #0
 8002646:	481d      	ldr	r0, [pc, #116]	@ (80026bc <ICM42688P_GPIO_SPI_Initialization+0x124>)
 8002648:	f7ff fe9f 	bl	800238a <LL_SPI_SetTransferDirection>
	LL_SPI_SetClockPhase(ICM42688P_SPI_CHANNEL, LL_SPI_PHASE_2EDGE);
 800264c:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8002650:	481a      	ldr	r0, [pc, #104]	@ (80026bc <ICM42688P_GPIO_SPI_Initialization+0x124>)
 8002652:	f7ff fe4e 	bl	80022f2 <LL_SPI_SetClockPhase>
	LL_SPI_SetClockPolarity(ICM42688P_SPI_CHANNEL, LL_SPI_POLARITY_HIGH);
 8002656:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800265a:	4818      	ldr	r0, [pc, #96]	@ (80026bc <ICM42688P_GPIO_SPI_Initialization+0x124>)
 800265c:	f7ff fe5c 	bl	8002318 <LL_SPI_SetClockPolarity>
	LL_SPI_SetTransferBitOrder(ICM42688P_SPI_CHANNEL, LL_SPI_MSB_FIRST);
 8002660:	2100      	movs	r1, #0
 8002662:	4816      	ldr	r0, [pc, #88]	@ (80026bc <ICM42688P_GPIO_SPI_Initialization+0x124>)
 8002664:	f7ff fe7e 	bl	8002364 <LL_SPI_SetTransferBitOrder>
	LL_SPI_SetDataWidth(ICM42688P_SPI_CHANNEL, LL_SPI_DATAWIDTH_8BIT);
 8002668:	2107      	movs	r1, #7
 800266a:	4814      	ldr	r0, [pc, #80]	@ (80026bc <ICM42688P_GPIO_SPI_Initialization+0x124>)
 800266c:	f7ff feac 	bl	80023c8 <LL_SPI_SetDataWidth>
	LL_SPI_SetNSSMode(ICM42688P_SPI_CHANNEL, LL_SPI_NSS_SOFT);
 8002670:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 8002674:	4811      	ldr	r0, [pc, #68]	@ (80026bc <ICM42688P_GPIO_SPI_Initialization+0x124>)
 8002676:	f7ff fecd 	bl	8002414 <LL_SPI_SetNSSMode>
	LL_SPI_SetMode(ICM42688P_SPI_CHANNEL, LL_SPI_MODE_MASTER);
 800267a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800267e:	480f      	ldr	r0, [pc, #60]	@ (80026bc <ICM42688P_GPIO_SPI_Initialization+0x124>)
 8002680:	f7ff fe14 	bl	80022ac <LL_SPI_SetMode>

	// STM32H7 specific settings
	LL_SPI_SetFIFOThreshold(ICM42688P_SPI_CHANNEL, LL_SPI_FIFO_TH_01DATA);
 8002684:	2100      	movs	r1, #0
 8002686:	480d      	ldr	r0, [pc, #52]	@ (80026bc <ICM42688P_GPIO_SPI_Initialization+0x124>)
 8002688:	f7ff feb1 	bl	80023ee <LL_SPI_SetFIFOThreshold>

	// Enable SPI
	LL_SPI_Enable(ICM42688P_SPI_CHANNEL);
 800268c:	480b      	ldr	r0, [pc, #44]	@ (80026bc <ICM42688P_GPIO_SPI_Initialization+0x124>)
 800268e:	f7ff fded 	bl	800226c <LL_SPI_Enable>

	// Start SPI (STM32H7 requirement)
	LL_SPI_StartMasterTransfer(ICM42688P_SPI_CHANNEL);
 8002692:	480a      	ldr	r0, [pc, #40]	@ (80026bc <ICM42688P_GPIO_SPI_Initialization+0x124>)
 8002694:	f7ff fe1d 	bl	80022d2 <LL_SPI_StartMasterTransfer>

	CHIP_DESELECT(ICM42688P);
 8002698:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800269c:	4805      	ldr	r0, [pc, #20]	@ (80026b4 <ICM42688P_GPIO_SPI_Initialization+0x11c>)
 800269e:	f7ff ff5e 	bl	800255e <LL_GPIO_SetOutputPin>

	printf("SPI3 initialized for STM32H7\n");
 80026a2:	4807      	ldr	r0, [pc, #28]	@ (80026c0 <ICM42688P_GPIO_SPI_Initialization+0x128>)
 80026a4:	f018 fb66 	bl	801ad74 <puts>
}
 80026a8:	bf00      	nop
 80026aa:	3740      	adds	r7, #64	@ 0x40
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	58020800 	.word	0x58020800
 80026b4:	58020000 	.word	0x58020000
 80026b8:	58021000 	.word	0x58021000
 80026bc:	40003c00 	.word	0x40003c00
 80026c0:	0801efd4 	.word	0x0801efd4

080026c4 <SPI3_SendByte>:



uint8_t SPI3_SendByte(uint8_t data)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	4603      	mov	r3, r0
 80026cc:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXP(ICM42688P_SPI_CHANNEL)==RESET);
 80026ce:	bf00      	nop
 80026d0:	480c      	ldr	r0, [pc, #48]	@ (8002704 <SPI3_SendByte+0x40>)
 80026d2:	f7ff fec5 	bl	8002460 <LL_SPI_IsActiveFlag_TXP>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d0f9      	beq.n	80026d0 <SPI3_SendByte+0xc>
	LL_SPI_TransmitData8(ICM42688P_SPI_CHANNEL, data);
 80026dc:	79fb      	ldrb	r3, [r7, #7]
 80026de:	4619      	mov	r1, r3
 80026e0:	4808      	ldr	r0, [pc, #32]	@ (8002704 <SPI3_SendByte+0x40>)
 80026e2:	f7ff fede 	bl	80024a2 <LL_SPI_TransmitData8>

	while(LL_SPI_IsActiveFlag_RXP(ICM42688P_SPI_CHANNEL)==RESET);
 80026e6:	bf00      	nop
 80026e8:	4806      	ldr	r0, [pc, #24]	@ (8002704 <SPI3_SendByte+0x40>)
 80026ea:	f7ff fea6 	bl	800243a <LL_SPI_IsActiveFlag_RXP>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d0f9      	beq.n	80026e8 <SPI3_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM42688P_SPI_CHANNEL);
 80026f4:	4803      	ldr	r0, [pc, #12]	@ (8002704 <SPI3_SendByte+0x40>)
 80026f6:	f7ff fec6 	bl	8002486 <LL_SPI_ReceiveData8>
 80026fa:	4603      	mov	r3, r0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	40003c00 	.word	0x40003c00

08002708 <ICM42688P_SelectBank>:

//////////////////////////////////////////////////////////////

void ICM42688P_SelectBank(uint8_t bank)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	4603      	mov	r3, r0
 8002710:	71fb      	strb	r3, [r7, #7]
	printf("Selecting bank %d\n", bank);
 8002712:	79fb      	ldrb	r3, [r7, #7]
 8002714:	4619      	mov	r1, r3
 8002716:	4807      	ldr	r0, [pc, #28]	@ (8002734 <ICM42688P_SelectBank+0x2c>)
 8002718:	f018 fac4 	bl	801aca4 <iprintf>
	ICM42688P_WriteByte(ICM42688P_REG_BANK_SEL, bank);
 800271c:	79fb      	ldrb	r3, [r7, #7]
 800271e:	4619      	mov	r1, r3
 8002720:	2076      	movs	r0, #118	@ 0x76
 8002722:	f000 f865 	bl	80027f0 <ICM42688P_WriteByte>
	HAL_Delay(1); // Small delay after bank selection
 8002726:	2001      	movs	r0, #1
 8002728:	f004 fa4a 	bl	8006bc0 <HAL_Delay>
}
 800272c:	bf00      	nop
 800272e:	3708      	adds	r7, #8
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	0801eff4 	.word	0x0801eff4

08002738 <ICM42688P_ReadByte>:

uint8_t ICM42688P_ReadByte(uint8_t reg_addr)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	4603      	mov	r3, r0
 8002740:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	printf("Reading register 0x%02x: ", reg_addr);
 8002742:	79fb      	ldrb	r3, [r7, #7]
 8002744:	4619      	mov	r1, r3
 8002746:	480f      	ldr	r0, [pc, #60]	@ (8002784 <ICM42688P_ReadByte+0x4c>)
 8002748:	f018 faac 	bl	801aca4 <iprintf>

	CHIP_SELECT(ICM42688P);
 800274c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002750:	480d      	ldr	r0, [pc, #52]	@ (8002788 <ICM42688P_ReadByte+0x50>)
 8002752:	f7ff ff12 	bl	800257a <LL_GPIO_ResetOutputPin>

	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8002756:	79fb      	ldrb	r3, [r7, #7]
 8002758:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800275c:	b2db      	uxtb	r3, r3
 800275e:	4618      	mov	r0, r3
 8002760:	f7ff ffb0 	bl	80026c4 <SPI3_SendByte>
	val = SPI3_SendByte(0x00); //Send DUMMY to read data
 8002764:	2000      	movs	r0, #0
 8002766:	f7ff ffad 	bl	80026c4 <SPI3_SendByte>
 800276a:	4603      	mov	r3, r0
 800276c:	73fb      	strb	r3, [r7, #15]

	CHIP_DESELECT(ICM42688P);
 800276e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002772:	4805      	ldr	r0, [pc, #20]	@ (8002788 <ICM42688P_ReadByte+0x50>)
 8002774:	f7ff fef3 	bl	800255e <LL_GPIO_SetOutputPin>

//	printf("0x%02x\n", val);
	return val;
 8002778:	7bfb      	ldrb	r3, [r7, #15]
}
 800277a:	4618      	mov	r0, r3
 800277c:	3710      	adds	r7, #16
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	0801f008 	.word	0x0801f008
 8002788:	58020000 	.word	0x58020000

0800278c <ICM42688P_ReadBytes>:

void ICM42688P_ReadBytes(uint8_t reg_addr, uint8_t len, uint8_t* data)
{
 800278c:	b590      	push	{r4, r7, lr}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	4603      	mov	r3, r0
 8002794:	603a      	str	r2, [r7, #0]
 8002796:	71fb      	strb	r3, [r7, #7]
 8002798:	460b      	mov	r3, r1
 800279a:	71bb      	strb	r3, [r7, #6]
	uint8_t i = 0;
 800279c:	2300      	movs	r3, #0
 800279e:	73fb      	strb	r3, [r7, #15]

	CHIP_SELECT(ICM42688P);
 80027a0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80027a4:	4811      	ldr	r0, [pc, #68]	@ (80027ec <ICM42688P_ReadBytes+0x60>)
 80027a6:	f7ff fee8 	bl	800257a <LL_GPIO_ResetOutputPin>
//	HAL_Delay(1);

	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 80027aa:	79fb      	ldrb	r3, [r7, #7]
 80027ac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7ff ff86 	bl	80026c4 <SPI3_SendByte>
	while(i < len)
 80027b8:	e00a      	b.n	80027d0 <ICM42688P_ReadBytes+0x44>
	{
		data[i++] = SPI3_SendByte(0x00); //Send DUMMY to read data
 80027ba:	7bfb      	ldrb	r3, [r7, #15]
 80027bc:	1c5a      	adds	r2, r3, #1
 80027be:	73fa      	strb	r2, [r7, #15]
 80027c0:	461a      	mov	r2, r3
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	189c      	adds	r4, r3, r2
 80027c6:	2000      	movs	r0, #0
 80027c8:	f7ff ff7c 	bl	80026c4 <SPI3_SendByte>
 80027cc:	4603      	mov	r3, r0
 80027ce:	7023      	strb	r3, [r4, #0]
	while(i < len)
 80027d0:	7bfa      	ldrb	r2, [r7, #15]
 80027d2:	79bb      	ldrb	r3, [r7, #6]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d3f0      	bcc.n	80027ba <ICM42688P_ReadBytes+0x2e>
	}

//	HAL_Delay(1);
	CHIP_DESELECT(ICM42688P);
 80027d8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80027dc:	4803      	ldr	r0, [pc, #12]	@ (80027ec <ICM42688P_ReadBytes+0x60>)
 80027de:	f7ff febe 	bl	800255e <LL_GPIO_SetOutputPin>
}
 80027e2:	bf00      	nop
 80027e4:	3714      	adds	r7, #20
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd90      	pop	{r4, r7, pc}
 80027ea:	bf00      	nop
 80027ec:	58020000 	.word	0x58020000

080027f0 <ICM42688P_WriteByte>:

void ICM42688P_WriteByte(uint8_t reg_addr, uint8_t val)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	4603      	mov	r3, r0
 80027f8:	460a      	mov	r2, r1
 80027fa:	71fb      	strb	r3, [r7, #7]
 80027fc:	4613      	mov	r3, r2
 80027fe:	71bb      	strb	r3, [r7, #6]
//	printf("Writing 0x%02x to register 0x%02x\n", val, reg_addr);

	CHIP_SELECT(ICM42688P);
 8002800:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002804:	480b      	ldr	r0, [pc, #44]	@ (8002834 <ICM42688P_WriteByte+0x44>)
 8002806:	f7ff feb8 	bl	800257a <LL_GPIO_ResetOutputPin>

	SPI3_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 800280a:	79fb      	ldrb	r3, [r7, #7]
 800280c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002810:	b2db      	uxtb	r3, r3
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff ff56 	bl	80026c4 <SPI3_SendByte>
	SPI3_SendByte(val); //Send Data to write
 8002818:	79bb      	ldrb	r3, [r7, #6]
 800281a:	4618      	mov	r0, r3
 800281c:	f7ff ff52 	bl	80026c4 <SPI3_SendByte>

	CHIP_DESELECT(ICM42688P);
 8002820:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002824:	4803      	ldr	r0, [pc, #12]	@ (8002834 <ICM42688P_WriteByte+0x44>)
 8002826:	f7ff fe9a 	bl	800255e <LL_GPIO_SetOutputPin>
}
 800282a:	bf00      	nop
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	58020000 	.word	0x58020000

08002838 <ICM42688P_Initialization>:
	}
	CHIP_DESELECT(ICM42688P);
}

int ICM42688P_Initialization(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
	uint8_t who_am_i = 0;
 800283e:	2300      	movs	r3, #0
 8002840:	71fb      	strb	r3, [r7, #7]
	uint8_t retry_count = 0;
 8002842:	2300      	movs	r3, #0
 8002844:	71bb      	strb	r3, [r7, #6]

	ICM42688P_GPIO_SPI_Initialization();
 8002846:	f7ff fea7 	bl	8002598 <ICM42688P_GPIO_SPI_Initialization>

	printf("Checking ICM42688P...\n");
 800284a:	4847      	ldr	r0, [pc, #284]	@ (8002968 <ICM42688P_Initialization+0x130>)
 800284c:	f018 fa92 	bl	801ad74 <puts>

	// Give some time for the sensor to power up
	HAL_Delay(100);
 8002850:	2064      	movs	r0, #100	@ 0x64
 8002852:	f004 f9b5 	bl	8006bc0 <HAL_Delay>

	// Try to communicate multiple times
	for(retry_count = 0; retry_count < 5; retry_count++)
 8002856:	2300      	movs	r3, #0
 8002858:	71bb      	strb	r3, [r7, #6]
 800285a:	e024      	b.n	80028a6 <ICM42688P_Initialization+0x6e>
	{
		printf("Attempt %d: ", retry_count + 1);
 800285c:	79bb      	ldrb	r3, [r7, #6]
 800285e:	3301      	adds	r3, #1
 8002860:	4619      	mov	r1, r3
 8002862:	4842      	ldr	r0, [pc, #264]	@ (800296c <ICM42688P_Initialization+0x134>)
 8002864:	f018 fa1e 	bl	801aca4 <iprintf>

		// Select Bank 0 (User Bank)
		ICM42688P_SelectBank(ICM42688P_BANK_SEL_0);
 8002868:	2000      	movs	r0, #0
 800286a:	f7ff ff4d 	bl	8002708 <ICM42688P_SelectBank>
		HAL_Delay(10);
 800286e:	200a      	movs	r0, #10
 8002870:	f004 f9a6 	bl	8006bc0 <HAL_Delay>

		// Check WHO_AM_I (0x75)
		who_am_i = ICM42688P_ReadByte(ICM42688P_WHO_AM_I);
 8002874:	2075      	movs	r0, #117	@ 0x75
 8002876:	f7ff ff5f 	bl	8002738 <ICM42688P_ReadByte>
 800287a:	4603      	mov	r3, r0
 800287c:	71fb      	strb	r3, [r7, #7]

		printf("Read WHO_AM_I = 0x%02x\n", who_am_i);
 800287e:	79fb      	ldrb	r3, [r7, #7]
 8002880:	4619      	mov	r1, r3
 8002882:	483b      	ldr	r0, [pc, #236]	@ (8002970 <ICM42688P_Initialization+0x138>)
 8002884:	f018 fa0e 	bl	801aca4 <iprintf>

		// WHO_AM_I should be 0x47 for ICM42688P
		if(who_am_i == ICM42688P_WHO_AM_I_VALUE)
 8002888:	79fb      	ldrb	r3, [r7, #7]
 800288a:	2b47      	cmp	r3, #71	@ 0x47
 800288c:	d105      	bne.n	800289a <ICM42688P_Initialization+0x62>
		{
			printf("ICM42688P who_am_i = 0x%02x...OK\n", who_am_i);
 800288e:	79fb      	ldrb	r3, [r7, #7]
 8002890:	4619      	mov	r1, r3
 8002892:	4838      	ldr	r0, [pc, #224]	@ (8002974 <ICM42688P_Initialization+0x13c>)
 8002894:	f018 fa06 	bl	801aca4 <iprintf>
			break;
 8002898:	e008      	b.n	80028ac <ICM42688P_Initialization+0x74>
		}

		HAL_Delay(50);
 800289a:	2032      	movs	r0, #50	@ 0x32
 800289c:	f004 f990 	bl	8006bc0 <HAL_Delay>
	for(retry_count = 0; retry_count < 5; retry_count++)
 80028a0:	79bb      	ldrb	r3, [r7, #6]
 80028a2:	3301      	adds	r3, #1
 80028a4:	71bb      	strb	r3, [r7, #6]
 80028a6:	79bb      	ldrb	r3, [r7, #6]
 80028a8:	2b04      	cmp	r3, #4
 80028aa:	d9d7      	bls.n	800285c <ICM42688P_Initialization+0x24>
	}

	if(who_am_i != ICM42688P_WHO_AM_I_VALUE)
 80028ac:	79fb      	ldrb	r3, [r7, #7]
 80028ae:	2b47      	cmp	r3, #71	@ 0x47
 80028b0:	d013      	beq.n	80028da <ICM42688P_Initialization+0xa2>
	{
		printf("ICM42688P Communication Failed! Read: 0x%02x, Expected: 0x%02x\n",
 80028b2:	79fb      	ldrb	r3, [r7, #7]
 80028b4:	2247      	movs	r2, #71	@ 0x47
 80028b6:	4619      	mov	r1, r3
 80028b8:	482f      	ldr	r0, [pc, #188]	@ (8002978 <ICM42688P_Initialization+0x140>)
 80028ba:	f018 f9f3 	bl	801aca4 <iprintf>
		       who_am_i, ICM42688P_WHO_AM_I_VALUE);
		printf("Check connections:\n");
 80028be:	482f      	ldr	r0, [pc, #188]	@ (800297c <ICM42688P_Initialization+0x144>)
 80028c0:	f018 fa58 	bl	801ad74 <puts>
		printf("- SPI wiring (MOSI, MISO, SCK, CS)\n");
 80028c4:	482e      	ldr	r0, [pc, #184]	@ (8002980 <ICM42688P_Initialization+0x148>)
 80028c6:	f018 fa55 	bl	801ad74 <puts>
		printf("- Power supply (3.3V)\n");
 80028ca:	482e      	ldr	r0, [pc, #184]	@ (8002984 <ICM42688P_Initialization+0x14c>)
 80028cc:	f018 fa52 	bl	801ad74 <puts>
		printf("- Pull-up on CS if needed\n");
 80028d0:	482d      	ldr	r0, [pc, #180]	@ (8002988 <ICM42688P_Initialization+0x150>)
 80028d2:	f018 fa4f 	bl	801ad74 <puts>
		return 1; //ERROR
 80028d6:	2301      	movs	r3, #1
 80028d8:	e041      	b.n	800295e <ICM42688P_Initialization+0x126>
	}

	// Device Reset
	ICM42688P_WriteByte(ICM42688P_DEVICE_CONFIG, 0x01); // Soft reset
 80028da:	2101      	movs	r1, #1
 80028dc:	2011      	movs	r0, #17
 80028de:	f7ff ff87 	bl	80027f0 <ICM42688P_WriteByte>
	HAL_Delay(50);
 80028e2:	2032      	movs	r0, #50	@ 0x32
 80028e4:	f004 f96c 	bl	8006bc0 <HAL_Delay>

	// Wait for reset to complete
	do {
		HAL_Delay(10);
 80028e8:	200a      	movs	r0, #10
 80028ea:	f004 f969 	bl	8006bc0 <HAL_Delay>
		who_am_i = ICM42688P_ReadByte(ICM42688P_DEVICE_CONFIG);
 80028ee:	2011      	movs	r0, #17
 80028f0:	f7ff ff22 	bl	8002738 <ICM42688P_ReadByte>
 80028f4:	4603      	mov	r3, r0
 80028f6:	71fb      	strb	r3, [r7, #7]
	} while (who_am_i & 0x01);
 80028f8:	79fb      	ldrb	r3, [r7, #7]
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1f2      	bne.n	80028e8 <ICM42688P_Initialization+0xb0>

	// Configure Power Management
	// Turn on gyro and accel in Low Noise mode
	ICM42688P_WriteByte(ICM42688P_PWR_MGMT0,
 8002902:	210f      	movs	r1, #15
 8002904:	204e      	movs	r0, #78	@ 0x4e
 8002906:	f7ff ff73 	bl	80027f0 <ICM42688P_WriteByte>
		ICM42688P_PWR_MGMT0_GYRO_MODE_LN | ICM42688P_PWR_MGMT0_ACCEL_MODE_LN);
	HAL_Delay(50);
 800290a:	2032      	movs	r0, #50	@ 0x32
 800290c:	f004 f958 	bl	8006bc0 <HAL_Delay>

	// Configure Gyroscope
	// Full scale: ±2000 dps, ODR: 1 kHz
	ICM42688P_WriteByte(ICM42688P_GYRO_CONFIG0,
 8002910:	2106      	movs	r1, #6
 8002912:	204f      	movs	r0, #79	@ 0x4f
 8002914:	f7ff ff6c 	bl	80027f0 <ICM42688P_WriteByte>
		(ICM42688P_GYRO_FS_SEL_2000DPS << 5) | ICM42688P_ODR_1KHZ);
	HAL_Delay(10);
 8002918:	200a      	movs	r0, #10
 800291a:	f004 f951 	bl	8006bc0 <HAL_Delay>

	// Configure Accelerometer
	// Full scale: ±16g, ODR: 1 kHz
	ICM42688P_WriteByte(ICM42688P_ACCEL_CONFIG0,
 800291e:	2106      	movs	r1, #6
 8002920:	2050      	movs	r0, #80	@ 0x50
 8002922:	f7ff ff65 	bl	80027f0 <ICM42688P_WriteByte>
		(ICM42688P_ACCEL_FS_SEL_16G << 5) | ICM42688P_ODR_1KHZ);
	HAL_Delay(10);
 8002926:	200a      	movs	r0, #10
 8002928:	f004 f94a 	bl	8006bc0 <HAL_Delay>

	// Configure Gyro and Accel in Low Noise mode with filtering
	ICM42688P_WriteByte(ICM42688P_GYRO_ACCEL_CONFIG0, 0x44); // Enable anti-alias filter
 800292c:	2144      	movs	r1, #68	@ 0x44
 800292e:	2052      	movs	r0, #82	@ 0x52
 8002930:	f7ff ff5e 	bl	80027f0 <ICM42688P_WriteByte>
	HAL_Delay(10);
 8002934:	200a      	movs	r0, #10
 8002936:	f004 f943 	bl	8006bc0 <HAL_Delay>

	// Configure interrupts
	// Enable data ready interrupt on INT1
	ICM42688P_WriteByte(ICM42688P_INT_CONFIG, 0x12); // INT1 push-pull, active high
 800293a:	2112      	movs	r1, #18
 800293c:	2014      	movs	r0, #20
 800293e:	f7ff ff57 	bl	80027f0 <ICM42688P_WriteByte>
	HAL_Delay(10);
 8002942:	200a      	movs	r0, #10
 8002944:	f004 f93c 	bl	8006bc0 <HAL_Delay>

	ICM42688P_WriteByte(ICM42688P_INT_SOURCE0, 0x08); // UI data ready interrupt routed to INT1
 8002948:	2108      	movs	r1, #8
 800294a:	2065      	movs	r0, #101	@ 0x65
 800294c:	f7ff ff50 	bl	80027f0 <ICM42688P_WriteByte>
	HAL_Delay(10);
 8002950:	200a      	movs	r0, #10
 8002952:	f004 f935 	bl	8006bc0 <HAL_Delay>

	printf("ICM42688P initialized successfully!\n");
 8002956:	480d      	ldr	r0, [pc, #52]	@ (800298c <ICM42688P_Initialization+0x154>)
 8002958:	f018 fa0c 	bl	801ad74 <puts>

	return 0; //OK
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	0801f024 	.word	0x0801f024
 800296c:	0801f03c 	.word	0x0801f03c
 8002970:	0801f04c 	.word	0x0801f04c
 8002974:	0801f064 	.word	0x0801f064
 8002978:	0801f088 	.word	0x0801f088
 800297c:	0801f0c8 	.word	0x0801f0c8
 8002980:	0801f0dc 	.word	0x0801f0dc
 8002984:	0801f100 	.word	0x0801f100
 8002988:	0801f118 	.word	0x0801f118
 800298c:	0801f134 	.word	0x0801f134

08002990 <ICM42688P_Get6AxisRawData>:

void ICM42688P_Get6AxisRawData(int16_t* accel, int16_t* gyro)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
	uint8_t data[12];

	// Read accelerometer and gyroscope data (starting from ACCEL_DATA_X1)
	ICM42688P_ReadBytes(ICM42688P_ACCEL_DATA_X1, 12, data);
 800299a:	f107 030c 	add.w	r3, r7, #12
 800299e:	461a      	mov	r2, r3
 80029a0:	210c      	movs	r1, #12
 80029a2:	201f      	movs	r0, #31
 80029a4:	f7ff fef2 	bl	800278c <ICM42688P_ReadBytes>

	// Parse accelerometer data (big endian)
	accel[0] = (int16_t)((data[0] << 8) | data[1]);  // X-axis
 80029a8:	7b3b      	ldrb	r3, [r7, #12]
 80029aa:	b21b      	sxth	r3, r3
 80029ac:	021b      	lsls	r3, r3, #8
 80029ae:	b21a      	sxth	r2, r3
 80029b0:	7b7b      	ldrb	r3, [r7, #13]
 80029b2:	b21b      	sxth	r3, r3
 80029b4:	4313      	orrs	r3, r2
 80029b6:	b21a      	sxth	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	801a      	strh	r2, [r3, #0]
	accel[1] = (int16_t)((data[2] << 8) | data[3]);  // Y-axis
 80029bc:	7bbb      	ldrb	r3, [r7, #14]
 80029be:	b21b      	sxth	r3, r3
 80029c0:	021b      	lsls	r3, r3, #8
 80029c2:	b219      	sxth	r1, r3
 80029c4:	7bfb      	ldrb	r3, [r7, #15]
 80029c6:	b21a      	sxth	r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	3302      	adds	r3, #2
 80029cc:	430a      	orrs	r2, r1
 80029ce:	b212      	sxth	r2, r2
 80029d0:	801a      	strh	r2, [r3, #0]
	accel[2] = (int16_t)((data[4] << 8) | data[5]);  // Z-axis
 80029d2:	7c3b      	ldrb	r3, [r7, #16]
 80029d4:	b21b      	sxth	r3, r3
 80029d6:	021b      	lsls	r3, r3, #8
 80029d8:	b219      	sxth	r1, r3
 80029da:	7c7b      	ldrb	r3, [r7, #17]
 80029dc:	b21a      	sxth	r2, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	3304      	adds	r3, #4
 80029e2:	430a      	orrs	r2, r1
 80029e4:	b212      	sxth	r2, r2
 80029e6:	801a      	strh	r2, [r3, #0]

	// Parse gyroscope data (big endian)
	gyro[0] = (int16_t)((data[6] << 8) | data[7]);   // X-axis
 80029e8:	7cbb      	ldrb	r3, [r7, #18]
 80029ea:	b21b      	sxth	r3, r3
 80029ec:	021b      	lsls	r3, r3, #8
 80029ee:	b21a      	sxth	r2, r3
 80029f0:	7cfb      	ldrb	r3, [r7, #19]
 80029f2:	b21b      	sxth	r3, r3
 80029f4:	4313      	orrs	r3, r2
 80029f6:	b21a      	sxth	r2, r3
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	801a      	strh	r2, [r3, #0]
	gyro[1] = (int16_t)((data[8] << 8) | data[9]);   // Y-axis
 80029fc:	7d3b      	ldrb	r3, [r7, #20]
 80029fe:	b21b      	sxth	r3, r3
 8002a00:	021b      	lsls	r3, r3, #8
 8002a02:	b219      	sxth	r1, r3
 8002a04:	7d7b      	ldrb	r3, [r7, #21]
 8002a06:	b21a      	sxth	r2, r3
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	3302      	adds	r3, #2
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	b212      	sxth	r2, r2
 8002a10:	801a      	strh	r2, [r3, #0]
	gyro[2] = (int16_t)((data[10] << 8) | data[11]); // Z-axis
 8002a12:	7dbb      	ldrb	r3, [r7, #22]
 8002a14:	b21b      	sxth	r3, r3
 8002a16:	021b      	lsls	r3, r3, #8
 8002a18:	b219      	sxth	r1, r3
 8002a1a:	7dfb      	ldrb	r3, [r7, #23]
 8002a1c:	b21a      	sxth	r2, r3
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	3304      	adds	r3, #4
 8002a22:	430a      	orrs	r2, r1
 8002a24:	b212      	sxth	r2, r2
 8002a26:	801a      	strh	r2, [r3, #0]
}
 8002a28:	bf00      	nop
 8002a2a:	3718      	adds	r7, #24
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <ICM42688P_DataReady>:
	accel[1] = (int16_t)((data[2] << 8) | data[3]);  // Y-axis
	accel[2] = (int16_t)((data[4] << 8) | data[5]);  // Z-axis
}

int ICM42688P_DataReady(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
	// Check if INT1 pin is high (data ready)
	return LL_GPIO_IsInputPinSet(ICM42688P_INT1_PORT, ICM42688P_INT1_PIN);
 8002a34:	2110      	movs	r1, #16
 8002a36:	4803      	ldr	r0, [pc, #12]	@ (8002a44 <ICM42688P_DataReady+0x14>)
 8002a38:	f7ff fd7c 	bl	8002534 <LL_GPIO_IsInputPinSet>
 8002a3c:	4603      	mov	r3, r0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	58021000 	.word	0x58021000

08002a48 <swap_buffers>:
#define WS2812_LATCH_DELAY_MS 1   // >50us required for WS2812 reset

// ----------------------------
// Helper: Swap Buffers Safely
// ----------------------------
static inline void swap_buffers(void) {
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
    uint32_t *temp = active_buffer;
 8002a4e:	4b08      	ldr	r3, [pc, #32]	@ (8002a70 <swap_buffers+0x28>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	607b      	str	r3, [r7, #4]
    active_buffer = prepare_buffer;
 8002a54:	4b07      	ldr	r3, [pc, #28]	@ (8002a74 <swap_buffers+0x2c>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a05      	ldr	r2, [pc, #20]	@ (8002a70 <swap_buffers+0x28>)
 8002a5a:	6013      	str	r3, [r2, #0]
    prepare_buffer = temp;
 8002a5c:	4a05      	ldr	r2, [pc, #20]	@ (8002a74 <swap_buffers+0x2c>)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6013      	str	r3, [r2, #0]
}
 8002a62:	bf00      	nop
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	24000000 	.word	0x24000000
 8002a74:	24000004 	.word	0x24000004

08002a78 <AIRCRAFTLIGHTS_Init>:

// ----------------------------
// Initialize (Clear LEDs)
// ----------------------------
void AIRCRAFTLIGHTS_Init(TIM_HandleTypeDef *htim) {
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
    for (uint32_t i = 0; i < AIRCRAFT_BUFFER_SIZE; i++) {
 8002a80:	2300      	movs	r3, #0
 8002a82:	60fb      	str	r3, [r7, #12]
 8002a84:	e00c      	b.n	8002aa0 <AIRCRAFTLIGHTS_Init+0x28>
        pwm_buffer_a[i] = DUTY_RESET;
 8002a86:	4a0b      	ldr	r2, [pc, #44]	@ (8002ab4 <AIRCRAFTLIGHTS_Init+0x3c>)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2100      	movs	r1, #0
 8002a8c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        pwm_buffer_b[i] = DUTY_RESET;
 8002a90:	4a09      	ldr	r2, [pc, #36]	@ (8002ab8 <AIRCRAFTLIGHTS_Init+0x40>)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2100      	movs	r1, #0
 8002a96:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (uint32_t i = 0; i < AIRCRAFT_BUFFER_SIZE; i++) {
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2b91      	cmp	r3, #145	@ 0x91
 8002aa4:	d9ef      	bls.n	8002a86 <AIRCRAFTLIGHTS_Init+0xe>
    }
}
 8002aa6:	bf00      	nop
 8002aa8:	bf00      	nop
 8002aaa:	3714      	adds	r7, #20
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr
 8002ab4:	2400025c 	.word	0x2400025c
 8002ab8:	240004a4 	.word	0x240004a4

08002abc <aircraftlights>:
}

// ----------------------------
// Set Color for Individual LED
// ----------------------------
void aircraftlights(uint32_t led_index, uint8_t red, uint8_t green, uint8_t blue, float brightness) {
 8002abc:	b480      	push	{r7}
 8002abe:	b087      	sub	sp, #28
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	4608      	mov	r0, r1
 8002ac6:	4611      	mov	r1, r2
 8002ac8:	461a      	mov	r2, r3
 8002aca:	ed87 0a01 	vstr	s0, [r7, #4]
 8002ace:	4603      	mov	r3, r0
 8002ad0:	72fb      	strb	r3, [r7, #11]
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	72bb      	strb	r3, [r7, #10]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	727b      	strb	r3, [r7, #9]
    if (led_index < AIRCRAFT_LED_COUNT) {
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2b03      	cmp	r3, #3
 8002ade:	d865      	bhi.n	8002bac <aircraftlights+0xf0>
        if (brightness < 0.0f) brightness = 0.0f;
 8002ae0:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ae4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aec:	d502      	bpl.n	8002af4 <aircraftlights+0x38>
 8002aee:	f04f 0300 	mov.w	r3, #0
 8002af2:	607b      	str	r3, [r7, #4]
        if (brightness > 1.0f) brightness = 1.0f;
 8002af4:	edd7 7a01 	vldr	s15, [r7, #4]
 8002af8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002afc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b04:	dd02      	ble.n	8002b0c <aircraftlights+0x50>
 8002b06:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002b0a:	607b      	str	r3, [r7, #4]

        float total_brightness = brightness * global_brightness;
 8002b0c:	4b2a      	ldr	r3, [pc, #168]	@ (8002bb8 <aircraftlights+0xfc>)
 8002b0e:	edd3 7a00 	vldr	s15, [r3]
 8002b12:	ed97 7a01 	vldr	s14, [r7, #4]
 8002b16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b1a:	edc7 7a05 	vstr	s15, [r7, #20]
        led_data[led_index][0] = (uint8_t)(green * total_brightness); // WS2812 uses GRB
 8002b1e:	7abb      	ldrb	r3, [r7, #10]
 8002b20:	ee07 3a90 	vmov	s15, r3
 8002b24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b28:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b34:	edc7 7a00 	vstr	s15, [r7]
 8002b38:	783b      	ldrb	r3, [r7, #0]
 8002b3a:	b2d8      	uxtb	r0, r3
 8002b3c:	491f      	ldr	r1, [pc, #124]	@ (8002bbc <aircraftlights+0x100>)
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	4613      	mov	r3, r2
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	4413      	add	r3, r2
 8002b46:	440b      	add	r3, r1
 8002b48:	4602      	mov	r2, r0
 8002b4a:	701a      	strb	r2, [r3, #0]
        led_data[led_index][1] = (uint8_t)(red   * total_brightness);
 8002b4c:	7afb      	ldrb	r3, [r7, #11]
 8002b4e:	ee07 3a90 	vmov	s15, r3
 8002b52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b56:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b62:	edc7 7a00 	vstr	s15, [r7]
 8002b66:	783b      	ldrb	r3, [r7, #0]
 8002b68:	b2d8      	uxtb	r0, r3
 8002b6a:	4914      	ldr	r1, [pc, #80]	@ (8002bbc <aircraftlights+0x100>)
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	4413      	add	r3, r2
 8002b74:	440b      	add	r3, r1
 8002b76:	3301      	adds	r3, #1
 8002b78:	4602      	mov	r2, r0
 8002b7a:	701a      	strb	r2, [r3, #0]
        led_data[led_index][2] = (uint8_t)(blue  * total_brightness);
 8002b7c:	7a7b      	ldrb	r3, [r7, #9]
 8002b7e:	ee07 3a90 	vmov	s15, r3
 8002b82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b86:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b92:	edc7 7a00 	vstr	s15, [r7]
 8002b96:	783b      	ldrb	r3, [r7, #0]
 8002b98:	b2d8      	uxtb	r0, r3
 8002b9a:	4908      	ldr	r1, [pc, #32]	@ (8002bbc <aircraftlights+0x100>)
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	4413      	add	r3, r2
 8002ba4:	440b      	add	r3, r1
 8002ba6:	3302      	adds	r3, #2
 8002ba8:	4602      	mov	r2, r0
 8002baa:	701a      	strb	r2, [r3, #0]
    }
}
 8002bac:	bf00      	nop
 8002bae:	371c      	adds	r7, #28
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr
 8002bb8:	24000008 	.word	0x24000008
 8002bbc:	240006ec 	.word	0x240006ec

08002bc0 <encode_leds_to_pwm>:

// ----------------------------
// Encode LED Data → PWM Buffer
// ----------------------------
static void encode_leds_to_pwm(uint32_t *buffer) {
 8002bc0:	b480      	push	{r7}
 8002bc2:	b089      	sub	sp, #36	@ 0x24
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
    uint32_t buffer_index = 0;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	61fb      	str	r3, [r7, #28]

    // Clear buffer
    for (uint32_t i = 0; i < AIRCRAFT_BUFFER_SIZE; i++) {
 8002bcc:	2300      	movs	r3, #0
 8002bce:	61bb      	str	r3, [r7, #24]
 8002bd0:	e008      	b.n	8002be4 <encode_leds_to_pwm+0x24>
        buffer[i] = DUTY_RESET;
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	4413      	add	r3, r2
 8002bda:	2200      	movs	r2, #0
 8002bdc:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < AIRCRAFT_BUFFER_SIZE; i++) {
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	3301      	adds	r3, #1
 8002be2:	61bb      	str	r3, [r7, #24]
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	2b91      	cmp	r3, #145	@ 0x91
 8002be8:	d9f3      	bls.n	8002bd2 <encode_leds_to_pwm+0x12>
    }

    // Encode GRB
    for (uint32_t led = 0; led < AIRCRAFT_LED_COUNT; led++) {
 8002bea:	2300      	movs	r3, #0
 8002bec:	617b      	str	r3, [r7, #20]
 8002bee:	e034      	b.n	8002c5a <encode_leds_to_pwm+0x9a>
        for (uint32_t color = 0; color < 3; color++) {
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	613b      	str	r3, [r7, #16]
 8002bf4:	e02b      	b.n	8002c4e <encode_leds_to_pwm+0x8e>
            for (int8_t bit = 7; bit >= 0; bit--) {
 8002bf6:	2307      	movs	r3, #7
 8002bf8:	73fb      	strb	r3, [r7, #15]
 8002bfa:	e021      	b.n	8002c40 <encode_leds_to_pwm+0x80>
                buffer[buffer_index++] = (led_data[led][color] & (1 << bit)) ? DUTY_1 : DUTY_0;
 8002bfc:	491c      	ldr	r1, [pc, #112]	@ (8002c70 <encode_leds_to_pwm+0xb0>)
 8002bfe:	697a      	ldr	r2, [r7, #20]
 8002c00:	4613      	mov	r3, r2
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	4413      	add	r3, r2
 8002c06:	18ca      	adds	r2, r1, r3
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	461a      	mov	r2, r3
 8002c10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c14:	fa42 f303 	asr.w	r3, r2, r3
 8002c18:	f003 0301 	and.w	r3, r3, #1
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d001      	beq.n	8002c24 <encode_leds_to_pwm+0x64>
 8002c20:	22a0      	movs	r2, #160	@ 0xa0
 8002c22:	e000      	b.n	8002c26 <encode_leds_to_pwm+0x66>
 8002c24:	2250      	movs	r2, #80	@ 0x50
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	1c59      	adds	r1, r3, #1
 8002c2a:	61f9      	str	r1, [r7, #28]
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	6879      	ldr	r1, [r7, #4]
 8002c30:	440b      	add	r3, r1
 8002c32:	601a      	str	r2, [r3, #0]
            for (int8_t bit = 7; bit >= 0; bit--) {
 8002c34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	73fb      	strb	r3, [r7, #15]
 8002c40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	dad9      	bge.n	8002bfc <encode_leds_to_pwm+0x3c>
        for (uint32_t color = 0; color < 3; color++) {
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	613b      	str	r3, [r7, #16]
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d9d0      	bls.n	8002bf6 <encode_leds_to_pwm+0x36>
    for (uint32_t led = 0; led < AIRCRAFT_LED_COUNT; led++) {
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	3301      	adds	r3, #1
 8002c58:	617b      	str	r3, [r7, #20]
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	2b03      	cmp	r3, #3
 8002c5e:	d9c7      	bls.n	8002bf0 <encode_leds_to_pwm+0x30>
            }
        }
    }
}
 8002c60:	bf00      	nop
 8002c62:	bf00      	nop
 8002c64:	3724      	adds	r7, #36	@ 0x24
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	240006ec 	.word	0x240006ec

08002c74 <aircraftlights_update>:

// ----------------------------
// Send Data via DMA (No Flicker)
// ----------------------------
void aircraftlights_update(void) {
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
    // Encode into the non-active buffer
    encode_leds_to_pwm(prepare_buffer);
 8002c78:	4b24      	ldr	r3, [pc, #144]	@ (8002d0c <aircraftlights_update+0x98>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7ff ff9f 	bl	8002bc0 <encode_leds_to_pwm>
    swap_buffers();
 8002c82:	f7ff fee1 	bl	8002a48 <swap_buffers>

    // Disable interrupts briefly (timing critical)
    taskENTER_CRITICAL();
 8002c86:	f015 fff7 	bl	8018c78 <vPortEnterCritical>
  __ASM volatile ("cpsid i" : : : "memory");
 8002c8a:	b672      	cpsid	i
}
 8002c8c:	bf00      	nop
    __disable_irq();

    // Stop any ongoing DMA
    HAL_TIM_PWM_Stop_DMA(&AIRCRAFTLIGHTS_TIMER, AIRCRAFTLIGHTS_TIMER_TIMER_CHANNEL);
 8002c8e:	2108      	movs	r1, #8
 8002c90:	481f      	ldr	r0, [pc, #124]	@ (8002d10 <aircraftlights_update+0x9c>)
 8002c92:	f00d fa9f 	bl	80101d4 <HAL_TIM_PWM_Stop_DMA>
    HAL_TIM_Base_Stop(&AIRCRAFTLIGHTS_TIMER);
 8002c96:	481e      	ldr	r0, [pc, #120]	@ (8002d10 <aircraftlights_update+0x9c>)
 8002c98:	f00c fe3c 	bl	800f914 <HAL_TIM_Base_Stop>

    // Re-enable DMA IRQ
    HAL_NVIC_SetPriority(AIRCRAFTLIGHTS_TIMER_DMA_IRQn, 5, 0);
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	2105      	movs	r1, #5
 8002ca0:	2010      	movs	r0, #16
 8002ca2:	f004 f869 	bl	8006d78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AIRCRAFTLIGHTS_TIMER_DMA_IRQn);
 8002ca6:	2010      	movs	r0, #16
 8002ca8:	f004 f880 	bl	8006dac <HAL_NVIC_EnableIRQ>

    aircraftlights_data_sent_flag = 0;
 8002cac:	4b19      	ldr	r3, [pc, #100]	@ (8002d14 <aircraftlights_update+0xa0>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	701a      	strb	r2, [r3, #0]

    // Start DMA with timing protected
    HAL_TIM_Base_Start(&AIRCRAFTLIGHTS_TIMER);
 8002cb2:	4817      	ldr	r0, [pc, #92]	@ (8002d10 <aircraftlights_update+0x9c>)
 8002cb4:	f00c fdb0 	bl	800f818 <HAL_TIM_Base_Start>
    HAL_TIM_PWM_Start_DMA(&AIRCRAFTLIGHTS_TIMER, AIRCRAFTLIGHTS_TIMER_TIMER_CHANNEL,
 8002cb8:	4b17      	ldr	r3, [pc, #92]	@ (8002d18 <aircraftlights_update+0xa4>)
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	2392      	movs	r3, #146	@ 0x92
 8002cbe:	2108      	movs	r1, #8
 8002cc0:	4813      	ldr	r0, [pc, #76]	@ (8002d10 <aircraftlights_update+0x9c>)
 8002cc2:	f00d f853 	bl	800fd6c <HAL_TIM_PWM_Start_DMA>
  __ASM volatile ("cpsie i" : : : "memory");
 8002cc6:	b662      	cpsie	i
}
 8002cc8:	bf00      	nop
                          active_buffer, AIRCRAFT_BUFFER_SIZE);

    // Re-enable IRQs immediately after DMA start
    __enable_irq();
    taskEXIT_CRITICAL();
 8002cca:	f016 f807 	bl	8018cdc <vPortExitCritical>

    // Wait for DMA to complete (use semaphore or fallback)
    if (aircraftlights_dma_semaphore != NULL) {
 8002cce:	4b13      	ldr	r3, [pc, #76]	@ (8002d1c <aircraftlights_update+0xa8>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00f      	beq.n	8002cf6 <aircraftlights_update+0x82>
        xSemaphoreTake(aircraftlights_dma_semaphore, pdMS_TO_TICKS(2));
 8002cd6:	4b11      	ldr	r3, [pc, #68]	@ (8002d1c <aircraftlights_update+0xa8>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2102      	movs	r1, #2
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f013 fe89 	bl	80169f4 <xQueueSemaphoreTake>
 8002ce2:	e00d      	b.n	8002d00 <aircraftlights_update+0x8c>
    } else {
        while (!aircraftlights_data_sent_flag) {
            if (HAL_DMA_GetState(&AIRCRAFTLIGHTS_DMA) == HAL_DMA_STATE_READY) {
 8002ce4:	480e      	ldr	r0, [pc, #56]	@ (8002d20 <aircraftlights_update+0xac>)
 8002ce6:	f006 fb37 	bl	8009358 <HAL_DMA_GetState>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d102      	bne.n	8002cf6 <aircraftlights_update+0x82>
                aircraftlights_data_sent_flag = 1;
 8002cf0:	4b08      	ldr	r3, [pc, #32]	@ (8002d14 <aircraftlights_update+0xa0>)
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	701a      	strb	r2, [r3, #0]
        while (!aircraftlights_data_sent_flag) {
 8002cf6:	4b07      	ldr	r3, [pc, #28]	@ (8002d14 <aircraftlights_update+0xa0>)
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d0f1      	beq.n	8002ce4 <aircraftlights_update+0x70>
            }
        }
    }

    // WS2812 latch delay to ensure proper reset
    vTaskDelay(pdMS_TO_TICKS(WS2812_LATCH_DELAY_MS));
 8002d00:	2001      	movs	r0, #1
 8002d02:	f014 fb3f 	bl	8017384 <vTaskDelay>
}
 8002d06:	bf00      	nop
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	24000004 	.word	0x24000004
 8002d10:	24000e8c 	.word	0x24000e8c
 8002d14:	24000258 	.word	0x24000258
 8002d18:	24000000 	.word	0x24000000
 8002d1c:	2400096c 	.word	0x2400096c
 8002d20:	24000f9c 	.word	0x24000f9c

08002d24 <AircraftLights_PWM_Callback>:

// ----------------------------
// DMA Complete ISR
// ----------------------------
void AircraftLights_PWM_Callback(TIM_HandleTypeDef *htim) {
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == AIRCRAFTLIGHTS_TIMER.Instance) {
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	4b15      	ldr	r3, [pc, #84]	@ (8002d88 <AircraftLights_PWM_Callback+0x64>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d122      	bne.n	8002d7e <AircraftLights_PWM_Callback+0x5a>
        HAL_TIM_PWM_Stop_DMA(&AIRCRAFTLIGHTS_TIMER, AIRCRAFTLIGHTS_TIMER_TIMER_CHANNEL);
 8002d38:	2108      	movs	r1, #8
 8002d3a:	4813      	ldr	r0, [pc, #76]	@ (8002d88 <AircraftLights_PWM_Callback+0x64>)
 8002d3c:	f00d fa4a 	bl	80101d4 <HAL_TIM_PWM_Stop_DMA>
        HAL_TIM_Base_Stop(&AIRCRAFTLIGHTS_TIMER);
 8002d40:	4811      	ldr	r0, [pc, #68]	@ (8002d88 <AircraftLights_PWM_Callback+0x64>)
 8002d42:	f00c fde7 	bl	800f914 <HAL_TIM_Base_Stop>
        aircraftlights_data_sent_flag = 1;
 8002d46:	4b11      	ldr	r3, [pc, #68]	@ (8002d8c <AircraftLights_PWM_Callback+0x68>)
 8002d48:	2201      	movs	r2, #1
 8002d4a:	701a      	strb	r2, [r3, #0]

        if (aircraftlights_dma_semaphore != NULL) {
 8002d4c:	4b10      	ldr	r3, [pc, #64]	@ (8002d90 <AircraftLights_PWM_Callback+0x6c>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d014      	beq.n	8002d7e <AircraftLights_PWM_Callback+0x5a>
            BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8002d54:	2300      	movs	r3, #0
 8002d56:	60fb      	str	r3, [r7, #12]
            xSemaphoreGiveFromISR(aircraftlights_dma_semaphore, &xHigherPriorityTaskWoken);
 8002d58:	4b0d      	ldr	r3, [pc, #52]	@ (8002d90 <AircraftLights_PWM_Callback+0x6c>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f107 020c 	add.w	r2, r7, #12
 8002d60:	4611      	mov	r1, r2
 8002d62:	4618      	mov	r0, r3
 8002d64:	f013 fcd4 	bl	8016710 <xQueueGiveFromISR>
            portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d007      	beq.n	8002d7e <AircraftLights_PWM_Callback+0x5a>
 8002d6e:	4b09      	ldr	r3, [pc, #36]	@ (8002d94 <AircraftLights_PWM_Callback+0x70>)
 8002d70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d74:	601a      	str	r2, [r3, #0]
 8002d76:	f3bf 8f4f 	dsb	sy
 8002d7a:	f3bf 8f6f 	isb	sy
        }
    }
}
 8002d7e:	bf00      	nop
 8002d80:	3710      	adds	r7, #16
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	24000e8c 	.word	0x24000e8c
 8002d8c:	24000258 	.word	0x24000258
 8002d90:	2400096c 	.word	0x2400096c
 8002d94:	e000ed04 	.word	0xe000ed04

08002d98 <swap_buffers>:
static uint8_t led_data[LED_COUNT][3];
static float global_brightness = 1.0f;

#define WS2812_LATCH_DELAY_MS 1

static inline void swap_buffers(void) {
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
    uint32_t *temp = active_buffer;
 8002d9e:	4b08      	ldr	r3, [pc, #32]	@ (8002dc0 <swap_buffers+0x28>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	607b      	str	r3, [r7, #4]
    active_buffer = prepare_buffer;
 8002da4:	4b07      	ldr	r3, [pc, #28]	@ (8002dc4 <swap_buffers+0x2c>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a05      	ldr	r2, [pc, #20]	@ (8002dc0 <swap_buffers+0x28>)
 8002daa:	6013      	str	r3, [r2, #0]
    prepare_buffer = temp;
 8002dac:	4a05      	ldr	r2, [pc, #20]	@ (8002dc4 <swap_buffers+0x2c>)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6013      	str	r3, [r2, #0]
}
 8002db2:	bf00      	nop
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	2400000c 	.word	0x2400000c
 8002dc4:	24000010 	.word	0x24000010

08002dc8 <WS2812_Init>:

void WS2812_Init(TIM_HandleTypeDef *htim) {
 8002dc8:	b480      	push	{r7}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
    for (uint32_t i = 0; i < WS2812_BUFFER_SIZE; i++) {
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	60fb      	str	r3, [r7, #12]
 8002dd4:	e00c      	b.n	8002df0 <WS2812_Init+0x28>
        pwm_buffer_a[i] = DUTY_RESET;
 8002dd6:	4a0b      	ldr	r2, [pc, #44]	@ (8002e04 <WS2812_Init+0x3c>)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2100      	movs	r1, #0
 8002ddc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        pwm_buffer_b[i] = DUTY_RESET;
 8002de0:	4a09      	ldr	r2, [pc, #36]	@ (8002e08 <WS2812_Init+0x40>)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2100      	movs	r1, #0
 8002de6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (uint32_t i = 0; i < WS2812_BUFFER_SIZE; i++) {
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	3301      	adds	r3, #1
 8002dee:	60fb      	str	r3, [r7, #12]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2b49      	cmp	r3, #73	@ 0x49
 8002df4:	d9ef      	bls.n	8002dd6 <WS2812_Init+0xe>
    }
}
 8002df6:	bf00      	nop
 8002df8:	bf00      	nop
 8002dfa:	3714      	adds	r7, #20
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr
 8002e04:	240006fc 	.word	0x240006fc
 8002e08:	24000824 	.word	0x24000824

08002e0c <main_led>:
    if (brightness < 0.0f) brightness = 0.0f;
    if (brightness > 1.0f) brightness = 1.0f;
    global_brightness = brightness;
}

void main_led(uint32_t led_index, uint8_t red, uint8_t green, uint8_t blue, float brightness) {
 8002e0c:	b480      	push	{r7}
 8002e0e:	b087      	sub	sp, #28
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	4608      	mov	r0, r1
 8002e16:	4611      	mov	r1, r2
 8002e18:	461a      	mov	r2, r3
 8002e1a:	ed87 0a01 	vstr	s0, [r7, #4]
 8002e1e:	4603      	mov	r3, r0
 8002e20:	72fb      	strb	r3, [r7, #11]
 8002e22:	460b      	mov	r3, r1
 8002e24:	72bb      	strb	r3, [r7, #10]
 8002e26:	4613      	mov	r3, r2
 8002e28:	727b      	strb	r3, [r7, #9]
    if (led_index < LED_COUNT) {
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d165      	bne.n	8002efc <main_led+0xf0>
        if (brightness < 0.0f) brightness = 0.0f;
 8002e30:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e34:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e3c:	d502      	bpl.n	8002e44 <main_led+0x38>
 8002e3e:	f04f 0300 	mov.w	r3, #0
 8002e42:	607b      	str	r3, [r7, #4]
        if (brightness > 1.0f) brightness = 1.0f;
 8002e44:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e48:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002e4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e54:	dd02      	ble.n	8002e5c <main_led+0x50>
 8002e56:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002e5a:	607b      	str	r3, [r7, #4]

        float total_brightness = brightness * global_brightness;
 8002e5c:	4b2a      	ldr	r3, [pc, #168]	@ (8002f08 <main_led+0xfc>)
 8002e5e:	edd3 7a00 	vldr	s15, [r3]
 8002e62:	ed97 7a01 	vldr	s14, [r7, #4]
 8002e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e6a:	edc7 7a05 	vstr	s15, [r7, #20]
        led_data[led_index][0] = (uint8_t)(green * total_brightness);
 8002e6e:	7abb      	ldrb	r3, [r7, #10]
 8002e70:	ee07 3a90 	vmov	s15, r3
 8002e74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e78:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e84:	edc7 7a00 	vstr	s15, [r7]
 8002e88:	783b      	ldrb	r3, [r7, #0]
 8002e8a:	b2d8      	uxtb	r0, r3
 8002e8c:	491f      	ldr	r1, [pc, #124]	@ (8002f0c <main_led+0x100>)
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	4613      	mov	r3, r2
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	4413      	add	r3, r2
 8002e96:	440b      	add	r3, r1
 8002e98:	4602      	mov	r2, r0
 8002e9a:	701a      	strb	r2, [r3, #0]
        led_data[led_index][1] = (uint8_t)(red   * total_brightness);
 8002e9c:	7afb      	ldrb	r3, [r7, #11]
 8002e9e:	ee07 3a90 	vmov	s15, r3
 8002ea2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ea6:	edd7 7a05 	vldr	s15, [r7, #20]
 8002eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002eb2:	edc7 7a00 	vstr	s15, [r7]
 8002eb6:	783b      	ldrb	r3, [r7, #0]
 8002eb8:	b2d8      	uxtb	r0, r3
 8002eba:	4914      	ldr	r1, [pc, #80]	@ (8002f0c <main_led+0x100>)
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	4413      	add	r3, r2
 8002ec4:	440b      	add	r3, r1
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	4602      	mov	r2, r0
 8002eca:	701a      	strb	r2, [r3, #0]
        led_data[led_index][2] = (uint8_t)(blue  * total_brightness);
 8002ecc:	7a7b      	ldrb	r3, [r7, #9]
 8002ece:	ee07 3a90 	vmov	s15, r3
 8002ed2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ed6:	edd7 7a05 	vldr	s15, [r7, #20]
 8002eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ede:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ee2:	edc7 7a00 	vstr	s15, [r7]
 8002ee6:	783b      	ldrb	r3, [r7, #0]
 8002ee8:	b2d8      	uxtb	r0, r3
 8002eea:	4908      	ldr	r1, [pc, #32]	@ (8002f0c <main_led+0x100>)
 8002eec:	68fa      	ldr	r2, [r7, #12]
 8002eee:	4613      	mov	r3, r2
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	4413      	add	r3, r2
 8002ef4:	440b      	add	r3, r1
 8002ef6:	3302      	adds	r3, #2
 8002ef8:	4602      	mov	r2, r0
 8002efa:	701a      	strb	r2, [r3, #0]
    }
}
 8002efc:	bf00      	nop
 8002efe:	371c      	adds	r7, #28
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr
 8002f08:	24000014 	.word	0x24000014
 8002f0c:	2400094c 	.word	0x2400094c

08002f10 <encode_leds_to_pwm>:

static void encode_leds_to_pwm(uint32_t *buffer) {
 8002f10:	b480      	push	{r7}
 8002f12:	b089      	sub	sp, #36	@ 0x24
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
    uint32_t buffer_index = 0;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	61fb      	str	r3, [r7, #28]
    for (uint32_t i = 0; i < WS2812_BUFFER_SIZE; i++) {
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	61bb      	str	r3, [r7, #24]
 8002f20:	e008      	b.n	8002f34 <encode_leds_to_pwm+0x24>
        buffer[i] = DUTY_RESET;
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	4413      	add	r3, r2
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < WS2812_BUFFER_SIZE; i++) {
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	3301      	adds	r3, #1
 8002f32:	61bb      	str	r3, [r7, #24]
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	2b49      	cmp	r3, #73	@ 0x49
 8002f38:	d9f3      	bls.n	8002f22 <encode_leds_to_pwm+0x12>
    }
    for (uint32_t led = 0; led < LED_COUNT; led++) {
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	617b      	str	r3, [r7, #20]
 8002f3e:	e034      	b.n	8002faa <encode_leds_to_pwm+0x9a>
        for (uint32_t color = 0; color < 3; color++) {
 8002f40:	2300      	movs	r3, #0
 8002f42:	613b      	str	r3, [r7, #16]
 8002f44:	e02b      	b.n	8002f9e <encode_leds_to_pwm+0x8e>
            for (int8_t bit = 7; bit >= 0; bit--) {
 8002f46:	2307      	movs	r3, #7
 8002f48:	73fb      	strb	r3, [r7, #15]
 8002f4a:	e021      	b.n	8002f90 <encode_leds_to_pwm+0x80>
                buffer[buffer_index++] =
                    (led_data[led][color] & (1 << bit)) ? DUTY_1 : DUTY_0;
 8002f4c:	491c      	ldr	r1, [pc, #112]	@ (8002fc0 <encode_leds_to_pwm+0xb0>)
 8002f4e:	697a      	ldr	r2, [r7, #20]
 8002f50:	4613      	mov	r3, r2
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	4413      	add	r3, r2
 8002f56:	18ca      	adds	r2, r1, r3
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	461a      	mov	r2, r3
 8002f60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f64:	fa42 f303 	asr.w	r3, r2, r3
 8002f68:	f003 0301 	and.w	r3, r3, #1
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d001      	beq.n	8002f74 <encode_leds_to_pwm+0x64>
 8002f70:	22a0      	movs	r2, #160	@ 0xa0
 8002f72:	e000      	b.n	8002f76 <encode_leds_to_pwm+0x66>
 8002f74:	2250      	movs	r2, #80	@ 0x50
                buffer[buffer_index++] =
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	1c59      	adds	r1, r3, #1
 8002f7a:	61f9      	str	r1, [r7, #28]
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	6879      	ldr	r1, [r7, #4]
 8002f80:	440b      	add	r3, r1
 8002f82:	601a      	str	r2, [r3, #0]
            for (int8_t bit = 7; bit >= 0; bit--) {
 8002f84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	73fb      	strb	r3, [r7, #15]
 8002f90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	dad9      	bge.n	8002f4c <encode_leds_to_pwm+0x3c>
        for (uint32_t color = 0; color < 3; color++) {
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	613b      	str	r3, [r7, #16]
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d9d0      	bls.n	8002f46 <encode_leds_to_pwm+0x36>
    for (uint32_t led = 0; led < LED_COUNT; led++) {
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	617b      	str	r3, [r7, #20]
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d0c7      	beq.n	8002f40 <encode_leds_to_pwm+0x30>
            }
        }
    }
}
 8002fb0:	bf00      	nop
 8002fb2:	bf00      	nop
 8002fb4:	3724      	adds	r7, #36	@ 0x24
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	2400094c 	.word	0x2400094c

08002fc4 <main_led_update>:

/**
 * Non-blocking WS2812 update
 */
void main_led_update(void) {
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
    encode_leds_to_pwm(prepare_buffer);
 8002fc8:	4b10      	ldr	r3, [pc, #64]	@ (800300c <main_led_update+0x48>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7ff ff9f 	bl	8002f10 <encode_leds_to_pwm>
    swap_buffers();
 8002fd2:	f7ff fee1 	bl	8002d98 <swap_buffers>

    taskENTER_CRITICAL();
 8002fd6:	f015 fe4f 	bl	8018c78 <vPortEnterCritical>
    HAL_TIM_PWM_Stop_DMA(&WS2812_TIMER, WS2812_TIMER_CHANNEL);
 8002fda:	2104      	movs	r1, #4
 8002fdc:	480c      	ldr	r0, [pc, #48]	@ (8003010 <main_led_update+0x4c>)
 8002fde:	f00d f8f9 	bl	80101d4 <HAL_TIM_PWM_Stop_DMA>
    HAL_TIM_Base_Stop(&WS2812_TIMER);
 8002fe2:	480b      	ldr	r0, [pc, #44]	@ (8003010 <main_led_update+0x4c>)
 8002fe4:	f00c fc96 	bl	800f914 <HAL_TIM_Base_Stop>
    ws2812_data_sent_flag = 0;
 8002fe8:	4b0a      	ldr	r3, [pc, #40]	@ (8003014 <main_led_update+0x50>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	701a      	strb	r2, [r3, #0]

    HAL_TIM_Base_Start(&WS2812_TIMER);
 8002fee:	4808      	ldr	r0, [pc, #32]	@ (8003010 <main_led_update+0x4c>)
 8002ff0:	f00c fc12 	bl	800f818 <HAL_TIM_Base_Start>
    HAL_TIM_PWM_Start_DMA(&WS2812_TIMER, WS2812_TIMER_CHANNEL,
 8002ff4:	4b08      	ldr	r3, [pc, #32]	@ (8003018 <main_led_update+0x54>)
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	234a      	movs	r3, #74	@ 0x4a
 8002ffa:	2104      	movs	r1, #4
 8002ffc:	4804      	ldr	r0, [pc, #16]	@ (8003010 <main_led_update+0x4c>)
 8002ffe:	f00c feb5 	bl	800fd6c <HAL_TIM_PWM_Start_DMA>
                          active_buffer, WS2812_BUFFER_SIZE);
    taskEXIT_CRITICAL();
 8003002:	f015 fe6b 	bl	8018cdc <vPortExitCritical>

    // Return immediately — no blocking wait here
}
 8003006:	bf00      	nop
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	24000010 	.word	0x24000010
 8003010:	24000e8c 	.word	0x24000e8c
 8003014:	240006f8 	.word	0x240006f8
 8003018:	2400000c 	.word	0x2400000c

0800301c <main_led_PWM_Callback>:

/**
 * Called from DMA complete ISR
 */
void main_led_PWM_Callback(TIM_HandleTypeDef *htim) {
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
    if (htim->Instance == WS2812_TIMER.Instance) {
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	4b15      	ldr	r3, [pc, #84]	@ (8003080 <main_led_PWM_Callback+0x64>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	429a      	cmp	r2, r3
 800302e:	d122      	bne.n	8003076 <main_led_PWM_Callback+0x5a>
        HAL_TIM_PWM_Stop_DMA(&WS2812_TIMER, WS2812_TIMER_CHANNEL);
 8003030:	2104      	movs	r1, #4
 8003032:	4813      	ldr	r0, [pc, #76]	@ (8003080 <main_led_PWM_Callback+0x64>)
 8003034:	f00d f8ce 	bl	80101d4 <HAL_TIM_PWM_Stop_DMA>
        HAL_TIM_Base_Stop(&WS2812_TIMER);
 8003038:	4811      	ldr	r0, [pc, #68]	@ (8003080 <main_led_PWM_Callback+0x64>)
 800303a:	f00c fc6b 	bl	800f914 <HAL_TIM_Base_Stop>

        ws2812_data_sent_flag = 1;
 800303e:	4b11      	ldr	r3, [pc, #68]	@ (8003084 <main_led_PWM_Callback+0x68>)
 8003040:	2201      	movs	r2, #1
 8003042:	701a      	strb	r2, [r3, #0]

        if (ws2812_dma_semaphore != NULL) {
 8003044:	4b10      	ldr	r3, [pc, #64]	@ (8003088 <main_led_PWM_Callback+0x6c>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d014      	beq.n	8003076 <main_led_PWM_Callback+0x5a>
            BaseType_t hpw = pdFALSE;
 800304c:	2300      	movs	r3, #0
 800304e:	60fb      	str	r3, [r7, #12]
            xSemaphoreGiveFromISR(ws2812_dma_semaphore, &hpw);
 8003050:	4b0d      	ldr	r3, [pc, #52]	@ (8003088 <main_led_PWM_Callback+0x6c>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f107 020c 	add.w	r2, r7, #12
 8003058:	4611      	mov	r1, r2
 800305a:	4618      	mov	r0, r3
 800305c:	f013 fb58 	bl	8016710 <xQueueGiveFromISR>
            portYIELD_FROM_ISR(hpw);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d007      	beq.n	8003076 <main_led_PWM_Callback+0x5a>
 8003066:	4b09      	ldr	r3, [pc, #36]	@ (800308c <main_led_PWM_Callback+0x70>)
 8003068:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800306c:	601a      	str	r2, [r3, #0]
 800306e:	f3bf 8f4f 	dsb	sy
 8003072:	f3bf 8f6f 	isb	sy
        }
    }
}
 8003076:	bf00      	nop
 8003078:	3710      	adds	r7, #16
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	24000e8c 	.word	0x24000e8c
 8003084:	240006f8 	.word	0x240006f8
 8003088:	24000968 	.word	0x24000968
 800308c:	e000ed04 	.word	0xe000ed04

08003090 <pid_init>:
#include "pid_controller.h"
#include <math.h>

// Initialize PID structures with EEPROM values
void pid_init(RuntimeDualPID_t *roll_pid, RuntimeDualPID_t *pitch_pid, RuntimePID_t *yaw_rate_pid,
              const DualPID_t *eeprom_roll_pid, const DualPID_t *eeprom_pitch_pid, const PID_t *eeprom_yaw_rate_pid) {
 8003090:	b480      	push	{r7}
 8003092:	b085      	sub	sp, #20
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]
 800309c:	603b      	str	r3, [r7, #0]
    // Roll PID
    roll_pid->out.kp = eeprom_roll_pid->out.kp;
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	601a      	str	r2, [r3, #0]
    roll_pid->out.ki = eeprom_roll_pid->out.ki;
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	685a      	ldr	r2, [r3, #4]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	605a      	str	r2, [r3, #4]
    roll_pid->out.kd = eeprom_roll_pid->out.kd;
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	689a      	ldr	r2, [r3, #8]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	609a      	str	r2, [r3, #8]
    roll_pid->out.integral = 0.0f;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f04f 0200 	mov.w	r2, #0
 80030bc:	60da      	str	r2, [r3, #12]
    roll_pid->out.last_error = 0.0f;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f04f 0200 	mov.w	r2, #0
 80030c4:	611a      	str	r2, [r3, #16]
    roll_pid->out.output_limit = 200.0f; // Max angular rate (deg/s)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	4a31      	ldr	r2, [pc, #196]	@ (8003190 <pid_init+0x100>)
 80030ca:	615a      	str	r2, [r3, #20]

    roll_pid->in.kp = eeprom_roll_pid->in.kp;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	68da      	ldr	r2, [r3, #12]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	619a      	str	r2, [r3, #24]
    roll_pid->in.ki = eeprom_roll_pid->in.ki;
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	691a      	ldr	r2, [r3, #16]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	61da      	str	r2, [r3, #28]
    roll_pid->in.kd = eeprom_roll_pid->in.kd;
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	695a      	ldr	r2, [r3, #20]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	621a      	str	r2, [r3, #32]
    roll_pid->in.integral = 0.0f;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f04f 0200 	mov.w	r2, #0
 80030ea:	625a      	str	r2, [r3, #36]	@ 0x24
    roll_pid->in.last_error = 0.0f;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f04f 0200 	mov.w	r2, #0
 80030f2:	629a      	str	r2, [r3, #40]	@ 0x28
    roll_pid->in.output_limit = 950.0f; // Max PWM contribution
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	4a27      	ldr	r2, [pc, #156]	@ (8003194 <pid_init+0x104>)
 80030f8:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Pitch PID
    pitch_pid->out.kp = eeprom_pitch_pid->out.kp;
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	601a      	str	r2, [r3, #0]
    pitch_pid->out.ki = eeprom_pitch_pid->out.ki;
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	685a      	ldr	r2, [r3, #4]
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	605a      	str	r2, [r3, #4]
    pitch_pid->out.kd = eeprom_pitch_pid->out.kd;
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	689a      	ldr	r2, [r3, #8]
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	609a      	str	r2, [r3, #8]
    pitch_pid->out.integral = 0.0f;
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	f04f 0200 	mov.w	r2, #0
 8003118:	60da      	str	r2, [r3, #12]
    pitch_pid->out.last_error = 0.0f;
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	611a      	str	r2, [r3, #16]
    pitch_pid->out.output_limit = 200.0f;
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	4a1a      	ldr	r2, [pc, #104]	@ (8003190 <pid_init+0x100>)
 8003126:	615a      	str	r2, [r3, #20]

    pitch_pid->in.kp = eeprom_pitch_pid->in.kp;
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	68da      	ldr	r2, [r3, #12]
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	619a      	str	r2, [r3, #24]
    pitch_pid->in.ki = eeprom_pitch_pid->in.ki;
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	691a      	ldr	r2, [r3, #16]
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	61da      	str	r2, [r3, #28]
    pitch_pid->in.kd = eeprom_pitch_pid->in.kd;
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	695a      	ldr	r2, [r3, #20]
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	621a      	str	r2, [r3, #32]
    pitch_pid->in.integral = 0.0f;
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	f04f 0200 	mov.w	r2, #0
 8003146:	625a      	str	r2, [r3, #36]	@ 0x24
    pitch_pid->in.last_error = 0.0f;
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	f04f 0200 	mov.w	r2, #0
 800314e:	629a      	str	r2, [r3, #40]	@ 0x28
    pitch_pid->in.output_limit = 950.0f;
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	4a10      	ldr	r2, [pc, #64]	@ (8003194 <pid_init+0x104>)
 8003154:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Yaw rate PID
    yaw_rate_pid->kp = eeprom_yaw_rate_pid->kp;
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	601a      	str	r2, [r3, #0]
    yaw_rate_pid->ki = eeprom_yaw_rate_pid->ki;
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	685a      	ldr	r2, [r3, #4]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	605a      	str	r2, [r3, #4]
    yaw_rate_pid->kd = eeprom_yaw_rate_pid->kd;
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	689a      	ldr	r2, [r3, #8]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	609a      	str	r2, [r3, #8]
    yaw_rate_pid->integral = 0.0f;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f04f 0200 	mov.w	r2, #0
 8003174:	60da      	str	r2, [r3, #12]
    yaw_rate_pid->last_error = 0.0f;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f04f 0200 	mov.w	r2, #0
 800317c:	611a      	str	r2, [r3, #16]
    yaw_rate_pid->output_limit = 950.0f;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a04      	ldr	r2, [pc, #16]	@ (8003194 <pid_init+0x104>)
 8003182:	615a      	str	r2, [r3, #20]
}
 8003184:	bf00      	nop
 8003186:	3714      	adds	r7, #20
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr
 8003190:	43480000 	.word	0x43480000
 8003194:	446d8000 	.word	0x446d8000

08003198 <iBus_Check_CHKSUM>:

#include "FS-iA6B.h"

FSiA6B_iBus iBus;

unsigned char iBus_Check_CHKSUM(unsigned char* data, unsigned char len){
 8003198:	b480      	push	{r7}
 800319a:	b085      	sub	sp, #20
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	460b      	mov	r3, r1
 80031a2:	70fb      	strb	r3, [r7, #3]
	unsigned short chksum = 0xffff;
 80031a4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80031a8:	81fb      	strh	r3, [r7, #14]

	for(int i = 0; i < len-2; i++){
 80031aa:	2300      	movs	r3, #0
 80031ac:	60bb      	str	r3, [r7, #8]
 80031ae:	e00a      	b.n	80031c6 <iBus_Check_CHKSUM+0x2e>
		chksum = chksum - data[i];
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	4413      	add	r3, r2
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	461a      	mov	r2, r3
 80031ba:	89fb      	ldrh	r3, [r7, #14]
 80031bc:	1a9b      	subs	r3, r3, r2
 80031be:	81fb      	strh	r3, [r7, #14]
	for(int i = 0; i < len-2; i++){
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	3301      	adds	r3, #1
 80031c4:	60bb      	str	r3, [r7, #8]
 80031c6:	78fb      	ldrb	r3, [r7, #3]
 80031c8:	3b02      	subs	r3, #2
 80031ca:	68ba      	ldr	r2, [r7, #8]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	dbef      	blt.n	80031b0 <iBus_Check_CHKSUM+0x18>
	}

	return ((chksum&0x00ff) == data[30] && (chksum>>8)==data[31]);
 80031d0:	89fb      	ldrh	r3, [r7, #14]
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	321e      	adds	r2, #30
 80031d8:	7812      	ldrb	r2, [r2, #0]
 80031da:	4293      	cmp	r3, r2
 80031dc:	d109      	bne.n	80031f2 <iBus_Check_CHKSUM+0x5a>
 80031de:	89fb      	ldrh	r3, [r7, #14]
 80031e0:	0a1b      	lsrs	r3, r3, #8
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	321f      	adds	r2, #31
 80031e8:	7812      	ldrb	r2, [r2, #0]
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d101      	bne.n	80031f2 <iBus_Check_CHKSUM+0x5a>
 80031ee:	2301      	movs	r3, #1
 80031f0:	e000      	b.n	80031f4 <iBus_Check_CHKSUM+0x5c>
 80031f2:	2300      	movs	r3, #0
 80031f4:	b2db      	uxtb	r3, r3
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3714      	adds	r7, #20
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr

08003202 <iBus_Parsing>:

void iBus_Parsing(unsigned char* data, FSiA6B_iBus* iBus) {
 8003202:	b480      	push	{r7}
 8003204:	b083      	sub	sp, #12
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
 800320a:	6039      	str	r1, [r7, #0]
	iBus->RH = (data[2] | data[3]<<8) & 0x0fff;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	3302      	adds	r3, #2
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	b21a      	sxth	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	3303      	adds	r3, #3
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	b21b      	sxth	r3, r3
 800321c:	021b      	lsls	r3, r3, #8
 800321e:	b21b      	sxth	r3, r3
 8003220:	4313      	orrs	r3, r2
 8003222:	b21b      	sxth	r3, r3
 8003224:	b29b      	uxth	r3, r3
 8003226:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800322a:	b29a      	uxth	r2, r3
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	801a      	strh	r2, [r3, #0]
	iBus->RV = (data[4] | data[5]<<8) & 0x0fff;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	3304      	adds	r3, #4
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	b21a      	sxth	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	3305      	adds	r3, #5
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	b21b      	sxth	r3, r3
 8003240:	021b      	lsls	r3, r3, #8
 8003242:	b21b      	sxth	r3, r3
 8003244:	4313      	orrs	r3, r2
 8003246:	b21b      	sxth	r3, r3
 8003248:	b29b      	uxth	r3, r3
 800324a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800324e:	b29a      	uxth	r2, r3
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	805a      	strh	r2, [r3, #2]
	iBus->LV = (data[6] | data[7]<<8) & 0x0fff;;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	3306      	adds	r3, #6
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	b21a      	sxth	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	3307      	adds	r3, #7
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	b21b      	sxth	r3, r3
 8003264:	021b      	lsls	r3, r3, #8
 8003266:	b21b      	sxth	r3, r3
 8003268:	4313      	orrs	r3, r2
 800326a:	b21b      	sxth	r3, r3
 800326c:	b29b      	uxth	r3, r3
 800326e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003272:	b29a      	uxth	r2, r3
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	809a      	strh	r2, [r3, #4]
	iBus->LH = (data[8] | data[9]<<8) & 0x0fff;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	3308      	adds	r3, #8
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	b21a      	sxth	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	3309      	adds	r3, #9
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	b21b      	sxth	r3, r3
 8003288:	021b      	lsls	r3, r3, #8
 800328a:	b21b      	sxth	r3, r3
 800328c:	4313      	orrs	r3, r2
 800328e:	b21b      	sxth	r3, r3
 8003290:	b29b      	uxth	r3, r3
 8003292:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003296:	b29a      	uxth	r2, r3
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	80da      	strh	r2, [r3, #6]
	iBus->SwA = (data[10] | data[11]<<8) & 0x0fff;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	330a      	adds	r3, #10
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	b21a      	sxth	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	330b      	adds	r3, #11
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	b21b      	sxth	r3, r3
 80032ac:	021b      	lsls	r3, r3, #8
 80032ae:	b21b      	sxth	r3, r3
 80032b0:	4313      	orrs	r3, r2
 80032b2:	b21b      	sxth	r3, r3
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	811a      	strh	r2, [r3, #8]
	iBus->SwB = (data[12] | data[13]<<8) & 0x0fff;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	330c      	adds	r3, #12
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	b21a      	sxth	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	330d      	adds	r3, #13
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	b21b      	sxth	r3, r3
 80032d0:	021b      	lsls	r3, r3, #8
 80032d2:	b21b      	sxth	r3, r3
 80032d4:	4313      	orrs	r3, r2
 80032d6:	b21b      	sxth	r3, r3
 80032d8:	b29b      	uxth	r3, r3
 80032da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032de:	b29a      	uxth	r2, r3
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	815a      	strh	r2, [r3, #10]
	iBus->SwC = (data[14] | data[15]<<8) & 0x0fff;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	330e      	adds	r3, #14
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	b21a      	sxth	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	330f      	adds	r3, #15
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	b21b      	sxth	r3, r3
 80032f4:	021b      	lsls	r3, r3, #8
 80032f6:	b21b      	sxth	r3, r3
 80032f8:	4313      	orrs	r3, r2
 80032fa:	b21b      	sxth	r3, r3
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003302:	b29a      	uxth	r2, r3
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	819a      	strh	r2, [r3, #12]
	iBus->SwD = (data[16] | data[17]<<8) & 0x0fff;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	3310      	adds	r3, #16
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	b21a      	sxth	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	3311      	adds	r3, #17
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	b21b      	sxth	r3, r3
 8003318:	021b      	lsls	r3, r3, #8
 800331a:	b21b      	sxth	r3, r3
 800331c:	4313      	orrs	r3, r2
 800331e:	b21b      	sxth	r3, r3
 8003320:	b29b      	uxth	r3, r3
 8003322:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003326:	b29a      	uxth	r2, r3
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	81da      	strh	r2, [r3, #14]
	iBus->VrA = (data[18] | data[19]<<8) & 0x0fff;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	3312      	adds	r3, #18
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	b21a      	sxth	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	3313      	adds	r3, #19
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	b21b      	sxth	r3, r3
 800333c:	021b      	lsls	r3, r3, #8
 800333e:	b21b      	sxth	r3, r3
 8003340:	4313      	orrs	r3, r2
 8003342:	b21b      	sxth	r3, r3
 8003344:	b29b      	uxth	r3, r3
 8003346:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800334a:	b29a      	uxth	r2, r3
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	821a      	strh	r2, [r3, #16]
	iBus->VrB = (data[20] | data[21]<<8) & 0x0fff;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	3314      	adds	r3, #20
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	b21a      	sxth	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	3315      	adds	r3, #21
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	b21b      	sxth	r3, r3
 8003360:	021b      	lsls	r3, r3, #8
 8003362:	b21b      	sxth	r3, r3
 8003364:	4313      	orrs	r3, r2
 8003366:	b21b      	sxth	r3, r3
 8003368:	b29b      	uxth	r3, r3
 800336a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800336e:	b29a      	uxth	r2, r3
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	825a      	strh	r2, [r3, #18]

	iBus->FailSafe = (data[13] >> 4);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	330d      	adds	r3, #13
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	091b      	lsrs	r3, r3, #4
 800337c:	b2db      	uxtb	r3, r3
 800337e:	461a      	mov	r2, r3
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	829a      	strh	r2, [r3, #20]

}
 8003384:	bf00      	nop
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <__NVIC_GetPriorityGrouping>:
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003394:	4b04      	ldr	r3, [pc, #16]	@ (80033a8 <__NVIC_GetPriorityGrouping+0x18>)
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	0a1b      	lsrs	r3, r3, #8
 800339a:	f003 0307 	and.w	r3, r3, #7
}
 800339e:	4618      	mov	r0, r3
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr
 80033a8:	e000ed00 	.word	0xe000ed00

080033ac <__NVIC_EnableIRQ>:
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	4603      	mov	r3, r0
 80033b4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80033b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	db0b      	blt.n	80033d6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033be:	88fb      	ldrh	r3, [r7, #6]
 80033c0:	f003 021f 	and.w	r2, r3, #31
 80033c4:	4907      	ldr	r1, [pc, #28]	@ (80033e4 <__NVIC_EnableIRQ+0x38>)
 80033c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033ca:	095b      	lsrs	r3, r3, #5
 80033cc:	2001      	movs	r0, #1
 80033ce:	fa00 f202 	lsl.w	r2, r0, r2
 80033d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80033d6:	bf00      	nop
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	e000e100 	.word	0xe000e100

080033e8 <__NVIC_SetPriority>:
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	4603      	mov	r3, r0
 80033f0:	6039      	str	r1, [r7, #0]
 80033f2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80033f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	db0a      	blt.n	8003412 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	b2da      	uxtb	r2, r3
 8003400:	490c      	ldr	r1, [pc, #48]	@ (8003434 <__NVIC_SetPriority+0x4c>)
 8003402:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003406:	0112      	lsls	r2, r2, #4
 8003408:	b2d2      	uxtb	r2, r2
 800340a:	440b      	add	r3, r1
 800340c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003410:	e00a      	b.n	8003428 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	b2da      	uxtb	r2, r3
 8003416:	4908      	ldr	r1, [pc, #32]	@ (8003438 <__NVIC_SetPriority+0x50>)
 8003418:	88fb      	ldrh	r3, [r7, #6]
 800341a:	f003 030f 	and.w	r3, r3, #15
 800341e:	3b04      	subs	r3, #4
 8003420:	0112      	lsls	r2, r2, #4
 8003422:	b2d2      	uxtb	r2, r2
 8003424:	440b      	add	r3, r1
 8003426:	761a      	strb	r2, [r3, #24]
}
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr
 8003434:	e000e100 	.word	0xe000e100
 8003438:	e000ed00 	.word	0xe000ed00

0800343c <NVIC_EncodePriority>:
{
 800343c:	b480      	push	{r7}
 800343e:	b089      	sub	sp, #36	@ 0x24
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f003 0307 	and.w	r3, r3, #7
 800344e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	f1c3 0307 	rsb	r3, r3, #7
 8003456:	2b04      	cmp	r3, #4
 8003458:	bf28      	it	cs
 800345a:	2304      	movcs	r3, #4
 800345c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	3304      	adds	r3, #4
 8003462:	2b06      	cmp	r3, #6
 8003464:	d902      	bls.n	800346c <NVIC_EncodePriority+0x30>
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	3b03      	subs	r3, #3
 800346a:	e000      	b.n	800346e <NVIC_EncodePriority+0x32>
 800346c:	2300      	movs	r3, #0
 800346e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003470:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	fa02 f303 	lsl.w	r3, r2, r3
 800347a:	43da      	mvns	r2, r3
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	401a      	ands	r2, r3
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003484:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	fa01 f303 	lsl.w	r3, r1, r3
 800348e:	43d9      	mvns	r1, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003494:	4313      	orrs	r3, r2
}
 8003496:	4618      	mov	r0, r3
 8003498:	3724      	adds	r7, #36	@ 0x24
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
	...

080034a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80034aa:	4b31      	ldr	r3, [pc, #196]	@ (8003570 <MX_DMA_Init+0xcc>)
 80034ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80034b0:	4a2f      	ldr	r2, [pc, #188]	@ (8003570 <MX_DMA_Init+0xcc>)
 80034b2:	f043 0301 	orr.w	r3, r3, #1
 80034b6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80034ba:	4b2d      	ldr	r3, [pc, #180]	@ (8003570 <MX_DMA_Init+0xcc>)
 80034bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80034c0:	f003 0301 	and.w	r3, r3, #1
 80034c4:	607b      	str	r3, [r7, #4]
 80034c6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80034c8:	2200      	movs	r2, #0
 80034ca:	2105      	movs	r1, #5
 80034cc:	200b      	movs	r0, #11
 80034ce:	f003 fc53 	bl	8006d78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80034d2:	200b      	movs	r0, #11
 80034d4:	f003 fc6a 	bl	8006dac <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80034d8:	2200      	movs	r2, #0
 80034da:	2105      	movs	r1, #5
 80034dc:	200c      	movs	r0, #12
 80034de:	f003 fc4b 	bl	8006d78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80034e2:	200c      	movs	r0, #12
 80034e4:	f003 fc62 	bl	8006dac <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 80034e8:	f7ff ff52 	bl	8003390 <__NVIC_GetPriorityGrouping>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2200      	movs	r2, #0
 80034f0:	2105      	movs	r1, #5
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7ff ffa2 	bl	800343c <NVIC_EncodePriority>
 80034f8:	4603      	mov	r3, r0
 80034fa:	4619      	mov	r1, r3
 80034fc:	200d      	movs	r0, #13
 80034fe:	f7ff ff73 	bl	80033e8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8003502:	200d      	movs	r0, #13
 8003504:	f7ff ff52 	bl	80033ac <__NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8003508:	f7ff ff42 	bl	8003390 <__NVIC_GetPriorityGrouping>
 800350c:	4603      	mov	r3, r0
 800350e:	2200      	movs	r2, #0
 8003510:	2105      	movs	r1, #5
 8003512:	4618      	mov	r0, r3
 8003514:	f7ff ff92 	bl	800343c <NVIC_EncodePriority>
 8003518:	4603      	mov	r3, r0
 800351a:	4619      	mov	r1, r3
 800351c:	200e      	movs	r0, #14
 800351e:	f7ff ff63 	bl	80033e8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8003522:	200e      	movs	r0, #14
 8003524:	f7ff ff42 	bl	80033ac <__NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8003528:	2200      	movs	r2, #0
 800352a:	2105      	movs	r1, #5
 800352c:	200f      	movs	r0, #15
 800352e:	f003 fc23 	bl	8006d78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8003532:	200f      	movs	r0, #15
 8003534:	f003 fc3a 	bl	8006dac <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8003538:	2200      	movs	r2, #0
 800353a:	2105      	movs	r1, #5
 800353c:	2010      	movs	r0, #16
 800353e:	f003 fc1b 	bl	8006d78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003542:	2010      	movs	r0, #16
 8003544:	f003 fc32 	bl	8006dac <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8003548:	2200      	movs	r2, #0
 800354a:	2105      	movs	r1, #5
 800354c:	2011      	movs	r0, #17
 800354e:	f003 fc13 	bl	8006d78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8003552:	2011      	movs	r0, #17
 8003554:	f003 fc2a 	bl	8006dac <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8003558:	2200      	movs	r2, #0
 800355a:	2105      	movs	r1, #5
 800355c:	202f      	movs	r0, #47	@ 0x2f
 800355e:	f003 fc0b 	bl	8006d78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8003562:	202f      	movs	r0, #47	@ 0x2f
 8003564:	f003 fc22 	bl	8006dac <HAL_NVIC_EnableIRQ>

}
 8003568:	bf00      	nop
 800356a:	3708      	adds	r7, #8
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	58024400 	.word	0x58024400

08003574 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8003574:	b580      	push	{r7, lr}
 8003576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
  /* Create InitTask first (it's fine to create before semaphores as we create semaphores
     below before the scheduler starts). */
  InitTaskHandle = osThreadNew(InitTask, NULL, &InitTask_attributes);
 8003578:	4a33      	ldr	r2, [pc, #204]	@ (8003648 <MX_FREERTOS_Init+0xd4>)
 800357a:	2100      	movs	r1, #0
 800357c:	4833      	ldr	r0, [pc, #204]	@ (800364c <MX_FREERTOS_Init+0xd8>)
 800357e:	f012 fbdd 	bl	8015d3c <osThreadNew>
 8003582:	4603      	mov	r3, r0
 8003584:	4a32      	ldr	r2, [pc, #200]	@ (8003650 <MX_FREERTOS_Init+0xdc>)
 8003586:	6013      	str	r3, [r2, #0]
  /* Add mutexes if required */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */

  ws2812_dma_semaphore = xSemaphoreCreateBinary();
 8003588:	2203      	movs	r2, #3
 800358a:	2100      	movs	r1, #0
 800358c:	2001      	movs	r0, #1
 800358e:	f012 fec0 	bl	8016312 <xQueueGenericCreate>
 8003592:	4603      	mov	r3, r0
 8003594:	4a2f      	ldr	r2, [pc, #188]	@ (8003654 <MX_FREERTOS_Init+0xe0>)
 8003596:	6013      	str	r3, [r2, #0]
  if (ws2812_dma_semaphore == NULL) {
 8003598:	4b2e      	ldr	r3, [pc, #184]	@ (8003654 <MX_FREERTOS_Init+0xe0>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d101      	bne.n	80035a4 <MX_FREERTOS_Init+0x30>
      Error_Handler();
 80035a0:	f001 fa04 	bl	80049ac <Error_Handler>
  }

  aircraftlights_dma_semaphore = xSemaphoreCreateBinary();
 80035a4:	2203      	movs	r2, #3
 80035a6:	2100      	movs	r1, #0
 80035a8:	2001      	movs	r0, #1
 80035aa:	f012 feb2 	bl	8016312 <xQueueGenericCreate>
 80035ae:	4603      	mov	r3, r0
 80035b0:	4a29      	ldr	r2, [pc, #164]	@ (8003658 <MX_FREERTOS_Init+0xe4>)
 80035b2:	6013      	str	r3, [r2, #0]
  if (aircraftlights_dma_semaphore == NULL) {
 80035b4:	4b28      	ldr	r3, [pc, #160]	@ (8003658 <MX_FREERTOS_Init+0xe4>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d101      	bne.n	80035c0 <MX_FREERTOS_Init+0x4c>
      Error_Handler();
 80035bc:	f001 f9f6 	bl	80049ac <Error_Handler>
  /* Add queues if required */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80035c0:	4a26      	ldr	r2, [pc, #152]	@ (800365c <MX_FREERTOS_Init+0xe8>)
 80035c2:	2100      	movs	r1, #0
 80035c4:	4826      	ldr	r0, [pc, #152]	@ (8003660 <MX_FREERTOS_Init+0xec>)
 80035c6:	f012 fbb9 	bl	8015d3c <osThreadNew>
 80035ca:	4603      	mov	r3, r0
 80035cc:	4a25      	ldr	r2, [pc, #148]	@ (8003664 <MX_FREERTOS_Init+0xf0>)
 80035ce:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(Task2_init, NULL, &Task2_attributes);
 80035d0:	4a25      	ldr	r2, [pc, #148]	@ (8003668 <MX_FREERTOS_Init+0xf4>)
 80035d2:	2100      	movs	r1, #0
 80035d4:	4825      	ldr	r0, [pc, #148]	@ (800366c <MX_FREERTOS_Init+0xf8>)
 80035d6:	f012 fbb1 	bl	8015d3c <osThreadNew>
 80035da:	4603      	mov	r3, r0
 80035dc:	4a24      	ldr	r2, [pc, #144]	@ (8003670 <MX_FREERTOS_Init+0xfc>)
 80035de:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  Task_1khzHandle = osThreadNew(Task_1khz_init, NULL, &Task_1khz_attributes);
 80035e0:	4a24      	ldr	r2, [pc, #144]	@ (8003674 <MX_FREERTOS_Init+0x100>)
 80035e2:	2100      	movs	r1, #0
 80035e4:	4824      	ldr	r0, [pc, #144]	@ (8003678 <MX_FREERTOS_Init+0x104>)
 80035e6:	f012 fba9 	bl	8015d3c <osThreadNew>
 80035ea:	4603      	mov	r3, r0
 80035ec:	4a23      	ldr	r2, [pc, #140]	@ (800367c <MX_FREERTOS_Init+0x108>)
 80035ee:	6013      	str	r3, [r2, #0]

  Task_100HzHandle = osThreadNew(Task_100Hz_init, NULL, &Task_100Hz_attributes);
 80035f0:	4a23      	ldr	r2, [pc, #140]	@ (8003680 <MX_FREERTOS_Init+0x10c>)
 80035f2:	2100      	movs	r1, #0
 80035f4:	4823      	ldr	r0, [pc, #140]	@ (8003684 <MX_FREERTOS_Init+0x110>)
 80035f6:	f012 fba1 	bl	8015d3c <osThreadNew>
 80035fa:	4603      	mov	r3, r0
 80035fc:	4a22      	ldr	r2, [pc, #136]	@ (8003688 <MX_FREERTOS_Init+0x114>)
 80035fe:	6013      	str	r3, [r2, #0]

  Task_50HzHandle = osThreadNew(Task_50Hz_init, NULL, &Task_50Hz_attributes);
 8003600:	4a22      	ldr	r2, [pc, #136]	@ (800368c <MX_FREERTOS_Init+0x118>)
 8003602:	2100      	movs	r1, #0
 8003604:	4822      	ldr	r0, [pc, #136]	@ (8003690 <MX_FREERTOS_Init+0x11c>)
 8003606:	f012 fb99 	bl	8015d3c <osThreadNew>
 800360a:	4603      	mov	r3, r0
 800360c:	4a21      	ldr	r2, [pc, #132]	@ (8003694 <MX_FREERTOS_Init+0x120>)
 800360e:	6013      	str	r3, [r2, #0]

  LedTaskHandle = osThreadNew(LedTask, NULL, &LedTask_attributes);
 8003610:	4a21      	ldr	r2, [pc, #132]	@ (8003698 <MX_FREERTOS_Init+0x124>)
 8003612:	2100      	movs	r1, #0
 8003614:	4821      	ldr	r0, [pc, #132]	@ (800369c <MX_FREERTOS_Init+0x128>)
 8003616:	f012 fb91 	bl	8015d3c <osThreadNew>
 800361a:	4603      	mov	r3, r0
 800361c:	4a20      	ldr	r2, [pc, #128]	@ (80036a0 <MX_FREERTOS_Init+0x12c>)
 800361e:	6013      	str	r3, [r2, #0]
  osThreadSuspend(LedTaskHandle);
 8003620:	4b1f      	ldr	r3, [pc, #124]	@ (80036a0 <MX_FREERTOS_Init+0x12c>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4618      	mov	r0, r3
 8003626:	f012 fc1b 	bl	8015e60 <osThreadSuspend>

  AircraftLightsTaskHandle = osThreadNew(AircraftLightsTask, NULL, &AircraftLightsTask_attributes);
 800362a:	4a1e      	ldr	r2, [pc, #120]	@ (80036a4 <MX_FREERTOS_Init+0x130>)
 800362c:	2100      	movs	r1, #0
 800362e:	481e      	ldr	r0, [pc, #120]	@ (80036a8 <MX_FREERTOS_Init+0x134>)
 8003630:	f012 fb84 	bl	8015d3c <osThreadNew>
 8003634:	4603      	mov	r3, r0
 8003636:	4a1d      	ldr	r2, [pc, #116]	@ (80036ac <MX_FREERTOS_Init+0x138>)
 8003638:	6013      	str	r3, [r2, #0]
  osThreadSuspend(AircraftLightsTaskHandle);  // Start suspended, resume after init
 800363a:	4b1c      	ldr	r3, [pc, #112]	@ (80036ac <MX_FREERTOS_Init+0x138>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4618      	mov	r0, r3
 8003640:	f012 fc0e 	bl	8015e60 <osThreadSuspend>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* Add event groups if required */
  /* USER CODE END RTOS_EVENTS */

}
 8003644:	bf00      	nop
 8003646:	bd80      	pop	{r7, pc}
 8003648:	0801f8c0 	.word	0x0801f8c0
 800364c:	0800371d 	.word	0x0800371d
 8003650:	2400097c 	.word	0x2400097c
 8003654:	24000968 	.word	0x24000968
 8003658:	2400096c 	.word	0x2400096c
 800365c:	0801f92c 	.word	0x0801f92c
 8003660:	080036b1 	.word	0x080036b1
 8003664:	24000988 	.word	0x24000988
 8003668:	0801f950 	.word	0x0801f950
 800366c:	080036c5 	.word	0x080036c5
 8003670:	2400098c 	.word	0x2400098c
 8003674:	0801f854 	.word	0x0801f854
 8003678:	080036e5 	.word	0x080036e5
 800367c:	24000970 	.word	0x24000970
 8003680:	0801f878 	.word	0x0801f878
 8003684:	080036fb 	.word	0x080036fb
 8003688:	24000974 	.word	0x24000974
 800368c:	0801f89c 	.word	0x0801f89c
 8003690:	0800370b 	.word	0x0800370b
 8003694:	24000978 	.word	0x24000978
 8003698:	0801f8e4 	.word	0x0801f8e4
 800369c:	080037c1 	.word	0x080037c1
 80036a0:	24000980 	.word	0x24000980
 80036a4:	0801f908 	.word	0x0801f908
 80036a8:	08003803 	.word	0x08003803
 80036ac:	24000984 	.word	0x24000984

080036b0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  for(;;) {
//    HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
    osDelay(800);
 80036b8:	f44f 7048 	mov.w	r0, #800	@ 0x320
 80036bc:	f012 fc3f 	bl	8015f3e <osDelay>
 80036c0:	e7fa      	b.n	80036b8 <StartDefaultTask+0x8>
	...

080036c4 <Task2_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task2_init */
void Task2_init(void *argument)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task2_init */
  for(;;) {
    HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_5);
 80036cc:	2120      	movs	r1, #32
 80036ce:	4804      	ldr	r0, [pc, #16]	@ (80036e0 <Task2_init+0x1c>)
 80036d0:	f006 fbf9 	bl	8009ec6 <HAL_GPIO_TogglePin>
    osDelay(500);
 80036d4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80036d8:	f012 fc31 	bl	8015f3e <osDelay>
    HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_5);
 80036dc:	bf00      	nop
 80036de:	e7f5      	b.n	80036cc <Task2_init+0x8>
 80036e0:	58021000 	.word	0x58021000

080036e4 <Task_1khz_init>:
  * This task blocks on icmIntSem which is given from the EXTI ISR when the
  * ICM42688P's DRDY/INT pin pulses. After waking it calls fusion() which
  * performs the read/process (unchanged behavior).
  */
void Task_1khz_init(void *argument)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
	for(;;) {

		run_imu();
 80036ec:	f000 fdc2 	bl	8004274 <run_imu>
		osDelay(1);
 80036f0:	2001      	movs	r0, #1
 80036f2:	f012 fc24 	bl	8015f3e <osDelay>
		run_imu();
 80036f6:	bf00      	nop
 80036f8:	e7f8      	b.n	80036ec <Task_1khz_init+0x8>

080036fa <Task_100Hz_init>:

    }
}

void Task_100Hz_init(void *argument)
{
 80036fa:	b580      	push	{r7, lr}
 80036fc:	b082      	sub	sp, #8
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
	for(;;) {

//		run_mag();
//		FSiA6B_Print();
		osDelay(100);
 8003702:	2064      	movs	r0, #100	@ 0x64
 8003704:	f012 fc1b 	bl	8015f3e <osDelay>
 8003708:	e7fb      	b.n	8003702 <Task_100Hz_init+0x8>

0800370a <Task_50Hz_init>:

	}
}

void Task_50Hz_init(void *argument)
{
 800370a:	b580      	push	{r7, lr}
 800370c:	b082      	sub	sp, #8
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
	for(;;) {
//		printf("Hello, World\n");

		osDelay(20);
 8003712:	2014      	movs	r0, #20
 8003714:	f012 fc13 	bl	8015f3e <osDelay>
 8003718:	e7fb      	b.n	8003712 <Task_50Hz_init+0x8>
	...

0800371c <InitTask>:
}
/**
  * @brief InitTask: Initializes sensors & WS2812
  */
void InitTask(void *argument)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
    printf("Starting sensor initialization...\r\n");
 8003724:	481c      	ldr	r0, [pc, #112]	@ (8003798 <InitTask+0x7c>)
 8003726:	f017 fb25 	bl	801ad74 <puts>

    /* Suspend IMU loop while we init hardware */
    osThreadSuspend(Task_1khzHandle);
 800372a:	4b1c      	ldr	r3, [pc, #112]	@ (800379c <InitTask+0x80>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4618      	mov	r0, r3
 8003730:	f012 fb96 	bl	8015e60 <osThreadSuspend>
    osDelay(200);
 8003734:	20c8      	movs	r0, #200	@ 0xc8
 8003736:	f012 fc02 	bl	8015f3e <osDelay>

    /* Initialize sensors (this will call ICM42688P_Init, which enables DRDY on the IMU) */
    sensor_init();
 800373a:	f000 fe0d 	bl	8004358 <sensor_init>
    printf("Sensor initialization complete.\r\n");
 800373e:	4818      	ldr	r0, [pc, #96]	@ (80037a0 <InitTask+0x84>)
 8003740:	f017 fb18 	bl	801ad74 <puts>

    /* Initialize WS2812 and AircraftLights using same timer (htim3) */
    extern TIM_HandleTypeDef htim3;
    WS2812_Init(&htim3);
 8003744:	4817      	ldr	r0, [pc, #92]	@ (80037a4 <InitTask+0x88>)
 8003746:	f7ff fb3f 	bl	8002dc8 <WS2812_Init>
    printf("WS2812 LED Driver Initialized.\r\n");
 800374a:	4817      	ldr	r0, [pc, #92]	@ (80037a8 <InitTask+0x8c>)
 800374c:	f017 fb12 	bl	801ad74 <puts>

    AIRCRAFTLIGHTS_Init(&htim3);
 8003750:	4814      	ldr	r0, [pc, #80]	@ (80037a4 <InitTask+0x88>)
 8003752:	f7ff f991 	bl	8002a78 <AIRCRAFTLIGHTS_Init>
    printf("AircraftLights Driver Initialized.\r\n");
 8003756:	4815      	ldr	r0, [pc, #84]	@ (80037ac <InitTask+0x90>)
 8003758:	f017 fb0c 	bl	801ad74 <puts>

    cmd_mode_check();
 800375c:	f001 f89e 	bl	800489c <cmd_mode_check>

    /* Resume tasks that were suspended during init */
    osThreadResume(Task_1khzHandle);
 8003760:	4b0e      	ldr	r3, [pc, #56]	@ (800379c <InitTask+0x80>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4618      	mov	r0, r3
 8003766:	f012 fb9c 	bl	8015ea2 <osThreadResume>
    osThreadResume(LedTaskHandle);
 800376a:	4b11      	ldr	r3, [pc, #68]	@ (80037b0 <InitTask+0x94>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4618      	mov	r0, r3
 8003770:	f012 fb97 	bl	8015ea2 <osThreadResume>
    osThreadResume(AircraftLightsTaskHandle);
 8003774:	4b0f      	ldr	r3, [pc, #60]	@ (80037b4 <InitTask+0x98>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4618      	mov	r0, r3
 800377a:	f012 fb92 	bl	8015ea2 <osThreadResume>

    printf("InitTask complete. Deleting InitTask...\r\n");
 800377e:	480e      	ldr	r0, [pc, #56]	@ (80037b8 <InitTask+0x9c>)
 8003780:	f017 faf8 	bl	801ad74 <puts>
    osThreadTerminate(InitTaskHandle);
 8003784:	4b0d      	ldr	r3, [pc, #52]	@ (80037bc <InitTask+0xa0>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4618      	mov	r0, r3
 800378a:	f012 fbab 	bl	8015ee4 <osThreadTerminate>
}
 800378e:	bf00      	nop
 8003790:	3708      	adds	r7, #8
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	0801f1b8 	.word	0x0801f1b8
 800379c:	24000970 	.word	0x24000970
 80037a0:	0801f1dc 	.word	0x0801f1dc
 80037a4:	24000e8c 	.word	0x24000e8c
 80037a8:	0801f200 	.word	0x0801f200
 80037ac:	0801f220 	.word	0x0801f220
 80037b0:	24000980 	.word	0x24000980
 80037b4:	24000984 	.word	0x24000984
 80037b8:	0801f244 	.word	0x0801f244
 80037bc:	2400097c 	.word	0x2400097c

080037c0 <LedTask>:

/**
  * @brief LedTask: Controls WS2812 LED
  */
void LedTask(void *argument)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
    for(;;) {

    	main_led(0, 0, 0, 0, 1.0);
 80037c8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80037cc:	2300      	movs	r3, #0
 80037ce:	2200      	movs	r2, #0
 80037d0:	2100      	movs	r1, #0
 80037d2:	2000      	movs	r0, #0
 80037d4:	f7ff fb1a 	bl	8002e0c <main_led>
    	main_led_update();
 80037d8:	f7ff fbf4 	bl	8002fc4 <main_led_update>

    	vTaskDelay(pdMS_TO_TICKS(500));
 80037dc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80037e0:	f013 fdd0 	bl	8017384 <vTaskDelay>

    	main_led(0, 255, 0, 0, 1.0);
 80037e4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80037e8:	2300      	movs	r3, #0
 80037ea:	2200      	movs	r2, #0
 80037ec:	21ff      	movs	r1, #255	@ 0xff
 80037ee:	2000      	movs	r0, #0
 80037f0:	f7ff fb0c 	bl	8002e0c <main_led>
    	main_led_update();
 80037f4:	f7ff fbe6 	bl	8002fc4 <main_led_update>

    	vTaskDelay(pdMS_TO_TICKS(30));
 80037f8:	201e      	movs	r0, #30
 80037fa:	f013 fdc3 	bl	8017384 <vTaskDelay>
    	main_led(0, 0, 0, 0, 1.0);
 80037fe:	bf00      	nop
 8003800:	e7e2      	b.n	80037c8 <LedTask+0x8>

08003802 <AircraftLightsTask>:

/**
  * @brief AircraftLightsTask: Controls Aircraft Lights
  */
void AircraftLightsTask(void *argument)
{
 8003802:	b580      	push	{r7, lr}
 8003804:	b082      	sub	sp, #8
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
    for(;;) {

    	aircraftlights(0, 255, 0, 0, 1.0);  // Red
 800380a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800380e:	2300      	movs	r3, #0
 8003810:	2200      	movs	r2, #0
 8003812:	21ff      	movs	r1, #255	@ 0xff
 8003814:	2000      	movs	r0, #0
 8003816:	f7ff f951 	bl	8002abc <aircraftlights>
    	aircraftlights(1, 0, 255, 0, 1.0);  // Green
 800381a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800381e:	2300      	movs	r3, #0
 8003820:	22ff      	movs	r2, #255	@ 0xff
 8003822:	2100      	movs	r1, #0
 8003824:	2001      	movs	r0, #1
 8003826:	f7ff f949 	bl	8002abc <aircraftlights>
    	aircraftlights(2, 0, 255, 0, 1.0);  // Green
 800382a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800382e:	2300      	movs	r3, #0
 8003830:	22ff      	movs	r2, #255	@ 0xff
 8003832:	2100      	movs	r1, #0
 8003834:	2002      	movs	r0, #2
 8003836:	f7ff f941 	bl	8002abc <aircraftlights>
    	aircraftlights(3, 255, 0, 0, 1.0);  // Red
 800383a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800383e:	2300      	movs	r3, #0
 8003840:	2200      	movs	r2, #0
 8003842:	21ff      	movs	r1, #255	@ 0xff
 8003844:	2003      	movs	r0, #3
 8003846:	f7ff f939 	bl	8002abc <aircraftlights>
    	aircraftlights_update();
 800384a:	f7ff fa13 	bl	8002c74 <aircraftlights_update>

    	vTaskDelay(pdMS_TO_TICKS(2000));
 800384e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003852:	f013 fd97 	bl	8017384 <vTaskDelay>

    	aircraftlights(0, 255, 255, 255, 1.0);
 8003856:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800385a:	23ff      	movs	r3, #255	@ 0xff
 800385c:	22ff      	movs	r2, #255	@ 0xff
 800385e:	21ff      	movs	r1, #255	@ 0xff
 8003860:	2000      	movs	r0, #0
 8003862:	f7ff f92b 	bl	8002abc <aircraftlights>
    	aircraftlights(3, 255, 255, 255, 1.0);
 8003866:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800386a:	23ff      	movs	r3, #255	@ 0xff
 800386c:	22ff      	movs	r2, #255	@ 0xff
 800386e:	21ff      	movs	r1, #255	@ 0xff
 8003870:	2003      	movs	r0, #3
 8003872:	f7ff f923 	bl	8002abc <aircraftlights>
    	aircraftlights_update();
 8003876:	f7ff f9fd 	bl	8002c74 <aircraftlights_update>

    	vTaskDelay(pdMS_TO_TICKS(35));
 800387a:	2023      	movs	r0, #35	@ 0x23
 800387c:	f013 fd82 	bl	8017384 <vTaskDelay>

    	aircraftlights(0, 255, 0, 0, 1.0);
 8003880:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8003884:	2300      	movs	r3, #0
 8003886:	2200      	movs	r2, #0
 8003888:	21ff      	movs	r1, #255	@ 0xff
 800388a:	2000      	movs	r0, #0
 800388c:	f7ff f916 	bl	8002abc <aircraftlights>
    	aircraftlights(3, 255, 0, 0, 1.0);
 8003890:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8003894:	2300      	movs	r3, #0
 8003896:	2200      	movs	r2, #0
 8003898:	21ff      	movs	r1, #255	@ 0xff
 800389a:	2003      	movs	r0, #3
 800389c:	f7ff f90e 	bl	8002abc <aircraftlights>
    	aircraftlights_update();
 80038a0:	f7ff f9e8 	bl	8002c74 <aircraftlights_update>

    	vTaskDelay(pdMS_TO_TICKS(35));
 80038a4:	2023      	movs	r0, #35	@ 0x23
 80038a6:	f013 fd6d 	bl	8017384 <vTaskDelay>

    	aircraftlights(0, 255, 255, 255, 1.0);
 80038aa:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80038ae:	23ff      	movs	r3, #255	@ 0xff
 80038b0:	22ff      	movs	r2, #255	@ 0xff
 80038b2:	21ff      	movs	r1, #255	@ 0xff
 80038b4:	2000      	movs	r0, #0
 80038b6:	f7ff f901 	bl	8002abc <aircraftlights>
    	aircraftlights(3, 255, 255, 255, 1.0);
 80038ba:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80038be:	23ff      	movs	r3, #255	@ 0xff
 80038c0:	22ff      	movs	r2, #255	@ 0xff
 80038c2:	21ff      	movs	r1, #255	@ 0xff
 80038c4:	2003      	movs	r0, #3
 80038c6:	f7ff f8f9 	bl	8002abc <aircraftlights>
    	aircraftlights_update();
 80038ca:	f7ff f9d3 	bl	8002c74 <aircraftlights_update>

    	vTaskDelay(pdMS_TO_TICKS(35));
 80038ce:	2023      	movs	r0, #35	@ 0x23
 80038d0:	f013 fd58 	bl	8017384 <vTaskDelay>

    	aircraftlights(0, 255, 0, 0, 1.0);
 80038d4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80038d8:	2300      	movs	r3, #0
 80038da:	2200      	movs	r2, #0
 80038dc:	21ff      	movs	r1, #255	@ 0xff
 80038de:	2000      	movs	r0, #0
 80038e0:	f7ff f8ec 	bl	8002abc <aircraftlights>
    	aircraftlights(3, 255, 0, 0, 1.0);
 80038e4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80038e8:	2300      	movs	r3, #0
 80038ea:	2200      	movs	r2, #0
 80038ec:	21ff      	movs	r1, #255	@ 0xff
 80038ee:	2003      	movs	r0, #3
 80038f0:	f7ff f8e4 	bl	8002abc <aircraftlights>
    	aircraftlights_update();
 80038f4:	f7ff f9be 	bl	8002c74 <aircraftlights_update>

    	vTaskDelay(pdMS_TO_TICKS(35));
 80038f8:	2023      	movs	r0, #35	@ 0x23
 80038fa:	f013 fd43 	bl	8017384 <vTaskDelay>
    	aircraftlights(0, 255, 0, 0, 1.0);  // Red
 80038fe:	bf00      	nop
 8003900:	e783      	b.n	800380a <AircraftLightsTask+0x8>
	...

08003904 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b08c      	sub	sp, #48	@ 0x30
 8003908:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800390a:	f107 031c 	add.w	r3, r7, #28
 800390e:	2200      	movs	r2, #0
 8003910:	601a      	str	r2, [r3, #0]
 8003912:	605a      	str	r2, [r3, #4]
 8003914:	609a      	str	r2, [r3, #8]
 8003916:	60da      	str	r2, [r3, #12]
 8003918:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800391a:	4b49      	ldr	r3, [pc, #292]	@ (8003a40 <MX_GPIO_Init+0x13c>)
 800391c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003920:	4a47      	ldr	r2, [pc, #284]	@ (8003a40 <MX_GPIO_Init+0x13c>)
 8003922:	f043 0310 	orr.w	r3, r3, #16
 8003926:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800392a:	4b45      	ldr	r3, [pc, #276]	@ (8003a40 <MX_GPIO_Init+0x13c>)
 800392c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003930:	f003 0310 	and.w	r3, r3, #16
 8003934:	61bb      	str	r3, [r7, #24]
 8003936:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003938:	4b41      	ldr	r3, [pc, #260]	@ (8003a40 <MX_GPIO_Init+0x13c>)
 800393a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800393e:	4a40      	ldr	r2, [pc, #256]	@ (8003a40 <MX_GPIO_Init+0x13c>)
 8003940:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003944:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003948:	4b3d      	ldr	r3, [pc, #244]	@ (8003a40 <MX_GPIO_Init+0x13c>)
 800394a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800394e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003952:	617b      	str	r3, [r7, #20]
 8003954:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003956:	4b3a      	ldr	r3, [pc, #232]	@ (8003a40 <MX_GPIO_Init+0x13c>)
 8003958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800395c:	4a38      	ldr	r2, [pc, #224]	@ (8003a40 <MX_GPIO_Init+0x13c>)
 800395e:	f043 0301 	orr.w	r3, r3, #1
 8003962:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003966:	4b36      	ldr	r3, [pc, #216]	@ (8003a40 <MX_GPIO_Init+0x13c>)
 8003968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800396c:	f003 0301 	and.w	r3, r3, #1
 8003970:	613b      	str	r3, [r7, #16]
 8003972:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003974:	4b32      	ldr	r3, [pc, #200]	@ (8003a40 <MX_GPIO_Init+0x13c>)
 8003976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800397a:	4a31      	ldr	r2, [pc, #196]	@ (8003a40 <MX_GPIO_Init+0x13c>)
 800397c:	f043 0302 	orr.w	r3, r3, #2
 8003980:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003984:	4b2e      	ldr	r3, [pc, #184]	@ (8003a40 <MX_GPIO_Init+0x13c>)
 8003986:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800398a:	f003 0302 	and.w	r3, r3, #2
 800398e:	60fb      	str	r3, [r7, #12]
 8003990:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003992:	4b2b      	ldr	r3, [pc, #172]	@ (8003a40 <MX_GPIO_Init+0x13c>)
 8003994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003998:	4a29      	ldr	r2, [pc, #164]	@ (8003a40 <MX_GPIO_Init+0x13c>)
 800399a:	f043 0308 	orr.w	r3, r3, #8
 800399e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80039a2:	4b27      	ldr	r3, [pc, #156]	@ (8003a40 <MX_GPIO_Init+0x13c>)
 80039a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80039a8:	f003 0308 	and.w	r3, r3, #8
 80039ac:	60bb      	str	r3, [r7, #8]
 80039ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80039b0:	4b23      	ldr	r3, [pc, #140]	@ (8003a40 <MX_GPIO_Init+0x13c>)
 80039b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80039b6:	4a22      	ldr	r2, [pc, #136]	@ (8003a40 <MX_GPIO_Init+0x13c>)
 80039b8:	f043 0304 	orr.w	r3, r3, #4
 80039bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80039c0:	4b1f      	ldr	r3, [pc, #124]	@ (8003a40 <MX_GPIO_Init+0x13c>)
 80039c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80039c6:	f003 0304 	and.w	r3, r3, #4
 80039ca:	607b      	str	r3, [r7, #4]
 80039cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_5, GPIO_PIN_RESET);
 80039ce:	2200      	movs	r2, #0
 80039d0:	2128      	movs	r1, #40	@ 0x28
 80039d2:	481c      	ldr	r0, [pc, #112]	@ (8003a44 <MX_GPIO_Init+0x140>)
 80039d4:	f006 fa5e 	bl	8009e94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 80039d8:	2201      	movs	r2, #1
 80039da:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80039de:	481a      	ldr	r0, [pc, #104]	@ (8003a48 <MX_GPIO_Init+0x144>)
 80039e0:	f006 fa58 	bl	8009e94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80039e4:	2328      	movs	r3, #40	@ 0x28
 80039e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039e8:	2301      	movs	r3, #1
 80039ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ec:	2300      	movs	r3, #0
 80039ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039f0:	2300      	movs	r3, #0
 80039f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80039f4:	f107 031c 	add.w	r3, r7, #28
 80039f8:	4619      	mov	r1, r3
 80039fa:	4812      	ldr	r0, [pc, #72]	@ (8003a44 <MX_GPIO_Init+0x140>)
 80039fc:	f006 f8a2 	bl	8009b44 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_INT_Pin */
  GPIO_InitStruct.Pin = SPI3_INT_Pin;
 8003a00:	2310      	movs	r3, #16
 8003a02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003a04:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003a08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SPI3_INT_GPIO_Port, &GPIO_InitStruct);
 8003a0e:	f107 031c 	add.w	r3, r7, #28
 8003a12:	4619      	mov	r1, r3
 8003a14:	480b      	ldr	r0, [pc, #44]	@ (8003a44 <MX_GPIO_Init+0x140>)
 8003a16:	f006 f895 	bl	8009b44 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8003a1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a20:	2301      	movs	r3, #1
 8003a22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a24:	2300      	movs	r3, #0
 8003a26:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8003a2c:	f107 031c 	add.w	r3, r7, #28
 8003a30:	4619      	mov	r1, r3
 8003a32:	4805      	ldr	r0, [pc, #20]	@ (8003a48 <MX_GPIO_Init+0x144>)
 8003a34:	f006 f886 	bl	8009b44 <HAL_GPIO_Init>

}
 8003a38:	bf00      	nop
 8003a3a:	3730      	adds	r7, #48	@ 0x30
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	58024400 	.word	0x58024400
 8003a44:	58021000 	.word	0x58021000
 8003a48:	58020000 	.word	0x58020000

08003a4c <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003a50:	4b1b      	ldr	r3, [pc, #108]	@ (8003ac0 <MX_I2C1_Init+0x74>)
 8003a52:	4a1c      	ldr	r2, [pc, #112]	@ (8003ac4 <MX_I2C1_Init+0x78>)
 8003a54:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00D049FB;
 8003a56:	4b1a      	ldr	r3, [pc, #104]	@ (8003ac0 <MX_I2C1_Init+0x74>)
 8003a58:	4a1b      	ldr	r2, [pc, #108]	@ (8003ac8 <MX_I2C1_Init+0x7c>)
 8003a5a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003a5c:	4b18      	ldr	r3, [pc, #96]	@ (8003ac0 <MX_I2C1_Init+0x74>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003a62:	4b17      	ldr	r3, [pc, #92]	@ (8003ac0 <MX_I2C1_Init+0x74>)
 8003a64:	2201      	movs	r2, #1
 8003a66:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003a68:	4b15      	ldr	r3, [pc, #84]	@ (8003ac0 <MX_I2C1_Init+0x74>)
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003a6e:	4b14      	ldr	r3, [pc, #80]	@ (8003ac0 <MX_I2C1_Init+0x74>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003a74:	4b12      	ldr	r3, [pc, #72]	@ (8003ac0 <MX_I2C1_Init+0x74>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003a7a:	4b11      	ldr	r3, [pc, #68]	@ (8003ac0 <MX_I2C1_Init+0x74>)
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003a80:	4b0f      	ldr	r3, [pc, #60]	@ (8003ac0 <MX_I2C1_Init+0x74>)
 8003a82:	2200      	movs	r2, #0
 8003a84:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003a86:	480e      	ldr	r0, [pc, #56]	@ (8003ac0 <MX_I2C1_Init+0x74>)
 8003a88:	f006 fa38 	bl	8009efc <HAL_I2C_Init>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003a92:	f000 ff8b 	bl	80049ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003a96:	2100      	movs	r1, #0
 8003a98:	4809      	ldr	r0, [pc, #36]	@ (8003ac0 <MX_I2C1_Init+0x74>)
 8003a9a:	f007 fe63 	bl	800b764 <HAL_I2CEx_ConfigAnalogFilter>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d001      	beq.n	8003aa8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003aa4:	f000 ff82 	bl	80049ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003aa8:	2100      	movs	r1, #0
 8003aaa:	4805      	ldr	r0, [pc, #20]	@ (8003ac0 <MX_I2C1_Init+0x74>)
 8003aac:	f007 fea5 	bl	800b7fa <HAL_I2CEx_ConfigDigitalFilter>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d001      	beq.n	8003aba <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003ab6:	f000 ff79 	bl	80049ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003aba:	bf00      	nop
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	24000990 	.word	0x24000990
 8003ac4:	40005400 	.word	0x40005400
 8003ac8:	00d049fb 	.word	0x00d049fb

08003acc <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003ad0:	4b1b      	ldr	r3, [pc, #108]	@ (8003b40 <MX_I2C2_Init+0x74>)
 8003ad2:	4a1c      	ldr	r2, [pc, #112]	@ (8003b44 <MX_I2C2_Init+0x78>)
 8003ad4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00D049FB;
 8003ad6:	4b1a      	ldr	r3, [pc, #104]	@ (8003b40 <MX_I2C2_Init+0x74>)
 8003ad8:	4a1b      	ldr	r2, [pc, #108]	@ (8003b48 <MX_I2C2_Init+0x7c>)
 8003ada:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8003adc:	4b18      	ldr	r3, [pc, #96]	@ (8003b40 <MX_I2C2_Init+0x74>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003ae2:	4b17      	ldr	r3, [pc, #92]	@ (8003b40 <MX_I2C2_Init+0x74>)
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003ae8:	4b15      	ldr	r3, [pc, #84]	@ (8003b40 <MX_I2C2_Init+0x74>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8003aee:	4b14      	ldr	r3, [pc, #80]	@ (8003b40 <MX_I2C2_Init+0x74>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003af4:	4b12      	ldr	r3, [pc, #72]	@ (8003b40 <MX_I2C2_Init+0x74>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003afa:	4b11      	ldr	r3, [pc, #68]	@ (8003b40 <MX_I2C2_Init+0x74>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003b00:	4b0f      	ldr	r3, [pc, #60]	@ (8003b40 <MX_I2C2_Init+0x74>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003b06:	480e      	ldr	r0, [pc, #56]	@ (8003b40 <MX_I2C2_Init+0x74>)
 8003b08:	f006 f9f8 	bl	8009efc <HAL_I2C_Init>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d001      	beq.n	8003b16 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8003b12:	f000 ff4b 	bl	80049ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003b16:	2100      	movs	r1, #0
 8003b18:	4809      	ldr	r0, [pc, #36]	@ (8003b40 <MX_I2C2_Init+0x74>)
 8003b1a:	f007 fe23 	bl	800b764 <HAL_I2CEx_ConfigAnalogFilter>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d001      	beq.n	8003b28 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8003b24:	f000 ff42 	bl	80049ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003b28:	2100      	movs	r1, #0
 8003b2a:	4805      	ldr	r0, [pc, #20]	@ (8003b40 <MX_I2C2_Init+0x74>)
 8003b2c:	f007 fe65 	bl	800b7fa <HAL_I2CEx_ConfigDigitalFilter>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d001      	beq.n	8003b3a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8003b36:	f000 ff39 	bl	80049ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003b3a:	bf00      	nop
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	240009e4 	.word	0x240009e4
 8003b44:	40005800 	.word	0x40005800
 8003b48:	00d049fb 	.word	0x00d049fb

08003b4c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b0ba      	sub	sp, #232	@ 0xe8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b54:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003b58:	2200      	movs	r2, #0
 8003b5a:	601a      	str	r2, [r3, #0]
 8003b5c:	605a      	str	r2, [r3, #4]
 8003b5e:	609a      	str	r2, [r3, #8]
 8003b60:	60da      	str	r2, [r3, #12]
 8003b62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003b64:	f107 0318 	add.w	r3, r7, #24
 8003b68:	22b8      	movs	r2, #184	@ 0xb8
 8003b6a:	2100      	movs	r1, #0
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f017 fa4b 	bl	801b008 <memset>
  if(i2cHandle->Instance==I2C1)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a5b      	ldr	r2, [pc, #364]	@ (8003ce4 <HAL_I2C_MspInit+0x198>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	f040 80c1 	bne.w	8003d00 <HAL_I2C_MspInit+0x1b4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003b7e:	f04f 0208 	mov.w	r2, #8
 8003b82:	f04f 0300 	mov.w	r3, #0
 8003b86:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b90:	f107 0318 	add.w	r3, r7, #24
 8003b94:	4618      	mov	r0, r3
 8003b96:	f00a f825 	bl	800dbe4 <HAL_RCCEx_PeriphCLKConfig>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d001      	beq.n	8003ba4 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8003ba0:	f000 ff04 	bl	80049ac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ba4:	4b50      	ldr	r3, [pc, #320]	@ (8003ce8 <HAL_I2C_MspInit+0x19c>)
 8003ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003baa:	4a4f      	ldr	r2, [pc, #316]	@ (8003ce8 <HAL_I2C_MspInit+0x19c>)
 8003bac:	f043 0302 	orr.w	r3, r3, #2
 8003bb0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003bb4:	4b4c      	ldr	r3, [pc, #304]	@ (8003ce8 <HAL_I2C_MspInit+0x19c>)
 8003bb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	617b      	str	r3, [r7, #20]
 8003bc0:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8003bc2:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8003bc6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003bca:	2312      	movs	r3, #18
 8003bcc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003bdc:	2304      	movs	r3, #4
 8003bde:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003be2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003be6:	4619      	mov	r1, r3
 8003be8:	4840      	ldr	r0, [pc, #256]	@ (8003cec <HAL_I2C_MspInit+0x1a0>)
 8003bea:	f005 ffab 	bl	8009b44 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003bee:	4b3e      	ldr	r3, [pc, #248]	@ (8003ce8 <HAL_I2C_MspInit+0x19c>)
 8003bf0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003bf4:	4a3c      	ldr	r2, [pc, #240]	@ (8003ce8 <HAL_I2C_MspInit+0x19c>)
 8003bf6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003bfa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003bfe:	4b3a      	ldr	r3, [pc, #232]	@ (8003ce8 <HAL_I2C_MspInit+0x19c>)
 8003c00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003c04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c08:	613b      	str	r3, [r7, #16]
 8003c0a:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8003c0c:	4b38      	ldr	r3, [pc, #224]	@ (8003cf0 <HAL_I2C_MspInit+0x1a4>)
 8003c0e:	4a39      	ldr	r2, [pc, #228]	@ (8003cf4 <HAL_I2C_MspInit+0x1a8>)
 8003c10:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8003c12:	4b37      	ldr	r3, [pc, #220]	@ (8003cf0 <HAL_I2C_MspInit+0x1a4>)
 8003c14:	2221      	movs	r2, #33	@ 0x21
 8003c16:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c18:	4b35      	ldr	r3, [pc, #212]	@ (8003cf0 <HAL_I2C_MspInit+0x1a4>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c1e:	4b34      	ldr	r3, [pc, #208]	@ (8003cf0 <HAL_I2C_MspInit+0x1a4>)
 8003c20:	2200      	movs	r2, #0
 8003c22:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003c24:	4b32      	ldr	r3, [pc, #200]	@ (8003cf0 <HAL_I2C_MspInit+0x1a4>)
 8003c26:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c2a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c2c:	4b30      	ldr	r3, [pc, #192]	@ (8003cf0 <HAL_I2C_MspInit+0x1a4>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c32:	4b2f      	ldr	r3, [pc, #188]	@ (8003cf0 <HAL_I2C_MspInit+0x1a4>)
 8003c34:	2200      	movs	r2, #0
 8003c36:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8003c38:	4b2d      	ldr	r3, [pc, #180]	@ (8003cf0 <HAL_I2C_MspInit+0x1a4>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003c3e:	4b2c      	ldr	r3, [pc, #176]	@ (8003cf0 <HAL_I2C_MspInit+0x1a4>)
 8003c40:	2200      	movs	r2, #0
 8003c42:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c44:	4b2a      	ldr	r3, [pc, #168]	@ (8003cf0 <HAL_I2C_MspInit+0x1a4>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8003c4a:	4829      	ldr	r0, [pc, #164]	@ (8003cf0 <HAL_I2C_MspInit+0x1a4>)
 8003c4c:	f003 f934 	bl	8006eb8 <HAL_DMA_Init>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d001      	beq.n	8003c5a <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 8003c56:	f000 fea9 	bl	80049ac <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a24      	ldr	r2, [pc, #144]	@ (8003cf0 <HAL_I2C_MspInit+0x1a4>)
 8003c5e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003c60:	4a23      	ldr	r2, [pc, #140]	@ (8003cf0 <HAL_I2C_MspInit+0x1a4>)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8003c66:	4b24      	ldr	r3, [pc, #144]	@ (8003cf8 <HAL_I2C_MspInit+0x1ac>)
 8003c68:	4a24      	ldr	r2, [pc, #144]	@ (8003cfc <HAL_I2C_MspInit+0x1b0>)
 8003c6a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8003c6c:	4b22      	ldr	r3, [pc, #136]	@ (8003cf8 <HAL_I2C_MspInit+0x1ac>)
 8003c6e:	2222      	movs	r2, #34	@ 0x22
 8003c70:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003c72:	4b21      	ldr	r3, [pc, #132]	@ (8003cf8 <HAL_I2C_MspInit+0x1ac>)
 8003c74:	2240      	movs	r2, #64	@ 0x40
 8003c76:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c78:	4b1f      	ldr	r3, [pc, #124]	@ (8003cf8 <HAL_I2C_MspInit+0x1ac>)
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003c7e:	4b1e      	ldr	r3, [pc, #120]	@ (8003cf8 <HAL_I2C_MspInit+0x1ac>)
 8003c80:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c84:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c86:	4b1c      	ldr	r3, [pc, #112]	@ (8003cf8 <HAL_I2C_MspInit+0x1ac>)
 8003c88:	2200      	movs	r2, #0
 8003c8a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c8c:	4b1a      	ldr	r3, [pc, #104]	@ (8003cf8 <HAL_I2C_MspInit+0x1ac>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8003c92:	4b19      	ldr	r3, [pc, #100]	@ (8003cf8 <HAL_I2C_MspInit+0x1ac>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003c98:	4b17      	ldr	r3, [pc, #92]	@ (8003cf8 <HAL_I2C_MspInit+0x1ac>)
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c9e:	4b16      	ldr	r3, [pc, #88]	@ (8003cf8 <HAL_I2C_MspInit+0x1ac>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8003ca4:	4814      	ldr	r0, [pc, #80]	@ (8003cf8 <HAL_I2C_MspInit+0x1ac>)
 8003ca6:	f003 f907 	bl	8006eb8 <HAL_DMA_Init>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d001      	beq.n	8003cb4 <HAL_I2C_MspInit+0x168>
    {
      Error_Handler();
 8003cb0:	f000 fe7c 	bl	80049ac <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4a10      	ldr	r2, [pc, #64]	@ (8003cf8 <HAL_I2C_MspInit+0x1ac>)
 8003cb8:	639a      	str	r2, [r3, #56]	@ 0x38
 8003cba:	4a0f      	ldr	r2, [pc, #60]	@ (8003cf8 <HAL_I2C_MspInit+0x1ac>)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	2105      	movs	r1, #5
 8003cc4:	201f      	movs	r0, #31
 8003cc6:	f003 f857 	bl	8006d78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003cca:	201f      	movs	r0, #31
 8003ccc:	f003 f86e 	bl	8006dac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	2105      	movs	r1, #5
 8003cd4:	2020      	movs	r0, #32
 8003cd6:	f003 f84f 	bl	8006d78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003cda:	2020      	movs	r0, #32
 8003cdc:	f003 f866 	bl	8006dac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8003ce0:	e0c5      	b.n	8003e6e <HAL_I2C_MspInit+0x322>
 8003ce2:	bf00      	nop
 8003ce4:	40005400 	.word	0x40005400
 8003ce8:	58024400 	.word	0x58024400
 8003cec:	58020400 	.word	0x58020400
 8003cf0:	24000a38 	.word	0x24000a38
 8003cf4:	40020010 	.word	0x40020010
 8003cf8:	24000ab0 	.word	0x24000ab0
 8003cfc:	40020028 	.word	0x40020028
  else if(i2cHandle->Instance==I2C2)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a5c      	ldr	r2, [pc, #368]	@ (8003e78 <HAL_I2C_MspInit+0x32c>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	f040 80b1 	bne.w	8003e6e <HAL_I2C_MspInit+0x322>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003d0c:	f04f 0208 	mov.w	r2, #8
 8003d10:	f04f 0300 	mov.w	r3, #0
 8003d14:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003d1e:	f107 0318 	add.w	r3, r7, #24
 8003d22:	4618      	mov	r0, r3
 8003d24:	f009 ff5e 	bl	800dbe4 <HAL_RCCEx_PeriphCLKConfig>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d001      	beq.n	8003d32 <HAL_I2C_MspInit+0x1e6>
      Error_Handler();
 8003d2e:	f000 fe3d 	bl	80049ac <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d32:	4b52      	ldr	r3, [pc, #328]	@ (8003e7c <HAL_I2C_MspInit+0x330>)
 8003d34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d38:	4a50      	ldr	r2, [pc, #320]	@ (8003e7c <HAL_I2C_MspInit+0x330>)
 8003d3a:	f043 0302 	orr.w	r3, r3, #2
 8003d3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003d42:	4b4e      	ldr	r3, [pc, #312]	@ (8003e7c <HAL_I2C_MspInit+0x330>)
 8003d44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d48:	f003 0302 	and.w	r3, r3, #2
 8003d4c:	60fb      	str	r3, [r7, #12]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003d50:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003d54:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d58:	2312      	movs	r3, #18
 8003d5a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d64:	2300      	movs	r3, #0
 8003d66:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003d6a:	2304      	movs	r3, #4
 8003d6c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d70:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003d74:	4619      	mov	r1, r3
 8003d76:	4842      	ldr	r0, [pc, #264]	@ (8003e80 <HAL_I2C_MspInit+0x334>)
 8003d78:	f005 fee4 	bl	8009b44 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003d7c:	4b3f      	ldr	r3, [pc, #252]	@ (8003e7c <HAL_I2C_MspInit+0x330>)
 8003d7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003d82:	4a3e      	ldr	r2, [pc, #248]	@ (8003e7c <HAL_I2C_MspInit+0x330>)
 8003d84:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003d88:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003d8c:	4b3b      	ldr	r3, [pc, #236]	@ (8003e7c <HAL_I2C_MspInit+0x330>)
 8003d8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003d92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d96:	60bb      	str	r3, [r7, #8]
 8003d98:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c2_rx.Instance = DMA1_Stream6;
 8003d9a:	4b3a      	ldr	r3, [pc, #232]	@ (8003e84 <HAL_I2C_MspInit+0x338>)
 8003d9c:	4a3a      	ldr	r2, [pc, #232]	@ (8003e88 <HAL_I2C_MspInit+0x33c>)
 8003d9e:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_I2C2_RX;
 8003da0:	4b38      	ldr	r3, [pc, #224]	@ (8003e84 <HAL_I2C_MspInit+0x338>)
 8003da2:	2223      	movs	r2, #35	@ 0x23
 8003da4:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003da6:	4b37      	ldr	r3, [pc, #220]	@ (8003e84 <HAL_I2C_MspInit+0x338>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003dac:	4b35      	ldr	r3, [pc, #212]	@ (8003e84 <HAL_I2C_MspInit+0x338>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003db2:	4b34      	ldr	r3, [pc, #208]	@ (8003e84 <HAL_I2C_MspInit+0x338>)
 8003db4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003db8:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003dba:	4b32      	ldr	r3, [pc, #200]	@ (8003e84 <HAL_I2C_MspInit+0x338>)
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003dc0:	4b30      	ldr	r3, [pc, #192]	@ (8003e84 <HAL_I2C_MspInit+0x338>)
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8003dc6:	4b2f      	ldr	r3, [pc, #188]	@ (8003e84 <HAL_I2C_MspInit+0x338>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003dcc:	4b2d      	ldr	r3, [pc, #180]	@ (8003e84 <HAL_I2C_MspInit+0x338>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003dd2:	4b2c      	ldr	r3, [pc, #176]	@ (8003e84 <HAL_I2C_MspInit+0x338>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8003dd8:	482a      	ldr	r0, [pc, #168]	@ (8003e84 <HAL_I2C_MspInit+0x338>)
 8003dda:	f003 f86d 	bl	8006eb8 <HAL_DMA_Init>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d001      	beq.n	8003de8 <HAL_I2C_MspInit+0x29c>
      Error_Handler();
 8003de4:	f000 fde2 	bl	80049ac <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a26      	ldr	r2, [pc, #152]	@ (8003e84 <HAL_I2C_MspInit+0x338>)
 8003dec:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003dee:	4a25      	ldr	r2, [pc, #148]	@ (8003e84 <HAL_I2C_MspInit+0x338>)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 8003df4:	4b25      	ldr	r3, [pc, #148]	@ (8003e8c <HAL_I2C_MspInit+0x340>)
 8003df6:	4a26      	ldr	r2, [pc, #152]	@ (8003e90 <HAL_I2C_MspInit+0x344>)
 8003df8:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_I2C2_TX;
 8003dfa:	4b24      	ldr	r3, [pc, #144]	@ (8003e8c <HAL_I2C_MspInit+0x340>)
 8003dfc:	2224      	movs	r2, #36	@ 0x24
 8003dfe:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003e00:	4b22      	ldr	r3, [pc, #136]	@ (8003e8c <HAL_I2C_MspInit+0x340>)
 8003e02:	2240      	movs	r2, #64	@ 0x40
 8003e04:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e06:	4b21      	ldr	r3, [pc, #132]	@ (8003e8c <HAL_I2C_MspInit+0x340>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003e0c:	4b1f      	ldr	r3, [pc, #124]	@ (8003e8c <HAL_I2C_MspInit+0x340>)
 8003e0e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003e12:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e14:	4b1d      	ldr	r3, [pc, #116]	@ (8003e8c <HAL_I2C_MspInit+0x340>)
 8003e16:	2200      	movs	r2, #0
 8003e18:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e1a:	4b1c      	ldr	r3, [pc, #112]	@ (8003e8c <HAL_I2C_MspInit+0x340>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8003e20:	4b1a      	ldr	r3, [pc, #104]	@ (8003e8c <HAL_I2C_MspInit+0x340>)
 8003e22:	2200      	movs	r2, #0
 8003e24:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003e26:	4b19      	ldr	r3, [pc, #100]	@ (8003e8c <HAL_I2C_MspInit+0x340>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003e2c:	4b17      	ldr	r3, [pc, #92]	@ (8003e8c <HAL_I2C_MspInit+0x340>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8003e32:	4816      	ldr	r0, [pc, #88]	@ (8003e8c <HAL_I2C_MspInit+0x340>)
 8003e34:	f003 f840 	bl	8006eb8 <HAL_DMA_Init>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <HAL_I2C_MspInit+0x2f6>
      Error_Handler();
 8003e3e:	f000 fdb5 	bl	80049ac <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a11      	ldr	r2, [pc, #68]	@ (8003e8c <HAL_I2C_MspInit+0x340>)
 8003e46:	639a      	str	r2, [r3, #56]	@ 0x38
 8003e48:	4a10      	ldr	r2, [pc, #64]	@ (8003e8c <HAL_I2C_MspInit+0x340>)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8003e4e:	2200      	movs	r2, #0
 8003e50:	2105      	movs	r1, #5
 8003e52:	2021      	movs	r0, #33	@ 0x21
 8003e54:	f002 ff90 	bl	8006d78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8003e58:	2021      	movs	r0, #33	@ 0x21
 8003e5a:	f002 ffa7 	bl	8006dac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
 8003e5e:	2200      	movs	r2, #0
 8003e60:	2105      	movs	r1, #5
 8003e62:	2022      	movs	r0, #34	@ 0x22
 8003e64:	f002 ff88 	bl	8006d78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8003e68:	2022      	movs	r0, #34	@ 0x22
 8003e6a:	f002 ff9f 	bl	8006dac <HAL_NVIC_EnableIRQ>
}
 8003e6e:	bf00      	nop
 8003e70:	37e8      	adds	r7, #232	@ 0xe8
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	40005800 	.word	0x40005800
 8003e7c:	58024400 	.word	0x58024400
 8003e80:	58020400 	.word	0x58020400
 8003e84:	24000b28 	.word	0x24000b28
 8003e88:	400200a0 	.word	0x400200a0
 8003e8c:	24000ba0 	.word	0x24000ba0
 8003e90:	400200b8 	.word	0x400200b8

08003e94 <LL_USART_IsActiveFlag_FE>:
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	69db      	ldr	r3, [r3, #28]
 8003ea0:	f003 0302 	and.w	r3, r3, #2
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d101      	bne.n	8003eac <LL_USART_IsActiveFlag_FE+0x18>
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e000      	b.n	8003eae <LL_USART_IsActiveFlag_FE+0x1a>
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	370c      	adds	r7, #12
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr

08003eba <LL_USART_IsActiveFlag_ORE>:
{
 8003eba:	b480      	push	{r7}
 8003ebc:	b083      	sub	sp, #12
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	69db      	ldr	r3, [r3, #28]
 8003ec6:	f003 0308 	and.w	r3, r3, #8
 8003eca:	2b08      	cmp	r3, #8
 8003ecc:	d101      	bne.n	8003ed2 <LL_USART_IsActiveFlag_ORE+0x18>
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e000      	b.n	8003ed4 <LL_USART_IsActiveFlag_ORE+0x1a>
 8003ed2:	2300      	movs	r3, #0
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <LL_USART_IsActiveFlag_TC>:
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	69db      	ldr	r3, [r3, #28]
 8003eec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ef0:	2b40      	cmp	r3, #64	@ 0x40
 8003ef2:	d101      	bne.n	8003ef8 <LL_USART_IsActiveFlag_TC+0x18>
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e000      	b.n	8003efa <LL_USART_IsActiveFlag_TC+0x1a>
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	370c      	adds	r7, #12
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr

08003f06 <LL_USART_IsActiveFlag_TXE_TXFNF>:
  * @rmtoll ISR          TXE_TXFNF     LL_USART_IsActiveFlag_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE_TXFNF(const USART_TypeDef *USARTx)
{
 8003f06:	b480      	push	{r7}
 8003f08:	b083      	sub	sp, #12
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	69db      	ldr	r3, [r3, #28]
 8003f12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f16:	2b80      	cmp	r3, #128	@ 0x80
 8003f18:	d101      	bne.n	8003f1e <LL_USART_IsActiveFlag_TXE_TXFNF+0x18>
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e000      	b.n	8003f20 <LL_USART_IsActiveFlag_TXE_TXFNF+0x1a>
 8003f1e:	2300      	movs	r3, #0
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <LL_USART_ClearFlag_FE>:
  * @rmtoll ICR          FECF          LL_USART_ClearFlag_FE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2202      	movs	r2, #2
 8003f38:	621a      	str	r2, [r3, #32]
}
 8003f3a:	bf00      	nop
 8003f3c:	370c      	adds	r7, #12
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr

08003f46 <LL_USART_ClearFlag_ORE>:
  * @rmtoll ICR          ORECF         LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 8003f46:	b480      	push	{r7}
 8003f48:	b083      	sub	sp, #12
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2208      	movs	r2, #8
 8003f52:	621a      	str	r2, [r3, #32]
}
 8003f54:	bf00      	nop
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <LL_USART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b089      	sub	sp, #36	@ 0x24
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	e853 3f00 	ldrex	r3, [r3]
 8003f72:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	f043 0320 	orr.w	r3, r3, #32
 8003f7a:	61fb      	str	r3, [r7, #28]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	69fa      	ldr	r2, [r7, #28]
 8003f80:	61ba      	str	r2, [r7, #24]
 8003f82:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f84:	6979      	ldr	r1, [r7, #20]
 8003f86:	69ba      	ldr	r2, [r7, #24]
 8003f88:	e841 2300 	strex	r3, r2, [r1]
 8003f8c:	613b      	str	r3, [r7, #16]
   return(result);
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d1e9      	bne.n	8003f68 <LL_USART_EnableIT_RXNE_RXFNE+0x8>
}
 8003f94:	bf00      	nop
 8003f96:	bf00      	nop
 8003f98:	3724      	adds	r7, #36	@ 0x24
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr

08003fa2 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8003fa2:	b480      	push	{r7}
 8003fa4:	b083      	sub	sp, #12
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
 8003faa:	460b      	mov	r3, r1
 8003fac:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 8003fae:	78fa      	ldrb	r2, [r7, #3]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003fb4:	bf00      	nop
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b085      	sub	sp, #20
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	041a      	lsls	r2, r3, #16
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	43d9      	mvns	r1, r3
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	400b      	ands	r3, r1
 8003fe0:	431a      	orrs	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	619a      	str	r2, [r3, #24]
}
 8003fe6:	bf00      	nop
 8003fe8:	3714      	adds	r7, #20
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
	...

08003ff4 <_write>:
/* USER CODE BEGIN PTD */

/* *********** USART6 printf function code ************ */

int _write(int file, char* p, int len)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b086      	sub	sp, #24
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++) {
 8004000:	2300      	movs	r3, #0
 8004002:	617b      	str	r3, [r7, #20]
 8004004:	e025      	b.n	8004052 <_write+0x5e>
        while (!LL_USART_IsActiveFlag_TXE(USART6)) {
            if (LL_USART_IsActiveFlag_ORE(USART6) || LL_USART_IsActiveFlag_FE(USART6)) {
 8004006:	481b      	ldr	r0, [pc, #108]	@ (8004074 <_write+0x80>)
 8004008:	f7ff ff57 	bl	8003eba <LL_USART_IsActiveFlag_ORE>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d105      	bne.n	800401e <_write+0x2a>
 8004012:	4818      	ldr	r0, [pc, #96]	@ (8004074 <_write+0x80>)
 8004014:	f7ff ff3e 	bl	8003e94 <LL_USART_IsActiveFlag_FE>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d008      	beq.n	8004030 <_write+0x3c>
                LL_USART_ClearFlag_ORE(USART6);
 800401e:	4815      	ldr	r0, [pc, #84]	@ (8004074 <_write+0x80>)
 8004020:	f7ff ff91 	bl	8003f46 <LL_USART_ClearFlag_ORE>
                LL_USART_ClearFlag_FE(USART6);
 8004024:	4813      	ldr	r0, [pc, #76]	@ (8004074 <_write+0x80>)
 8004026:	f7ff ff81 	bl	8003f2c <LL_USART_ClearFlag_FE>
                return -1; // Indicate error
 800402a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800402e:	e01c      	b.n	800406a <_write+0x76>
        while (!LL_USART_IsActiveFlag_TXE(USART6)) {
 8004030:	4810      	ldr	r0, [pc, #64]	@ (8004074 <_write+0x80>)
 8004032:	f7ff ff68 	bl	8003f06 <LL_USART_IsActiveFlag_TXE_TXFNF>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d0e4      	beq.n	8004006 <_write+0x12>
            }
        }
        LL_USART_TransmitData8(USART6, *(p + i));
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	68ba      	ldr	r2, [r7, #8]
 8004040:	4413      	add	r3, r2
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	4619      	mov	r1, r3
 8004046:	480b      	ldr	r0, [pc, #44]	@ (8004074 <_write+0x80>)
 8004048:	f7ff ffab 	bl	8003fa2 <LL_USART_TransmitData8>
    for (int i = 0; i < len; i++) {
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	3301      	adds	r3, #1
 8004050:	617b      	str	r3, [r7, #20]
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	429a      	cmp	r2, r3
 8004058:	dbea      	blt.n	8004030 <_write+0x3c>
    }
    while (!LL_USART_IsActiveFlag_TC(USART6)) {}
 800405a:	bf00      	nop
 800405c:	4805      	ldr	r0, [pc, #20]	@ (8004074 <_write+0x80>)
 800405e:	f7ff ff3f 	bl	8003ee0 <LL_USART_IsActiveFlag_TC>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d0f9      	beq.n	800405c <_write+0x68>
    return len;
 8004068:	687b      	ldr	r3, [r7, #4]
}
 800406a:	4618      	mov	r0, r3
 800406c:	3718      	adds	r7, #24
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	40011400 	.word	0x40011400

08004078 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800407e:	f000 fc57 	bl	8004930 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004082:	f002 fd41 	bl	8006b08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004086:	f000 f887 	bl	8004198 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800408a:	f7ff fc3b 	bl	8003904 <MX_GPIO_Init>
  MX_DMA_Init();
 800408e:	f7ff fa09 	bl	80034a4 <MX_DMA_Init>
  MX_USART6_UART_Init();
 8004092:	f002 fb59 	bl	8006748 <MX_USART6_UART_Init>
  MX_SPI3_Init();
 8004096:	f001 f81d 	bl	80050d4 <MX_SPI3_Init>
  MX_I2C1_Init();
 800409a:	f7ff fcd7 	bl	8003a4c <MX_I2C1_Init>
  MX_TIM3_Init();
 800409e:	f001 febd 	bl	8005e1c <MX_TIM3_Init>
  MX_TIM2_Init();
 80040a2:	f001 fe45 	bl	8005d30 <MX_TIM2_Init>
  MX_OCTOSPI1_Init();
 80040a6:	f000 fc87 	bl	80049b8 <MX_OCTOSPI1_Init>
  MX_I2C2_Init();
 80040aa:	f7ff fd0f 	bl	8003acc <MX_I2C2_Init>
  MX_UART4_Init();
 80040ae:	f002 fa67 	bl	8006580 <MX_UART4_Init>
  MX_TIM5_Init();
 80040b2:	f001 ff35 	bl	8005f20 <MX_TIM5_Init>
  MX_UART7_Init();
 80040b6:	f002 faaf 	bl	8006618 <MX_UART7_Init>
  MX_USART2_UART_Init();
 80040ba:	f002 faf9 	bl	80066b0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  StartupTone();
 80040be:	f7fc fe23 	bl	8000d08 <StartupTone>

  LL_USART_EnableIT_RXNE(USART6);
 80040c2:	4827      	ldr	r0, [pc, #156]	@ (8004160 <main+0xe8>)
 80040c4:	f7ff ff4c 	bl	8003f60 <LL_USART_EnableIT_RXNE_RXFNE>
  LL_USART_EnableIT_RXNE_RXFNE(UART4);
 80040c8:	4826      	ldr	r0, [pc, #152]	@ (8004164 <main+0xec>)
 80040ca:	f7ff ff49 	bl	8003f60 <LL_USART_EnableIT_RXNE_RXFNE>
  HAL_UART_Receive_IT(&huart7, &uart7_rx_data, 1);
 80040ce:	2201      	movs	r2, #1
 80040d0:	4925      	ldr	r1, [pc, #148]	@ (8004168 <main+0xf0>)
 80040d2:	4826      	ldr	r0, [pc, #152]	@ (800416c <main+0xf4>)
 80040d4:	f00d fade 	bl	8011694 <HAL_UART_Receive_IT>

  HAL_Delay(500);
 80040d8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80040dc:	f002 fd70 	bl	8006bc0 <HAL_Delay>

  eeprom_startup();
 80040e0:	f000 f964 	bl	80043ac <eeprom_startup>

  // Initialize PID controllers
  pid_init(&roll_pid, &pitch_pid, &yaw_rate_pid,
 80040e4:	4b22      	ldr	r3, [pc, #136]	@ (8004170 <main+0xf8>)
 80040e6:	9301      	str	r3, [sp, #4]
 80040e8:	4b22      	ldr	r3, [pc, #136]	@ (8004174 <main+0xfc>)
 80040ea:	9300      	str	r3, [sp, #0]
 80040ec:	4b22      	ldr	r3, [pc, #136]	@ (8004178 <main+0x100>)
 80040ee:	4a23      	ldr	r2, [pc, #140]	@ (800417c <main+0x104>)
 80040f0:	4923      	ldr	r1, [pc, #140]	@ (8004180 <main+0x108>)
 80040f2:	4824      	ldr	r0, [pc, #144]	@ (8004184 <main+0x10c>)
 80040f4:	f7fe ffcc 	bl	8003090 <pid_init>
		  &eeprom_roll_pid_read, &eeprom_pitch_pid_read, &eeprom_yaw_rate_pid_read);

  /* *********** ESC Startup Calibration ************ */
  HAL_Delay(3000);
 80040f8:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80040fc:	f002 fd60 	bl	8006bc0 <HAL_Delay>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8004100:	2100      	movs	r1, #0
 8004102:	4821      	ldr	r0, [pc, #132]	@ (8004188 <main+0x110>)
 8004104:	f00b fd16 	bl	800fb34 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8004108:	2104      	movs	r1, #4
 800410a:	481f      	ldr	r0, [pc, #124]	@ (8004188 <main+0x110>)
 800410c:	f00b fd12 	bl	800fb34 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 8004110:	2108      	movs	r1, #8
 8004112:	481d      	ldr	r0, [pc, #116]	@ (8004188 <main+0x110>)
 8004114:	f00b fd0e 	bl	800fb34 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 8004118:	210c      	movs	r1, #12
 800411a:	481b      	ldr	r0, [pc, #108]	@ (8004188 <main+0x110>)
 800411c:	f00b fd0a 	bl	800fb34 <HAL_TIM_PWM_Start>
//  LL_TIM_EnableIT_UPDATE(TIM7);

  /* === Initialize sensors here === */

  /* Initialize ICM42688P */
  if(ICM42688P_Initialization() == 0)
 8004120:	f7fe fb8a 	bl	8002838 <ICM42688P_Initialization>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d102      	bne.n	8004130 <main+0xb8>
  {
	  printf("=== Sensor Ready - Starting Data Collection ===\n\n");
 800412a:	4818      	ldr	r0, [pc, #96]	@ (800418c <main+0x114>)
 800412c:	f016 fe22 	bl	801ad74 <puts>
  }

//  ICM42688P_Calibrate();

  HMC5883L_Init();
 8004130:	f7fe f882 	bl	8002238 <HMC5883L_Init>
  uint8_t hmc_id = HMC5883L_ReadReg(HMC5883L_ID_A);
 8004134:	200a      	movs	r0, #10
 8004136:	f7fe f861 	bl	80021fc <HMC5883L_ReadReg>
 800413a:	4603      	mov	r3, r0
 800413c:	71fb      	strb	r3, [r7, #7]
  printf("HMC5883L ID: %c\n", hmc_id);
 800413e:	79fb      	ldrb	r3, [r7, #7]
 8004140:	4619      	mov	r1, r3
 8004142:	4813      	ldr	r0, [pc, #76]	@ (8004190 <main+0x118>)
 8004144:	f016 fdae 	bl	801aca4 <iprintf>

  WS2812_Init(&htim3);
 8004148:	4812      	ldr	r0, [pc, #72]	@ (8004194 <main+0x11c>)
 800414a:	f7fe fe3d 	bl	8002dc8 <WS2812_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in cmsis_os2.c) */
 800414e:	f011 fdab 	bl	8015ca8 <osKernelInitialize>
  MX_FREERTOS_Init();
 8004152:	f7ff fa0f 	bl	8003574 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8004156:	f011 fdcb 	bl	8015cf0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800415a:	bf00      	nop
 800415c:	e7fd      	b.n	800415a <main+0xe2>
 800415e:	bf00      	nop
 8004160:	40011400 	.word	0x40011400
 8004164:	40004c00 	.word	0x40004c00
 8004168:	24000df9 	.word	0x24000df9
 800416c:	240010a8 	.word	0x240010a8
 8004170:	24000c88 	.word	0x24000c88
 8004174:	24000c70 	.word	0x24000c70
 8004178:	24000c58 	.word	0x24000c58
 800417c:	24000d04 	.word	0x24000d04
 8004180:	24000cd4 	.word	0x24000cd4
 8004184:	24000ca4 	.word	0x24000ca4
 8004188:	24000ed8 	.word	0x24000ed8
 800418c:	0801f270 	.word	0x0801f270
 8004190:	0801f2a4 	.word	0x0801f2a4
 8004194:	24000e8c 	.word	0x24000e8c

08004198 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b09c      	sub	sp, #112	@ 0x70
 800419c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800419e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80041a2:	224c      	movs	r2, #76	@ 0x4c
 80041a4:	2100      	movs	r1, #0
 80041a6:	4618      	mov	r0, r3
 80041a8:	f016 ff2e 	bl	801b008 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80041ac:	1d3b      	adds	r3, r7, #4
 80041ae:	2220      	movs	r2, #32
 80041b0:	2100      	movs	r1, #0
 80041b2:	4618      	mov	r0, r3
 80041b4:	f016 ff28 	bl	801b008 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80041b8:	2002      	movs	r0, #2
 80041ba:	f008 fd31 	bl	800cc20 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80041be:	2300      	movs	r3, #0
 80041c0:	603b      	str	r3, [r7, #0]
 80041c2:	4b2b      	ldr	r3, [pc, #172]	@ (8004270 <SystemClock_Config+0xd8>)
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	4a2a      	ldr	r2, [pc, #168]	@ (8004270 <SystemClock_Config+0xd8>)
 80041c8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80041cc:	6193      	str	r3, [r2, #24]
 80041ce:	4b28      	ldr	r3, [pc, #160]	@ (8004270 <SystemClock_Config+0xd8>)
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80041d6:	603b      	str	r3, [r7, #0]
 80041d8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80041da:	bf00      	nop
 80041dc:	4b24      	ldr	r3, [pc, #144]	@ (8004270 <SystemClock_Config+0xd8>)
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041e8:	d1f8      	bne.n	80041dc <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80041ea:	2301      	movs	r3, #1
 80041ec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80041ee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80041f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80041f4:	2302      	movs	r3, #2
 80041f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80041f8:	2302      	movs	r3, #2
 80041fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80041fc:	2302      	movs	r3, #2
 80041fe:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8004200:	232c      	movs	r3, #44	@ 0x2c
 8004202:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8004204:	2301      	movs	r3, #1
 8004206:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8004208:	2303      	movs	r3, #3
 800420a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800420c:	2302      	movs	r3, #2
 800420e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8004210:	230c      	movs	r3, #12
 8004212:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8004214:	2300      	movs	r3, #0
 8004216:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8004218:	2300      	movs	r3, #0
 800421a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800421c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004220:	4618      	mov	r0, r3
 8004222:	f008 fd37 	bl	800cc94 <HAL_RCC_OscConfig>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d001      	beq.n	8004230 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800422c:	f000 fbbe 	bl	80049ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004230:	233f      	movs	r3, #63	@ 0x3f
 8004232:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004234:	2303      	movs	r3, #3
 8004236:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8004238:	2300      	movs	r3, #0
 800423a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800423c:	2308      	movs	r3, #8
 800423e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8004240:	2340      	movs	r3, #64	@ 0x40
 8004242:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8004244:	2340      	movs	r3, #64	@ 0x40
 8004246:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8004248:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800424c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800424e:	2340      	movs	r3, #64	@ 0x40
 8004250:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8004252:	1d3b      	adds	r3, r7, #4
 8004254:	2103      	movs	r1, #3
 8004256:	4618      	mov	r0, r3
 8004258:	f009 f8f6 	bl	800d448 <HAL_RCC_ClockConfig>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8004262:	f000 fba3 	bl	80049ac <Error_Handler>
  }
}
 8004266:	bf00      	nop
 8004268:	3770      	adds	r7, #112	@ 0x70
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	58024800 	.word	0x58024800

08004274 <run_imu>:
{
	printf("Hello from Task3\r\n");
}


void run_imu(void) {
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af04      	add	r7, sp, #16

	  if(ICM42688P_DataReady() == 1)
 800427a:	f7fe fbd9 	bl	8002a30 <ICM42688P_DataReady>
 800427e:	4603      	mov	r3, r0
 8004280:	2b01      	cmp	r3, #1
 8004282:	d159      	bne.n	8004338 <run_imu+0xc4>
	  {
		  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_1);
 8004284:	2102      	movs	r1, #2
 8004286:	482e      	ldr	r0, [pc, #184]	@ (8004340 <run_imu+0xcc>)
 8004288:	f7ff fe9a 	bl	8003fc0 <LL_GPIO_TogglePin>

		  ICM42688P_Get6AxisRawData(accel_raw, gyro_raw);
 800428c:	492d      	ldr	r1, [pc, #180]	@ (8004344 <run_imu+0xd0>)
 800428e:	482e      	ldr	r0, [pc, #184]	@ (8004348 <run_imu+0xd4>)
 8004290:	f7fe fb7e 	bl	8002990 <ICM42688P_Get6AxisRawData>

		  ICM42688P.gyro_x = gyro_raw[0] * 0.061035f;
 8004294:	4b2b      	ldr	r3, [pc, #172]	@ (8004344 <run_imu+0xd0>)
 8004296:	f9b3 3000 	ldrsh.w	r3, [r3]
 800429a:	ee07 3a90 	vmov	s15, r3
 800429e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042a2:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 800434c <run_imu+0xd8>
 80042a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042aa:	4b29      	ldr	r3, [pc, #164]	@ (8004350 <run_imu+0xdc>)
 80042ac:	edc3 7a07 	vstr	s15, [r3, #28]
		  ICM42688P.gyro_y = gyro_raw[1] * 0.061035f;
 80042b0:	4b24      	ldr	r3, [pc, #144]	@ (8004344 <run_imu+0xd0>)
 80042b2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80042b6:	ee07 3a90 	vmov	s15, r3
 80042ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042be:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 800434c <run_imu+0xd8>
 80042c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042c6:	4b22      	ldr	r3, [pc, #136]	@ (8004350 <run_imu+0xdc>)
 80042c8:	edc3 7a08 	vstr	s15, [r3, #32]
		  ICM42688P.gyro_z = gyro_raw[2] * 0.061035f;
 80042cc:	4b1d      	ldr	r3, [pc, #116]	@ (8004344 <run_imu+0xd0>)
 80042ce:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80042d2:	ee07 3a90 	vmov	s15, r3
 80042d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042da:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 800434c <run_imu+0xd8>
 80042de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042e2:	4b1b      	ldr	r3, [pc, #108]	@ (8004350 <run_imu+0xdc>)
 80042e4:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

//		  ICM42688P.gyro_x = gyro_raw[0] * 2000.f / 32768.f;
//		  ICM42688P.gyro_y= gyro_raw[1] * 2000.f / 32768.f;
//		  ICM42688P.gyro_z = gyro_raw[2] * 2000.f / 32768.f;

		  ICM42688P.gyro_x = -ICM42688P.gyro_x;
 80042e8:	4b19      	ldr	r3, [pc, #100]	@ (8004350 <run_imu+0xdc>)
 80042ea:	edd3 7a07 	vldr	s15, [r3, #28]
 80042ee:	eef1 7a67 	vneg.f32	s15, s15
 80042f2:	4b17      	ldr	r3, [pc, #92]	@ (8004350 <run_imu+0xdc>)
 80042f4:	edc3 7a07 	vstr	s15, [r3, #28]
		  ICM42688P.gyro_z = -ICM42688P.gyro_z;
 80042f8:	4b15      	ldr	r3, [pc, #84]	@ (8004350 <run_imu+0xdc>)
 80042fa:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80042fe:	eef1 7a67 	vneg.f32	s15, s15
 8004302:	4b13      	ldr	r3, [pc, #76]	@ (8004350 <run_imu+0xdc>)
 8004304:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		  printf("%8.2f, %8.2f, %8.2f\n", ICM42688P.gyro_x, ICM42688P.gyro_y, ICM42688P.gyro_z);
 8004308:	4b11      	ldr	r3, [pc, #68]	@ (8004350 <run_imu+0xdc>)
 800430a:	edd3 7a07 	vldr	s15, [r3, #28]
 800430e:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8004312:	4b0f      	ldr	r3, [pc, #60]	@ (8004350 <run_imu+0xdc>)
 8004314:	edd3 7a08 	vldr	s15, [r3, #32]
 8004318:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800431c:	4b0c      	ldr	r3, [pc, #48]	@ (8004350 <run_imu+0xdc>)
 800431e:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8004322:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8004326:	ed8d 6b02 	vstr	d6, [sp, #8]
 800432a:	ed8d 7b00 	vstr	d7, [sp]
 800432e:	ec53 2b15 	vmov	r2, r3, d5
 8004332:	4808      	ldr	r0, [pc, #32]	@ (8004354 <run_imu+0xe0>)
 8004334:	f016 fcb6 	bl	801aca4 <iprintf>
//		  printf("%d,%d,%d\n", (int)(ICM42688P.gyro_x*100), (int)(ICM42688P.gyro_y*100), (int)(ICM42688P.gyro_z*100));
	  }

}
 8004338:	bf00      	nop
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	58020800 	.word	0x58020800
 8004344:	24000c20 	.word	0x24000c20
 8004348:	24000c18 	.word	0x24000c18
 800434c:	3d79ffd6 	.word	0x3d79ffd6
 8004350:	24000220 	.word	0x24000220
 8004354:	0801f2e0 	.word	0x0801f2e0

08004358 <sensor_init>:
    printf("Mag: %.2f %.2f %.2f | Heading: %.2f°\r\n",
           hmc_data.mag_x, hmc_data.mag_y, hmc_data.mag_z,
           compass->heading);
}

void sensor_init(void){
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0

    // === Initialize HMC5883L ===
    HMC5883L_Init();
 800435e:	f7fd ff6b 	bl	8002238 <HMC5883L_Init>
    uint8_t hmc_id = HMC5883L_ReadReg(HMC5883L_ID_A);
 8004362:	200a      	movs	r0, #10
 8004364:	f7fd ff4a 	bl	80021fc <HMC5883L_ReadReg>
 8004368:	4603      	mov	r3, r0
 800436a:	71fb      	strb	r3, [r7, #7]
    printf("HMC5883L ID: %c\r\n", hmc_id);
 800436c:	79fb      	ldrb	r3, [r7, #7]
 800436e:	4619      	mov	r1, r3
 8004370:	4809      	ldr	r0, [pc, #36]	@ (8004398 <sensor_init+0x40>)
 8004372:	f016 fc97 	bl	801aca4 <iprintf>

    WS2812_Init(&WS2812_TIMER);
 8004376:	4809      	ldr	r0, [pc, #36]	@ (800439c <sensor_init+0x44>)
 8004378:	f7fe fd26 	bl	8002dc8 <WS2812_Init>

//    filters_init(&filter_state);
    ComplementaryFilter_Init(&q);
 800437c:	4808      	ldr	r0, [pc, #32]	@ (80043a0 <sensor_init+0x48>)
 800437e:	f7fd ff07 	bl	8002190 <ComplementaryFilter_Init>

    printf("Sensor initialization complete. Deleting InitTask...\r\n");
 8004382:	4808      	ldr	r0, [pc, #32]	@ (80043a4 <sensor_init+0x4c>)
 8004384:	f016 fcf6 	bl	801ad74 <puts>

    sensors_ready = 1;
 8004388:	4b07      	ldr	r3, [pc, #28]	@ (80043a8 <sensor_init+0x50>)
 800438a:	2201      	movs	r2, #1
 800438c:	701a      	strb	r2, [r3, #0]

//    system_startup();

}
 800438e:	bf00      	nop
 8004390:	3708      	adds	r7, #8
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	0801f320 	.word	0x0801f320
 800439c:	24000e8c 	.word	0x24000e8c
 80043a0:	24000d1c 	.word	0x24000d1c
 80043a4:	0801f334 	.word	0x0801f334
 80043a8:	24000c26 	.word	0x24000c26

080043ac <eeprom_startup>:
	Buzzer_Off();
	/* *********** iBus Throttle Check END ************ */

}

void eeprom_startup(void){
 80043ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043b0:	b0d6      	sub	sp, #344	@ 0x158
 80043b2:	af0a      	add	r7, sp, #40	@ 0x28

	if (EEPROM_Init() != W25Qxx_OK) {
 80043b4:	f7fd fa82 	bl	80018bc <EEPROM_Init>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d01c      	beq.n	80043f8 <eeprom_startup+0x4c>
		printf("EEPROM Init Failed\r\n");
 80043be:	48ba      	ldr	r0, [pc, #744]	@ (80046a8 <eeprom_startup+0x2fc>)
 80043c0:	f016 fcd8 	bl	801ad74 <puts>
		while(1)
		{
			Buzzer_On(500);
 80043c4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80043c8:	f7fc fc6c 	bl	8000ca4 <Buzzer_On>
			HAL_Delay(200);
 80043cc:	20c8      	movs	r0, #200	@ 0xc8
 80043ce:	f002 fbf7 	bl	8006bc0 <HAL_Delay>
			Buzzer_Off();
 80043d2:	f7fc fc8f 	bl	8000cf4 <Buzzer_Off>
			HAL_Delay(200);
 80043d6:	20c8      	movs	r0, #200	@ 0xc8
 80043d8:	f002 fbf2 	bl	8006bc0 <HAL_Delay>
			Buzzer_On(500);
 80043dc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80043e0:	f7fc fc60 	bl	8000ca4 <Buzzer_On>
			HAL_Delay(200);
 80043e4:	20c8      	movs	r0, #200	@ 0xc8
 80043e6:	f002 fbeb 	bl	8006bc0 <HAL_Delay>
			Buzzer_Off();
 80043ea:	f7fc fc83 	bl	8000cf4 <Buzzer_Off>
			HAL_Delay(200);
 80043ee:	20c8      	movs	r0, #200	@ 0xc8
 80043f0:	f002 fbe6 	bl	8006bc0 <HAL_Delay>
			Buzzer_On(500);
 80043f4:	bf00      	nop
 80043f6:	e7e5      	b.n	80043c4 <eeprom_startup+0x18>
		Error_Handler();
	}

	DroneConfig_t config;

	printf("================= Connecting to EEPROM =================\n"
 80043f8:	48ac      	ldr	r0, [pc, #688]	@ (80046ac <eeprom_startup+0x300>)
 80043fa:	f016 fcbb 	bl	801ad74 <puts>
			"\r\n");

	if (EEPROM_ReadConfig(&config) == W25Qxx_OK) {
 80043fe:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8004402:	4618      	mov	r0, r3
 8004404:	f7fd fab0 	bl	8001968 <EEPROM_ReadConfig>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d10c      	bne.n	8004428 <eeprom_startup+0x7c>
		printf("Config Loaded: Flight Mode %d, PID P: %.2f\r\n",
				config.flight_mode, config.pid[0]);
 800440e:	f897 30d0 	ldrb.w	r3, [r7, #208]	@ 0xd0
		printf("Config Loaded: Flight Mode %d, PID P: %.2f\r\n",
 8004412:	4619      	mov	r1, r3
				config.flight_mode, config.pid[0]);
 8004414:	edd7 7a31 	vldr	s15, [r7, #196]	@ 0xc4
		printf("Config Loaded: Flight Mode %d, PID P: %.2f\r\n",
 8004418:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800441c:	ec53 2b17 	vmov	r2, r3, d7
 8004420:	48a3      	ldr	r0, [pc, #652]	@ (80046b0 <eeprom_startup+0x304>)
 8004422:	f016 fc3f 	bl	801aca4 <iprintf>
 8004426:	e02a      	b.n	800447e <eeprom_startup+0xd2>
	} else {
		printf("No valid config found, loading defaults\r\n");
 8004428:	48a2      	ldr	r0, [pc, #648]	@ (80046b4 <eeprom_startup+0x308>)
 800442a:	f016 fca3 	bl	801ad74 <puts>
		DroneConfig_t default_config = {
 800442e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004432:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004436:	4aa0      	ldr	r2, [pc, #640]	@ (80046b8 <eeprom_startup+0x30c>)
 8004438:	4618      	mov	r0, r3
 800443a:	4611      	mov	r1, r2
 800443c:	2390      	movs	r3, #144	@ 0x90
 800443e:	461a      	mov	r2, r3
 8004440:	f016 fedf 	bl	801b202 <memcpy>
						.rgb = {{255, 0, 0}, {0, 255, 0}, {0, 0, 255}, {255, 255, 255}},
						.mode = 0
				},
				.crc = 0
		};
		default_config.crc = CalculateCRC32((uint8_t*)&default_config, sizeof(DroneConfig_t) - sizeof(uint32_t));
 8004444:	f107 0310 	add.w	r3, r7, #16
 8004448:	218c      	movs	r1, #140	@ 0x8c
 800444a:	4618      	mov	r0, r3
 800444c:	f7fd fae8 	bl	8001a20 <CalculateCRC32>
 8004450:	4602      	mov	r2, r0
 8004452:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004456:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800445a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
		if (EEPROM_WriteConfig(&default_config) != W25Qxx_OK) {
 800445e:	f107 0310 	add.w	r3, r7, #16
 8004462:	4618      	mov	r0, r3
 8004464:	f7fd fab8 	bl	80019d8 <EEPROM_WriteConfig>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d004      	beq.n	8004478 <eeprom_startup+0xcc>
			printf("Failed to write default config\r\n");
 800446e:	4893      	ldr	r0, [pc, #588]	@ (80046bc <eeprom_startup+0x310>)
 8004470:	f016 fc80 	bl	801ad74 <puts>
			Error_Handler();
 8004474:	f000 fa9a 	bl	80049ac <Error_Handler>
		}
		printf("Default config written and verified\r\n");
 8004478:	4891      	ldr	r0, [pc, #580]	@ (80046c0 <eeprom_startup+0x314>)
 800447a:	f016 fc7b 	bl	801ad74 <puts>
	}

	if (EEPROM_GetPID(eeprom_pid_read) == W25Qxx_OK) {
 800447e:	4891      	ldr	r0, [pc, #580]	@ (80046c4 <eeprom_startup+0x318>)
 8004480:	f7fd fbca 	bl	8001c18 <EEPROM_GetPID>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d118      	bne.n	80044bc <eeprom_startup+0x110>
		printf("EEPROM PID read: P=%.2f, I=%.2f, D=%.2f\r\n",
				eeprom_pid_read[0], eeprom_pid_read[1], eeprom_pid_read[2]);
 800448a:	4b8e      	ldr	r3, [pc, #568]	@ (80046c4 <eeprom_startup+0x318>)
 800448c:	edd3 7a00 	vldr	s15, [r3]
		printf("EEPROM PID read: P=%.2f, I=%.2f, D=%.2f\r\n",
 8004490:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
				eeprom_pid_read[0], eeprom_pid_read[1], eeprom_pid_read[2]);
 8004494:	4b8b      	ldr	r3, [pc, #556]	@ (80046c4 <eeprom_startup+0x318>)
 8004496:	edd3 7a01 	vldr	s15, [r3, #4]
		printf("EEPROM PID read: P=%.2f, I=%.2f, D=%.2f\r\n",
 800449a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
				eeprom_pid_read[0], eeprom_pid_read[1], eeprom_pid_read[2]);
 800449e:	4b89      	ldr	r3, [pc, #548]	@ (80046c4 <eeprom_startup+0x318>)
 80044a0:	edd3 6a02 	vldr	s13, [r3, #8]
		printf("EEPROM PID read: P=%.2f, I=%.2f, D=%.2f\r\n",
 80044a4:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80044a8:	ed8d 6b02 	vstr	d6, [sp, #8]
 80044ac:	ed8d 7b00 	vstr	d7, [sp]
 80044b0:	ec53 2b15 	vmov	r2, r3, d5
 80044b4:	4884      	ldr	r0, [pc, #528]	@ (80046c8 <eeprom_startup+0x31c>)
 80044b6:	f016 fbf5 	bl	801aca4 <iprintf>
 80044ba:	e002      	b.n	80044c2 <eeprom_startup+0x116>
	} else {
		printf("Failed to read PID\r\n");
 80044bc:	4883      	ldr	r0, [pc, #524]	@ (80046cc <eeprom_startup+0x320>)
 80044be:	f016 fc59 	bl	801ad74 <puts>
	}

	if (EEPROM_GetGyroCalibration(eeprom_gyro_read) == W25Qxx_OK) {
 80044c2:	4883      	ldr	r0, [pc, #524]	@ (80046d0 <eeprom_startup+0x324>)
 80044c4:	f7fd fb30 	bl	8001b28 <EEPROM_GetGyroCalibration>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d118      	bne.n	8004500 <eeprom_startup+0x154>
		printf("EEPROM Gyro read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
				eeprom_gyro_read[0], eeprom_gyro_read[1], eeprom_gyro_read[2]);
 80044ce:	4b80      	ldr	r3, [pc, #512]	@ (80046d0 <eeprom_startup+0x324>)
 80044d0:	edd3 7a00 	vldr	s15, [r3]
		printf("EEPROM Gyro read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 80044d4:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
				eeprom_gyro_read[0], eeprom_gyro_read[1], eeprom_gyro_read[2]);
 80044d8:	4b7d      	ldr	r3, [pc, #500]	@ (80046d0 <eeprom_startup+0x324>)
 80044da:	edd3 7a01 	vldr	s15, [r3, #4]
		printf("EEPROM Gyro read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 80044de:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
				eeprom_gyro_read[0], eeprom_gyro_read[1], eeprom_gyro_read[2]);
 80044e2:	4b7b      	ldr	r3, [pc, #492]	@ (80046d0 <eeprom_startup+0x324>)
 80044e4:	edd3 6a02 	vldr	s13, [r3, #8]
		printf("EEPROM Gyro read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 80044e8:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80044ec:	ed8d 6b02 	vstr	d6, [sp, #8]
 80044f0:	ed8d 7b00 	vstr	d7, [sp]
 80044f4:	ec53 2b15 	vmov	r2, r3, d5
 80044f8:	4876      	ldr	r0, [pc, #472]	@ (80046d4 <eeprom_startup+0x328>)
 80044fa:	f016 fbd3 	bl	801aca4 <iprintf>
 80044fe:	e002      	b.n	8004506 <eeprom_startup+0x15a>
	} else {
		printf("Failed to read EEPROM Gyro Data\r\n");
 8004500:	4875      	ldr	r0, [pc, #468]	@ (80046d8 <eeprom_startup+0x32c>)
 8004502:	f016 fc37 	bl	801ad74 <puts>
	}

	if (EEPROM_GetAccelCalibration(eeprom_accel_read) == W25Qxx_OK) {
 8004506:	4875      	ldr	r0, [pc, #468]	@ (80046dc <eeprom_startup+0x330>)
 8004508:	f7fd fac4 	bl	8001a94 <EEPROM_GetAccelCalibration>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d118      	bne.n	8004544 <eeprom_startup+0x198>
		printf("EEPROM Accel read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
				eeprom_accel_read[0], eeprom_accel_read[1], eeprom_accel_read[2]);
 8004512:	4b72      	ldr	r3, [pc, #456]	@ (80046dc <eeprom_startup+0x330>)
 8004514:	edd3 7a00 	vldr	s15, [r3]
		printf("EEPROM Accel read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8004518:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
				eeprom_accel_read[0], eeprom_accel_read[1], eeprom_accel_read[2]);
 800451c:	4b6f      	ldr	r3, [pc, #444]	@ (80046dc <eeprom_startup+0x330>)
 800451e:	edd3 7a01 	vldr	s15, [r3, #4]
		printf("EEPROM Accel read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8004522:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
				eeprom_accel_read[0], eeprom_accel_read[1], eeprom_accel_read[2]);
 8004526:	4b6d      	ldr	r3, [pc, #436]	@ (80046dc <eeprom_startup+0x330>)
 8004528:	edd3 6a02 	vldr	s13, [r3, #8]
		printf("EEPROM Accel read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 800452c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8004530:	ed8d 6b02 	vstr	d6, [sp, #8]
 8004534:	ed8d 7b00 	vstr	d7, [sp]
 8004538:	ec53 2b15 	vmov	r2, r3, d5
 800453c:	4868      	ldr	r0, [pc, #416]	@ (80046e0 <eeprom_startup+0x334>)
 800453e:	f016 fbb1 	bl	801aca4 <iprintf>
 8004542:	e002      	b.n	800454a <eeprom_startup+0x19e>
	} else {
		printf("Failed to read EEPROM Accel Data\r\n");
 8004544:	4867      	ldr	r0, [pc, #412]	@ (80046e4 <eeprom_startup+0x338>)
 8004546:	f016 fc15 	bl	801ad74 <puts>
	}

	if (EEPROM_GetMagCalibration(eeprom_mag_read) == W25Qxx_OK) {
 800454a:	4867      	ldr	r0, [pc, #412]	@ (80046e8 <eeprom_startup+0x33c>)
 800454c:	f7fd fb36 	bl	8001bbc <EEPROM_GetMagCalibration>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d118      	bne.n	8004588 <eeprom_startup+0x1dc>
		printf("EEPROM Mag read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
				eeprom_mag_read[0], eeprom_mag_read[1], eeprom_mag_read[2]);
 8004556:	4b64      	ldr	r3, [pc, #400]	@ (80046e8 <eeprom_startup+0x33c>)
 8004558:	edd3 7a00 	vldr	s15, [r3]
		printf("EEPROM Mag read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 800455c:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
				eeprom_mag_read[0], eeprom_mag_read[1], eeprom_mag_read[2]);
 8004560:	4b61      	ldr	r3, [pc, #388]	@ (80046e8 <eeprom_startup+0x33c>)
 8004562:	edd3 7a01 	vldr	s15, [r3, #4]
		printf("EEPROM Mag read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8004566:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
				eeprom_mag_read[0], eeprom_mag_read[1], eeprom_mag_read[2]);
 800456a:	4b5f      	ldr	r3, [pc, #380]	@ (80046e8 <eeprom_startup+0x33c>)
 800456c:	edd3 6a02 	vldr	s13, [r3, #8]
		printf("EEPROM Mag read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8004570:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8004574:	ed8d 6b02 	vstr	d6, [sp, #8]
 8004578:	ed8d 7b00 	vstr	d7, [sp]
 800457c:	ec53 2b15 	vmov	r2, r3, d5
 8004580:	485a      	ldr	r0, [pc, #360]	@ (80046ec <eeprom_startup+0x340>)
 8004582:	f016 fb8f 	bl	801aca4 <iprintf>
 8004586:	e002      	b.n	800458e <eeprom_startup+0x1e2>
	} else {
		printf("Failed to read EEPROM Mag Data\r\n");
 8004588:	4859      	ldr	r0, [pc, #356]	@ (80046f0 <eeprom_startup+0x344>)
 800458a:	f016 fbf3 	bl	801ad74 <puts>
	}

	if (EEPROM_GetRollPID(&eeprom_roll_pid_read) == W25Qxx_OK) {
 800458e:	4859      	ldr	r0, [pc, #356]	@ (80046f4 <eeprom_startup+0x348>)
 8004590:	f7fd fb64 	bl	8001c5c <EEPROM_GetRollPID>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d12d      	bne.n	80045f6 <eeprom_startup+0x24a>
		printf("Roll PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
				eeprom_roll_pid_read.out.kp, eeprom_roll_pid_read.out.ki, eeprom_roll_pid_read.out.kd,
 800459a:	4b56      	ldr	r3, [pc, #344]	@ (80046f4 <eeprom_startup+0x348>)
 800459c:	edd3 7a00 	vldr	s15, [r3]
		printf("Roll PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 80045a0:	eeb7 2ae7 	vcvt.f64.f32	d2, s15
				eeprom_roll_pid_read.out.kp, eeprom_roll_pid_read.out.ki, eeprom_roll_pid_read.out.kd,
 80045a4:	4b53      	ldr	r3, [pc, #332]	@ (80046f4 <eeprom_startup+0x348>)
 80045a6:	edd3 7a01 	vldr	s15, [r3, #4]
		printf("Roll PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 80045aa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
				eeprom_roll_pid_read.out.kp, eeprom_roll_pid_read.out.ki, eeprom_roll_pid_read.out.kd,
 80045ae:	4b51      	ldr	r3, [pc, #324]	@ (80046f4 <eeprom_startup+0x348>)
 80045b0:	edd3 6a02 	vldr	s13, [r3, #8]
		printf("Roll PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 80045b4:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
				eeprom_roll_pid_read.in.kp, eeprom_roll_pid_read.in.ki, eeprom_roll_pid_read.in.kd);
 80045b8:	4b4e      	ldr	r3, [pc, #312]	@ (80046f4 <eeprom_startup+0x348>)
 80045ba:	edd3 5a03 	vldr	s11, [r3, #12]
		printf("Roll PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 80045be:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
				eeprom_roll_pid_read.in.kp, eeprom_roll_pid_read.in.ki, eeprom_roll_pid_read.in.kd);
 80045c2:	4b4c      	ldr	r3, [pc, #304]	@ (80046f4 <eeprom_startup+0x348>)
 80045c4:	edd3 4a04 	vldr	s9, [r3, #16]
		printf("Roll PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 80045c8:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
				eeprom_roll_pid_read.in.kp, eeprom_roll_pid_read.in.ki, eeprom_roll_pid_read.in.kd);
 80045cc:	4b49      	ldr	r3, [pc, #292]	@ (80046f4 <eeprom_startup+0x348>)
 80045ce:	edd3 3a05 	vldr	s7, [r3, #20]
		printf("Roll PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 80045d2:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 80045d6:	ed8d 3b08 	vstr	d3, [sp, #32]
 80045da:	ed8d 4b06 	vstr	d4, [sp, #24]
 80045de:	ed8d 5b04 	vstr	d5, [sp, #16]
 80045e2:	ed8d 6b02 	vstr	d6, [sp, #8]
 80045e6:	ed8d 7b00 	vstr	d7, [sp]
 80045ea:	ec53 2b12 	vmov	r2, r3, d2
 80045ee:	4842      	ldr	r0, [pc, #264]	@ (80046f8 <eeprom_startup+0x34c>)
 80045f0:	f016 fb58 	bl	801aca4 <iprintf>
 80045f4:	e002      	b.n	80045fc <eeprom_startup+0x250>
	} else {
		printf("Failed to read Roll PID\r\n");
 80045f6:	4841      	ldr	r0, [pc, #260]	@ (80046fc <eeprom_startup+0x350>)
 80045f8:	f016 fbbc 	bl	801ad74 <puts>
	}

	if (EEPROM_GetPitchPID(&eeprom_pitch_pid_read) == W25Qxx_OK) {
 80045fc:	4840      	ldr	r0, [pc, #256]	@ (8004700 <eeprom_startup+0x354>)
 80045fe:	f7fd fb7f 	bl	8001d00 <EEPROM_GetPitchPID>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d12d      	bne.n	8004664 <eeprom_startup+0x2b8>
		printf("Pitch PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
				eeprom_pitch_pid_read.out.kp, eeprom_pitch_pid_read.out.ki, eeprom_pitch_pid_read.out.kd,
 8004608:	4b3d      	ldr	r3, [pc, #244]	@ (8004700 <eeprom_startup+0x354>)
 800460a:	edd3 7a00 	vldr	s15, [r3]
		printf("Pitch PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 800460e:	eeb7 2ae7 	vcvt.f64.f32	d2, s15
				eeprom_pitch_pid_read.out.kp, eeprom_pitch_pid_read.out.ki, eeprom_pitch_pid_read.out.kd,
 8004612:	4b3b      	ldr	r3, [pc, #236]	@ (8004700 <eeprom_startup+0x354>)
 8004614:	edd3 7a01 	vldr	s15, [r3, #4]
		printf("Pitch PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 8004618:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
				eeprom_pitch_pid_read.out.kp, eeprom_pitch_pid_read.out.ki, eeprom_pitch_pid_read.out.kd,
 800461c:	4b38      	ldr	r3, [pc, #224]	@ (8004700 <eeprom_startup+0x354>)
 800461e:	edd3 6a02 	vldr	s13, [r3, #8]
		printf("Pitch PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 8004622:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
				eeprom_pitch_pid_read.in.kp, eeprom_pitch_pid_read.in.ki, eeprom_pitch_pid_read.in.kd);
 8004626:	4b36      	ldr	r3, [pc, #216]	@ (8004700 <eeprom_startup+0x354>)
 8004628:	edd3 5a03 	vldr	s11, [r3, #12]
		printf("Pitch PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 800462c:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
				eeprom_pitch_pid_read.in.kp, eeprom_pitch_pid_read.in.ki, eeprom_pitch_pid_read.in.kd);
 8004630:	4b33      	ldr	r3, [pc, #204]	@ (8004700 <eeprom_startup+0x354>)
 8004632:	edd3 4a04 	vldr	s9, [r3, #16]
		printf("Pitch PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 8004636:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
				eeprom_pitch_pid_read.in.kp, eeprom_pitch_pid_read.in.ki, eeprom_pitch_pid_read.in.kd);
 800463a:	4b31      	ldr	r3, [pc, #196]	@ (8004700 <eeprom_startup+0x354>)
 800463c:	edd3 3a05 	vldr	s7, [r3, #20]
		printf("Pitch PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 8004640:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 8004644:	ed8d 3b08 	vstr	d3, [sp, #32]
 8004648:	ed8d 4b06 	vstr	d4, [sp, #24]
 800464c:	ed8d 5b04 	vstr	d5, [sp, #16]
 8004650:	ed8d 6b02 	vstr	d6, [sp, #8]
 8004654:	ed8d 7b00 	vstr	d7, [sp]
 8004658:	ec53 2b12 	vmov	r2, r3, d2
 800465c:	4829      	ldr	r0, [pc, #164]	@ (8004704 <eeprom_startup+0x358>)
 800465e:	f016 fb21 	bl	801aca4 <iprintf>
 8004662:	e002      	b.n	800466a <eeprom_startup+0x2be>
	} else {
		printf("Failed to read Pitch PID\r\n");
 8004664:	4828      	ldr	r0, [pc, #160]	@ (8004708 <eeprom_startup+0x35c>)
 8004666:	f016 fb85 	bl	801ad74 <puts>
	}

	if (EEPROM_GetYawRatePID(&eeprom_yaw_rate_pid_read) == W25Qxx_OK) {
 800466a:	4828      	ldr	r0, [pc, #160]	@ (800470c <eeprom_startup+0x360>)
 800466c:	f7fd fb9a 	bl	8001da4 <EEPROM_GetYawRatePID>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d14e      	bne.n	8004714 <eeprom_startup+0x368>
		printf("Yaw Rate PID: P=%.3f, I=%.3f, D=%.3f\r\n",
				eeprom_yaw_rate_pid_read.kp, eeprom_yaw_rate_pid_read.ki, eeprom_yaw_rate_pid_read.kd);
 8004676:	4b25      	ldr	r3, [pc, #148]	@ (800470c <eeprom_startup+0x360>)
 8004678:	edd3 7a00 	vldr	s15, [r3]
		printf("Yaw Rate PID: P=%.3f, I=%.3f, D=%.3f\r\n",
 800467c:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
				eeprom_yaw_rate_pid_read.kp, eeprom_yaw_rate_pid_read.ki, eeprom_yaw_rate_pid_read.kd);
 8004680:	4b22      	ldr	r3, [pc, #136]	@ (800470c <eeprom_startup+0x360>)
 8004682:	edd3 7a01 	vldr	s15, [r3, #4]
		printf("Yaw Rate PID: P=%.3f, I=%.3f, D=%.3f\r\n",
 8004686:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
				eeprom_yaw_rate_pid_read.kp, eeprom_yaw_rate_pid_read.ki, eeprom_yaw_rate_pid_read.kd);
 800468a:	4b20      	ldr	r3, [pc, #128]	@ (800470c <eeprom_startup+0x360>)
 800468c:	edd3 6a02 	vldr	s13, [r3, #8]
		printf("Yaw Rate PID: P=%.3f, I=%.3f, D=%.3f\r\n",
 8004690:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8004694:	ed8d 6b02 	vstr	d6, [sp, #8]
 8004698:	ed8d 7b00 	vstr	d7, [sp]
 800469c:	ec53 2b15 	vmov	r2, r3, d5
 80046a0:	481b      	ldr	r0, [pc, #108]	@ (8004710 <eeprom_startup+0x364>)
 80046a2:	f016 faff 	bl	801aca4 <iprintf>
 80046a6:	e038      	b.n	800471a <eeprom_startup+0x36e>
 80046a8:	0801f36c 	.word	0x0801f36c
 80046ac:	0801f380 	.word	0x0801f380
 80046b0:	0801f3bc 	.word	0x0801f3bc
 80046b4:	0801f3ec 	.word	0x0801f3ec
 80046b8:	0801f75c 	.word	0x0801f75c
 80046bc:	0801f418 	.word	0x0801f418
 80046c0:	0801f438 	.word	0x0801f438
 80046c4:	24000c28 	.word	0x24000c28
 80046c8:	0801f460 	.word	0x0801f460
 80046cc:	0801f48c 	.word	0x0801f48c
 80046d0:	24000c34 	.word	0x24000c34
 80046d4:	0801f4a0 	.word	0x0801f4a0
 80046d8:	0801f4cc 	.word	0x0801f4cc
 80046dc:	24000c40 	.word	0x24000c40
 80046e0:	0801f4f0 	.word	0x0801f4f0
 80046e4:	0801f51c 	.word	0x0801f51c
 80046e8:	24000c4c 	.word	0x24000c4c
 80046ec:	0801f540 	.word	0x0801f540
 80046f0:	0801f56c 	.word	0x0801f56c
 80046f4:	24000c58 	.word	0x24000c58
 80046f8:	0801f58c 	.word	0x0801f58c
 80046fc:	0801f5d0 	.word	0x0801f5d0
 8004700:	24000c70 	.word	0x24000c70
 8004704:	0801f5ec 	.word	0x0801f5ec
 8004708:	0801f630 	.word	0x0801f630
 800470c:	24000c88 	.word	0x24000c88
 8004710:	0801f64c 	.word	0x0801f64c
	} else {
		printf("Failed to read Yaw Rate PID\r\n");
 8004714:	4827      	ldr	r0, [pc, #156]	@ (80047b4 <eeprom_startup+0x408>)
 8004716:	f016 fb2d 	bl	801ad74 <puts>
	}

	if (EEPROM_GetAircraftLights(&aircraft_lights) == W25Qxx_OK) {
 800471a:	4827      	ldr	r0, [pc, #156]	@ (80047b8 <eeprom_startup+0x40c>)
 800471c:	f7fd fb94 	bl	8001e48 <EEPROM_GetAircraftLights>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d139      	bne.n	800479a <eeprom_startup+0x3ee>
		printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
				aircraft_lights.rgb[0][0], aircraft_lights.rgb[0][1], aircraft_lights.rgb[0][2],
 8004726:	4b24      	ldr	r3, [pc, #144]	@ (80047b8 <eeprom_startup+0x40c>)
 8004728:	781b      	ldrb	r3, [r3, #0]
		printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 800472a:	469c      	mov	ip, r3
				aircraft_lights.rgb[0][0], aircraft_lights.rgb[0][1], aircraft_lights.rgb[0][2],
 800472c:	4b22      	ldr	r3, [pc, #136]	@ (80047b8 <eeprom_startup+0x40c>)
 800472e:	785b      	ldrb	r3, [r3, #1]
		printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 8004730:	469e      	mov	lr, r3
				aircraft_lights.rgb[0][0], aircraft_lights.rgb[0][1], aircraft_lights.rgb[0][2],
 8004732:	4b21      	ldr	r3, [pc, #132]	@ (80047b8 <eeprom_startup+0x40c>)
 8004734:	789b      	ldrb	r3, [r3, #2]
		printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 8004736:	4698      	mov	r8, r3
				aircraft_lights.rgb[1][0], aircraft_lights.rgb[1][1], aircraft_lights.rgb[1][2],
 8004738:	4b1f      	ldr	r3, [pc, #124]	@ (80047b8 <eeprom_startup+0x40c>)
 800473a:	78db      	ldrb	r3, [r3, #3]
		printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 800473c:	461a      	mov	r2, r3
				aircraft_lights.rgb[1][0], aircraft_lights.rgb[1][1], aircraft_lights.rgb[1][2],
 800473e:	4b1e      	ldr	r3, [pc, #120]	@ (80047b8 <eeprom_startup+0x40c>)
 8004740:	791b      	ldrb	r3, [r3, #4]
		printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 8004742:	4619      	mov	r1, r3
				aircraft_lights.rgb[1][0], aircraft_lights.rgb[1][1], aircraft_lights.rgb[1][2],
 8004744:	4b1c      	ldr	r3, [pc, #112]	@ (80047b8 <eeprom_startup+0x40c>)
 8004746:	795b      	ldrb	r3, [r3, #5]
		printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 8004748:	4618      	mov	r0, r3
				aircraft_lights.rgb[2][0], aircraft_lights.rgb[2][1], aircraft_lights.rgb[2][2],
 800474a:	4b1b      	ldr	r3, [pc, #108]	@ (80047b8 <eeprom_startup+0x40c>)
 800474c:	799b      	ldrb	r3, [r3, #6]
		printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 800474e:	461c      	mov	r4, r3
				aircraft_lights.rgb[2][0], aircraft_lights.rgb[2][1], aircraft_lights.rgb[2][2],
 8004750:	4b19      	ldr	r3, [pc, #100]	@ (80047b8 <eeprom_startup+0x40c>)
 8004752:	79db      	ldrb	r3, [r3, #7]
		printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 8004754:	461d      	mov	r5, r3
				aircraft_lights.rgb[2][0], aircraft_lights.rgb[2][1], aircraft_lights.rgb[2][2],
 8004756:	4b18      	ldr	r3, [pc, #96]	@ (80047b8 <eeprom_startup+0x40c>)
 8004758:	7a1b      	ldrb	r3, [r3, #8]
		printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 800475a:	461e      	mov	r6, r3
				aircraft_lights.rgb[3][0], aircraft_lights.rgb[3][1], aircraft_lights.rgb[3][2],
 800475c:	4b16      	ldr	r3, [pc, #88]	@ (80047b8 <eeprom_startup+0x40c>)
 800475e:	7a5b      	ldrb	r3, [r3, #9]
		printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 8004760:	60fb      	str	r3, [r7, #12]
				aircraft_lights.rgb[3][0], aircraft_lights.rgb[3][1], aircraft_lights.rgb[3][2],
 8004762:	4b15      	ldr	r3, [pc, #84]	@ (80047b8 <eeprom_startup+0x40c>)
 8004764:	7a9b      	ldrb	r3, [r3, #10]
		printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 8004766:	60bb      	str	r3, [r7, #8]
				aircraft_lights.rgb[3][0], aircraft_lights.rgb[3][1], aircraft_lights.rgb[3][2],
 8004768:	4b13      	ldr	r3, [pc, #76]	@ (80047b8 <eeprom_startup+0x40c>)
 800476a:	7adb      	ldrb	r3, [r3, #11]
		printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 800476c:	607b      	str	r3, [r7, #4]
				aircraft_lights.mode);
 800476e:	4b12      	ldr	r3, [pc, #72]	@ (80047b8 <eeprom_startup+0x40c>)
 8004770:	7b1b      	ldrb	r3, [r3, #12]
		printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 8004772:	9309      	str	r3, [sp, #36]	@ 0x24
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	9308      	str	r3, [sp, #32]
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	9307      	str	r3, [sp, #28]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	9306      	str	r3, [sp, #24]
 8004780:	9605      	str	r6, [sp, #20]
 8004782:	9504      	str	r5, [sp, #16]
 8004784:	9403      	str	r4, [sp, #12]
 8004786:	9002      	str	r0, [sp, #8]
 8004788:	9101      	str	r1, [sp, #4]
 800478a:	9200      	str	r2, [sp, #0]
 800478c:	4643      	mov	r3, r8
 800478e:	4672      	mov	r2, lr
 8004790:	4661      	mov	r1, ip
 8004792:	480a      	ldr	r0, [pc, #40]	@ (80047bc <eeprom_startup+0x410>)
 8004794:	f016 fa86 	bl	801aca4 <iprintf>
 8004798:	e002      	b.n	80047a0 <eeprom_startup+0x3f4>
	} else {
		printf("Failed to read Aircraft Lights\r\n");
 800479a:	4809      	ldr	r0, [pc, #36]	@ (80047c0 <eeprom_startup+0x414>)
 800479c:	f016 faea 	bl	801ad74 <puts>
	}

	printf("\r\n"
 80047a0:	4808      	ldr	r0, [pc, #32]	@ (80047c4 <eeprom_startup+0x418>)
 80047a2:	f016 fae7 	bl	801ad74 <puts>
			"================= EEPROM Data Fetched =================\n"
			"\r\n");

}
 80047a6:	bf00      	nop
 80047a8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80047ac:	46bd      	mov	sp, r7
 80047ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047b2:	bf00      	nop
 80047b4:	0801f674 	.word	0x0801f674
 80047b8:	24000c94 	.word	0x24000c94
 80047bc:	0801f694 	.word	0x0801f694
 80047c0:	0801f700 	.word	0x0801f700
 80047c4:	0801f720 	.word	0x0801f720

080047c8 <Is_iBus_Throttle_Armed>:
		failsafe_flag = 2;
	}
	iBus_rx_cnt = 0;
}

int Is_iBus_Throttle_Armed(void) {
 80047c8:	b580      	push	{r7, lr}
 80047ca:	af00      	add	r7, sp, #0
    if (ibus_rx_cplt_flag == 1) {
 80047cc:	4b0e      	ldr	r3, [pc, #56]	@ (8004808 <Is_iBus_Throttle_Armed+0x40>)
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d115      	bne.n	8004800 <Is_iBus_Throttle_Armed+0x38>
        ibus_rx_cplt_flag = 0;
 80047d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004808 <Is_iBus_Throttle_Armed+0x40>)
 80047d6:	2200      	movs	r2, #0
 80047d8:	701a      	strb	r2, [r3, #0]
        if (iBus_Check_CHKSUM(&ibus_rx_buf[0], 32) == 1) {
 80047da:	2120      	movs	r1, #32
 80047dc:	480b      	ldr	r0, [pc, #44]	@ (800480c <Is_iBus_Throttle_Armed+0x44>)
 80047de:	f7fe fcdb 	bl	8003198 <iBus_Check_CHKSUM>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d10b      	bne.n	8004800 <Is_iBus_Throttle_Armed+0x38>
            iBus_Parsing(&ibus_rx_buf[0], &iBus);
 80047e8:	4909      	ldr	r1, [pc, #36]	@ (8004810 <Is_iBus_Throttle_Armed+0x48>)
 80047ea:	4808      	ldr	r0, [pc, #32]	@ (800480c <Is_iBus_Throttle_Armed+0x44>)
 80047ec:	f7fe fd09 	bl	8003202 <iBus_Parsing>
            if (iBus.SwA >= 1900)
 80047f0:	4b07      	ldr	r3, [pc, #28]	@ (8004810 <Is_iBus_Throttle_Armed+0x48>)
 80047f2:	891b      	ldrh	r3, [r3, #8]
 80047f4:	f240 726b 	movw	r2, #1899	@ 0x76b
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d901      	bls.n	8004800 <Is_iBus_Throttle_Armed+0x38>
                return 1;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e000      	b.n	8004802 <Is_iBus_Throttle_Armed+0x3a>
        }
    }
    return 0;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	24000df8 	.word	0x24000df8
 800480c:	24000dd8 	.word	0x24000dd8
 8004810:	24000950 	.word	0x24000950

08004814 <HAL_UART_RxCpltCallback>:

	}

}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8004814:	b580      	push	{r7, lr}
 8004816:	b082      	sub	sp, #8
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == UART7) {
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a05      	ldr	r2, [pc, #20]	@ (8004838 <HAL_UART_RxCpltCallback+0x24>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d104      	bne.n	8004830 <HAL_UART_RxCpltCallback+0x1c>
        HAL_UART_Receive_IT(&huart7, &uart7_rx_data, 1);
 8004826:	2201      	movs	r2, #1
 8004828:	4904      	ldr	r1, [pc, #16]	@ (800483c <HAL_UART_RxCpltCallback+0x28>)
 800482a:	4805      	ldr	r0, [pc, #20]	@ (8004840 <HAL_UART_RxCpltCallback+0x2c>)
 800482c:	f00c ff32 	bl	8011694 <HAL_UART_Receive_IT>
    }
}
 8004830:	bf00      	nop
 8004832:	3708      	adds	r7, #8
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	40007800 	.word	0x40007800
 800483c:	24000df9 	.word	0x24000df9
 8004840:	240010a8 	.word	0x240010a8

08004844 <check_command_timeout>:

void check_command_timeout(void) {
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0
    if (cmd_receiving && !is_cmd_mode()) { // Only in normal mode
 800484a:	4b10      	ldr	r3, [pc, #64]	@ (800488c <check_command_timeout+0x48>)
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	b2db      	uxtb	r3, r3
 8004850:	2b00      	cmp	r3, #0
 8004852:	d017      	beq.n	8004884 <check_command_timeout+0x40>
 8004854:	f7fc fcc2 	bl	80011dc <is_cmd_mode>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d112      	bne.n	8004884 <check_command_timeout+0x40>
        TickType_t now = xTaskGetTickCount();
 800485e:	f013 f853 	bl	8017908 <xTaskGetTickCount>
 8004862:	6078      	str	r0, [r7, #4]

        if ((now - last_char_time) > pdMS_TO_TICKS(CMD_TIMEOUT_MS)) {
 8004864:	4b0a      	ldr	r3, [pc, #40]	@ (8004890 <check_command_timeout+0x4c>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	1ad3      	subs	r3, r2, r3
 800486c:	2bc8      	cmp	r3, #200	@ 0xc8
 800486e:	d909      	bls.n	8004884 <check_command_timeout+0x40>
            cmd_receiving = 0;
 8004870:	4b06      	ldr	r3, [pc, #24]	@ (800488c <check_command_timeout+0x48>)
 8004872:	2200      	movs	r2, #0
 8004874:	701a      	strb	r2, [r3, #0]
            cmd_index = 0;
 8004876:	4b07      	ldr	r3, [pc, #28]	@ (8004894 <check_command_timeout+0x50>)
 8004878:	2200      	movs	r2, #0
 800487a:	701a      	strb	r2, [r3, #0]
            printf("Main: Command timeout at %lu ms\n", (unsigned long)(now * portTICK_PERIOD_MS));
 800487c:	6879      	ldr	r1, [r7, #4]
 800487e:	4806      	ldr	r0, [pc, #24]	@ (8004898 <check_command_timeout+0x54>)
 8004880:	f016 fa10 	bl	801aca4 <iprintf>
//            WS2812_Update();
        }
    }
}
 8004884:	bf00      	nop
 8004886:	3708      	adds	r7, #8
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	24000e7d 	.word	0x24000e7d
 8004890:	24000e80 	.word	0x24000e80
 8004894:	24000e7c 	.word	0x24000e7c
 8004898:	0801f80c 	.word	0x0801f80c

0800489c <cmd_mode_check>:

void cmd_mode_check(void) {
 800489c:	b580      	push	{r7, lr}
 800489e:	b086      	sub	sp, #24
 80048a0:	af00      	add	r7, sp, #0
    TickType_t last_2ms   = xTaskGetTickCount();
 80048a2:	f013 f831 	bl	8017908 <xTaskGetTickCount>
 80048a6:	6178      	str	r0, [r7, #20]
    TickType_t last_20ms  = last_2ms;
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	613b      	str	r3, [r7, #16]
    TickType_t last_100ms = last_2ms;
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	60fb      	str	r3, [r7, #12]
    TickType_t last_loop_print = 0;
 80048b0:	2300      	movs	r3, #0
 80048b2:	60bb      	str	r3, [r7, #8]

    while (Is_iBus_Throttle_Armed() == 0) {
 80048b4:	e032      	b.n	800491c <cmd_mode_check+0x80>
        TickType_t now = xTaskGetTickCount();
 80048b6:	f013 f827 	bl	8017908 <xTaskGetTickCount>
 80048ba:	6078      	str	r0, [r7, #4]

        // Debug print every 1s
        if ((now - last_loop_print) >= pdMS_TO_TICKS(1000)) {
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80048c6:	d301      	bcc.n	80048cc <cmd_mode_check+0x30>
            last_loop_print = now;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	60bb      	str	r3, [r7, #8]
            // printf("Waiting for throttle...\n");
        }

//        calibration_task(); // Always run

        if (is_cmd_mode()) {
 80048cc:	f7fc fc86 	bl	80011dc <is_cmd_mode>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d003      	beq.n	80048de <cmd_mode_check+0x42>
            vTaskDelay(pdMS_TO_TICKS(1));
 80048d6:	2001      	movs	r0, #1
 80048d8:	f012 fd54 	bl	8017384 <vTaskDelay>
            continue;
 80048dc:	e01e      	b.n	800491c <cmd_mode_check+0x80>
        }

        // 20ms periodic replacement for tim7_20ms_flag
        if ((now - last_20ms) >= pdMS_TO_TICKS(20) &&
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	2b13      	cmp	r3, #19
 80048e6:	d908      	bls.n	80048fa <cmd_mode_check+0x5e>
            (now - last_100ms) < pdMS_TO_TICKS(100)) {
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	1ad3      	subs	r3, r2, r3
        if ((now - last_20ms) >= pdMS_TO_TICKS(20) &&
 80048ee:	2b63      	cmp	r3, #99	@ 0x63
 80048f0:	d803      	bhi.n	80048fa <cmd_mode_check+0x5e>
            last_20ms = now;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	613b      	str	r3, [r7, #16]
            check_command_timeout();
 80048f6:	f7ff ffa5 	bl	8004844 <check_command_timeout>
        }

        // 2ms periodic replacement for tim7_2ms_flag
        if ((now - last_2ms) >= pdMS_TO_TICKS(2)) {
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	2b01      	cmp	r3, #1
 8004902:	d901      	bls.n	8004908 <cmd_mode_check+0x6c>
            last_2ms = now;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	617b      	str	r3, [r7, #20]

        }

        // Optional: 100ms periodic work
        if ((now - last_100ms) >= pdMS_TO_TICKS(100)) {
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	2b63      	cmp	r3, #99	@ 0x63
 8004910:	d901      	bls.n	8004916 <cmd_mode_check+0x7a>
            last_100ms = now;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	60fb      	str	r3, [r7, #12]
        }

        // Give FreeRTOS time to run other system tasks
        vTaskDelay(pdMS_TO_TICKS(1));
 8004916:	2001      	movs	r0, #1
 8004918:	f012 fd34 	bl	8017384 <vTaskDelay>
    while (Is_iBus_Throttle_Armed() == 0) {
 800491c:	f7ff ff54 	bl	80047c8 <Is_iBus_Throttle_Armed>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d0c7      	beq.n	80048b6 <cmd_mode_check+0x1a>
    }
}
 8004926:	bf00      	nop
 8004928:	bf00      	nop
 800492a:	3718      	adds	r7, #24
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8004936:	463b      	mov	r3, r7
 8004938:	2200      	movs	r2, #0
 800493a:	601a      	str	r2, [r3, #0]
 800493c:	605a      	str	r2, [r3, #4]
 800493e:	609a      	str	r2, [r3, #8]
 8004940:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8004942:	f002 fa41 	bl	8006dc8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8004946:	2301      	movs	r3, #1
 8004948:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800494a:	2300      	movs	r3, #0
 800494c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800494e:	2300      	movs	r3, #0
 8004950:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8004952:	231f      	movs	r3, #31
 8004954:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8004956:	2387      	movs	r3, #135	@ 0x87
 8004958:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800495a:	2300      	movs	r3, #0
 800495c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800495e:	2300      	movs	r3, #0
 8004960:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8004962:	2301      	movs	r3, #1
 8004964:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8004966:	2301      	movs	r3, #1
 8004968:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800496a:	2300      	movs	r3, #0
 800496c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800496e:	2300      	movs	r3, #0
 8004970:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8004972:	463b      	mov	r3, r7
 8004974:	4618      	mov	r0, r3
 8004976:	f002 fa5f 	bl	8006e38 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800497a:	2004      	movs	r0, #4
 800497c:	f002 fa3c 	bl	8006df8 <HAL_MPU_Enable>

}
 8004980:	bf00      	nop
 8004982:	3710      	adds	r7, #16
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a04      	ldr	r2, [pc, #16]	@ (80049a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d101      	bne.n	800499e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800499a:	f002 f8f1 	bl	8006b80 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800499e:	bf00      	nop
 80049a0:	3708      	adds	r7, #8
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	40010000 	.word	0x40010000

080049ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80049ac:	b480      	push	{r7}
 80049ae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80049b0:	b672      	cpsid	i
}
 80049b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80049b4:	bf00      	nop
 80049b6:	e7fd      	b.n	80049b4 <Error_Handler+0x8>

080049b8 <MX_OCTOSPI1_Init>:

OSPI_HandleTypeDef hospi1;

/* OCTOSPI1 init function */
void MX_OCTOSPI1_Init(void)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b086      	sub	sp, #24
 80049bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 80049be:	463b      	mov	r3, r7
 80049c0:	2200      	movs	r2, #0
 80049c2:	601a      	str	r2, [r3, #0]
 80049c4:	605a      	str	r2, [r3, #4]
 80049c6:	609a      	str	r2, [r3, #8]
 80049c8:	60da      	str	r2, [r3, #12]
 80049ca:	611a      	str	r2, [r3, #16]
 80049cc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  hospi1.Instance = OCTOSPI1;
 80049ce:	4b28      	ldr	r3, [pc, #160]	@ (8004a70 <MX_OCTOSPI1_Init+0xb8>)
 80049d0:	4a28      	ldr	r2, [pc, #160]	@ (8004a74 <MX_OCTOSPI1_Init+0xbc>)
 80049d2:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 80049d4:	4b26      	ldr	r3, [pc, #152]	@ (8004a70 <MX_OCTOSPI1_Init+0xb8>)
 80049d6:	2201      	movs	r2, #1
 80049d8:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80049da:	4b25      	ldr	r3, [pc, #148]	@ (8004a70 <MX_OCTOSPI1_Init+0xb8>)
 80049dc:	2200      	movs	r2, #0
 80049de:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 80049e0:	4b23      	ldr	r3, [pc, #140]	@ (8004a70 <MX_OCTOSPI1_Init+0xb8>)
 80049e2:	2200      	movs	r2, #0
 80049e4:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 23;
 80049e6:	4b22      	ldr	r3, [pc, #136]	@ (8004a70 <MX_OCTOSPI1_Init+0xb8>)
 80049e8:	2217      	movs	r2, #23
 80049ea:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 2;
 80049ec:	4b20      	ldr	r3, [pc, #128]	@ (8004a70 <MX_OCTOSPI1_Init+0xb8>)
 80049ee:	2202      	movs	r2, #2
 80049f0:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80049f2:	4b1f      	ldr	r3, [pc, #124]	@ (8004a70 <MX_OCTOSPI1_Init+0xb8>)
 80049f4:	2200      	movs	r2, #0
 80049f6:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_3;
 80049f8:	4b1d      	ldr	r3, [pc, #116]	@ (8004a70 <MX_OCTOSPI1_Init+0xb8>)
 80049fa:	2201      	movs	r2, #1
 80049fc:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 80049fe:	4b1c      	ldr	r3, [pc, #112]	@ (8004a70 <MX_OCTOSPI1_Init+0xb8>)
 8004a00:	2200      	movs	r2, #0
 8004a02:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 3-1;
 8004a04:	4b1a      	ldr	r3, [pc, #104]	@ (8004a70 <MX_OCTOSPI1_Init+0xb8>)
 8004a06:	2202      	movs	r2, #2
 8004a08:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8004a0a:	4b19      	ldr	r3, [pc, #100]	@ (8004a70 <MX_OCTOSPI1_Init+0xb8>)
 8004a0c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004a10:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8004a12:	4b17      	ldr	r3, [pc, #92]	@ (8004a70 <MX_OCTOSPI1_Init+0xb8>)
 8004a14:	2200      	movs	r2, #0
 8004a16:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8004a18:	4b15      	ldr	r3, [pc, #84]	@ (8004a70 <MX_OCTOSPI1_Init+0xb8>)
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8004a1e:	4b14      	ldr	r3, [pc, #80]	@ (8004a70 <MX_OCTOSPI1_Init+0xb8>)
 8004a20:	2208      	movs	r2, #8
 8004a22:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi1.Init.MaxTran = 0;
 8004a24:	4b12      	ldr	r3, [pc, #72]	@ (8004a70 <MX_OCTOSPI1_Init+0xb8>)
 8004a26:	2200      	movs	r2, #0
 8004a28:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi1.Init.Refresh = 0;
 8004a2a:	4b11      	ldr	r3, [pc, #68]	@ (8004a70 <MX_OCTOSPI1_Init+0xb8>)
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8004a30:	480f      	ldr	r0, [pc, #60]	@ (8004a70 <MX_OCTOSPI1_Init+0xb8>)
 8004a32:	f006 ff2f 	bl	800b894 <HAL_OSPI_Init>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d001      	beq.n	8004a40 <MX_OCTOSPI1_Init+0x88>
  {
    Error_Handler();
 8004a3c:	f7ff ffb6 	bl	80049ac <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 8004a40:	2301      	movs	r3, #1
 8004a42:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.NCSPort = 1;
 8004a44:	2301      	movs	r3, #1
 8004a46:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8004a48:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8004a4c:	60fb      	str	r3, [r7, #12]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004a4e:	463b      	mov	r3, r7
 8004a50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a54:	4619      	mov	r1, r3
 8004a56:	4806      	ldr	r0, [pc, #24]	@ (8004a70 <MX_OCTOSPI1_Init+0xb8>)
 8004a58:	f007 f98a 	bl	800bd70 <HAL_OSPIM_Config>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d001      	beq.n	8004a66 <MX_OCTOSPI1_Init+0xae>
  {
    Error_Handler();
 8004a62:	f7ff ffa3 	bl	80049ac <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8004a66:	bf00      	nop
 8004a68:	3718      	adds	r7, #24
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	24000d2c 	.word	0x24000d2c
 8004a74:	52005000 	.word	0x52005000

08004a78 <HAL_OSPI_MspInit>:

void HAL_OSPI_MspInit(OSPI_HandleTypeDef* ospiHandle)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b0bc      	sub	sp, #240	@ 0xf0
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a80:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8004a84:	2200      	movs	r2, #0
 8004a86:	601a      	str	r2, [r3, #0]
 8004a88:	605a      	str	r2, [r3, #4]
 8004a8a:	609a      	str	r2, [r3, #8]
 8004a8c:	60da      	str	r2, [r3, #12]
 8004a8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004a90:	f107 0320 	add.w	r3, r7, #32
 8004a94:	22b8      	movs	r2, #184	@ 0xb8
 8004a96:	2100      	movs	r1, #0
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f016 fab5 	bl	801b008 <memset>
  if(ospiHandle->Instance==OCTOSPI1)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a5d      	ldr	r2, [pc, #372]	@ (8004c18 <HAL_OSPI_MspInit+0x1a0>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	f040 80b2 	bne.w	8004c0e <HAL_OSPI_MspInit+0x196>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8004aaa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004aae:	f04f 0300 	mov.w	r3, #0
 8004ab2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_D1HCLK;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004aba:	f107 0320 	add.w	r3, r7, #32
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f009 f890 	bl	800dbe4 <HAL_RCCEx_PeriphCLKConfig>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d001      	beq.n	8004ace <HAL_OSPI_MspInit+0x56>
    {
      Error_Handler();
 8004aca:	f7ff ff6f 	bl	80049ac <Error_Handler>
    }

    /* OCTOSPI1 clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 8004ace:	4b53      	ldr	r3, [pc, #332]	@ (8004c1c <HAL_OSPI_MspInit+0x1a4>)
 8004ad0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004ad4:	4a51      	ldr	r2, [pc, #324]	@ (8004c1c <HAL_OSPI_MspInit+0x1a4>)
 8004ad6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004ada:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8004ade:	4b4f      	ldr	r3, [pc, #316]	@ (8004c1c <HAL_OSPI_MspInit+0x1a4>)
 8004ae0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004ae4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ae8:	61fb      	str	r3, [r7, #28]
 8004aea:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8004aec:	4b4b      	ldr	r3, [pc, #300]	@ (8004c1c <HAL_OSPI_MspInit+0x1a4>)
 8004aee:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004af2:	4a4a      	ldr	r2, [pc, #296]	@ (8004c1c <HAL_OSPI_MspInit+0x1a4>)
 8004af4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004af8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8004afc:	4b47      	ldr	r3, [pc, #284]	@ (8004c1c <HAL_OSPI_MspInit+0x1a4>)
 8004afe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004b02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b06:	61bb      	str	r3, [r7, #24]
 8004b08:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004b0a:	4b44      	ldr	r3, [pc, #272]	@ (8004c1c <HAL_OSPI_MspInit+0x1a4>)
 8004b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b10:	4a42      	ldr	r2, [pc, #264]	@ (8004c1c <HAL_OSPI_MspInit+0x1a4>)
 8004b12:	f043 0310 	orr.w	r3, r3, #16
 8004b16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004b1a:	4b40      	ldr	r3, [pc, #256]	@ (8004c1c <HAL_OSPI_MspInit+0x1a4>)
 8004b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b20:	f003 0310 	and.w	r3, r3, #16
 8004b24:	617b      	str	r3, [r7, #20]
 8004b26:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b28:	4b3c      	ldr	r3, [pc, #240]	@ (8004c1c <HAL_OSPI_MspInit+0x1a4>)
 8004b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b2e:	4a3b      	ldr	r2, [pc, #236]	@ (8004c1c <HAL_OSPI_MspInit+0x1a4>)
 8004b30:	f043 0302 	orr.w	r3, r3, #2
 8004b34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004b38:	4b38      	ldr	r3, [pc, #224]	@ (8004c1c <HAL_OSPI_MspInit+0x1a4>)
 8004b3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b3e:	f003 0302 	and.w	r3, r3, #2
 8004b42:	613b      	str	r3, [r7, #16]
 8004b44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004b46:	4b35      	ldr	r3, [pc, #212]	@ (8004c1c <HAL_OSPI_MspInit+0x1a4>)
 8004b48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b4c:	4a33      	ldr	r2, [pc, #204]	@ (8004c1c <HAL_OSPI_MspInit+0x1a4>)
 8004b4e:	f043 0308 	orr.w	r3, r3, #8
 8004b52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004b56:	4b31      	ldr	r3, [pc, #196]	@ (8004c1c <HAL_OSPI_MspInit+0x1a4>)
 8004b58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b5c:	f003 0308 	and.w	r3, r3, #8
 8004b60:	60fb      	str	r3, [r7, #12]
 8004b62:	68fb      	ldr	r3, [r7, #12]
    PD11     ------> OCTOSPIM_P1_IO0
    PD12     ------> OCTOSPIM_P1_IO1
    PD13     ------> OCTOSPIM_P1_IO3
    PB6     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004b64:	2304      	movs	r3, #4
 8004b66:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b6a:	2302      	movs	r3, #2
 8004b6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b70:	2300      	movs	r3, #0
 8004b72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b76:	2303      	movs	r3, #3
 8004b78:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8004b7c:	2309      	movs	r3, #9
 8004b7e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004b82:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8004b86:	4619      	mov	r1, r3
 8004b88:	4825      	ldr	r0, [pc, #148]	@ (8004c20 <HAL_OSPI_MspInit+0x1a8>)
 8004b8a:	f004 ffdb 	bl	8009b44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004b8e:	2304      	movs	r3, #4
 8004b90:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b94:	2302      	movs	r3, #2
 8004b96:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8004ba6:	2309      	movs	r3, #9
 8004ba8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bac:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	481c      	ldr	r0, [pc, #112]	@ (8004c24 <HAL_OSPI_MspInit+0x1ac>)
 8004bb4:	f004 ffc6 	bl	8009b44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8004bb8:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8004bbc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bc0:	2302      	movs	r3, #2
 8004bc2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8004bd2:	2309      	movs	r3, #9
 8004bd4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004bd8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8004bdc:	4619      	mov	r1, r3
 8004bde:	4812      	ldr	r0, [pc, #72]	@ (8004c28 <HAL_OSPI_MspInit+0x1b0>)
 8004be0:	f004 ffb0 	bl	8009b44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004be4:	2340      	movs	r3, #64	@ 0x40
 8004be6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bea:	2302      	movs	r3, #2
 8004bec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8004bfc:	230a      	movs	r3, #10
 8004bfe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c02:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8004c06:	4619      	mov	r1, r3
 8004c08:	4806      	ldr	r0, [pc, #24]	@ (8004c24 <HAL_OSPI_MspInit+0x1ac>)
 8004c0a:	f004 ff9b 	bl	8009b44 <HAL_GPIO_Init>

  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }
}
 8004c0e:	bf00      	nop
 8004c10:	37f0      	adds	r7, #240	@ 0xf0
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	52005000 	.word	0x52005000
 8004c1c:	58024400 	.word	0x58024400
 8004c20:	58021000 	.word	0x58021000
 8004c24:	58020400 	.word	0x58020400
 8004c28:	58020c00 	.word	0x58020c00

08004c2c <__NVIC_GetPriorityGrouping>:
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c30:	4b04      	ldr	r3, [pc, #16]	@ (8004c44 <__NVIC_GetPriorityGrouping+0x18>)
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	0a1b      	lsrs	r3, r3, #8
 8004c36:	f003 0307 	and.w	r3, r3, #7
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr
 8004c44:	e000ed00 	.word	0xe000ed00

08004c48 <__NVIC_EnableIRQ>:
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	4603      	mov	r3, r0
 8004c50:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004c52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	db0b      	blt.n	8004c72 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c5a:	88fb      	ldrh	r3, [r7, #6]
 8004c5c:	f003 021f 	and.w	r2, r3, #31
 8004c60:	4907      	ldr	r1, [pc, #28]	@ (8004c80 <__NVIC_EnableIRQ+0x38>)
 8004c62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c66:	095b      	lsrs	r3, r3, #5
 8004c68:	2001      	movs	r0, #1
 8004c6a:	fa00 f202 	lsl.w	r2, r0, r2
 8004c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004c72:	bf00      	nop
 8004c74:	370c      	adds	r7, #12
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
 8004c7e:	bf00      	nop
 8004c80:	e000e100 	.word	0xe000e100

08004c84 <__NVIC_SetPriority>:
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	6039      	str	r1, [r7, #0]
 8004c8e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004c90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	db0a      	blt.n	8004cae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	b2da      	uxtb	r2, r3
 8004c9c:	490c      	ldr	r1, [pc, #48]	@ (8004cd0 <__NVIC_SetPriority+0x4c>)
 8004c9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ca2:	0112      	lsls	r2, r2, #4
 8004ca4:	b2d2      	uxtb	r2, r2
 8004ca6:	440b      	add	r3, r1
 8004ca8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004cac:	e00a      	b.n	8004cc4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	b2da      	uxtb	r2, r3
 8004cb2:	4908      	ldr	r1, [pc, #32]	@ (8004cd4 <__NVIC_SetPriority+0x50>)
 8004cb4:	88fb      	ldrh	r3, [r7, #6]
 8004cb6:	f003 030f 	and.w	r3, r3, #15
 8004cba:	3b04      	subs	r3, #4
 8004cbc:	0112      	lsls	r2, r2, #4
 8004cbe:	b2d2      	uxtb	r2, r2
 8004cc0:	440b      	add	r3, r1
 8004cc2:	761a      	strb	r2, [r3, #24]
}
 8004cc4:	bf00      	nop
 8004cc6:	370c      	adds	r7, #12
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr
 8004cd0:	e000e100 	.word	0xe000e100
 8004cd4:	e000ed00 	.word	0xe000ed00

08004cd8 <NVIC_EncodePriority>:
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b089      	sub	sp, #36	@ 0x24
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f003 0307 	and.w	r3, r3, #7
 8004cea:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	f1c3 0307 	rsb	r3, r3, #7
 8004cf2:	2b04      	cmp	r3, #4
 8004cf4:	bf28      	it	cs
 8004cf6:	2304      	movcs	r3, #4
 8004cf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	3304      	adds	r3, #4
 8004cfe:	2b06      	cmp	r3, #6
 8004d00:	d902      	bls.n	8004d08 <NVIC_EncodePriority+0x30>
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	3b03      	subs	r3, #3
 8004d06:	e000      	b.n	8004d0a <NVIC_EncodePriority+0x32>
 8004d08:	2300      	movs	r3, #0
 8004d0a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d0c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	fa02 f303 	lsl.w	r3, r2, r3
 8004d16:	43da      	mvns	r2, r3
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	401a      	ands	r2, r3
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d20:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	fa01 f303 	lsl.w	r3, r1, r3
 8004d2a:	43d9      	mvns	r1, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d30:	4313      	orrs	r3, r2
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3724      	adds	r7, #36	@ 0x24
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr

08004d3e <LL_SPI_SetStandard>:
{
 8004d3e:	b480      	push	{r7}
 8004d40:	b083      	sub	sp, #12
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
 8004d46:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG2, SPI_CFG2_SP, Standard);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	f423 1260 	bic.w	r2, r3, #3670016	@ 0x380000
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	431a      	orrs	r2, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	60da      	str	r2, [r3, #12]
}
 8004d58:	bf00      	nop
 8004d5a:	370c      	adds	r7, #12
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <LL_SPI_SetFIFOThreshold>:
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG1, SPI_CFG1_FTHLV, Threshold);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	f423 72f0 	bic.w	r2, r3, #480	@ 0x1e0
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	431a      	orrs	r2, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	609a      	str	r2, [r3, #8]
}
 8004d7e:	bf00      	nop
 8004d80:	370c      	adds	r7, #12
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr

08004d8a <LL_SPI_EnableNSSPulseMgt>:
{
 8004d8a:	b480      	push	{r7}
 8004d8c:	b083      	sub	sp, #12
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CFG2, SPI_CFG2_SSOM);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	60da      	str	r2, [r3, #12]
}
 8004d9e:	bf00      	nop
 8004da0:	370c      	adds	r7, #12
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
	...

08004dac <LL_AHB4_GRP1_EnableClock>:
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB4ENR, Periphs);
 8004db4:	4b0a      	ldr	r3, [pc, #40]	@ (8004de0 <LL_AHB4_GRP1_EnableClock+0x34>)
 8004db6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8004dba:	4909      	ldr	r1, [pc, #36]	@ (8004de0 <LL_AHB4_GRP1_EnableClock+0x34>)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 8004dc4:	4b06      	ldr	r3, [pc, #24]	@ (8004de0 <LL_AHB4_GRP1_EnableClock+0x34>)
 8004dc6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4013      	ands	r3, r2
 8004dce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
}
 8004dd2:	bf00      	nop
 8004dd4:	3714      	adds	r7, #20
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop
 8004de0:	58024400 	.word	0x58024400

08004de4 <LL_APB1_GRP1_EnableClock>:
{
 8004de4:	b480      	push	{r7}
 8004de6:	b085      	sub	sp, #20
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1LENR, Periphs);
 8004dec:	4b0a      	ldr	r3, [pc, #40]	@ (8004e18 <LL_APB1_GRP1_EnableClock+0x34>)
 8004dee:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8004df2:	4909      	ldr	r1, [pc, #36]	@ (8004e18 <LL_APB1_GRP1_EnableClock+0x34>)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  tmpreg = READ_BIT(RCC->APB1LENR, Periphs);
 8004dfc:	4b06      	ldr	r3, [pc, #24]	@ (8004e18 <LL_APB1_GRP1_EnableClock+0x34>)
 8004dfe:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4013      	ands	r3, r2
 8004e06:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004e08:	68fb      	ldr	r3, [r7, #12]
}
 8004e0a:	bf00      	nop
 8004e0c:	3714      	adds	r7, #20
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop
 8004e18:	58024400 	.word	0x58024400

08004e1c <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(const DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Direction)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b087      	sub	sp, #28
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_DIR, Direction);
 8004e2c:	4a0d      	ldr	r2, [pc, #52]	@ (8004e64 <LL_DMA_SetDataTransferDirection+0x48>)
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	4413      	add	r3, r2
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	461a      	mov	r2, r3
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	4413      	add	r3, r2
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004e40:	4908      	ldr	r1, [pc, #32]	@ (8004e64 <LL_DMA_SetDataTransferDirection+0x48>)
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	440b      	add	r3, r1
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	4619      	mov	r1, r3
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	440b      	add	r3, r1
 8004e4e:	4619      	mov	r1, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	600b      	str	r3, [r1, #0]
}
 8004e56:	bf00      	nop
 8004e58:	371c      	adds	r7, #28
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	0801f974 	.word	0x0801f974

08004e68 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  *         @arg @ref LL_DMA_MODE_PFCTRL
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(const DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mode)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b087      	sub	sp, #28
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8004e78:	4a0d      	ldr	r2, [pc, #52]	@ (8004eb0 <LL_DMA_SetMode+0x48>)
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	461a      	mov	r2, r3
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	4413      	add	r3, r2
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f423 7290 	bic.w	r2, r3, #288	@ 0x120
 8004e8c:	4908      	ldr	r1, [pc, #32]	@ (8004eb0 <LL_DMA_SetMode+0x48>)
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	440b      	add	r3, r1
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	4619      	mov	r1, r3
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	440b      	add	r3, r1
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	600b      	str	r3, [r1, #0]
}
 8004ea2:	bf00      	nop
 8004ea4:	371c      	adds	r7, #28
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr
 8004eae:	bf00      	nop
 8004eb0:	0801f974 	.word	0x0801f974

08004eb4 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(const DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b087      	sub	sp, #28
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_PINC, IncrementMode);
 8004ec4:	4a0d      	ldr	r2, [pc, #52]	@ (8004efc <LL_DMA_SetPeriphIncMode+0x48>)
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	4413      	add	r3, r2
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	461a      	mov	r2, r3
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004ed8:	4908      	ldr	r1, [pc, #32]	@ (8004efc <LL_DMA_SetPeriphIncMode+0x48>)
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	440b      	add	r3, r1
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	440b      	add	r3, r1
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	600b      	str	r3, [r1, #0]
}
 8004eee:	bf00      	nop
 8004ef0:	371c      	adds	r7, #28
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr
 8004efa:	bf00      	nop
 8004efc:	0801f974 	.word	0x0801f974

08004f00 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(const DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b087      	sub	sp, #28
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_MINC, IncrementMode);
 8004f10:	4a0d      	ldr	r2, [pc, #52]	@ (8004f48 <LL_DMA_SetMemoryIncMode+0x48>)
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	4413      	add	r3, r2
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	461a      	mov	r2, r3
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	4413      	add	r3, r2
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004f24:	4908      	ldr	r1, [pc, #32]	@ (8004f48 <LL_DMA_SetMemoryIncMode+0x48>)
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	440b      	add	r3, r1
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	440b      	add	r3, r1
 8004f32:	4619      	mov	r1, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	600b      	str	r3, [r1, #0]
}
 8004f3a:	bf00      	nop
 8004f3c:	371c      	adds	r7, #28
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr
 8004f46:	bf00      	nop
 8004f48:	0801f974 	.word	0x0801f974

08004f4c <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(const DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b087      	sub	sp, #28
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_PSIZE, Size);
 8004f5c:	4a0d      	ldr	r2, [pc, #52]	@ (8004f94 <LL_DMA_SetPeriphSize+0x48>)
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	4413      	add	r3, r2
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	461a      	mov	r2, r3
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	4413      	add	r3, r2
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8004f70:	4908      	ldr	r1, [pc, #32]	@ (8004f94 <LL_DMA_SetPeriphSize+0x48>)
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	440b      	add	r3, r1
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	4619      	mov	r1, r3
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	440b      	add	r3, r1
 8004f7e:	4619      	mov	r1, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	600b      	str	r3, [r1, #0]
}
 8004f86:	bf00      	nop
 8004f88:	371c      	adds	r7, #28
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	0801f974 	.word	0x0801f974

08004f98 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(const DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b087      	sub	sp, #28
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_MSIZE, Size);
 8004fa8:	4a0d      	ldr	r2, [pc, #52]	@ (8004fe0 <LL_DMA_SetMemorySize+0x48>)
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	4413      	add	r3, r2
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	4413      	add	r3, r2
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f423 42c0 	bic.w	r2, r3, #24576	@ 0x6000
 8004fbc:	4908      	ldr	r1, [pc, #32]	@ (8004fe0 <LL_DMA_SetMemorySize+0x48>)
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	440b      	add	r3, r1
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	4619      	mov	r1, r3
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	440b      	add	r3, r1
 8004fca:	4619      	mov	r1, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	600b      	str	r3, [r1, #0]
}
 8004fd2:	bf00      	nop
 8004fd4:	371c      	adds	r7, #28
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	0801f974 	.word	0x0801f974

08004fe4 <LL_DMA_SetStreamPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetStreamPriorityLevel(const DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Priority)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b087      	sub	sp, #28
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_PL, Priority);
 8004ff4:	4a0d      	ldr	r2, [pc, #52]	@ (800502c <LL_DMA_SetStreamPriorityLevel+0x48>)
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	4413      	add	r3, r2
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	4413      	add	r3, r2
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005008:	4908      	ldr	r1, [pc, #32]	@ (800502c <LL_DMA_SetStreamPriorityLevel+0x48>)
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	440b      	add	r3, r1
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	4619      	mov	r1, r3
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	440b      	add	r3, r1
 8005016:	4619      	mov	r1, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4313      	orrs	r3, r2
 800501c:	600b      	str	r3, [r1, #0]
}
 800501e:	bf00      	nop
 8005020:	371c      	adds	r7, #28
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	0801f974 	.word	0x0801f974

08005030 <LL_DMA_SetPeriphRequest>:
  *
  * @note   (*) Availability depends on devices.
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Request)
{
 8005030:	b480      	push	{r7}
 8005032:	b085      	sub	sp, #20
 8005034:	af00      	add	r7, sp, #0
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + (DMAMUX_CCR_SIZE * (Stream)) + (uint32_t)(DMAMUX_CCR_SIZE * LL_DMA_INSTANCE_TO_DMAMUX_CHANNEL(DMAx))))->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 800503c:	68ba      	ldr	r2, [r7, #8]
 800503e:	4b12      	ldr	r3, [pc, #72]	@ (8005088 <LL_DMA_SetPeriphRequest+0x58>)
 8005040:	4413      	add	r3, r2
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	4911      	ldr	r1, [pc, #68]	@ (800508c <LL_DMA_SetPeriphRequest+0x5c>)
 8005048:	428a      	cmp	r2, r1
 800504a:	d101      	bne.n	8005050 <LL_DMA_SetPeriphRequest+0x20>
 800504c:	2200      	movs	r2, #0
 800504e:	e000      	b.n	8005052 <LL_DMA_SetPeriphRequest+0x22>
 8005050:	2220      	movs	r2, #32
 8005052:	4413      	add	r3, r2
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800505a:	68b9      	ldr	r1, [r7, #8]
 800505c:	4b0a      	ldr	r3, [pc, #40]	@ (8005088 <LL_DMA_SetPeriphRequest+0x58>)
 800505e:	440b      	add	r3, r1
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	68f9      	ldr	r1, [r7, #12]
 8005064:	4809      	ldr	r0, [pc, #36]	@ (800508c <LL_DMA_SetPeriphRequest+0x5c>)
 8005066:	4281      	cmp	r1, r0
 8005068:	d101      	bne.n	800506e <LL_DMA_SetPeriphRequest+0x3e>
 800506a:	2100      	movs	r1, #0
 800506c:	e000      	b.n	8005070 <LL_DMA_SetPeriphRequest+0x40>
 800506e:	2120      	movs	r1, #32
 8005070:	440b      	add	r3, r1
 8005072:	4619      	mov	r1, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4313      	orrs	r3, r2
 8005078:	600b      	str	r3, [r1, #0]
}
 800507a:	bf00      	nop
 800507c:	3714      	adds	r7, #20
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr
 8005086:	bf00      	nop
 8005088:	10008200 	.word	0x10008200
 800508c:	40020000 	.word	0x40020000

08005090 <LL_DMA_DisableFifoMode>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableFifoMode(const DMA_TypeDef *DMAx, uint32_t Stream)
{
 8005090:	b480      	push	{r7}
 8005092:	b085      	sub	sp, #20
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	60fb      	str	r3, [r7, #12]

  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->FCR, DMA_SxFCR_DMDIS);
 800509e:	4a0c      	ldr	r2, [pc, #48]	@ (80050d0 <LL_DMA_DisableFifoMode+0x40>)
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	4413      	add	r3, r2
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	461a      	mov	r2, r3
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	4413      	add	r3, r2
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	4908      	ldr	r1, [pc, #32]	@ (80050d0 <LL_DMA_DisableFifoMode+0x40>)
 80050b0:	683a      	ldr	r2, [r7, #0]
 80050b2:	440a      	add	r2, r1
 80050b4:	7812      	ldrb	r2, [r2, #0]
 80050b6:	4611      	mov	r1, r2
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	440a      	add	r2, r1
 80050bc:	f023 0304 	bic.w	r3, r3, #4
 80050c0:	6153      	str	r3, [r2, #20]
}
 80050c2:	bf00      	nop
 80050c4:	3714      	adds	r7, #20
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	0801f974 	.word	0x0801f974

080050d4 <MX_SPI3_Init>:

/* USER CODE END 0 */

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b0be      	sub	sp, #248	@ 0xf8
 80050d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80050da:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 80050de:	2228      	movs	r2, #40	@ 0x28
 80050e0:	2100      	movs	r1, #0
 80050e2:	4618      	mov	r0, r3
 80050e4:	f015 ff90 	bl	801b008 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050e8:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 80050ec:	2200      	movs	r2, #0
 80050ee:	601a      	str	r2, [r3, #0]
 80050f0:	605a      	str	r2, [r3, #4]
 80050f2:	609a      	str	r2, [r3, #8]
 80050f4:	60da      	str	r2, [r3, #12]
 80050f6:	611a      	str	r2, [r3, #16]
 80050f8:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80050fa:	463b      	mov	r3, r7
 80050fc:	22b8      	movs	r2, #184	@ 0xb8
 80050fe:	2100      	movs	r1, #0
 8005100:	4618      	mov	r0, r3
 8005102:	f015 ff81 	bl	801b008 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8005106:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800510a:	f04f 0300 	mov.w	r3, #0
 800510e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8005112:	2300      	movs	r3, #0
 8005114:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005116:	463b      	mov	r3, r7
 8005118:	4618      	mov	r0, r3
 800511a:	f008 fd63 	bl	800dbe4 <HAL_RCCEx_PeriphCLKConfig>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d001      	beq.n	8005128 <MX_SPI3_Init+0x54>
  {
    Error_Handler();
 8005124:	f7ff fc42 	bl	80049ac <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8005128:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800512c:	f7ff fe5a 	bl	8004de4 <LL_APB1_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOC);
 8005130:	2004      	movs	r0, #4
 8005132:	f7ff fe3b 	bl	8004dac <LL_AHB4_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PC10   ------> SPI3_SCK
  PC11   ------> SPI3_MISO
  PC12   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 8005136:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800513a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800513e:	2302      	movs	r3, #2
 8005140:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8005144:	2300      	movs	r3, #0
 8005146:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800514a:	2300      	movs	r3, #0
 800514c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005150:	2300      	movs	r3, #0
 8005152:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8005156:	2306      	movs	r3, #6
 8005158:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800515c:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8005160:	4619      	mov	r1, r3
 8005162:	4852      	ldr	r0, [pc, #328]	@ (80052ac <MX_SPI3_Init+0x1d8>)
 8005164:	f00e ffe0 	bl	8014128 <LL_GPIO_Init>

  /* SPI3 DMA Init */

  /* SPI3_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_STREAM_2, LL_DMAMUX1_REQ_SPI3_RX);
 8005168:	223d      	movs	r2, #61	@ 0x3d
 800516a:	2102      	movs	r1, #2
 800516c:	4850      	ldr	r0, [pc, #320]	@ (80052b0 <MX_SPI3_Init+0x1dc>)
 800516e:	f7ff ff5f 	bl	8005030 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_2, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8005172:	2200      	movs	r2, #0
 8005174:	2102      	movs	r1, #2
 8005176:	484e      	ldr	r0, [pc, #312]	@ (80052b0 <MX_SPI3_Init+0x1dc>)
 8005178:	f7ff fe50 	bl	8004e1c <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_2, LL_DMA_PRIORITY_LOW);
 800517c:	2200      	movs	r2, #0
 800517e:	2102      	movs	r1, #2
 8005180:	484b      	ldr	r0, [pc, #300]	@ (80052b0 <MX_SPI3_Init+0x1dc>)
 8005182:	f7ff ff2f 	bl	8004fe4 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_2, LL_DMA_MODE_NORMAL);
 8005186:	2200      	movs	r2, #0
 8005188:	2102      	movs	r1, #2
 800518a:	4849      	ldr	r0, [pc, #292]	@ (80052b0 <MX_SPI3_Init+0x1dc>)
 800518c:	f7ff fe6c 	bl	8004e68 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_2, LL_DMA_PERIPH_NOINCREMENT);
 8005190:	2200      	movs	r2, #0
 8005192:	2102      	movs	r1, #2
 8005194:	4846      	ldr	r0, [pc, #280]	@ (80052b0 <MX_SPI3_Init+0x1dc>)
 8005196:	f7ff fe8d 	bl	8004eb4 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_2, LL_DMA_MEMORY_INCREMENT);
 800519a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800519e:	2102      	movs	r1, #2
 80051a0:	4843      	ldr	r0, [pc, #268]	@ (80052b0 <MX_SPI3_Init+0x1dc>)
 80051a2:	f7ff fead 	bl	8004f00 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_2, LL_DMA_PDATAALIGN_BYTE);
 80051a6:	2200      	movs	r2, #0
 80051a8:	2102      	movs	r1, #2
 80051aa:	4841      	ldr	r0, [pc, #260]	@ (80052b0 <MX_SPI3_Init+0x1dc>)
 80051ac:	f7ff fece 	bl	8004f4c <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_2, LL_DMA_MDATAALIGN_BYTE);
 80051b0:	2200      	movs	r2, #0
 80051b2:	2102      	movs	r1, #2
 80051b4:	483e      	ldr	r0, [pc, #248]	@ (80052b0 <MX_SPI3_Init+0x1dc>)
 80051b6:	f7ff feef 	bl	8004f98 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_2);
 80051ba:	2102      	movs	r1, #2
 80051bc:	483c      	ldr	r0, [pc, #240]	@ (80052b0 <MX_SPI3_Init+0x1dc>)
 80051be:	f7ff ff67 	bl	8005090 <LL_DMA_DisableFifoMode>

  /* SPI3_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_STREAM_3, LL_DMAMUX1_REQ_SPI3_TX);
 80051c2:	223e      	movs	r2, #62	@ 0x3e
 80051c4:	2103      	movs	r1, #3
 80051c6:	483a      	ldr	r0, [pc, #232]	@ (80052b0 <MX_SPI3_Init+0x1dc>)
 80051c8:	f7ff ff32 	bl	8005030 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_3, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80051cc:	2240      	movs	r2, #64	@ 0x40
 80051ce:	2103      	movs	r1, #3
 80051d0:	4837      	ldr	r0, [pc, #220]	@ (80052b0 <MX_SPI3_Init+0x1dc>)
 80051d2:	f7ff fe23 	bl	8004e1c <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_3, LL_DMA_PRIORITY_LOW);
 80051d6:	2200      	movs	r2, #0
 80051d8:	2103      	movs	r1, #3
 80051da:	4835      	ldr	r0, [pc, #212]	@ (80052b0 <MX_SPI3_Init+0x1dc>)
 80051dc:	f7ff ff02 	bl	8004fe4 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_3, LL_DMA_MODE_NORMAL);
 80051e0:	2200      	movs	r2, #0
 80051e2:	2103      	movs	r1, #3
 80051e4:	4832      	ldr	r0, [pc, #200]	@ (80052b0 <MX_SPI3_Init+0x1dc>)
 80051e6:	f7ff fe3f 	bl	8004e68 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_3, LL_DMA_PERIPH_NOINCREMENT);
 80051ea:	2200      	movs	r2, #0
 80051ec:	2103      	movs	r1, #3
 80051ee:	4830      	ldr	r0, [pc, #192]	@ (80052b0 <MX_SPI3_Init+0x1dc>)
 80051f0:	f7ff fe60 	bl	8004eb4 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_3, LL_DMA_MEMORY_INCREMENT);
 80051f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80051f8:	2103      	movs	r1, #3
 80051fa:	482d      	ldr	r0, [pc, #180]	@ (80052b0 <MX_SPI3_Init+0x1dc>)
 80051fc:	f7ff fe80 	bl	8004f00 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_3, LL_DMA_PDATAALIGN_BYTE);
 8005200:	2200      	movs	r2, #0
 8005202:	2103      	movs	r1, #3
 8005204:	482a      	ldr	r0, [pc, #168]	@ (80052b0 <MX_SPI3_Init+0x1dc>)
 8005206:	f7ff fea1 	bl	8004f4c <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_3, LL_DMA_MDATAALIGN_BYTE);
 800520a:	2200      	movs	r2, #0
 800520c:	2103      	movs	r1, #3
 800520e:	4828      	ldr	r0, [pc, #160]	@ (80052b0 <MX_SPI3_Init+0x1dc>)
 8005210:	f7ff fec2 	bl	8004f98 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_3);
 8005214:	2103      	movs	r1, #3
 8005216:	4826      	ldr	r0, [pc, #152]	@ (80052b0 <MX_SPI3_Init+0x1dc>)
 8005218:	f7ff ff3a 	bl	8005090 <LL_DMA_DisableFifoMode>

  /* SPI3 interrupt Init */
  NVIC_SetPriority(SPI3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800521c:	f7ff fd06 	bl	8004c2c <__NVIC_GetPriorityGrouping>
 8005220:	4603      	mov	r3, r0
 8005222:	2200      	movs	r2, #0
 8005224:	2105      	movs	r1, #5
 8005226:	4618      	mov	r0, r3
 8005228:	f7ff fd56 	bl	8004cd8 <NVIC_EncodePriority>
 800522c:	4603      	mov	r3, r0
 800522e:	4619      	mov	r1, r3
 8005230:	2033      	movs	r0, #51	@ 0x33
 8005232:	f7ff fd27 	bl	8004c84 <__NVIC_SetPriority>
  NVIC_EnableIRQ(SPI3_IRQn);
 8005236:	2033      	movs	r0, #51	@ 0x33
 8005238:	f7ff fd06 	bl	8004c48 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800523c:	2300      	movs	r3, #0
 800523e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8005242:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005246:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800524a:	2307      	movs	r3, #7
 800524c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8005250:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005254:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8005258:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800525c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8005260:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8005264:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 8005268:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800526c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8005270:	2300      	movs	r3, #0
 8005272:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8005276:	2300      	movs	r3, #0
 8005278:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  SPI_InitStruct.CRCPoly = 0x0;
 800527c:	2300      	movs	r3, #0
 800527e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 8005282:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8005286:	4619      	mov	r1, r3
 8005288:	480a      	ldr	r0, [pc, #40]	@ (80052b4 <MX_SPI3_Init+0x1e0>)
 800528a:	f00f fe9f 	bl	8014fcc <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 800528e:	2100      	movs	r1, #0
 8005290:	4808      	ldr	r0, [pc, #32]	@ (80052b4 <MX_SPI3_Init+0x1e0>)
 8005292:	f7ff fd54 	bl	8004d3e <LL_SPI_SetStandard>
  LL_SPI_SetFIFOThreshold(SPI3, LL_SPI_FIFO_TH_01DATA);
 8005296:	2100      	movs	r1, #0
 8005298:	4806      	ldr	r0, [pc, #24]	@ (80052b4 <MX_SPI3_Init+0x1e0>)
 800529a:	f7ff fd63 	bl	8004d64 <LL_SPI_SetFIFOThreshold>
  LL_SPI_EnableNSSPulseMgt(SPI3);
 800529e:	4805      	ldr	r0, [pc, #20]	@ (80052b4 <MX_SPI3_Init+0x1e0>)
 80052a0:	f7ff fd73 	bl	8004d8a <LL_SPI_EnableNSSPulseMgt>
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80052a4:	bf00      	nop
 80052a6:	37f8      	adds	r7, #248	@ 0xf8
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	58020800 	.word	0x58020800
 80052b0:	40020000 	.word	0x40020000
 80052b4:	40003c00 	.word	0x40003c00

080052b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052be:	4b0c      	ldr	r3, [pc, #48]	@ (80052f0 <HAL_MspInit+0x38>)
 80052c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80052c4:	4a0a      	ldr	r2, [pc, #40]	@ (80052f0 <HAL_MspInit+0x38>)
 80052c6:	f043 0302 	orr.w	r3, r3, #2
 80052ca:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80052ce:	4b08      	ldr	r3, [pc, #32]	@ (80052f0 <HAL_MspInit+0x38>)
 80052d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80052d4:	f003 0302 	and.w	r3, r3, #2
 80052d8:	607b      	str	r3, [r7, #4]
 80052da:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80052dc:	2200      	movs	r2, #0
 80052de:	210f      	movs	r1, #15
 80052e0:	f06f 0001 	mvn.w	r0, #1
 80052e4:	f001 fd48 	bl	8006d78 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80052e8:	bf00      	nop
 80052ea:	3708      	adds	r7, #8
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	58024400 	.word	0x58024400

080052f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b08e      	sub	sp, #56	@ 0x38
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2b0f      	cmp	r3, #15
 8005300:	d844      	bhi.n	800538c <HAL_InitTick+0x98>
   {
     HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8005302:	2200      	movs	r2, #0
 8005304:	6879      	ldr	r1, [r7, #4]
 8005306:	2019      	movs	r0, #25
 8005308:	f001 fd36 	bl	8006d78 <HAL_NVIC_SetPriority>

     /* Enable the TIM1 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800530c:	2019      	movs	r0, #25
 800530e:	f001 fd4d 	bl	8006dac <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8005312:	4a24      	ldr	r2, [pc, #144]	@ (80053a4 <HAL_InitTick+0xb0>)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8005318:	4b23      	ldr	r3, [pc, #140]	@ (80053a8 <HAL_InitTick+0xb4>)
 800531a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800531e:	4a22      	ldr	r2, [pc, #136]	@ (80053a8 <HAL_InitTick+0xb4>)
 8005320:	f043 0301 	orr.w	r3, r3, #1
 8005324:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005328:	4b1f      	ldr	r3, [pc, #124]	@ (80053a8 <HAL_InitTick+0xb4>)
 800532a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800532e:	f003 0301 	and.w	r3, r3, #1
 8005332:	60bb      	str	r3, [r7, #8]
 8005334:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005336:	f107 020c 	add.w	r2, r7, #12
 800533a:	f107 0310 	add.w	r3, r7, #16
 800533e:	4611      	mov	r1, r2
 8005340:	4618      	mov	r0, r3
 8005342:	f008 fc0d 	bl	800db60 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8005346:	f008 fbf5 	bl	800db34 <HAL_RCC_GetPCLK2Freq>
 800534a:	4603      	mov	r3, r0
 800534c:	005b      	lsls	r3, r3, #1
 800534e:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005350:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005352:	4a16      	ldr	r2, [pc, #88]	@ (80053ac <HAL_InitTick+0xb8>)
 8005354:	fba2 2303 	umull	r2, r3, r2, r3
 8005358:	0c9b      	lsrs	r3, r3, #18
 800535a:	3b01      	subs	r3, #1
 800535c:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800535e:	4b14      	ldr	r3, [pc, #80]	@ (80053b0 <HAL_InitTick+0xbc>)
 8005360:	4a14      	ldr	r2, [pc, #80]	@ (80053b4 <HAL_InitTick+0xc0>)
 8005362:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8005364:	4b12      	ldr	r3, [pc, #72]	@ (80053b0 <HAL_InitTick+0xbc>)
 8005366:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800536a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800536c:	4a10      	ldr	r2, [pc, #64]	@ (80053b0 <HAL_InitTick+0xbc>)
 800536e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005370:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8005372:	4b0f      	ldr	r3, [pc, #60]	@ (80053b0 <HAL_InitTick+0xbc>)
 8005374:	2200      	movs	r2, #0
 8005376:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005378:	4b0d      	ldr	r3, [pc, #52]	@ (80053b0 <HAL_InitTick+0xbc>)
 800537a:	2200      	movs	r2, #0
 800537c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800537e:	480c      	ldr	r0, [pc, #48]	@ (80053b0 <HAL_InitTick+0xbc>)
 8005380:	f00a f9f2 	bl	800f768 <HAL_TIM_Base_Init>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d107      	bne.n	800539a <HAL_InitTick+0xa6>
 800538a:	e001      	b.n	8005390 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e005      	b.n	800539c <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8005390:	4807      	ldr	r0, [pc, #28]	@ (80053b0 <HAL_InitTick+0xbc>)
 8005392:	f00a fae7 	bl	800f964 <HAL_TIM_Base_Start_IT>
 8005396:	4603      	mov	r3, r0
 8005398:	e000      	b.n	800539c <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
}
 800539c:	4618      	mov	r0, r3
 800539e:	3738      	adds	r7, #56	@ 0x38
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	24000020 	.word	0x24000020
 80053a8:	58024400 	.word	0x58024400
 80053ac:	431bde83 	.word	0x431bde83
 80053b0:	24000d88 	.word	0x24000d88
 80053b4:	40010000 	.word	0x40010000

080053b8 <LL_USART_IsActiveFlag_FE>:
{
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	69db      	ldr	r3, [r3, #28]
 80053c4:	f003 0302 	and.w	r3, r3, #2
 80053c8:	2b02      	cmp	r3, #2
 80053ca:	d101      	bne.n	80053d0 <LL_USART_IsActiveFlag_FE+0x18>
 80053cc:	2301      	movs	r3, #1
 80053ce:	e000      	b.n	80053d2 <LL_USART_IsActiveFlag_FE+0x1a>
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	370c      	adds	r7, #12
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr

080053de <LL_USART_IsActiveFlag_NE>:
{
 80053de:	b480      	push	{r7}
 80053e0:	b083      	sub	sp, #12
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	69db      	ldr	r3, [r3, #28]
 80053ea:	f003 0304 	and.w	r3, r3, #4
 80053ee:	2b04      	cmp	r3, #4
 80053f0:	d101      	bne.n	80053f6 <LL_USART_IsActiveFlag_NE+0x18>
 80053f2:	2301      	movs	r3, #1
 80053f4:	e000      	b.n	80053f8 <LL_USART_IsActiveFlag_NE+0x1a>
 80053f6:	2300      	movs	r3, #0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <LL_USART_IsActiveFlag_ORE>:
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	69db      	ldr	r3, [r3, #28]
 8005410:	f003 0308 	and.w	r3, r3, #8
 8005414:	2b08      	cmp	r3, #8
 8005416:	d101      	bne.n	800541c <LL_USART_IsActiveFlag_ORE+0x18>
 8005418:	2301      	movs	r3, #1
 800541a:	e000      	b.n	800541e <LL_USART_IsActiveFlag_ORE+0x1a>
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	370c      	adds	r7, #12
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr

0800542a <LL_USART_IsActiveFlag_RXNE_RXFNE>:
{
 800542a:	b480      	push	{r7}
 800542c:	b083      	sub	sp, #12
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	69db      	ldr	r3, [r3, #28]
 8005436:	f003 0320 	and.w	r3, r3, #32
 800543a:	2b20      	cmp	r3, #32
 800543c:	d101      	bne.n	8005442 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 800543e:	2301      	movs	r3, #1
 8005440:	e000      	b.n	8005444 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 8005442:	2300      	movs	r3, #0
}
 8005444:	4618      	mov	r0, r3
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <LL_USART_ClearFlag_FE>:
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2202      	movs	r2, #2
 800545c:	621a      	str	r2, [r3, #32]
}
 800545e:	bf00      	nop
 8005460:	370c      	adds	r7, #12
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr

0800546a <LL_USART_ClearFlag_NE>:
{
 800546a:	b480      	push	{r7}
 800546c:	b083      	sub	sp, #12
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_NECF);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2204      	movs	r2, #4
 8005476:	621a      	str	r2, [r3, #32]
}
 8005478:	bf00      	nop
 800547a:	370c      	adds	r7, #12
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr

08005484 <LL_USART_ClearFlag_ORE>:
{
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2208      	movs	r2, #8
 8005490:	621a      	str	r2, [r3, #32]
}
 8005492:	bf00      	nop
 8005494:	370c      	adds	r7, #12
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr

0800549e <LL_USART_ReceiveData8>:
{
 800549e:	b480      	push	{r7}
 80054a0:	b083      	sub	sp, #12
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054aa:	b2db      	uxtb	r3, r3
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80054b8:	b480      	push	{r7}
 80054ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80054bc:	bf00      	nop
 80054be:	e7fd      	b.n	80054bc <NMI_Handler+0x4>

080054c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80054c0:	b480      	push	{r7}
 80054c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80054c4:	bf00      	nop
 80054c6:	e7fd      	b.n	80054c4 <HardFault_Handler+0x4>

080054c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80054c8:	b480      	push	{r7}
 80054ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80054cc:	bf00      	nop
 80054ce:	e7fd      	b.n	80054cc <MemManage_Handler+0x4>

080054d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80054d0:	b480      	push	{r7}
 80054d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80054d4:	bf00      	nop
 80054d6:	e7fd      	b.n	80054d4 <BusFault_Handler+0x4>

080054d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80054d8:	b480      	push	{r7}
 80054da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80054dc:	bf00      	nop
 80054de:	e7fd      	b.n	80054dc <UsageFault_Handler+0x4>

080054e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80054e0:	b480      	push	{r7}
 80054e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80054e4:	bf00      	nop
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr
	...

080054f0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80054f4:	4802      	ldr	r0, [pc, #8]	@ (8005500 <DMA1_Stream0_IRQHandler+0x10>)
 80054f6:	f003 f805 	bl	8008504 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80054fa:	bf00      	nop
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	24000a38 	.word	0x24000a38

08005504 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8005508:	4802      	ldr	r0, [pc, #8]	@ (8005514 <DMA1_Stream1_IRQHandler+0x10>)
 800550a:	f002 fffb 	bl	8008504 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800550e:	bf00      	nop
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	24000ab0 	.word	0x24000ab0

08005518 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8005518:	b480      	push	{r7}
 800551a:	af00      	add	r7, sp, #0

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800551c:	bf00      	nop
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr

08005526 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8005526:	b480      	push	{r7}
 8005528:	af00      	add	r7, sp, #0

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800552a:	bf00      	nop
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8005538:	4802      	ldr	r0, [pc, #8]	@ (8005544 <DMA1_Stream4_IRQHandler+0x10>)
 800553a:	f002 ffe3 	bl	8008504 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800553e:	bf00      	nop
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	24000f24 	.word	0x24000f24

08005548 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch3);
 800554c:	4802      	ldr	r0, [pc, #8]	@ (8005558 <DMA1_Stream5_IRQHandler+0x10>)
 800554e:	f002 ffd9 	bl	8008504 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8005552:	bf00      	nop
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	24000f9c 	.word	0x24000f9c

0800555c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8005560:	4802      	ldr	r0, [pc, #8]	@ (800556c <DMA1_Stream6_IRQHandler+0x10>)
 8005562:	f002 ffcf 	bl	8008504 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8005566:	bf00      	nop
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	24000b28 	.word	0x24000b28

08005570 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005574:	4802      	ldr	r0, [pc, #8]	@ (8005580 <TIM1_UP_IRQHandler+0x10>)
 8005576:	f00a ff25 	bl	80103c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800557a:	bf00      	nop
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	24000d88 	.word	0x24000d88

08005584 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005588:	4802      	ldr	r0, [pc, #8]	@ (8005594 <TIM3_IRQHandler+0x10>)
 800558a:	f00a ff1b 	bl	80103c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800558e:	bf00      	nop
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	24000e8c 	.word	0x24000e8c

08005598 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800559c:	4802      	ldr	r0, [pc, #8]	@ (80055a8 <I2C1_EV_IRQHandler+0x10>)
 800559e:	f004 ff57 	bl	800a450 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80055a2:	bf00      	nop
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	24000990 	.word	0x24000990

080055ac <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80055b0:	4802      	ldr	r0, [pc, #8]	@ (80055bc <I2C1_ER_IRQHandler+0x10>)
 80055b2:	f004 ff67 	bl	800a484 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80055b6:	bf00      	nop
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop
 80055bc:	24000990 	.word	0x24000990

080055c0 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80055c4:	4802      	ldr	r0, [pc, #8]	@ (80055d0 <I2C2_EV_IRQHandler+0x10>)
 80055c6:	f004 ff43 	bl	800a450 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80055ca:	bf00      	nop
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	240009e4 	.word	0x240009e4

080055d4 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80055d8:	4802      	ldr	r0, [pc, #8]	@ (80055e4 <I2C2_ER_IRQHandler+0x10>)
 80055da:	f004 ff53 	bl	800a484 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80055de:	bf00      	nop
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	240009e4 	.word	0x240009e4

080055e8 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 80055ec:	4802      	ldr	r0, [pc, #8]	@ (80055f8 <DMA1_Stream7_IRQHandler+0x10>)
 80055ee:	f002 ff89 	bl	8008504 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80055f2:	bf00      	nop
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	24000ba0 	.word	0x24000ba0

080055fc <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80055fc:	b480      	push	{r7}
 80055fe:	af00      	add	r7, sp, #0

  /* USER CODE END SPI3_IRQn 0 */
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8005600:	bf00      	nop
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr
	...

0800560c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

	static unsigned char cnt = 0;
	//    static uint8_t ibus_rx_buf[32];

	    if (LL_USART_IsActiveFlag_RXNE(UART4)) {
 8005610:	4841      	ldr	r0, [pc, #260]	@ (8005718 <UART4_IRQHandler+0x10c>)
 8005612:	f7ff ff0a 	bl	800542a <LL_USART_IsActiveFlag_RXNE_RXFNE>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d059      	beq.n	80056d0 <UART4_IRQHandler+0xc4>
	        uart4_rx_data = LL_USART_ReceiveData8(UART4);
 800561c:	483e      	ldr	r0, [pc, #248]	@ (8005718 <UART4_IRQHandler+0x10c>)
 800561e:	f7ff ff3e 	bl	800549e <LL_USART_ReceiveData8>
 8005622:	4603      	mov	r3, r0
 8005624:	461a      	mov	r2, r3
 8005626:	4b3d      	ldr	r3, [pc, #244]	@ (800571c <UART4_IRQHandler+0x110>)
 8005628:	701a      	strb	r2, [r3, #0]
	        uart4_rx_flag = 1;
 800562a:	4b3d      	ldr	r3, [pc, #244]	@ (8005720 <UART4_IRQHandler+0x114>)
 800562c:	2201      	movs	r2, #1
 800562e:	701a      	strb	r2, [r3, #0]

	        switch (cnt) {
 8005630:	4b3c      	ldr	r3, [pc, #240]	@ (8005724 <UART4_IRQHandler+0x118>)
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	2b1f      	cmp	r3, #31
 8005636:	d02e      	beq.n	8005696 <UART4_IRQHandler+0x8a>
 8005638:	2b1f      	cmp	r3, #31
 800563a:	dc3a      	bgt.n	80056b2 <UART4_IRQHandler+0xa6>
 800563c:	2b00      	cmp	r3, #0
 800563e:	d002      	beq.n	8005646 <UART4_IRQHandler+0x3a>
 8005640:	2b01      	cmp	r3, #1
 8005642:	d012      	beq.n	800566a <UART4_IRQHandler+0x5e>
 8005644:	e035      	b.n	80056b2 <UART4_IRQHandler+0xa6>
	            case 0:
	                if (uart4_rx_data == 0x20) {
 8005646:	4b35      	ldr	r3, [pc, #212]	@ (800571c <UART4_IRQHandler+0x110>)
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	2b20      	cmp	r3, #32
 800564c:	d13f      	bne.n	80056ce <UART4_IRQHandler+0xc2>
	                    ibus_rx_buf[cnt] = uart4_rx_data;
 800564e:	4b35      	ldr	r3, [pc, #212]	@ (8005724 <UART4_IRQHandler+0x118>)
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	461a      	mov	r2, r3
 8005654:	4b31      	ldr	r3, [pc, #196]	@ (800571c <UART4_IRQHandler+0x110>)
 8005656:	7819      	ldrb	r1, [r3, #0]
 8005658:	4b33      	ldr	r3, [pc, #204]	@ (8005728 <UART4_IRQHandler+0x11c>)
 800565a:	5499      	strb	r1, [r3, r2]
	                    cnt++;
 800565c:	4b31      	ldr	r3, [pc, #196]	@ (8005724 <UART4_IRQHandler+0x118>)
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	3301      	adds	r3, #1
 8005662:	b2da      	uxtb	r2, r3
 8005664:	4b2f      	ldr	r3, [pc, #188]	@ (8005724 <UART4_IRQHandler+0x118>)
 8005666:	701a      	strb	r2, [r3, #0]
	                }
	                break;
 8005668:	e031      	b.n	80056ce <UART4_IRQHandler+0xc2>
	            case 1:
	                if (uart4_rx_data == 0x40) {
 800566a:	4b2c      	ldr	r3, [pc, #176]	@ (800571c <UART4_IRQHandler+0x110>)
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	2b40      	cmp	r3, #64	@ 0x40
 8005670:	d10d      	bne.n	800568e <UART4_IRQHandler+0x82>
	                    ibus_rx_buf[cnt] = uart4_rx_data;
 8005672:	4b2c      	ldr	r3, [pc, #176]	@ (8005724 <UART4_IRQHandler+0x118>)
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	461a      	mov	r2, r3
 8005678:	4b28      	ldr	r3, [pc, #160]	@ (800571c <UART4_IRQHandler+0x110>)
 800567a:	7819      	ldrb	r1, [r3, #0]
 800567c:	4b2a      	ldr	r3, [pc, #168]	@ (8005728 <UART4_IRQHandler+0x11c>)
 800567e:	5499      	strb	r1, [r3, r2]
	                    cnt++;
 8005680:	4b28      	ldr	r3, [pc, #160]	@ (8005724 <UART4_IRQHandler+0x118>)
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	3301      	adds	r3, #1
 8005686:	b2da      	uxtb	r2, r3
 8005688:	4b26      	ldr	r3, [pc, #152]	@ (8005724 <UART4_IRQHandler+0x118>)
 800568a:	701a      	strb	r2, [r3, #0]
	                } else {
	                    cnt = 0; // Reset if invalid header
	                }
	                break;
 800568c:	e020      	b.n	80056d0 <UART4_IRQHandler+0xc4>
	                    cnt = 0; // Reset if invalid header
 800568e:	4b25      	ldr	r3, [pc, #148]	@ (8005724 <UART4_IRQHandler+0x118>)
 8005690:	2200      	movs	r2, #0
 8005692:	701a      	strb	r2, [r3, #0]
	                break;
 8005694:	e01c      	b.n	80056d0 <UART4_IRQHandler+0xc4>
	            case 31:
	                ibus_rx_buf[cnt] = uart4_rx_data;
 8005696:	4b23      	ldr	r3, [pc, #140]	@ (8005724 <UART4_IRQHandler+0x118>)
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	461a      	mov	r2, r3
 800569c:	4b1f      	ldr	r3, [pc, #124]	@ (800571c <UART4_IRQHandler+0x110>)
 800569e:	7819      	ldrb	r1, [r3, #0]
 80056a0:	4b21      	ldr	r3, [pc, #132]	@ (8005728 <UART4_IRQHandler+0x11c>)
 80056a2:	5499      	strb	r1, [r3, r2]
	                cnt = 0;
 80056a4:	4b1f      	ldr	r3, [pc, #124]	@ (8005724 <UART4_IRQHandler+0x118>)
 80056a6:	2200      	movs	r2, #0
 80056a8:	701a      	strb	r2, [r3, #0]
	                ibus_rx_cplt_flag = 1;
 80056aa:	4b20      	ldr	r3, [pc, #128]	@ (800572c <UART4_IRQHandler+0x120>)
 80056ac:	2201      	movs	r2, #1
 80056ae:	701a      	strb	r2, [r3, #0]
//	                for (uint8_t i = 0; i < len; i++) {
//	                    while (!LL_USART_IsActiveFlag_TXE(USART6)) {}
//	//                    LL_USART_TransmitData8(USART6, buffer[i]);
//	                }
//	                while (!LL_USART_IsActiveFlag_TC(USART6)) {}
	                break;
 80056b0:	e00e      	b.n	80056d0 <UART4_IRQHandler+0xc4>
	            default:
	                ibus_rx_buf[cnt] = uart4_rx_data;
 80056b2:	4b1c      	ldr	r3, [pc, #112]	@ (8005724 <UART4_IRQHandler+0x118>)
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	461a      	mov	r2, r3
 80056b8:	4b18      	ldr	r3, [pc, #96]	@ (800571c <UART4_IRQHandler+0x110>)
 80056ba:	7819      	ldrb	r1, [r3, #0]
 80056bc:	4b1a      	ldr	r3, [pc, #104]	@ (8005728 <UART4_IRQHandler+0x11c>)
 80056be:	5499      	strb	r1, [r3, r2]
	                cnt++;
 80056c0:	4b18      	ldr	r3, [pc, #96]	@ (8005724 <UART4_IRQHandler+0x118>)
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	3301      	adds	r3, #1
 80056c6:	b2da      	uxtb	r2, r3
 80056c8:	4b16      	ldr	r3, [pc, #88]	@ (8005724 <UART4_IRQHandler+0x118>)
 80056ca:	701a      	strb	r2, [r3, #0]
	                break;
 80056cc:	e000      	b.n	80056d0 <UART4_IRQHandler+0xc4>
	                break;
 80056ce:	bf00      	nop
	        }
	    }

	    // Handle UART errors
	    if (LL_USART_IsActiveFlag_ORE(UART4) || LL_USART_IsActiveFlag_FE(UART4) || LL_USART_IsActiveFlag_NE(UART4)) {
 80056d0:	4811      	ldr	r0, [pc, #68]	@ (8005718 <UART4_IRQHandler+0x10c>)
 80056d2:	f7ff fe97 	bl	8005404 <LL_USART_IsActiveFlag_ORE>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d10b      	bne.n	80056f4 <UART4_IRQHandler+0xe8>
 80056dc:	480e      	ldr	r0, [pc, #56]	@ (8005718 <UART4_IRQHandler+0x10c>)
 80056de:	f7ff fe6b 	bl	80053b8 <LL_USART_IsActiveFlag_FE>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d105      	bne.n	80056f4 <UART4_IRQHandler+0xe8>
 80056e8:	480b      	ldr	r0, [pc, #44]	@ (8005718 <UART4_IRQHandler+0x10c>)
 80056ea:	f7ff fe78 	bl	80053de <LL_USART_IsActiveFlag_NE>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d00b      	beq.n	800570c <UART4_IRQHandler+0x100>
	        LL_USART_ClearFlag_ORE(UART4);
 80056f4:	4808      	ldr	r0, [pc, #32]	@ (8005718 <UART4_IRQHandler+0x10c>)
 80056f6:	f7ff fec5 	bl	8005484 <LL_USART_ClearFlag_ORE>
	        LL_USART_ClearFlag_FE(UART4);
 80056fa:	4807      	ldr	r0, [pc, #28]	@ (8005718 <UART4_IRQHandler+0x10c>)
 80056fc:	f7ff fea8 	bl	8005450 <LL_USART_ClearFlag_FE>
	        LL_USART_ClearFlag_NE(UART4);
 8005700:	4805      	ldr	r0, [pc, #20]	@ (8005718 <UART4_IRQHandler+0x10c>)
 8005702:	f7ff feb2 	bl	800546a <LL_USART_ClearFlag_NE>
	        cnt = 0; // Reset buffer on error
 8005706:	4b07      	ldr	r3, [pc, #28]	@ (8005724 <UART4_IRQHandler+0x118>)
 8005708:	2200      	movs	r2, #0
 800570a:	701a      	strb	r2, [r3, #0]
//	        while (!LL_USART_IsActiveFlag_TC(USART6)) {}

	    }

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800570c:	4808      	ldr	r0, [pc, #32]	@ (8005730 <UART4_IRQHandler+0x124>)
 800570e:	f00c f80d 	bl	801172c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8005712:	bf00      	nop
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	40004c00 	.word	0x40004c00
 800571c:	24000dd5 	.word	0x24000dd5
 8005720:	24000dd4 	.word	0x24000dd4
 8005724:	24000e84 	.word	0x24000e84
 8005728:	24000dd8 	.word	0x24000dd8
 800572c:	24000df8 	.word	0x24000df8
 8005730:	24001014 	.word	0x24001014

08005734 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
//  {
//    uart6_rx_data = LL_USART_ReceiveData8(USART6);  // Automatically clears RXNE
//    uart6_rx_flag = 1;
//  }

	if (LL_USART_IsActiveFlag_RXNE(USART6)) {
 800573a:	482b      	ldr	r0, [pc, #172]	@ (80057e8 <USART6_IRQHandler+0xb4>)
 800573c:	f7ff fe75 	bl	800542a <LL_USART_IsActiveFlag_RXNE_RXFNE>
 8005740:	4603      	mov	r3, r0
 8005742:	2b00      	cmp	r3, #0
 8005744:	d04c      	beq.n	80057e0 <USART6_IRQHandler+0xac>
	        char c = LL_USART_ReceiveData8(USART6);
 8005746:	4828      	ldr	r0, [pc, #160]	@ (80057e8 <USART6_IRQHandler+0xb4>)
 8005748:	f7ff fea9 	bl	800549e <LL_USART_ReceiveData8>
 800574c:	4603      	mov	r3, r0
 800574e:	71fb      	strb	r3, [r7, #7]
	        last_char_time = HAL_GetTick();  // update timestamp
 8005750:	f001 fa2a 	bl	8006ba8 <HAL_GetTick>
 8005754:	4603      	mov	r3, r0
 8005756:	4a25      	ldr	r2, [pc, #148]	@ (80057ec <USART6_IRQHandler+0xb8>)
 8005758:	6013      	str	r3, [r2, #0]

	        if (!cmd_receiving) {
 800575a:	4b25      	ldr	r3, [pc, #148]	@ (80057f0 <USART6_IRQHandler+0xbc>)
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	b2db      	uxtb	r3, r3
 8005760:	f083 0301 	eor.w	r3, r3, #1
 8005764:	b2db      	uxtb	r3, r3
 8005766:	2b00      	cmp	r3, #0
 8005768:	d009      	beq.n	800577e <USART6_IRQHandler+0x4a>
	            if (c == '[') {
 800576a:	79fb      	ldrb	r3, [r7, #7]
 800576c:	2b5b      	cmp	r3, #91	@ 0x5b
 800576e:	d137      	bne.n	80057e0 <USART6_IRQHandler+0xac>
	                cmd_receiving = true;
 8005770:	4b1f      	ldr	r3, [pc, #124]	@ (80057f0 <USART6_IRQHandler+0xbc>)
 8005772:	2201      	movs	r2, #1
 8005774:	701a      	strb	r2, [r3, #0]
	                cmd_index = 0;
 8005776:	4b1f      	ldr	r3, [pc, #124]	@ (80057f4 <USART6_IRQHandler+0xc0>)
 8005778:	2200      	movs	r2, #0
 800577a:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800577c:	e030      	b.n	80057e0 <USART6_IRQHandler+0xac>
	            if (c == ']') {
 800577e:	79fb      	ldrb	r3, [r7, #7]
 8005780:	2b5d      	cmp	r3, #93	@ 0x5d
 8005782:	d116      	bne.n	80057b2 <USART6_IRQHandler+0x7e>
	                if (cmd_index < CMD_BUFFER_SIZE) {
 8005784:	4b1b      	ldr	r3, [pc, #108]	@ (80057f4 <USART6_IRQHandler+0xc0>)
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	b2db      	uxtb	r3, r3
 800578a:	b25b      	sxtb	r3, r3
 800578c:	2b00      	cmp	r3, #0
 800578e:	db09      	blt.n	80057a4 <USART6_IRQHandler+0x70>
	                    cmd_buffer[cmd_index] = '\0';  // null-terminate
 8005790:	4b18      	ldr	r3, [pc, #96]	@ (80057f4 <USART6_IRQHandler+0xc0>)
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	b2db      	uxtb	r3, r3
 8005796:	461a      	mov	r2, r3
 8005798:	4b17      	ldr	r3, [pc, #92]	@ (80057f8 <USART6_IRQHandler+0xc4>)
 800579a:	2100      	movs	r1, #0
 800579c:	5499      	strb	r1, [r3, r2]
	                    process_command((char*)cmd_buffer);  // parse the command
 800579e:	4816      	ldr	r0, [pc, #88]	@ (80057f8 <USART6_IRQHandler+0xc4>)
 80057a0:	f7fb fd4a 	bl	8001238 <process_command>
	                cmd_receiving = false;
 80057a4:	4b12      	ldr	r3, [pc, #72]	@ (80057f0 <USART6_IRQHandler+0xbc>)
 80057a6:	2200      	movs	r2, #0
 80057a8:	701a      	strb	r2, [r3, #0]
	                cmd_index = 0;
 80057aa:	4b12      	ldr	r3, [pc, #72]	@ (80057f4 <USART6_IRQHandler+0xc0>)
 80057ac:	2200      	movs	r2, #0
 80057ae:	701a      	strb	r2, [r3, #0]
}
 80057b0:	e016      	b.n	80057e0 <USART6_IRQHandler+0xac>
	                if (cmd_index < CMD_BUFFER_SIZE - 1) {
 80057b2:	4b10      	ldr	r3, [pc, #64]	@ (80057f4 <USART6_IRQHandler+0xc0>)
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	2b7e      	cmp	r3, #126	@ 0x7e
 80057ba:	d80b      	bhi.n	80057d4 <USART6_IRQHandler+0xa0>
	                    cmd_buffer[cmd_index++] = c;
 80057bc:	4b0d      	ldr	r3, [pc, #52]	@ (80057f4 <USART6_IRQHandler+0xc0>)
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	1c5a      	adds	r2, r3, #1
 80057c4:	b2d1      	uxtb	r1, r2
 80057c6:	4a0b      	ldr	r2, [pc, #44]	@ (80057f4 <USART6_IRQHandler+0xc0>)
 80057c8:	7011      	strb	r1, [r2, #0]
 80057ca:	4619      	mov	r1, r3
 80057cc:	4a0a      	ldr	r2, [pc, #40]	@ (80057f8 <USART6_IRQHandler+0xc4>)
 80057ce:	79fb      	ldrb	r3, [r7, #7]
 80057d0:	5453      	strb	r3, [r2, r1]
}
 80057d2:	e005      	b.n	80057e0 <USART6_IRQHandler+0xac>
	                    cmd_receiving = false;
 80057d4:	4b06      	ldr	r3, [pc, #24]	@ (80057f0 <USART6_IRQHandler+0xbc>)
 80057d6:	2200      	movs	r2, #0
 80057d8:	701a      	strb	r2, [r3, #0]
	                    cmd_index = 0;
 80057da:	4b06      	ldr	r3, [pc, #24]	@ (80057f4 <USART6_IRQHandler+0xc0>)
 80057dc:	2200      	movs	r2, #0
 80057de:	701a      	strb	r2, [r3, #0]
}
 80057e0:	bf00      	nop
 80057e2:	3708      	adds	r7, #8
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	40011400 	.word	0x40011400
 80057ec:	24000e80 	.word	0x24000e80
 80057f0:	24000e7d 	.word	0x24000e7d
 80057f4:	24000e7c 	.word	0x24000e7c
 80057f8:	24000dfc 	.word	0x24000dfc

080057fc <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8005800:	4802      	ldr	r0, [pc, #8]	@ (800580c <UART7_IRQHandler+0x10>)
 8005802:	f00b ff93 	bl	801172c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8005806:	bf00      	nop
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	240010a8 	.word	0x240010a8

08005810 <HAL_TIM_PWM_PulseFinishedCallback>:

/* USER CODE BEGIN 1 */

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
    // --- WS2812 Handling ---
	if (htim->Instance == WS2812_TIMER.Instance) {
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	4b09      	ldr	r3, [pc, #36]	@ (8005844 <HAL_TIM_PWM_PulseFinishedCallback+0x34>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	429a      	cmp	r2, r3
 8005822:	d102      	bne.n	800582a <HAL_TIM_PWM_PulseFinishedCallback+0x1a>
	        main_led_PWM_Callback(htim);
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f7fd fbf9 	bl	800301c <main_led_PWM_Callback>
	    }

    // --- Aircraft Lights Handling ---
    if (htim->Instance == AIRCRAFTLIGHTS_TIMER.Instance) {
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	4b05      	ldr	r3, [pc, #20]	@ (8005844 <HAL_TIM_PWM_PulseFinishedCallback+0x34>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	429a      	cmp	r2, r3
 8005834:	d102      	bne.n	800583c <HAL_TIM_PWM_PulseFinishedCallback+0x2c>
        AircraftLights_PWM_Callback(htim);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f7fd fa74 	bl	8002d24 <AircraftLights_PWM_Callback>
    }
}
 800583c:	bf00      	nop
 800583e:	3708      	adds	r7, #8
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}
 8005844:	24000e8c 	.word	0x24000e8c

08005848 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005848:	b480      	push	{r7}
 800584a:	af00      	add	r7, sp, #0
  return 1;
 800584c:	2301      	movs	r3, #1
}
 800584e:	4618      	mov	r0, r3
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <_kill>:

int _kill(int pid, int sig)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005862:	f015 fca1 	bl	801b1a8 <__errno>
 8005866:	4603      	mov	r3, r0
 8005868:	2216      	movs	r2, #22
 800586a:	601a      	str	r2, [r3, #0]
  return -1;
 800586c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8005870:	4618      	mov	r0, r3
 8005872:	3708      	adds	r7, #8
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <_exit>:

void _exit (int status)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b082      	sub	sp, #8
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005880:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f7ff ffe7 	bl	8005858 <_kill>
  while (1) {}    /* Make sure we hang here */
 800588a:	bf00      	nop
 800588c:	e7fd      	b.n	800588a <_exit+0x12>

0800588e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800588e:	b580      	push	{r7, lr}
 8005890:	b086      	sub	sp, #24
 8005892:	af00      	add	r7, sp, #0
 8005894:	60f8      	str	r0, [r7, #12]
 8005896:	60b9      	str	r1, [r7, #8]
 8005898:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800589a:	2300      	movs	r3, #0
 800589c:	617b      	str	r3, [r7, #20]
 800589e:	e00a      	b.n	80058b6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80058a0:	f3af 8000 	nop.w
 80058a4:	4601      	mov	r1, r0
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	1c5a      	adds	r2, r3, #1
 80058aa:	60ba      	str	r2, [r7, #8]
 80058ac:	b2ca      	uxtb	r2, r1
 80058ae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	3301      	adds	r3, #1
 80058b4:	617b      	str	r3, [r7, #20]
 80058b6:	697a      	ldr	r2, [r7, #20]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	429a      	cmp	r2, r3
 80058bc:	dbf0      	blt.n	80058a0 <_read+0x12>
  }

  return len;
 80058be:	687b      	ldr	r3, [r7, #4]
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3718      	adds	r7, #24
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <_close>:
  }
  return len;
}

int _close(int file)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b083      	sub	sp, #12
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80058d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	370c      	adds	r7, #12
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80058f0:	605a      	str	r2, [r3, #4]
  return 0;
 80058f2:	2300      	movs	r3, #0
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	370c      	adds	r7, #12
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr

08005900 <_isatty>:

int _isatty(int file)
{
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005908:	2301      	movs	r3, #1
}
 800590a:	4618      	mov	r0, r3
 800590c:	370c      	adds	r7, #12
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr

08005916 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005916:	b480      	push	{r7}
 8005918:	b085      	sub	sp, #20
 800591a:	af00      	add	r7, sp, #0
 800591c:	60f8      	str	r0, [r7, #12]
 800591e:	60b9      	str	r1, [r7, #8]
 8005920:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	3714      	adds	r7, #20
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b086      	sub	sp, #24
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005938:	4a14      	ldr	r2, [pc, #80]	@ (800598c <_sbrk+0x5c>)
 800593a:	4b15      	ldr	r3, [pc, #84]	@ (8005990 <_sbrk+0x60>)
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005944:	4b13      	ldr	r3, [pc, #76]	@ (8005994 <_sbrk+0x64>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d102      	bne.n	8005952 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800594c:	4b11      	ldr	r3, [pc, #68]	@ (8005994 <_sbrk+0x64>)
 800594e:	4a12      	ldr	r2, [pc, #72]	@ (8005998 <_sbrk+0x68>)
 8005950:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005952:	4b10      	ldr	r3, [pc, #64]	@ (8005994 <_sbrk+0x64>)
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4413      	add	r3, r2
 800595a:	693a      	ldr	r2, [r7, #16]
 800595c:	429a      	cmp	r2, r3
 800595e:	d207      	bcs.n	8005970 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005960:	f015 fc22 	bl	801b1a8 <__errno>
 8005964:	4603      	mov	r3, r0
 8005966:	220c      	movs	r2, #12
 8005968:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800596a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800596e:	e009      	b.n	8005984 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005970:	4b08      	ldr	r3, [pc, #32]	@ (8005994 <_sbrk+0x64>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005976:	4b07      	ldr	r3, [pc, #28]	@ (8005994 <_sbrk+0x64>)
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4413      	add	r3, r2
 800597e:	4a05      	ldr	r2, [pc, #20]	@ (8005994 <_sbrk+0x64>)
 8005980:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005982:	68fb      	ldr	r3, [r7, #12]
}
 8005984:	4618      	mov	r0, r3
 8005986:	3718      	adds	r7, #24
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}
 800598c:	24050000 	.word	0x24050000
 8005990:	00000400 	.word	0x00000400
 8005994:	24000e88 	.word	0x24000e88
 8005998:	24005d08 	.word	0x24005d08

0800599c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800599c:	b480      	push	{r7}
 800599e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80059a0:	4b3e      	ldr	r3, [pc, #248]	@ (8005a9c <SystemInit+0x100>)
 80059a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059a6:	4a3d      	ldr	r2, [pc, #244]	@ (8005a9c <SystemInit+0x100>)
 80059a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80059ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80059b0:	4b3b      	ldr	r3, [pc, #236]	@ (8005aa0 <SystemInit+0x104>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 030f 	and.w	r3, r3, #15
 80059b8:	2b06      	cmp	r3, #6
 80059ba:	d807      	bhi.n	80059cc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80059bc:	4b38      	ldr	r3, [pc, #224]	@ (8005aa0 <SystemInit+0x104>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f023 030f 	bic.w	r3, r3, #15
 80059c4:	4a36      	ldr	r2, [pc, #216]	@ (8005aa0 <SystemInit+0x104>)
 80059c6:	f043 0307 	orr.w	r3, r3, #7
 80059ca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80059cc:	4b35      	ldr	r3, [pc, #212]	@ (8005aa4 <SystemInit+0x108>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a34      	ldr	r2, [pc, #208]	@ (8005aa4 <SystemInit+0x108>)
 80059d2:	f043 0301 	orr.w	r3, r3, #1
 80059d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80059d8:	4b32      	ldr	r3, [pc, #200]	@ (8005aa4 <SystemInit+0x108>)
 80059da:	2200      	movs	r2, #0
 80059dc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80059de:	4b31      	ldr	r3, [pc, #196]	@ (8005aa4 <SystemInit+0x108>)
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	4930      	ldr	r1, [pc, #192]	@ (8005aa4 <SystemInit+0x108>)
 80059e4:	4b30      	ldr	r3, [pc, #192]	@ (8005aa8 <SystemInit+0x10c>)
 80059e6:	4013      	ands	r3, r2
 80059e8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80059ea:	4b2d      	ldr	r3, [pc, #180]	@ (8005aa0 <SystemInit+0x104>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 0308 	and.w	r3, r3, #8
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d007      	beq.n	8005a06 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80059f6:	4b2a      	ldr	r3, [pc, #168]	@ (8005aa0 <SystemInit+0x104>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f023 030f 	bic.w	r3, r3, #15
 80059fe:	4a28      	ldr	r2, [pc, #160]	@ (8005aa0 <SystemInit+0x104>)
 8005a00:	f043 0307 	orr.w	r3, r3, #7
 8005a04:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8005a06:	4b27      	ldr	r3, [pc, #156]	@ (8005aa4 <SystemInit+0x108>)
 8005a08:	2200      	movs	r2, #0
 8005a0a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8005a0c:	4b25      	ldr	r3, [pc, #148]	@ (8005aa4 <SystemInit+0x108>)
 8005a0e:	2200      	movs	r2, #0
 8005a10:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8005a12:	4b24      	ldr	r3, [pc, #144]	@ (8005aa4 <SystemInit+0x108>)
 8005a14:	2200      	movs	r2, #0
 8005a16:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8005a18:	4b22      	ldr	r3, [pc, #136]	@ (8005aa4 <SystemInit+0x108>)
 8005a1a:	4a24      	ldr	r2, [pc, #144]	@ (8005aac <SystemInit+0x110>)
 8005a1c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8005a1e:	4b21      	ldr	r3, [pc, #132]	@ (8005aa4 <SystemInit+0x108>)
 8005a20:	4a23      	ldr	r2, [pc, #140]	@ (8005ab0 <SystemInit+0x114>)
 8005a22:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8005a24:	4b1f      	ldr	r3, [pc, #124]	@ (8005aa4 <SystemInit+0x108>)
 8005a26:	4a23      	ldr	r2, [pc, #140]	@ (8005ab4 <SystemInit+0x118>)
 8005a28:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8005a2a:	4b1e      	ldr	r3, [pc, #120]	@ (8005aa4 <SystemInit+0x108>)
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8005a30:	4b1c      	ldr	r3, [pc, #112]	@ (8005aa4 <SystemInit+0x108>)
 8005a32:	4a20      	ldr	r2, [pc, #128]	@ (8005ab4 <SystemInit+0x118>)
 8005a34:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8005a36:	4b1b      	ldr	r3, [pc, #108]	@ (8005aa4 <SystemInit+0x108>)
 8005a38:	2200      	movs	r2, #0
 8005a3a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8005a3c:	4b19      	ldr	r3, [pc, #100]	@ (8005aa4 <SystemInit+0x108>)
 8005a3e:	4a1d      	ldr	r2, [pc, #116]	@ (8005ab4 <SystemInit+0x118>)
 8005a40:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8005a42:	4b18      	ldr	r3, [pc, #96]	@ (8005aa4 <SystemInit+0x108>)
 8005a44:	2200      	movs	r2, #0
 8005a46:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005a48:	4b16      	ldr	r3, [pc, #88]	@ (8005aa4 <SystemInit+0x108>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a15      	ldr	r2, [pc, #84]	@ (8005aa4 <SystemInit+0x108>)
 8005a4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a52:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005a54:	4b13      	ldr	r3, [pc, #76]	@ (8005aa4 <SystemInit+0x108>)
 8005a56:	2200      	movs	r2, #0
 8005a58:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8005a5a:	4b12      	ldr	r3, [pc, #72]	@ (8005aa4 <SystemInit+0x108>)
 8005a5c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005a60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d113      	bne.n	8005a90 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8005a68:	4b0e      	ldr	r3, [pc, #56]	@ (8005aa4 <SystemInit+0x108>)
 8005a6a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005a6e:	4a0d      	ldr	r2, [pc, #52]	@ (8005aa4 <SystemInit+0x108>)
 8005a70:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005a74:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8005a78:	4b0f      	ldr	r3, [pc, #60]	@ (8005ab8 <SystemInit+0x11c>)
 8005a7a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8005a7e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8005a80:	4b08      	ldr	r3, [pc, #32]	@ (8005aa4 <SystemInit+0x108>)
 8005a82:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005a86:	4a07      	ldr	r2, [pc, #28]	@ (8005aa4 <SystemInit+0x108>)
 8005a88:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a8c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8005a90:	bf00      	nop
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr
 8005a9a:	bf00      	nop
 8005a9c:	e000ed00 	.word	0xe000ed00
 8005aa0:	52002000 	.word	0x52002000
 8005aa4:	58024400 	.word	0x58024400
 8005aa8:	eaf6ed7f 	.word	0xeaf6ed7f
 8005aac:	02020200 	.word	0x02020200
 8005ab0:	01ff0000 	.word	0x01ff0000
 8005ab4:	01010280 	.word	0x01010280
 8005ab8:	52004000 	.word	0x52004000

08005abc <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8005abc:	b480      	push	{r7}
 8005abe:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8005ac0:	4b09      	ldr	r3, [pc, #36]	@ (8005ae8 <ExitRun0Mode+0x2c>)
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	4a08      	ldr	r2, [pc, #32]	@ (8005ae8 <ExitRun0Mode+0x2c>)
 8005ac6:	f043 0302 	orr.w	r3, r3, #2
 8005aca:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8005acc:	bf00      	nop
 8005ace:	4b06      	ldr	r3, [pc, #24]	@ (8005ae8 <ExitRun0Mode+0x2c>)
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d0f9      	beq.n	8005ace <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8005ada:	bf00      	nop
 8005adc:	bf00      	nop
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr
 8005ae6:	bf00      	nop
 8005ae8:	58024800 	.word	0x58024800

08005aec <LL_TIM_EnableARRPreload>:
{
 8005aec:	b480      	push	{r7}
 8005aee:	b083      	sub	sp, #12
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	601a      	str	r2, [r3, #0]
}
 8005b00:	bf00      	nop
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <LL_TIM_OC_EnableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b085      	sub	sp, #20
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d028      	beq.n	8005b6e <LL_TIM_OC_EnableFast+0x62>
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	2b04      	cmp	r3, #4
 8005b20:	d023      	beq.n	8005b6a <LL_TIM_OC_EnableFast+0x5e>
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	2b10      	cmp	r3, #16
 8005b26:	d01e      	beq.n	8005b66 <LL_TIM_OC_EnableFast+0x5a>
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	2b40      	cmp	r3, #64	@ 0x40
 8005b2c:	d019      	beq.n	8005b62 <LL_TIM_OC_EnableFast+0x56>
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b34:	d013      	beq.n	8005b5e <LL_TIM_OC_EnableFast+0x52>
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b3c:	d00d      	beq.n	8005b5a <LL_TIM_OC_EnableFast+0x4e>
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b44:	d007      	beq.n	8005b56 <LL_TIM_OC_EnableFast+0x4a>
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b4c:	d101      	bne.n	8005b52 <LL_TIM_OC_EnableFast+0x46>
 8005b4e:	2307      	movs	r3, #7
 8005b50:	e00e      	b.n	8005b70 <LL_TIM_OC_EnableFast+0x64>
 8005b52:	2308      	movs	r3, #8
 8005b54:	e00c      	b.n	8005b70 <LL_TIM_OC_EnableFast+0x64>
 8005b56:	2306      	movs	r3, #6
 8005b58:	e00a      	b.n	8005b70 <LL_TIM_OC_EnableFast+0x64>
 8005b5a:	2305      	movs	r3, #5
 8005b5c:	e008      	b.n	8005b70 <LL_TIM_OC_EnableFast+0x64>
 8005b5e:	2304      	movs	r3, #4
 8005b60:	e006      	b.n	8005b70 <LL_TIM_OC_EnableFast+0x64>
 8005b62:	2303      	movs	r3, #3
 8005b64:	e004      	b.n	8005b70 <LL_TIM_OC_EnableFast+0x64>
 8005b66:	2302      	movs	r3, #2
 8005b68:	e002      	b.n	8005b70 <LL_TIM_OC_EnableFast+0x64>
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e000      	b.n	8005b70 <LL_TIM_OC_EnableFast+0x64>
 8005b6e:	2300      	movs	r3, #0
 8005b70:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	3318      	adds	r3, #24
 8005b76:	4619      	mov	r1, r3
 8005b78:	7bfb      	ldrb	r3, [r7, #15]
 8005b7a:	4a0a      	ldr	r2, [pc, #40]	@ (8005ba4 <LL_TIM_OC_EnableFast+0x98>)
 8005b7c:	5cd3      	ldrb	r3, [r2, r3]
 8005b7e:	440b      	add	r3, r1
 8005b80:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	7bfb      	ldrb	r3, [r7, #15]
 8005b88:	4907      	ldr	r1, [pc, #28]	@ (8005ba8 <LL_TIM_OC_EnableFast+0x9c>)
 8005b8a:	5ccb      	ldrb	r3, [r1, r3]
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	2304      	movs	r3, #4
 8005b90:	408b      	lsls	r3, r1
 8005b92:	431a      	orrs	r2, r3
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	601a      	str	r2, [r3, #0]

}
 8005b98:	bf00      	nop
 8005b9a:	3714      	adds	r7, #20
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr
 8005ba4:	0801f98c 	.word	0x0801f98c
 8005ba8:	0801f998 	.word	0x0801f998

08005bac <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b085      	sub	sp, #20
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d028      	beq.n	8005c0e <LL_TIM_OC_EnablePreload+0x62>
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	2b04      	cmp	r3, #4
 8005bc0:	d023      	beq.n	8005c0a <LL_TIM_OC_EnablePreload+0x5e>
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	2b10      	cmp	r3, #16
 8005bc6:	d01e      	beq.n	8005c06 <LL_TIM_OC_EnablePreload+0x5a>
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	2b40      	cmp	r3, #64	@ 0x40
 8005bcc:	d019      	beq.n	8005c02 <LL_TIM_OC_EnablePreload+0x56>
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bd4:	d013      	beq.n	8005bfe <LL_TIM_OC_EnablePreload+0x52>
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bdc:	d00d      	beq.n	8005bfa <LL_TIM_OC_EnablePreload+0x4e>
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005be4:	d007      	beq.n	8005bf6 <LL_TIM_OC_EnablePreload+0x4a>
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bec:	d101      	bne.n	8005bf2 <LL_TIM_OC_EnablePreload+0x46>
 8005bee:	2307      	movs	r3, #7
 8005bf0:	e00e      	b.n	8005c10 <LL_TIM_OC_EnablePreload+0x64>
 8005bf2:	2308      	movs	r3, #8
 8005bf4:	e00c      	b.n	8005c10 <LL_TIM_OC_EnablePreload+0x64>
 8005bf6:	2306      	movs	r3, #6
 8005bf8:	e00a      	b.n	8005c10 <LL_TIM_OC_EnablePreload+0x64>
 8005bfa:	2305      	movs	r3, #5
 8005bfc:	e008      	b.n	8005c10 <LL_TIM_OC_EnablePreload+0x64>
 8005bfe:	2304      	movs	r3, #4
 8005c00:	e006      	b.n	8005c10 <LL_TIM_OC_EnablePreload+0x64>
 8005c02:	2303      	movs	r3, #3
 8005c04:	e004      	b.n	8005c10 <LL_TIM_OC_EnablePreload+0x64>
 8005c06:	2302      	movs	r3, #2
 8005c08:	e002      	b.n	8005c10 <LL_TIM_OC_EnablePreload+0x64>
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e000      	b.n	8005c10 <LL_TIM_OC_EnablePreload+0x64>
 8005c0e:	2300      	movs	r3, #0
 8005c10:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	3318      	adds	r3, #24
 8005c16:	4619      	mov	r1, r3
 8005c18:	7bfb      	ldrb	r3, [r7, #15]
 8005c1a:	4a0a      	ldr	r2, [pc, #40]	@ (8005c44 <LL_TIM_OC_EnablePreload+0x98>)
 8005c1c:	5cd3      	ldrb	r3, [r2, r3]
 8005c1e:	440b      	add	r3, r1
 8005c20:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	7bfb      	ldrb	r3, [r7, #15]
 8005c28:	4907      	ldr	r1, [pc, #28]	@ (8005c48 <LL_TIM_OC_EnablePreload+0x9c>)
 8005c2a:	5ccb      	ldrb	r3, [r1, r3]
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	2308      	movs	r3, #8
 8005c30:	408b      	lsls	r3, r1
 8005c32:	431a      	orrs	r2, r3
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	601a      	str	r2, [r3, #0]
}
 8005c38:	bf00      	nop
 8005c3a:	3714      	adds	r7, #20
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr
 8005c44:	0801f98c 	.word	0x0801f98c
 8005c48:	0801f998 	.word	0x0801f998

08005c4c <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b083      	sub	sp, #12
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	689a      	ldr	r2, [r3, #8]
 8005c5a:	4b06      	ldr	r3, [pc, #24]	@ (8005c74 <LL_TIM_SetClockSource+0x28>)
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	683a      	ldr	r2, [r7, #0]
 8005c60:	431a      	orrs	r2, r3
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	609a      	str	r2, [r3, #8]
}
 8005c66:	bf00      	nop
 8005c68:	370c      	adds	r7, #12
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr
 8005c72:	bf00      	nop
 8005c74:	fffebff8 	.word	0xfffebff8

08005c78 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	431a      	orrs	r2, r3
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	605a      	str	r2, [r3, #4]
}
 8005c92:	bf00      	nop
 8005c94:	370c      	adds	r7, #12
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr

08005c9e <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8005c9e:	b480      	push	{r7}
 8005ca0:	b083      	sub	sp, #12
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	609a      	str	r2, [r3, #8]
}
 8005cb2:	bf00      	nop
 8005cb4:	370c      	adds	r7, #12
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr
	...

08005cc0 <LL_AHB4_GRP1_EnableClock>:
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b085      	sub	sp, #20
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB4ENR, Periphs);
 8005cc8:	4b0a      	ldr	r3, [pc, #40]	@ (8005cf4 <LL_AHB4_GRP1_EnableClock+0x34>)
 8005cca:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005cce:	4909      	ldr	r1, [pc, #36]	@ (8005cf4 <LL_AHB4_GRP1_EnableClock+0x34>)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 8005cd8:	4b06      	ldr	r3, [pc, #24]	@ (8005cf4 <LL_AHB4_GRP1_EnableClock+0x34>)
 8005cda:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
}
 8005ce6:	bf00      	nop
 8005ce8:	3714      	adds	r7, #20
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr
 8005cf2:	bf00      	nop
 8005cf4:	58024400 	.word	0x58024400

08005cf8 <LL_APB1_GRP1_EnableClock>:
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b085      	sub	sp, #20
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1LENR, Periphs);
 8005d00:	4b0a      	ldr	r3, [pc, #40]	@ (8005d2c <LL_APB1_GRP1_EnableClock+0x34>)
 8005d02:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8005d06:	4909      	ldr	r1, [pc, #36]	@ (8005d2c <LL_APB1_GRP1_EnableClock+0x34>)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  tmpreg = READ_BIT(RCC->APB1LENR, Periphs);
 8005d10:	4b06      	ldr	r3, [pc, #24]	@ (8005d2c <LL_APB1_GRP1_EnableClock+0x34>)
 8005d12:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4013      	ands	r3, r2
 8005d1a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
}
 8005d1e:	bf00      	nop
 8005d20:	3714      	adds	r7, #20
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr
 8005d2a:	bf00      	nop
 8005d2c:	58024400 	.word	0x58024400

08005d30 <MX_TIM2_Init>:
DMA_HandleTypeDef hdma_tim3_ch2;
DMA_HandleTypeDef hdma_tim3_ch3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b094      	sub	sp, #80	@ 0x50
 8005d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8005d36:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	601a      	str	r2, [r3, #0]
 8005d3e:	605a      	str	r2, [r3, #4]
 8005d40:	609a      	str	r2, [r3, #8]
 8005d42:	60da      	str	r2, [r3, #12]
 8005d44:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8005d46:	f107 031c 	add.w	r3, r7, #28
 8005d4a:	2220      	movs	r2, #32
 8005d4c:	2100      	movs	r1, #0
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f015 f95a 	bl	801b008 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d54:	1d3b      	adds	r3, r7, #4
 8005d56:	2200      	movs	r2, #0
 8005d58:	601a      	str	r2, [r3, #0]
 8005d5a:	605a      	str	r2, [r3, #4]
 8005d5c:	609a      	str	r2, [r3, #8]
 8005d5e:	60da      	str	r2, [r3, #12]
 8005d60:	611a      	str	r2, [r3, #16]
 8005d62:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8005d64:	2001      	movs	r0, #1
 8005d66:	f7ff ffc7 	bl	8005cf8 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 546;
 8005d6a:	f240 2322 	movw	r3, #546	@ 0x222
 8005d6e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8005d70:	2300      	movs	r3, #0
 8005d72:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_InitStruct.Autoreload = 249;
 8005d74:	23f9      	movs	r3, #249	@ 0xf9
 8005d76:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8005d7c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8005d80:	4619      	mov	r1, r3
 8005d82:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8005d86:	f00f fa2f 	bl	80151e8 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM2);
 8005d8a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8005d8e:	f7ff fead 	bl	8005aec <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8005d92:	2100      	movs	r1, #0
 8005d94:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8005d98:	f7ff ff58 	bl	8005c4c <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 8005d9c:	2101      	movs	r1, #1
 8005d9e:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8005da2:	f7ff ff03 	bl	8005bac <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8005da6:	2360      	movs	r3, #96	@ 0x60
 8005da8:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8005daa:	2300      	movs	r3, #0
 8005dac:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8005dae:	2300      	movs	r3, #0
 8005db0:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8005db2:	2300      	movs	r3, #0
 8005db4:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8005db6:	2300      	movs	r3, #0
 8005db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8005dba:	f107 031c 	add.w	r3, r7, #28
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	2101      	movs	r1, #1
 8005dc2:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8005dc6:	f00f faaf 	bl	8015328 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM2, LL_TIM_CHANNEL_CH1);
 8005dca:	2101      	movs	r1, #1
 8005dcc:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8005dd0:	f7ff fe9c 	bl	8005b0c <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8005dd4:	2100      	movs	r1, #0
 8005dd6:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8005dda:	f7ff ff4d 	bl	8005c78 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8005dde:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8005de2:	f7ff ff5c 	bl	8005c9e <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOA);
 8005de6:	2001      	movs	r0, #1
 8005de8:	f7ff ff6a 	bl	8005cc0 <LL_AHB4_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8005dec:	2320      	movs	r3, #32
 8005dee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005df0:	2302      	movs	r3, #2
 8005df2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8005df4:	2300      	movs	r3, #0
 8005df6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8005e00:	2301      	movs	r3, #1
 8005e02:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e04:	1d3b      	adds	r3, r7, #4
 8005e06:	4619      	mov	r1, r3
 8005e08:	4803      	ldr	r0, [pc, #12]	@ (8005e18 <MX_TIM2_Init+0xe8>)
 8005e0a:	f00e f98d 	bl	8014128 <LL_GPIO_Init>

}
 8005e0e:	bf00      	nop
 8005e10:	3750      	adds	r7, #80	@ 0x50
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	bf00      	nop
 8005e18:	58020000 	.word	0x58020000

08005e1c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b08e      	sub	sp, #56	@ 0x38
 8005e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005e22:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005e26:	2200      	movs	r2, #0
 8005e28:	601a      	str	r2, [r3, #0]
 8005e2a:	605a      	str	r2, [r3, #4]
 8005e2c:	609a      	str	r2, [r3, #8]
 8005e2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005e30:	f107 031c 	add.w	r3, r7, #28
 8005e34:	2200      	movs	r2, #0
 8005e36:	601a      	str	r2, [r3, #0]
 8005e38:	605a      	str	r2, [r3, #4]
 8005e3a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005e3c:	463b      	mov	r3, r7
 8005e3e:	2200      	movs	r2, #0
 8005e40:	601a      	str	r2, [r3, #0]
 8005e42:	605a      	str	r2, [r3, #4]
 8005e44:	609a      	str	r2, [r3, #8]
 8005e46:	60da      	str	r2, [r3, #12]
 8005e48:	611a      	str	r2, [r3, #16]
 8005e4a:	615a      	str	r2, [r3, #20]
 8005e4c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005e4e:	4b32      	ldr	r3, [pc, #200]	@ (8005f18 <MX_TIM3_Init+0xfc>)
 8005e50:	4a32      	ldr	r2, [pc, #200]	@ (8005f1c <MX_TIM3_Init+0x100>)
 8005e52:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8005e54:	4b30      	ldr	r3, [pc, #192]	@ (8005f18 <MX_TIM3_Init+0xfc>)
 8005e56:	2200      	movs	r2, #0
 8005e58:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e5a:	4b2f      	ldr	r3, [pc, #188]	@ (8005f18 <MX_TIM3_Init+0xfc>)
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 343;
 8005e60:	4b2d      	ldr	r3, [pc, #180]	@ (8005f18 <MX_TIM3_Init+0xfc>)
 8005e62:	f240 1257 	movw	r2, #343	@ 0x157
 8005e66:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005e68:	4b2b      	ldr	r3, [pc, #172]	@ (8005f18 <MX_TIM3_Init+0xfc>)
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005e6e:	4b2a      	ldr	r3, [pc, #168]	@ (8005f18 <MX_TIM3_Init+0xfc>)
 8005e70:	2280      	movs	r2, #128	@ 0x80
 8005e72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005e74:	4828      	ldr	r0, [pc, #160]	@ (8005f18 <MX_TIM3_Init+0xfc>)
 8005e76:	f009 fc77 	bl	800f768 <HAL_TIM_Base_Init>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d001      	beq.n	8005e84 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8005e80:	f7fe fd94 	bl	80049ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005e84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005e88:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005e8a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005e8e:	4619      	mov	r1, r3
 8005e90:	4821      	ldr	r0, [pc, #132]	@ (8005f18 <MX_TIM3_Init+0xfc>)
 8005e92:	f00a fcb3 	bl	80107fc <HAL_TIM_ConfigClockSource>
 8005e96:	4603      	mov	r3, r0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d001      	beq.n	8005ea0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8005e9c:	f7fe fd86 	bl	80049ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005ea0:	481d      	ldr	r0, [pc, #116]	@ (8005f18 <MX_TIM3_Init+0xfc>)
 8005ea2:	f009 fde5 	bl	800fa70 <HAL_TIM_PWM_Init>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d001      	beq.n	8005eb0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8005eac:	f7fe fd7e 	bl	80049ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005eb8:	f107 031c 	add.w	r3, r7, #28
 8005ebc:	4619      	mov	r1, r3
 8005ebe:	4816      	ldr	r0, [pc, #88]	@ (8005f18 <MX_TIM3_Init+0xfc>)
 8005ec0:	f00b fade 	bl	8011480 <HAL_TIMEx_MasterConfigSynchronization>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d001      	beq.n	8005ece <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8005eca:	f7fe fd6f 	bl	80049ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005ece:	2360      	movs	r3, #96	@ 0x60
 8005ed0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005eda:	2300      	movs	r3, #0
 8005edc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005ede:	463b      	mov	r3, r7
 8005ee0:	2204      	movs	r2, #4
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	480c      	ldr	r0, [pc, #48]	@ (8005f18 <MX_TIM3_Init+0xfc>)
 8005ee6:	f00a fb75 	bl	80105d4 <HAL_TIM_PWM_ConfigChannel>
 8005eea:	4603      	mov	r3, r0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d001      	beq.n	8005ef4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8005ef0:	f7fe fd5c 	bl	80049ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005ef4:	463b      	mov	r3, r7
 8005ef6:	2208      	movs	r2, #8
 8005ef8:	4619      	mov	r1, r3
 8005efa:	4807      	ldr	r0, [pc, #28]	@ (8005f18 <MX_TIM3_Init+0xfc>)
 8005efc:	f00a fb6a 	bl	80105d4 <HAL_TIM_PWM_ConfigChannel>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d001      	beq.n	8005f0a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8005f06:	f7fe fd51 	bl	80049ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005f0a:	4803      	ldr	r0, [pc, #12]	@ (8005f18 <MX_TIM3_Init+0xfc>)
 8005f0c:	f000 f948 	bl	80061a0 <HAL_TIM_MspPostInit>

}
 8005f10:	bf00      	nop
 8005f12:	3738      	adds	r7, #56	@ 0x38
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	24000e8c 	.word	0x24000e8c
 8005f1c:	40000400 	.word	0x40000400

08005f20 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b08e      	sub	sp, #56	@ 0x38
 8005f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005f26:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	601a      	str	r2, [r3, #0]
 8005f2e:	605a      	str	r2, [r3, #4]
 8005f30:	609a      	str	r2, [r3, #8]
 8005f32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005f34:	f107 031c 	add.w	r3, r7, #28
 8005f38:	2200      	movs	r2, #0
 8005f3a:	601a      	str	r2, [r3, #0]
 8005f3c:	605a      	str	r2, [r3, #4]
 8005f3e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005f40:	463b      	mov	r3, r7
 8005f42:	2200      	movs	r2, #0
 8005f44:	601a      	str	r2, [r3, #0]
 8005f46:	605a      	str	r2, [r3, #4]
 8005f48:	609a      	str	r2, [r3, #8]
 8005f4a:	60da      	str	r2, [r3, #12]
 8005f4c:	611a      	str	r2, [r3, #16]
 8005f4e:	615a      	str	r2, [r3, #20]
 8005f50:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8005f52:	4b3e      	ldr	r3, [pc, #248]	@ (800604c <MX_TIM5_Init+0x12c>)
 8005f54:	4a3e      	ldr	r2, [pc, #248]	@ (8006050 <MX_TIM5_Init+0x130>)
 8005f56:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 275-1;
 8005f58:	4b3c      	ldr	r3, [pc, #240]	@ (800604c <MX_TIM5_Init+0x12c>)
 8005f5a:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8005f5e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f60:	4b3a      	ldr	r3, [pc, #232]	@ (800604c <MX_TIM5_Init+0x12c>)
 8005f62:	2200      	movs	r2, #0
 8005f64:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20000-1;
 8005f66:	4b39      	ldr	r3, [pc, #228]	@ (800604c <MX_TIM5_Init+0x12c>)
 8005f68:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8005f6c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005f6e:	4b37      	ldr	r3, [pc, #220]	@ (800604c <MX_TIM5_Init+0x12c>)
 8005f70:	2200      	movs	r2, #0
 8005f72:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005f74:	4b35      	ldr	r3, [pc, #212]	@ (800604c <MX_TIM5_Init+0x12c>)
 8005f76:	2280      	movs	r2, #128	@ 0x80
 8005f78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8005f7a:	4834      	ldr	r0, [pc, #208]	@ (800604c <MX_TIM5_Init+0x12c>)
 8005f7c:	f009 fbf4 	bl	800f768 <HAL_TIM_Base_Init>
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d001      	beq.n	8005f8a <MX_TIM5_Init+0x6a>
  {
    Error_Handler();
 8005f86:	f7fe fd11 	bl	80049ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005f8a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005f8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8005f90:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005f94:	4619      	mov	r1, r3
 8005f96:	482d      	ldr	r0, [pc, #180]	@ (800604c <MX_TIM5_Init+0x12c>)
 8005f98:	f00a fc30 	bl	80107fc <HAL_TIM_ConfigClockSource>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d001      	beq.n	8005fa6 <MX_TIM5_Init+0x86>
  {
    Error_Handler();
 8005fa2:	f7fe fd03 	bl	80049ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8005fa6:	4829      	ldr	r0, [pc, #164]	@ (800604c <MX_TIM5_Init+0x12c>)
 8005fa8:	f009 fd62 	bl	800fa70 <HAL_TIM_PWM_Init>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d001      	beq.n	8005fb6 <MX_TIM5_Init+0x96>
  {
    Error_Handler();
 8005fb2:	f7fe fcfb 	bl	80049ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005fbe:	f107 031c 	add.w	r3, r7, #28
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	4821      	ldr	r0, [pc, #132]	@ (800604c <MX_TIM5_Init+0x12c>)
 8005fc6:	f00b fa5b 	bl	8011480 <HAL_TIMEx_MasterConfigSynchronization>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d001      	beq.n	8005fd4 <MX_TIM5_Init+0xb4>
  {
    Error_Handler();
 8005fd0:	f7fe fcec 	bl	80049ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005fd4:	2360      	movs	r3, #96	@ 0x60
 8005fd6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 8005fd8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005fdc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8005fe2:	2304      	movs	r3, #4
 8005fe4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005fe6:	463b      	mov	r3, r7
 8005fe8:	2200      	movs	r2, #0
 8005fea:	4619      	mov	r1, r3
 8005fec:	4817      	ldr	r0, [pc, #92]	@ (800604c <MX_TIM5_Init+0x12c>)
 8005fee:	f00a faf1 	bl	80105d4 <HAL_TIM_PWM_ConfigChannel>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d001      	beq.n	8005ffc <MX_TIM5_Init+0xdc>
  {
    Error_Handler();
 8005ff8:	f7fe fcd8 	bl	80049ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005ffc:	463b      	mov	r3, r7
 8005ffe:	2204      	movs	r2, #4
 8006000:	4619      	mov	r1, r3
 8006002:	4812      	ldr	r0, [pc, #72]	@ (800604c <MX_TIM5_Init+0x12c>)
 8006004:	f00a fae6 	bl	80105d4 <HAL_TIM_PWM_ConfigChannel>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d001      	beq.n	8006012 <MX_TIM5_Init+0xf2>
  {
    Error_Handler();
 800600e:	f7fe fccd 	bl	80049ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006012:	463b      	mov	r3, r7
 8006014:	2208      	movs	r2, #8
 8006016:	4619      	mov	r1, r3
 8006018:	480c      	ldr	r0, [pc, #48]	@ (800604c <MX_TIM5_Init+0x12c>)
 800601a:	f00a fadb 	bl	80105d4 <HAL_TIM_PWM_ConfigChannel>
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d001      	beq.n	8006028 <MX_TIM5_Init+0x108>
  {
    Error_Handler();
 8006024:	f7fe fcc2 	bl	80049ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8006028:	463b      	mov	r3, r7
 800602a:	220c      	movs	r2, #12
 800602c:	4619      	mov	r1, r3
 800602e:	4807      	ldr	r0, [pc, #28]	@ (800604c <MX_TIM5_Init+0x12c>)
 8006030:	f00a fad0 	bl	80105d4 <HAL_TIM_PWM_ConfigChannel>
 8006034:	4603      	mov	r3, r0
 8006036:	2b00      	cmp	r3, #0
 8006038:	d001      	beq.n	800603e <MX_TIM5_Init+0x11e>
  {
    Error_Handler();
 800603a:	f7fe fcb7 	bl	80049ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800603e:	4803      	ldr	r0, [pc, #12]	@ (800604c <MX_TIM5_Init+0x12c>)
 8006040:	f000 f8ae 	bl	80061a0 <HAL_TIM_MspPostInit>

}
 8006044:	bf00      	nop
 8006046:	3738      	adds	r7, #56	@ 0x38
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}
 800604c:	24000ed8 	.word	0x24000ed8
 8006050:	40000c00 	.word	0x40000c00

08006054 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a48      	ldr	r2, [pc, #288]	@ (8006184 <HAL_TIM_Base_MspInit+0x130>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d175      	bne.n	8006152 <HAL_TIM_Base_MspInit+0xfe>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006066:	4b48      	ldr	r3, [pc, #288]	@ (8006188 <HAL_TIM_Base_MspInit+0x134>)
 8006068:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800606c:	4a46      	ldr	r2, [pc, #280]	@ (8006188 <HAL_TIM_Base_MspInit+0x134>)
 800606e:	f043 0302 	orr.w	r3, r3, #2
 8006072:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006076:	4b44      	ldr	r3, [pc, #272]	@ (8006188 <HAL_TIM_Base_MspInit+0x134>)
 8006078:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800607c:	f003 0302 	and.w	r3, r3, #2
 8006080:	60fb      	str	r3, [r7, #12]
 8006082:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH2 Init */
    hdma_tim3_ch2.Instance = DMA1_Stream4;
 8006084:	4b41      	ldr	r3, [pc, #260]	@ (800618c <HAL_TIM_Base_MspInit+0x138>)
 8006086:	4a42      	ldr	r2, [pc, #264]	@ (8006190 <HAL_TIM_Base_MspInit+0x13c>)
 8006088:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 800608a:	4b40      	ldr	r3, [pc, #256]	@ (800618c <HAL_TIM_Base_MspInit+0x138>)
 800608c:	2218      	movs	r2, #24
 800608e:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006090:	4b3e      	ldr	r3, [pc, #248]	@ (800618c <HAL_TIM_Base_MspInit+0x138>)
 8006092:	2240      	movs	r2, #64	@ 0x40
 8006094:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006096:	4b3d      	ldr	r3, [pc, #244]	@ (800618c <HAL_TIM_Base_MspInit+0x138>)
 8006098:	2200      	movs	r2, #0
 800609a:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800609c:	4b3b      	ldr	r3, [pc, #236]	@ (800618c <HAL_TIM_Base_MspInit+0x138>)
 800609e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80060a2:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80060a4:	4b39      	ldr	r3, [pc, #228]	@ (800618c <HAL_TIM_Base_MspInit+0x138>)
 80060a6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80060aa:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80060ac:	4b37      	ldr	r3, [pc, #220]	@ (800618c <HAL_TIM_Base_MspInit+0x138>)
 80060ae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80060b2:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 80060b4:	4b35      	ldr	r3, [pc, #212]	@ (800618c <HAL_TIM_Base_MspInit+0x138>)
 80060b6:	2200      	movs	r2, #0
 80060b8:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80060ba:	4b34      	ldr	r3, [pc, #208]	@ (800618c <HAL_TIM_Base_MspInit+0x138>)
 80060bc:	2200      	movs	r2, #0
 80060be:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80060c0:	4b32      	ldr	r3, [pc, #200]	@ (800618c <HAL_TIM_Base_MspInit+0x138>)
 80060c2:	2200      	movs	r2, #0
 80060c4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 80060c6:	4831      	ldr	r0, [pc, #196]	@ (800618c <HAL_TIM_Base_MspInit+0x138>)
 80060c8:	f000 fef6 	bl	8006eb8 <HAL_DMA_Init>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d001      	beq.n	80060d6 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 80060d2:	f7fe fc6b 	bl	80049ac <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	4a2c      	ldr	r2, [pc, #176]	@ (800618c <HAL_TIM_Base_MspInit+0x138>)
 80060da:	629a      	str	r2, [r3, #40]	@ 0x28
 80060dc:	4a2b      	ldr	r2, [pc, #172]	@ (800618c <HAL_TIM_Base_MspInit+0x138>)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM3_CH3 Init */
    hdma_tim3_ch3.Instance = DMA1_Stream5;
 80060e2:	4b2c      	ldr	r3, [pc, #176]	@ (8006194 <HAL_TIM_Base_MspInit+0x140>)
 80060e4:	4a2c      	ldr	r2, [pc, #176]	@ (8006198 <HAL_TIM_Base_MspInit+0x144>)
 80060e6:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch3.Init.Request = DMA_REQUEST_TIM3_CH3;
 80060e8:	4b2a      	ldr	r3, [pc, #168]	@ (8006194 <HAL_TIM_Base_MspInit+0x140>)
 80060ea:	2219      	movs	r2, #25
 80060ec:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80060ee:	4b29      	ldr	r3, [pc, #164]	@ (8006194 <HAL_TIM_Base_MspInit+0x140>)
 80060f0:	2240      	movs	r2, #64	@ 0x40
 80060f2:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80060f4:	4b27      	ldr	r3, [pc, #156]	@ (8006194 <HAL_TIM_Base_MspInit+0x140>)
 80060f6:	2200      	movs	r2, #0
 80060f8:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80060fa:	4b26      	ldr	r3, [pc, #152]	@ (8006194 <HAL_TIM_Base_MspInit+0x140>)
 80060fc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006100:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006102:	4b24      	ldr	r3, [pc, #144]	@ (8006194 <HAL_TIM_Base_MspInit+0x140>)
 8006104:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006108:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800610a:	4b22      	ldr	r3, [pc, #136]	@ (8006194 <HAL_TIM_Base_MspInit+0x140>)
 800610c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006110:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch3.Init.Mode = DMA_NORMAL;
 8006112:	4b20      	ldr	r3, [pc, #128]	@ (8006194 <HAL_TIM_Base_MspInit+0x140>)
 8006114:	2200      	movs	r2, #0
 8006116:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8006118:	4b1e      	ldr	r3, [pc, #120]	@ (8006194 <HAL_TIM_Base_MspInit+0x140>)
 800611a:	2200      	movs	r2, #0
 800611c:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800611e:	4b1d      	ldr	r3, [pc, #116]	@ (8006194 <HAL_TIM_Base_MspInit+0x140>)
 8006120:	2200      	movs	r2, #0
 8006122:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch3) != HAL_OK)
 8006124:	481b      	ldr	r0, [pc, #108]	@ (8006194 <HAL_TIM_Base_MspInit+0x140>)
 8006126:	f000 fec7 	bl	8006eb8 <HAL_DMA_Init>
 800612a:	4603      	mov	r3, r0
 800612c:	2b00      	cmp	r3, #0
 800612e:	d001      	beq.n	8006134 <HAL_TIM_Base_MspInit+0xe0>
    {
      Error_Handler();
 8006130:	f7fe fc3c 	bl	80049ac <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim3_ch3);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	4a17      	ldr	r2, [pc, #92]	@ (8006194 <HAL_TIM_Base_MspInit+0x140>)
 8006138:	62da      	str	r2, [r3, #44]	@ 0x2c
 800613a:	4a16      	ldr	r2, [pc, #88]	@ (8006194 <HAL_TIM_Base_MspInit+0x140>)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8006140:	2200      	movs	r2, #0
 8006142:	2105      	movs	r1, #5
 8006144:	201d      	movs	r0, #29
 8006146:	f000 fe17 	bl	8006d78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800614a:	201d      	movs	r0, #29
 800614c:	f000 fe2e 	bl	8006dac <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8006150:	e013      	b.n	800617a <HAL_TIM_Base_MspInit+0x126>
  else if(tim_baseHandle->Instance==TIM5)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a11      	ldr	r2, [pc, #68]	@ (800619c <HAL_TIM_Base_MspInit+0x148>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d10e      	bne.n	800617a <HAL_TIM_Base_MspInit+0x126>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800615c:	4b0a      	ldr	r3, [pc, #40]	@ (8006188 <HAL_TIM_Base_MspInit+0x134>)
 800615e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006162:	4a09      	ldr	r2, [pc, #36]	@ (8006188 <HAL_TIM_Base_MspInit+0x134>)
 8006164:	f043 0308 	orr.w	r3, r3, #8
 8006168:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800616c:	4b06      	ldr	r3, [pc, #24]	@ (8006188 <HAL_TIM_Base_MspInit+0x134>)
 800616e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006172:	f003 0308 	and.w	r3, r3, #8
 8006176:	60bb      	str	r3, [r7, #8]
 8006178:	68bb      	ldr	r3, [r7, #8]
}
 800617a:	bf00      	nop
 800617c:	3710      	adds	r7, #16
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop
 8006184:	40000400 	.word	0x40000400
 8006188:	58024400 	.word	0x58024400
 800618c:	24000f24 	.word	0x24000f24
 8006190:	40020070 	.word	0x40020070
 8006194:	24000f9c 	.word	0x24000f9c
 8006198:	40020088 	.word	0x40020088
 800619c:	40000c00 	.word	0x40000c00

080061a0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b08a      	sub	sp, #40	@ 0x28
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061a8:	f107 0314 	add.w	r3, r7, #20
 80061ac:	2200      	movs	r2, #0
 80061ae:	601a      	str	r2, [r3, #0]
 80061b0:	605a      	str	r2, [r3, #4]
 80061b2:	609a      	str	r2, [r3, #8]
 80061b4:	60da      	str	r2, [r3, #12]
 80061b6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a34      	ldr	r2, [pc, #208]	@ (8006290 <HAL_TIM_MspPostInit+0xf0>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d13e      	bne.n	8006240 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80061c2:	4b34      	ldr	r3, [pc, #208]	@ (8006294 <HAL_TIM_MspPostInit+0xf4>)
 80061c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80061c8:	4a32      	ldr	r2, [pc, #200]	@ (8006294 <HAL_TIM_MspPostInit+0xf4>)
 80061ca:	f043 0301 	orr.w	r3, r3, #1
 80061ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80061d2:	4b30      	ldr	r3, [pc, #192]	@ (8006294 <HAL_TIM_MspPostInit+0xf4>)
 80061d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80061d8:	f003 0301 	and.w	r3, r3, #1
 80061dc:	613b      	str	r3, [r7, #16]
 80061de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80061e0:	4b2c      	ldr	r3, [pc, #176]	@ (8006294 <HAL_TIM_MspPostInit+0xf4>)
 80061e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80061e6:	4a2b      	ldr	r2, [pc, #172]	@ (8006294 <HAL_TIM_MspPostInit+0xf4>)
 80061e8:	f043 0302 	orr.w	r3, r3, #2
 80061ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80061f0:	4b28      	ldr	r3, [pc, #160]	@ (8006294 <HAL_TIM_MspPostInit+0xf4>)
 80061f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80061f6:	f003 0302 	and.w	r3, r3, #2
 80061fa:	60fb      	str	r3, [r7, #12]
 80061fc:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80061fe:	2380      	movs	r3, #128	@ 0x80
 8006200:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006202:	2302      	movs	r3, #2
 8006204:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006206:	2300      	movs	r3, #0
 8006208:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800620a:	2300      	movs	r3, #0
 800620c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800620e:	2302      	movs	r3, #2
 8006210:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006212:	f107 0314 	add.w	r3, r7, #20
 8006216:	4619      	mov	r1, r3
 8006218:	481f      	ldr	r0, [pc, #124]	@ (8006298 <HAL_TIM_MspPostInit+0xf8>)
 800621a:	f003 fc93 	bl	8009b44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800621e:	2301      	movs	r3, #1
 8006220:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006222:	2302      	movs	r3, #2
 8006224:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006226:	2300      	movs	r3, #0
 8006228:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800622a:	2300      	movs	r3, #0
 800622c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800622e:	2302      	movs	r3, #2
 8006230:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006232:	f107 0314 	add.w	r3, r7, #20
 8006236:	4619      	mov	r1, r3
 8006238:	4818      	ldr	r0, [pc, #96]	@ (800629c <HAL_TIM_MspPostInit+0xfc>)
 800623a:	f003 fc83 	bl	8009b44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800623e:	e023      	b.n	8006288 <HAL_TIM_MspPostInit+0xe8>
  else if(timHandle->Instance==TIM5)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a16      	ldr	r2, [pc, #88]	@ (80062a0 <HAL_TIM_MspPostInit+0x100>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d11e      	bne.n	8006288 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800624a:	4b12      	ldr	r3, [pc, #72]	@ (8006294 <HAL_TIM_MspPostInit+0xf4>)
 800624c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006250:	4a10      	ldr	r2, [pc, #64]	@ (8006294 <HAL_TIM_MspPostInit+0xf4>)
 8006252:	f043 0301 	orr.w	r3, r3, #1
 8006256:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800625a:	4b0e      	ldr	r3, [pc, #56]	@ (8006294 <HAL_TIM_MspPostInit+0xf4>)
 800625c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006260:	f003 0301 	and.w	r3, r3, #1
 8006264:	60bb      	str	r3, [r7, #8]
 8006266:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006268:	230f      	movs	r3, #15
 800626a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800626c:	2302      	movs	r3, #2
 800626e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006270:	2300      	movs	r3, #0
 8006272:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006274:	2300      	movs	r3, #0
 8006276:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8006278:	2302      	movs	r3, #2
 800627a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800627c:	f107 0314 	add.w	r3, r7, #20
 8006280:	4619      	mov	r1, r3
 8006282:	4805      	ldr	r0, [pc, #20]	@ (8006298 <HAL_TIM_MspPostInit+0xf8>)
 8006284:	f003 fc5e 	bl	8009b44 <HAL_GPIO_Init>
}
 8006288:	bf00      	nop
 800628a:	3728      	adds	r7, #40	@ 0x28
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}
 8006290:	40000400 	.word	0x40000400
 8006294:	58024400 	.word	0x58024400
 8006298:	58020000 	.word	0x58020000
 800629c:	58020400 	.word	0x58020400
 80062a0:	40000c00 	.word	0x40000c00

080062a4 <__NVIC_GetPriorityGrouping>:
{
 80062a4:	b480      	push	{r7}
 80062a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80062a8:	4b04      	ldr	r3, [pc, #16]	@ (80062bc <__NVIC_GetPriorityGrouping+0x18>)
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	0a1b      	lsrs	r3, r3, #8
 80062ae:	f003 0307 	and.w	r3, r3, #7
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr
 80062bc:	e000ed00 	.word	0xe000ed00

080062c0 <__NVIC_EnableIRQ>:
{
 80062c0:	b480      	push	{r7}
 80062c2:	b083      	sub	sp, #12
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	4603      	mov	r3, r0
 80062c8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80062ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	db0b      	blt.n	80062ea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80062d2:	88fb      	ldrh	r3, [r7, #6]
 80062d4:	f003 021f 	and.w	r2, r3, #31
 80062d8:	4907      	ldr	r1, [pc, #28]	@ (80062f8 <__NVIC_EnableIRQ+0x38>)
 80062da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80062de:	095b      	lsrs	r3, r3, #5
 80062e0:	2001      	movs	r0, #1
 80062e2:	fa00 f202 	lsl.w	r2, r0, r2
 80062e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80062ea:	bf00      	nop
 80062ec:	370c      	adds	r7, #12
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr
 80062f6:	bf00      	nop
 80062f8:	e000e100 	.word	0xe000e100

080062fc <__NVIC_SetPriority>:
{
 80062fc:	b480      	push	{r7}
 80062fe:	b083      	sub	sp, #12
 8006300:	af00      	add	r7, sp, #0
 8006302:	4603      	mov	r3, r0
 8006304:	6039      	str	r1, [r7, #0]
 8006306:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006308:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800630c:	2b00      	cmp	r3, #0
 800630e:	db0a      	blt.n	8006326 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	b2da      	uxtb	r2, r3
 8006314:	490c      	ldr	r1, [pc, #48]	@ (8006348 <__NVIC_SetPriority+0x4c>)
 8006316:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800631a:	0112      	lsls	r2, r2, #4
 800631c:	b2d2      	uxtb	r2, r2
 800631e:	440b      	add	r3, r1
 8006320:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006324:	e00a      	b.n	800633c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	b2da      	uxtb	r2, r3
 800632a:	4908      	ldr	r1, [pc, #32]	@ (800634c <__NVIC_SetPriority+0x50>)
 800632c:	88fb      	ldrh	r3, [r7, #6]
 800632e:	f003 030f 	and.w	r3, r3, #15
 8006332:	3b04      	subs	r3, #4
 8006334:	0112      	lsls	r2, r2, #4
 8006336:	b2d2      	uxtb	r2, r2
 8006338:	440b      	add	r3, r1
 800633a:	761a      	strb	r2, [r3, #24]
}
 800633c:	bf00      	nop
 800633e:	370c      	adds	r7, #12
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr
 8006348:	e000e100 	.word	0xe000e100
 800634c:	e000ed00 	.word	0xe000ed00

08006350 <NVIC_EncodePriority>:
{
 8006350:	b480      	push	{r7}
 8006352:	b089      	sub	sp, #36	@ 0x24
 8006354:	af00      	add	r7, sp, #0
 8006356:	60f8      	str	r0, [r7, #12]
 8006358:	60b9      	str	r1, [r7, #8]
 800635a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f003 0307 	and.w	r3, r3, #7
 8006362:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006364:	69fb      	ldr	r3, [r7, #28]
 8006366:	f1c3 0307 	rsb	r3, r3, #7
 800636a:	2b04      	cmp	r3, #4
 800636c:	bf28      	it	cs
 800636e:	2304      	movcs	r3, #4
 8006370:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	3304      	adds	r3, #4
 8006376:	2b06      	cmp	r3, #6
 8006378:	d902      	bls.n	8006380 <NVIC_EncodePriority+0x30>
 800637a:	69fb      	ldr	r3, [r7, #28]
 800637c:	3b03      	subs	r3, #3
 800637e:	e000      	b.n	8006382 <NVIC_EncodePriority+0x32>
 8006380:	2300      	movs	r3, #0
 8006382:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006384:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006388:	69bb      	ldr	r3, [r7, #24]
 800638a:	fa02 f303 	lsl.w	r3, r2, r3
 800638e:	43da      	mvns	r2, r3
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	401a      	ands	r2, r3
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006398:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	fa01 f303 	lsl.w	r3, r1, r3
 80063a2:	43d9      	mvns	r1, r3
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80063a8:	4313      	orrs	r3, r2
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3724      	adds	r7, #36	@ 0x24
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr

080063b6 <LL_USART_Enable>:
{
 80063b6:	b480      	push	{r7}
 80063b8:	b083      	sub	sp, #12
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f043 0201 	orr.w	r2, r3, #1
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	601a      	str	r2, [r3, #0]
}
 80063ca:	bf00      	nop
 80063cc:	370c      	adds	r7, #12
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr

080063d6 <LL_USART_DisableFIFO>:
{
 80063d6:	b480      	push	{r7}
 80063d8:	b083      	sub	sp, #12
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	601a      	str	r2, [r3, #0]
}
 80063ea:	bf00      	nop
 80063ec:	370c      	adds	r7, #12
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr

080063f6 <LL_USART_SetTXFIFOThreshold>:
{
 80063f6:	b480      	push	{r7}
 80063f8:	b089      	sub	sp, #36	@ 0x24
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
 80063fe:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	3308      	adds	r3, #8
 8006404:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	e853 3f00 	ldrex	r3, [r3]
 800640c:	60bb      	str	r3, [r7, #8]
   return(result);
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	075b      	lsls	r3, r3, #29
 8006418:	4313      	orrs	r3, r2
 800641a:	61fb      	str	r3, [r7, #28]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	3308      	adds	r3, #8
 8006420:	69fa      	ldr	r2, [r7, #28]
 8006422:	61ba      	str	r2, [r7, #24]
 8006424:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006426:	6979      	ldr	r1, [r7, #20]
 8006428:	69ba      	ldr	r2, [r7, #24]
 800642a:	e841 2300 	strex	r3, r2, [r1]
 800642e:	613b      	str	r3, [r7, #16]
   return(result);
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d1e4      	bne.n	8006400 <LL_USART_SetTXFIFOThreshold+0xa>
}
 8006436:	bf00      	nop
 8006438:	bf00      	nop
 800643a:	3724      	adds	r7, #36	@ 0x24
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <LL_USART_SetRXFIFOThreshold>:
{
 8006444:	b480      	push	{r7}
 8006446:	b089      	sub	sp, #36	@ 0x24
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	3308      	adds	r3, #8
 8006452:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	e853 3f00 	ldrex	r3, [r3]
 800645a:	60bb      	str	r3, [r7, #8]
   return(result);
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	065b      	lsls	r3, r3, #25
 8006466:	4313      	orrs	r3, r2
 8006468:	61fb      	str	r3, [r7, #28]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	3308      	adds	r3, #8
 800646e:	69fa      	ldr	r2, [r7, #28]
 8006470:	61ba      	str	r2, [r7, #24]
 8006472:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006474:	6979      	ldr	r1, [r7, #20]
 8006476:	69ba      	ldr	r2, [r7, #24]
 8006478:	e841 2300 	strex	r3, r2, [r1]
 800647c:	613b      	str	r3, [r7, #16]
   return(result);
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d1e4      	bne.n	800644e <LL_USART_SetRXFIFOThreshold+0xa>
}
 8006484:	bf00      	nop
 8006486:	bf00      	nop
 8006488:	3724      	adds	r7, #36	@ 0x24
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr

08006492 <LL_USART_ConfigAsyncMode>:
{
 8006492:	b480      	push	{r7}
 8006494:	b083      	sub	sp, #12
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	609a      	str	r2, [r3, #8]
}
 80064b2:	bf00      	nop
 80064b4:	370c      	adds	r7, #12
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr

080064be <LL_USART_IsActiveFlag_TEACK>:
{
 80064be:	b480      	push	{r7}
 80064c0:	b083      	sub	sp, #12
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	69db      	ldr	r3, [r3, #28]
 80064ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80064ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80064d2:	d101      	bne.n	80064d8 <LL_USART_IsActiveFlag_TEACK+0x1a>
 80064d4:	2301      	movs	r3, #1
 80064d6:	e000      	b.n	80064da <LL_USART_IsActiveFlag_TEACK+0x1c>
 80064d8:	2300      	movs	r3, #0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	370c      	adds	r7, #12
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr

080064e6 <LL_USART_IsActiveFlag_REACK>:
{
 80064e6:	b480      	push	{r7}
 80064e8:	b083      	sub	sp, #12
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	69db      	ldr	r3, [r3, #28]
 80064f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80064f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80064fa:	d101      	bne.n	8006500 <LL_USART_IsActiveFlag_REACK+0x1a>
 80064fc:	2301      	movs	r3, #1
 80064fe:	e000      	b.n	8006502 <LL_USART_IsActiveFlag_REACK+0x1c>
 8006500:	2300      	movs	r3, #0
}
 8006502:	4618      	mov	r0, r3
 8006504:	370c      	adds	r7, #12
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr
	...

08006510 <LL_AHB4_GRP1_EnableClock>:
{
 8006510:	b480      	push	{r7}
 8006512:	b085      	sub	sp, #20
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB4ENR, Periphs);
 8006518:	4b0a      	ldr	r3, [pc, #40]	@ (8006544 <LL_AHB4_GRP1_EnableClock+0x34>)
 800651a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800651e:	4909      	ldr	r1, [pc, #36]	@ (8006544 <LL_AHB4_GRP1_EnableClock+0x34>)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	4313      	orrs	r3, r2
 8006524:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 8006528:	4b06      	ldr	r3, [pc, #24]	@ (8006544 <LL_AHB4_GRP1_EnableClock+0x34>)
 800652a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4013      	ands	r3, r2
 8006532:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006534:	68fb      	ldr	r3, [r7, #12]
}
 8006536:	bf00      	nop
 8006538:	3714      	adds	r7, #20
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr
 8006542:	bf00      	nop
 8006544:	58024400 	.word	0x58024400

08006548 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8006548:	b480      	push	{r7}
 800654a:	b085      	sub	sp, #20
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8006550:	4b0a      	ldr	r3, [pc, #40]	@ (800657c <LL_APB2_GRP1_EnableClock+0x34>)
 8006552:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8006556:	4909      	ldr	r1, [pc, #36]	@ (800657c <LL_APB2_GRP1_EnableClock+0x34>)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4313      	orrs	r3, r2
 800655c:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8006560:	4b06      	ldr	r3, [pc, #24]	@ (800657c <LL_APB2_GRP1_EnableClock+0x34>)
 8006562:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4013      	ands	r3, r2
 800656a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800656c:	68fb      	ldr	r3, [r7, #12]
}
 800656e:	bf00      	nop
 8006570:	3714      	adds	r7, #20
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr
 800657a:	bf00      	nop
 800657c:	58024400 	.word	0x58024400

08006580 <MX_UART4_Init>:
UART_HandleTypeDef huart7;
UART_HandleTypeDef huart2;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8006584:	4b22      	ldr	r3, [pc, #136]	@ (8006610 <MX_UART4_Init+0x90>)
 8006586:	4a23      	ldr	r2, [pc, #140]	@ (8006614 <MX_UART4_Init+0x94>)
 8006588:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800658a:	4b21      	ldr	r3, [pc, #132]	@ (8006610 <MX_UART4_Init+0x90>)
 800658c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006590:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8006592:	4b1f      	ldr	r3, [pc, #124]	@ (8006610 <MX_UART4_Init+0x90>)
 8006594:	2200      	movs	r2, #0
 8006596:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8006598:	4b1d      	ldr	r3, [pc, #116]	@ (8006610 <MX_UART4_Init+0x90>)
 800659a:	2200      	movs	r2, #0
 800659c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800659e:	4b1c      	ldr	r3, [pc, #112]	@ (8006610 <MX_UART4_Init+0x90>)
 80065a0:	2200      	movs	r2, #0
 80065a2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_RX;
 80065a4:	4b1a      	ldr	r3, [pc, #104]	@ (8006610 <MX_UART4_Init+0x90>)
 80065a6:	2204      	movs	r2, #4
 80065a8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80065aa:	4b19      	ldr	r3, [pc, #100]	@ (8006610 <MX_UART4_Init+0x90>)
 80065ac:	2200      	movs	r2, #0
 80065ae:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80065b0:	4b17      	ldr	r3, [pc, #92]	@ (8006610 <MX_UART4_Init+0x90>)
 80065b2:	2200      	movs	r2, #0
 80065b4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80065b6:	4b16      	ldr	r3, [pc, #88]	@ (8006610 <MX_UART4_Init+0x90>)
 80065b8:	2200      	movs	r2, #0
 80065ba:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80065bc:	4b14      	ldr	r3, [pc, #80]	@ (8006610 <MX_UART4_Init+0x90>)
 80065be:	2200      	movs	r2, #0
 80065c0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80065c2:	4b13      	ldr	r3, [pc, #76]	@ (8006610 <MX_UART4_Init+0x90>)
 80065c4:	2200      	movs	r2, #0
 80065c6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80065c8:	4811      	ldr	r0, [pc, #68]	@ (8006610 <MX_UART4_Init+0x90>)
 80065ca:	f00b f813 	bl	80115f4 <HAL_UART_Init>
 80065ce:	4603      	mov	r3, r0
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d001      	beq.n	80065d8 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80065d4:	f7fe f9ea 	bl	80049ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80065d8:	2100      	movs	r1, #0
 80065da:	480d      	ldr	r0, [pc, #52]	@ (8006610 <MX_UART4_Init+0x90>)
 80065dc:	f00d fbff 	bl	8013dde <HAL_UARTEx_SetTxFifoThreshold>
 80065e0:	4603      	mov	r3, r0
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d001      	beq.n	80065ea <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80065e6:	f7fe f9e1 	bl	80049ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80065ea:	2100      	movs	r1, #0
 80065ec:	4808      	ldr	r0, [pc, #32]	@ (8006610 <MX_UART4_Init+0x90>)
 80065ee:	f00d fc34 	bl	8013e5a <HAL_UARTEx_SetRxFifoThreshold>
 80065f2:	4603      	mov	r3, r0
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d001      	beq.n	80065fc <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80065f8:	f7fe f9d8 	bl	80049ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80065fc:	4804      	ldr	r0, [pc, #16]	@ (8006610 <MX_UART4_Init+0x90>)
 80065fe:	f00d fbb5 	bl	8013d6c <HAL_UARTEx_DisableFifoMode>
 8006602:	4603      	mov	r3, r0
 8006604:	2b00      	cmp	r3, #0
 8006606:	d001      	beq.n	800660c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8006608:	f7fe f9d0 	bl	80049ac <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800660c:	bf00      	nop
 800660e:	bd80      	pop	{r7, pc}
 8006610:	24001014 	.word	0x24001014
 8006614:	40004c00 	.word	0x40004c00

08006618 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 800661c:	4b22      	ldr	r3, [pc, #136]	@ (80066a8 <MX_UART7_Init+0x90>)
 800661e:	4a23      	ldr	r2, [pc, #140]	@ (80066ac <MX_UART7_Init+0x94>)
 8006620:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8006622:	4b21      	ldr	r3, [pc, #132]	@ (80066a8 <MX_UART7_Init+0x90>)
 8006624:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006628:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800662a:	4b1f      	ldr	r3, [pc, #124]	@ (80066a8 <MX_UART7_Init+0x90>)
 800662c:	2200      	movs	r2, #0
 800662e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8006630:	4b1d      	ldr	r3, [pc, #116]	@ (80066a8 <MX_UART7_Init+0x90>)
 8006632:	2200      	movs	r2, #0
 8006634:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8006636:	4b1c      	ldr	r3, [pc, #112]	@ (80066a8 <MX_UART7_Init+0x90>)
 8006638:	2200      	movs	r2, #0
 800663a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 800663c:	4b1a      	ldr	r3, [pc, #104]	@ (80066a8 <MX_UART7_Init+0x90>)
 800663e:	220c      	movs	r2, #12
 8006640:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006642:	4b19      	ldr	r3, [pc, #100]	@ (80066a8 <MX_UART7_Init+0x90>)
 8006644:	2200      	movs	r2, #0
 8006646:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8006648:	4b17      	ldr	r3, [pc, #92]	@ (80066a8 <MX_UART7_Init+0x90>)
 800664a:	2200      	movs	r2, #0
 800664c:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800664e:	4b16      	ldr	r3, [pc, #88]	@ (80066a8 <MX_UART7_Init+0x90>)
 8006650:	2200      	movs	r2, #0
 8006652:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006654:	4b14      	ldr	r3, [pc, #80]	@ (80066a8 <MX_UART7_Init+0x90>)
 8006656:	2200      	movs	r2, #0
 8006658:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800665a:	4b13      	ldr	r3, [pc, #76]	@ (80066a8 <MX_UART7_Init+0x90>)
 800665c:	2200      	movs	r2, #0
 800665e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8006660:	4811      	ldr	r0, [pc, #68]	@ (80066a8 <MX_UART7_Init+0x90>)
 8006662:	f00a ffc7 	bl	80115f4 <HAL_UART_Init>
 8006666:	4603      	mov	r3, r0
 8006668:	2b00      	cmp	r3, #0
 800666a:	d001      	beq.n	8006670 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 800666c:	f7fe f99e 	bl	80049ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006670:	2100      	movs	r1, #0
 8006672:	480d      	ldr	r0, [pc, #52]	@ (80066a8 <MX_UART7_Init+0x90>)
 8006674:	f00d fbb3 	bl	8013dde <HAL_UARTEx_SetTxFifoThreshold>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d001      	beq.n	8006682 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 800667e:	f7fe f995 	bl	80049ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006682:	2100      	movs	r1, #0
 8006684:	4808      	ldr	r0, [pc, #32]	@ (80066a8 <MX_UART7_Init+0x90>)
 8006686:	f00d fbe8 	bl	8013e5a <HAL_UARTEx_SetRxFifoThreshold>
 800668a:	4603      	mov	r3, r0
 800668c:	2b00      	cmp	r3, #0
 800668e:	d001      	beq.n	8006694 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8006690:	f7fe f98c 	bl	80049ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8006694:	4804      	ldr	r0, [pc, #16]	@ (80066a8 <MX_UART7_Init+0x90>)
 8006696:	f00d fb69 	bl	8013d6c <HAL_UARTEx_DisableFifoMode>
 800669a:	4603      	mov	r3, r0
 800669c:	2b00      	cmp	r3, #0
 800669e:	d001      	beq.n	80066a4 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 80066a0:	f7fe f984 	bl	80049ac <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80066a4:	bf00      	nop
 80066a6:	bd80      	pop	{r7, pc}
 80066a8:	240010a8 	.word	0x240010a8
 80066ac:	40007800 	.word	0x40007800

080066b0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80066b4:	4b22      	ldr	r3, [pc, #136]	@ (8006740 <MX_USART2_UART_Init+0x90>)
 80066b6:	4a23      	ldr	r2, [pc, #140]	@ (8006744 <MX_USART2_UART_Init+0x94>)
 80066b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80066ba:	4b21      	ldr	r3, [pc, #132]	@ (8006740 <MX_USART2_UART_Init+0x90>)
 80066bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80066c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80066c2:	4b1f      	ldr	r3, [pc, #124]	@ (8006740 <MX_USART2_UART_Init+0x90>)
 80066c4:	2200      	movs	r2, #0
 80066c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80066c8:	4b1d      	ldr	r3, [pc, #116]	@ (8006740 <MX_USART2_UART_Init+0x90>)
 80066ca:	2200      	movs	r2, #0
 80066cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80066ce:	4b1c      	ldr	r3, [pc, #112]	@ (8006740 <MX_USART2_UART_Init+0x90>)
 80066d0:	2200      	movs	r2, #0
 80066d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80066d4:	4b1a      	ldr	r3, [pc, #104]	@ (8006740 <MX_USART2_UART_Init+0x90>)
 80066d6:	220c      	movs	r2, #12
 80066d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80066da:	4b19      	ldr	r3, [pc, #100]	@ (8006740 <MX_USART2_UART_Init+0x90>)
 80066dc:	2200      	movs	r2, #0
 80066de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80066e0:	4b17      	ldr	r3, [pc, #92]	@ (8006740 <MX_USART2_UART_Init+0x90>)
 80066e2:	2200      	movs	r2, #0
 80066e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80066e6:	4b16      	ldr	r3, [pc, #88]	@ (8006740 <MX_USART2_UART_Init+0x90>)
 80066e8:	2200      	movs	r2, #0
 80066ea:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80066ec:	4b14      	ldr	r3, [pc, #80]	@ (8006740 <MX_USART2_UART_Init+0x90>)
 80066ee:	2200      	movs	r2, #0
 80066f0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80066f2:	4b13      	ldr	r3, [pc, #76]	@ (8006740 <MX_USART2_UART_Init+0x90>)
 80066f4:	2200      	movs	r2, #0
 80066f6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80066f8:	4811      	ldr	r0, [pc, #68]	@ (8006740 <MX_USART2_UART_Init+0x90>)
 80066fa:	f00a ff7b 	bl	80115f4 <HAL_UART_Init>
 80066fe:	4603      	mov	r3, r0
 8006700:	2b00      	cmp	r3, #0
 8006702:	d001      	beq.n	8006708 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8006704:	f7fe f952 	bl	80049ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006708:	2100      	movs	r1, #0
 800670a:	480d      	ldr	r0, [pc, #52]	@ (8006740 <MX_USART2_UART_Init+0x90>)
 800670c:	f00d fb67 	bl	8013dde <HAL_UARTEx_SetTxFifoThreshold>
 8006710:	4603      	mov	r3, r0
 8006712:	2b00      	cmp	r3, #0
 8006714:	d001      	beq.n	800671a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8006716:	f7fe f949 	bl	80049ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800671a:	2100      	movs	r1, #0
 800671c:	4808      	ldr	r0, [pc, #32]	@ (8006740 <MX_USART2_UART_Init+0x90>)
 800671e:	f00d fb9c 	bl	8013e5a <HAL_UARTEx_SetRxFifoThreshold>
 8006722:	4603      	mov	r3, r0
 8006724:	2b00      	cmp	r3, #0
 8006726:	d001      	beq.n	800672c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8006728:	f7fe f940 	bl	80049ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800672c:	4804      	ldr	r0, [pc, #16]	@ (8006740 <MX_USART2_UART_Init+0x90>)
 800672e:	f00d fb1d 	bl	8013d6c <HAL_UARTEx_DisableFifoMode>
 8006732:	4603      	mov	r3, r0
 8006734:	2b00      	cmp	r3, #0
 8006736:	d001      	beq.n	800673c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8006738:	f7fe f938 	bl	80049ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800673c:	bf00      	nop
 800673e:	bd80      	pop	{r7, pc}
 8006740:	2400113c 	.word	0x2400113c
 8006744:	40004400 	.word	0x40004400

08006748 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b0bc      	sub	sp, #240	@ 0xf0
 800674c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800674e:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8006752:	2220      	movs	r2, #32
 8006754:	2100      	movs	r1, #0
 8006756:	4618      	mov	r0, r3
 8006758:	f014 fc56 	bl	801b008 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800675c:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8006760:	2200      	movs	r2, #0
 8006762:	601a      	str	r2, [r3, #0]
 8006764:	605a      	str	r2, [r3, #4]
 8006766:	609a      	str	r2, [r3, #8]
 8006768:	60da      	str	r2, [r3, #12]
 800676a:	611a      	str	r2, [r3, #16]
 800676c:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800676e:	463b      	mov	r3, r7
 8006770:	22b8      	movs	r2, #184	@ 0xb8
 8006772:	2100      	movs	r1, #0
 8006774:	4618      	mov	r0, r3
 8006776:	f014 fc47 	bl	801b008 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800677a:	f04f 0201 	mov.w	r2, #1
 800677e:	f04f 0300 	mov.w	r3, #0
 8006782:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8006786:	2300      	movs	r3, #0
 8006788:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800678a:	463b      	mov	r3, r7
 800678c:	4618      	mov	r0, r3
 800678e:	f007 fa29 	bl	800dbe4 <HAL_RCCEx_PeriphCLKConfig>
 8006792:	4603      	mov	r3, r0
 8006794:	2b00      	cmp	r3, #0
 8006796:	d001      	beq.n	800679c <MX_USART6_UART_Init+0x54>
  {
    Error_Handler();
 8006798:	f7fe f908 	bl	80049ac <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 800679c:	2020      	movs	r0, #32
 800679e:	f7ff fed3 	bl	8006548 <LL_APB2_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOC);
 80067a2:	2004      	movs	r0, #4
 80067a4:	f7ff feb4 	bl	8006510 <LL_AHB4_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80067a8:	23c0      	movs	r3, #192	@ 0xc0
 80067aa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80067ae:	2302      	movs	r3, #2
 80067b0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80067b4:	2300      	movs	r3, #0
 80067b6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80067ba:	2300      	movs	r3, #0
 80067bc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80067c0:	2300      	movs	r3, #0
 80067c2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80067c6:	2307      	movs	r3, #7
 80067c8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80067cc:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 80067d0:	4619      	mov	r1, r3
 80067d2:	482a      	ldr	r0, [pc, #168]	@ (800687c <MX_USART6_UART_Init+0x134>)
 80067d4:	f00d fca8 	bl	8014128 <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 80067d8:	f7ff fd64 	bl	80062a4 <__NVIC_GetPriorityGrouping>
 80067dc:	4603      	mov	r3, r0
 80067de:	2200      	movs	r2, #0
 80067e0:	2105      	movs	r1, #5
 80067e2:	4618      	mov	r0, r3
 80067e4:	f7ff fdb4 	bl	8006350 <NVIC_EncodePriority>
 80067e8:	4603      	mov	r3, r0
 80067ea:	4619      	mov	r1, r3
 80067ec:	2047      	movs	r0, #71	@ 0x47
 80067ee:	f7ff fd85 	bl	80062fc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 80067f2:	2047      	movs	r0, #71	@ 0x47
 80067f4:	f7ff fd64 	bl	80062c0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 80067f8:	2300      	movs	r3, #0
 80067fa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  USART_InitStruct.BaudRate = 115200;
 80067fe:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8006802:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8006806:	2300      	movs	r3, #0
 8006808:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800680c:	2300      	movs	r3, #0
 800680e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8006812:	2300      	movs	r3, #0
 8006814:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8006818:	230c      	movs	r3, #12
 800681a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800681e:	2300      	movs	r3, #0
 8006820:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8006824:	2300      	movs	r3, #0
 8006826:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  LL_USART_Init(USART6, &USART_InitStruct);
 800682a:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800682e:	4619      	mov	r1, r3
 8006830:	4813      	ldr	r0, [pc, #76]	@ (8006880 <MX_USART6_UART_Init+0x138>)
 8006832:	f00f f933 	bl	8015a9c <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART6, LL_USART_FIFOTHRESHOLD_1_8);
 8006836:	2100      	movs	r1, #0
 8006838:	4811      	ldr	r0, [pc, #68]	@ (8006880 <MX_USART6_UART_Init+0x138>)
 800683a:	f7ff fddc 	bl	80063f6 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART6, LL_USART_FIFOTHRESHOLD_1_8);
 800683e:	2100      	movs	r1, #0
 8006840:	480f      	ldr	r0, [pc, #60]	@ (8006880 <MX_USART6_UART_Init+0x138>)
 8006842:	f7ff fdff 	bl	8006444 <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART6);
 8006846:	480e      	ldr	r0, [pc, #56]	@ (8006880 <MX_USART6_UART_Init+0x138>)
 8006848:	f7ff fdc5 	bl	80063d6 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART6);
 800684c:	480c      	ldr	r0, [pc, #48]	@ (8006880 <MX_USART6_UART_Init+0x138>)
 800684e:	f7ff fe20 	bl	8006492 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART6 */

  /* USER CODE END WKUPType USART6 */

  LL_USART_Enable(USART6);
 8006852:	480b      	ldr	r0, [pc, #44]	@ (8006880 <MX_USART6_UART_Init+0x138>)
 8006854:	f7ff fdaf 	bl	80063b6 <LL_USART_Enable>

  /* Polling USART6 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART6))) || (!(LL_USART_IsActiveFlag_REACK(USART6))))
 8006858:	bf00      	nop
 800685a:	4809      	ldr	r0, [pc, #36]	@ (8006880 <MX_USART6_UART_Init+0x138>)
 800685c:	f7ff fe2f 	bl	80064be <LL_USART_IsActiveFlag_TEACK>
 8006860:	4603      	mov	r3, r0
 8006862:	2b00      	cmp	r3, #0
 8006864:	d0f9      	beq.n	800685a <MX_USART6_UART_Init+0x112>
 8006866:	4806      	ldr	r0, [pc, #24]	@ (8006880 <MX_USART6_UART_Init+0x138>)
 8006868:	f7ff fe3d 	bl	80064e6 <LL_USART_IsActiveFlag_REACK>
 800686c:	4603      	mov	r3, r0
 800686e:	2b00      	cmp	r3, #0
 8006870:	d0f3      	beq.n	800685a <MX_USART6_UART_Init+0x112>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8006872:	bf00      	nop
 8006874:	bf00      	nop
 8006876:	37f0      	adds	r7, #240	@ 0xf0
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}
 800687c:	58020800 	.word	0x58020800
 8006880:	40011400 	.word	0x40011400

08006884 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b0bc      	sub	sp, #240	@ 0xf0
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800688c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8006890:	2200      	movs	r2, #0
 8006892:	601a      	str	r2, [r3, #0]
 8006894:	605a      	str	r2, [r3, #4]
 8006896:	609a      	str	r2, [r3, #8]
 8006898:	60da      	str	r2, [r3, #12]
 800689a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800689c:	f107 0320 	add.w	r3, r7, #32
 80068a0:	22b8      	movs	r2, #184	@ 0xb8
 80068a2:	2100      	movs	r1, #0
 80068a4:	4618      	mov	r0, r3
 80068a6:	f014 fbaf 	bl	801b008 <memset>
  if(uartHandle->Instance==UART4)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a7a      	ldr	r2, [pc, #488]	@ (8006a98 <HAL_UART_MspInit+0x214>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d14e      	bne.n	8006952 <HAL_UART_MspInit+0xce>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80068b4:	f04f 0202 	mov.w	r2, #2
 80068b8:	f04f 0300 	mov.w	r3, #0
 80068bc:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80068c0:	2300      	movs	r3, #0
 80068c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80068c6:	f107 0320 	add.w	r3, r7, #32
 80068ca:	4618      	mov	r0, r3
 80068cc:	f007 f98a 	bl	800dbe4 <HAL_RCCEx_PeriphCLKConfig>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d001      	beq.n	80068da <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80068d6:	f7fe f869 	bl	80049ac <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80068da:	4b70      	ldr	r3, [pc, #448]	@ (8006a9c <HAL_UART_MspInit+0x218>)
 80068dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80068e0:	4a6e      	ldr	r2, [pc, #440]	@ (8006a9c <HAL_UART_MspInit+0x218>)
 80068e2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80068e6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80068ea:	4b6c      	ldr	r3, [pc, #432]	@ (8006a9c <HAL_UART_MspInit+0x218>)
 80068ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80068f0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80068f4:	61fb      	str	r3, [r7, #28]
 80068f6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80068f8:	4b68      	ldr	r3, [pc, #416]	@ (8006a9c <HAL_UART_MspInit+0x218>)
 80068fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80068fe:	4a67      	ldr	r2, [pc, #412]	@ (8006a9c <HAL_UART_MspInit+0x218>)
 8006900:	f043 0308 	orr.w	r3, r3, #8
 8006904:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006908:	4b64      	ldr	r3, [pc, #400]	@ (8006a9c <HAL_UART_MspInit+0x218>)
 800690a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800690e:	f003 0308 	and.w	r3, r3, #8
 8006912:	61bb      	str	r3, [r7, #24]
 8006914:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006916:	2303      	movs	r3, #3
 8006918:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800691c:	2302      	movs	r3, #2
 800691e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006922:	2300      	movs	r3, #0
 8006924:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006928:	2300      	movs	r3, #0
 800692a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800692e:	2308      	movs	r3, #8
 8006930:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006934:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8006938:	4619      	mov	r1, r3
 800693a:	4859      	ldr	r0, [pc, #356]	@ (8006aa0 <HAL_UART_MspInit+0x21c>)
 800693c:	f003 f902 	bl	8009b44 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8006940:	2200      	movs	r2, #0
 8006942:	2105      	movs	r1, #5
 8006944:	2034      	movs	r0, #52	@ 0x34
 8006946:	f000 fa17 	bl	8006d78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800694a:	2034      	movs	r0, #52	@ 0x34
 800694c:	f000 fa2e 	bl	8006dac <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8006950:	e09e      	b.n	8006a90 <HAL_UART_MspInit+0x20c>
  else if(uartHandle->Instance==UART7)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a53      	ldr	r2, [pc, #332]	@ (8006aa4 <HAL_UART_MspInit+0x220>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d14e      	bne.n	80069fa <HAL_UART_MspInit+0x176>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 800695c:	f04f 0202 	mov.w	r2, #2
 8006960:	f04f 0300 	mov.w	r3, #0
 8006964:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006968:	2300      	movs	r3, #0
 800696a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800696e:	f107 0320 	add.w	r3, r7, #32
 8006972:	4618      	mov	r0, r3
 8006974:	f007 f936 	bl	800dbe4 <HAL_RCCEx_PeriphCLKConfig>
 8006978:	4603      	mov	r3, r0
 800697a:	2b00      	cmp	r3, #0
 800697c:	d001      	beq.n	8006982 <HAL_UART_MspInit+0xfe>
      Error_Handler();
 800697e:	f7fe f815 	bl	80049ac <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8006982:	4b46      	ldr	r3, [pc, #280]	@ (8006a9c <HAL_UART_MspInit+0x218>)
 8006984:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006988:	4a44      	ldr	r2, [pc, #272]	@ (8006a9c <HAL_UART_MspInit+0x218>)
 800698a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800698e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006992:	4b42      	ldr	r3, [pc, #264]	@ (8006a9c <HAL_UART_MspInit+0x218>)
 8006994:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006998:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800699c:	617b      	str	r3, [r7, #20]
 800699e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80069a0:	4b3e      	ldr	r3, [pc, #248]	@ (8006a9c <HAL_UART_MspInit+0x218>)
 80069a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80069a6:	4a3d      	ldr	r2, [pc, #244]	@ (8006a9c <HAL_UART_MspInit+0x218>)
 80069a8:	f043 0302 	orr.w	r3, r3, #2
 80069ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80069b0:	4b3a      	ldr	r3, [pc, #232]	@ (8006a9c <HAL_UART_MspInit+0x218>)
 80069b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80069b6:	f003 0302 	and.w	r3, r3, #2
 80069ba:	613b      	str	r3, [r7, #16]
 80069bc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80069be:	2318      	movs	r3, #24
 80069c0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069c4:	2302      	movs	r3, #2
 80069c6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069ca:	2300      	movs	r3, #0
 80069cc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069d0:	2300      	movs	r3, #0
 80069d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF11_UART7;
 80069d6:	230b      	movs	r3, #11
 80069d8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80069dc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80069e0:	4619      	mov	r1, r3
 80069e2:	4831      	ldr	r0, [pc, #196]	@ (8006aa8 <HAL_UART_MspInit+0x224>)
 80069e4:	f003 f8ae 	bl	8009b44 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 80069e8:	2200      	movs	r2, #0
 80069ea:	2105      	movs	r1, #5
 80069ec:	2052      	movs	r0, #82	@ 0x52
 80069ee:	f000 f9c3 	bl	8006d78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 80069f2:	2052      	movs	r0, #82	@ 0x52
 80069f4:	f000 f9da 	bl	8006dac <HAL_NVIC_EnableIRQ>
}
 80069f8:	e04a      	b.n	8006a90 <HAL_UART_MspInit+0x20c>
  else if(uartHandle->Instance==USART2)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a2b      	ldr	r2, [pc, #172]	@ (8006aac <HAL_UART_MspInit+0x228>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d145      	bne.n	8006a90 <HAL_UART_MspInit+0x20c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8006a04:	f04f 0202 	mov.w	r2, #2
 8006a08:	f04f 0300 	mov.w	r3, #0
 8006a0c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006a10:	2300      	movs	r3, #0
 8006a12:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006a16:	f107 0320 	add.w	r3, r7, #32
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f007 f8e2 	bl	800dbe4 <HAL_RCCEx_PeriphCLKConfig>
 8006a20:	4603      	mov	r3, r0
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d001      	beq.n	8006a2a <HAL_UART_MspInit+0x1a6>
      Error_Handler();
 8006a26:	f7fd ffc1 	bl	80049ac <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006a2a:	4b1c      	ldr	r3, [pc, #112]	@ (8006a9c <HAL_UART_MspInit+0x218>)
 8006a2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006a30:	4a1a      	ldr	r2, [pc, #104]	@ (8006a9c <HAL_UART_MspInit+0x218>)
 8006a32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a36:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006a3a:	4b18      	ldr	r3, [pc, #96]	@ (8006a9c <HAL_UART_MspInit+0x218>)
 8006a3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006a40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a44:	60fb      	str	r3, [r7, #12]
 8006a46:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006a48:	4b14      	ldr	r3, [pc, #80]	@ (8006a9c <HAL_UART_MspInit+0x218>)
 8006a4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006a4e:	4a13      	ldr	r2, [pc, #76]	@ (8006a9c <HAL_UART_MspInit+0x218>)
 8006a50:	f043 0308 	orr.w	r3, r3, #8
 8006a54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006a58:	4b10      	ldr	r3, [pc, #64]	@ (8006a9c <HAL_UART_MspInit+0x218>)
 8006a5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006a5e:	f003 0308 	and.w	r3, r3, #8
 8006a62:	60bb      	str	r3, [r7, #8]
 8006a64:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8006a66:	2360      	movs	r3, #96	@ 0x60
 8006a68:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a6c:	2302      	movs	r3, #2
 8006a6e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a72:	2300      	movs	r3, #0
 8006a74:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006a7e:	2307      	movs	r3, #7
 8006a80:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006a84:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8006a88:	4619      	mov	r1, r3
 8006a8a:	4805      	ldr	r0, [pc, #20]	@ (8006aa0 <HAL_UART_MspInit+0x21c>)
 8006a8c:	f003 f85a 	bl	8009b44 <HAL_GPIO_Init>
}
 8006a90:	bf00      	nop
 8006a92:	37f0      	adds	r7, #240	@ 0xf0
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}
 8006a98:	40004c00 	.word	0x40004c00
 8006a9c:	58024400 	.word	0x58024400
 8006aa0:	58020c00 	.word	0x58020c00
 8006aa4:	40007800 	.word	0x40007800
 8006aa8:	58020400 	.word	0x58020400
 8006aac:	40004400 	.word	0x40004400

08006ab0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8006ab0:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8006aec <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8006ab4:	f7ff f802 	bl	8005abc <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8006ab8:	f7fe ff70 	bl	800599c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006abc:	480c      	ldr	r0, [pc, #48]	@ (8006af0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006abe:	490d      	ldr	r1, [pc, #52]	@ (8006af4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006ac0:	4a0d      	ldr	r2, [pc, #52]	@ (8006af8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006ac2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006ac4:	e002      	b.n	8006acc <LoopCopyDataInit>

08006ac6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006ac6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006ac8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006aca:	3304      	adds	r3, #4

08006acc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006acc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006ace:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006ad0:	d3f9      	bcc.n	8006ac6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8006afc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006ad4:	4c0a      	ldr	r4, [pc, #40]	@ (8006b00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006ad6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006ad8:	e001      	b.n	8006ade <LoopFillZerobss>

08006ada <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006ada:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006adc:	3204      	adds	r2, #4

08006ade <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006ade:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006ae0:	d3fb      	bcc.n	8006ada <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006ae2:	f014 fb67 	bl	801b1b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006ae6:	f7fd fac7 	bl	8004078 <main>
  bx  lr
 8006aea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006aec:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8006af0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8006af4:	240001f4 	.word	0x240001f4
  ldr r2, =_sidata
 8006af8:	0801fe6c 	.word	0x0801fe6c
  ldr r2, =_sbss
 8006afc:	240001f4 	.word	0x240001f4
  ldr r4, =_ebss
 8006b00:	24005d08 	.word	0x24005d08

08006b04 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006b04:	e7fe      	b.n	8006b04 <ADC3_IRQHandler>
	...

08006b08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b082      	sub	sp, #8
 8006b0c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006b0e:	2003      	movs	r0, #3
 8006b10:	f000 f927 	bl	8006d62 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006b14:	f006 fe4e 	bl	800d7b4 <HAL_RCC_GetSysClockFreq>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	4b15      	ldr	r3, [pc, #84]	@ (8006b70 <HAL_Init+0x68>)
 8006b1c:	699b      	ldr	r3, [r3, #24]
 8006b1e:	0a1b      	lsrs	r3, r3, #8
 8006b20:	f003 030f 	and.w	r3, r3, #15
 8006b24:	4913      	ldr	r1, [pc, #76]	@ (8006b74 <HAL_Init+0x6c>)
 8006b26:	5ccb      	ldrb	r3, [r1, r3]
 8006b28:	f003 031f 	and.w	r3, r3, #31
 8006b2c:	fa22 f303 	lsr.w	r3, r2, r3
 8006b30:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006b32:	4b0f      	ldr	r3, [pc, #60]	@ (8006b70 <HAL_Init+0x68>)
 8006b34:	699b      	ldr	r3, [r3, #24]
 8006b36:	f003 030f 	and.w	r3, r3, #15
 8006b3a:	4a0e      	ldr	r2, [pc, #56]	@ (8006b74 <HAL_Init+0x6c>)
 8006b3c:	5cd3      	ldrb	r3, [r2, r3]
 8006b3e:	f003 031f 	and.w	r3, r3, #31
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	fa22 f303 	lsr.w	r3, r2, r3
 8006b48:	4a0b      	ldr	r2, [pc, #44]	@ (8006b78 <HAL_Init+0x70>)
 8006b4a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006b4c:	4a0b      	ldr	r2, [pc, #44]	@ (8006b7c <HAL_Init+0x74>)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006b52:	200f      	movs	r0, #15
 8006b54:	f7fe fbce 	bl	80052f4 <HAL_InitTick>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d001      	beq.n	8006b62 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e002      	b.n	8006b68 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006b62:	f7fe fba9 	bl	80052b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006b66:	2300      	movs	r3, #0
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3708      	adds	r7, #8
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}
 8006b70:	58024400 	.word	0x58024400
 8006b74:	0801f97c 	.word	0x0801f97c
 8006b78:	2400001c 	.word	0x2400001c
 8006b7c:	24000018 	.word	0x24000018

08006b80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006b80:	b480      	push	{r7}
 8006b82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006b84:	4b06      	ldr	r3, [pc, #24]	@ (8006ba0 <HAL_IncTick+0x20>)
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	461a      	mov	r2, r3
 8006b8a:	4b06      	ldr	r3, [pc, #24]	@ (8006ba4 <HAL_IncTick+0x24>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4413      	add	r3, r2
 8006b90:	4a04      	ldr	r2, [pc, #16]	@ (8006ba4 <HAL_IncTick+0x24>)
 8006b92:	6013      	str	r3, [r2, #0]
}
 8006b94:	bf00      	nop
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr
 8006b9e:	bf00      	nop
 8006ba0:	24000024 	.word	0x24000024
 8006ba4:	240011d0 	.word	0x240011d0

08006ba8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	af00      	add	r7, sp, #0
  return uwTick;
 8006bac:	4b03      	ldr	r3, [pc, #12]	@ (8006bbc <HAL_GetTick+0x14>)
 8006bae:	681b      	ldr	r3, [r3, #0]
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr
 8006bba:	bf00      	nop
 8006bbc:	240011d0 	.word	0x240011d0

08006bc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b084      	sub	sp, #16
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006bc8:	f7ff ffee 	bl	8006ba8 <HAL_GetTick>
 8006bcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006bd8:	d005      	beq.n	8006be6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006bda:	4b0a      	ldr	r3, [pc, #40]	@ (8006c04 <HAL_Delay+0x44>)
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	461a      	mov	r2, r3
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	4413      	add	r3, r2
 8006be4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006be6:	bf00      	nop
 8006be8:	f7ff ffde 	bl	8006ba8 <HAL_GetTick>
 8006bec:	4602      	mov	r2, r0
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	1ad3      	subs	r3, r2, r3
 8006bf2:	68fa      	ldr	r2, [r7, #12]
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d8f7      	bhi.n	8006be8 <HAL_Delay+0x28>
  {
  }
}
 8006bf8:	bf00      	nop
 8006bfa:	bf00      	nop
 8006bfc:	3710      	adds	r7, #16
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	24000024 	.word	0x24000024

08006c08 <__NVIC_SetPriorityGrouping>:
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b085      	sub	sp, #20
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f003 0307 	and.w	r3, r3, #7
 8006c16:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006c18:	4b0b      	ldr	r3, [pc, #44]	@ (8006c48 <__NVIC_SetPriorityGrouping+0x40>)
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006c1e:	68ba      	ldr	r2, [r7, #8]
 8006c20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006c24:	4013      	ands	r3, r2
 8006c26:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006c30:	4b06      	ldr	r3, [pc, #24]	@ (8006c4c <__NVIC_SetPriorityGrouping+0x44>)
 8006c32:	4313      	orrs	r3, r2
 8006c34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006c36:	4a04      	ldr	r2, [pc, #16]	@ (8006c48 <__NVIC_SetPriorityGrouping+0x40>)
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	60d3      	str	r3, [r2, #12]
}
 8006c3c:	bf00      	nop
 8006c3e:	3714      	adds	r7, #20
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr
 8006c48:	e000ed00 	.word	0xe000ed00
 8006c4c:	05fa0000 	.word	0x05fa0000

08006c50 <__NVIC_GetPriorityGrouping>:
{
 8006c50:	b480      	push	{r7}
 8006c52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006c54:	4b04      	ldr	r3, [pc, #16]	@ (8006c68 <__NVIC_GetPriorityGrouping+0x18>)
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	0a1b      	lsrs	r3, r3, #8
 8006c5a:	f003 0307 	and.w	r3, r3, #7
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr
 8006c68:	e000ed00 	.word	0xe000ed00

08006c6c <__NVIC_EnableIRQ>:
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	4603      	mov	r3, r0
 8006c74:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006c76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	db0b      	blt.n	8006c96 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006c7e:	88fb      	ldrh	r3, [r7, #6]
 8006c80:	f003 021f 	and.w	r2, r3, #31
 8006c84:	4907      	ldr	r1, [pc, #28]	@ (8006ca4 <__NVIC_EnableIRQ+0x38>)
 8006c86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006c8a:	095b      	lsrs	r3, r3, #5
 8006c8c:	2001      	movs	r0, #1
 8006c8e:	fa00 f202 	lsl.w	r2, r0, r2
 8006c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006c96:	bf00      	nop
 8006c98:	370c      	adds	r7, #12
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr
 8006ca2:	bf00      	nop
 8006ca4:	e000e100 	.word	0xe000e100

08006ca8 <__NVIC_SetPriority>:
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b083      	sub	sp, #12
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	4603      	mov	r3, r0
 8006cb0:	6039      	str	r1, [r7, #0]
 8006cb2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006cb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	db0a      	blt.n	8006cd2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	b2da      	uxtb	r2, r3
 8006cc0:	490c      	ldr	r1, [pc, #48]	@ (8006cf4 <__NVIC_SetPriority+0x4c>)
 8006cc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006cc6:	0112      	lsls	r2, r2, #4
 8006cc8:	b2d2      	uxtb	r2, r2
 8006cca:	440b      	add	r3, r1
 8006ccc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006cd0:	e00a      	b.n	8006ce8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	b2da      	uxtb	r2, r3
 8006cd6:	4908      	ldr	r1, [pc, #32]	@ (8006cf8 <__NVIC_SetPriority+0x50>)
 8006cd8:	88fb      	ldrh	r3, [r7, #6]
 8006cda:	f003 030f 	and.w	r3, r3, #15
 8006cde:	3b04      	subs	r3, #4
 8006ce0:	0112      	lsls	r2, r2, #4
 8006ce2:	b2d2      	uxtb	r2, r2
 8006ce4:	440b      	add	r3, r1
 8006ce6:	761a      	strb	r2, [r3, #24]
}
 8006ce8:	bf00      	nop
 8006cea:	370c      	adds	r7, #12
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr
 8006cf4:	e000e100 	.word	0xe000e100
 8006cf8:	e000ed00 	.word	0xe000ed00

08006cfc <NVIC_EncodePriority>:
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b089      	sub	sp, #36	@ 0x24
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	60f8      	str	r0, [r7, #12]
 8006d04:	60b9      	str	r1, [r7, #8]
 8006d06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f003 0307 	and.w	r3, r3, #7
 8006d0e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006d10:	69fb      	ldr	r3, [r7, #28]
 8006d12:	f1c3 0307 	rsb	r3, r3, #7
 8006d16:	2b04      	cmp	r3, #4
 8006d18:	bf28      	it	cs
 8006d1a:	2304      	movcs	r3, #4
 8006d1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006d1e:	69fb      	ldr	r3, [r7, #28]
 8006d20:	3304      	adds	r3, #4
 8006d22:	2b06      	cmp	r3, #6
 8006d24:	d902      	bls.n	8006d2c <NVIC_EncodePriority+0x30>
 8006d26:	69fb      	ldr	r3, [r7, #28]
 8006d28:	3b03      	subs	r3, #3
 8006d2a:	e000      	b.n	8006d2e <NVIC_EncodePriority+0x32>
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d30:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	fa02 f303 	lsl.w	r3, r2, r3
 8006d3a:	43da      	mvns	r2, r3
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	401a      	ands	r2, r3
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006d44:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8006d4e:	43d9      	mvns	r1, r3
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d54:	4313      	orrs	r3, r2
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3724      	adds	r7, #36	@ 0x24
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr

08006d62 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006d62:	b580      	push	{r7, lr}
 8006d64:	b082      	sub	sp, #8
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f7ff ff4c 	bl	8006c08 <__NVIC_SetPriorityGrouping>
}
 8006d70:	bf00      	nop
 8006d72:	3708      	adds	r7, #8
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b086      	sub	sp, #24
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	4603      	mov	r3, r0
 8006d80:	60b9      	str	r1, [r7, #8]
 8006d82:	607a      	str	r2, [r7, #4]
 8006d84:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006d86:	f7ff ff63 	bl	8006c50 <__NVIC_GetPriorityGrouping>
 8006d8a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	68b9      	ldr	r1, [r7, #8]
 8006d90:	6978      	ldr	r0, [r7, #20]
 8006d92:	f7ff ffb3 	bl	8006cfc <NVIC_EncodePriority>
 8006d96:	4602      	mov	r2, r0
 8006d98:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006d9c:	4611      	mov	r1, r2
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f7ff ff82 	bl	8006ca8 <__NVIC_SetPriority>
}
 8006da4:	bf00      	nop
 8006da6:	3718      	adds	r7, #24
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b082      	sub	sp, #8
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	4603      	mov	r3, r0
 8006db4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006db6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f7ff ff56 	bl	8006c6c <__NVIC_EnableIRQ>
}
 8006dc0:	bf00      	nop
 8006dc2:	3708      	adds	r7, #8
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8006dcc:	f3bf 8f5f 	dmb	sy
}
 8006dd0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8006dd2:	4b07      	ldr	r3, [pc, #28]	@ (8006df0 <HAL_MPU_Disable+0x28>)
 8006dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dd6:	4a06      	ldr	r2, [pc, #24]	@ (8006df0 <HAL_MPU_Disable+0x28>)
 8006dd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ddc:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8006dde:	4b05      	ldr	r3, [pc, #20]	@ (8006df4 <HAL_MPU_Disable+0x2c>)
 8006de0:	2200      	movs	r2, #0
 8006de2:	605a      	str	r2, [r3, #4]
}
 8006de4:	bf00      	nop
 8006de6:	46bd      	mov	sp, r7
 8006de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dec:	4770      	bx	lr
 8006dee:	bf00      	nop
 8006df0:	e000ed00 	.word	0xe000ed00
 8006df4:	e000ed90 	.word	0xe000ed90

08006df8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006e00:	4a0b      	ldr	r2, [pc, #44]	@ (8006e30 <HAL_MPU_Enable+0x38>)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f043 0301 	orr.w	r3, r3, #1
 8006e08:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8006e0a:	4b0a      	ldr	r3, [pc, #40]	@ (8006e34 <HAL_MPU_Enable+0x3c>)
 8006e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e0e:	4a09      	ldr	r2, [pc, #36]	@ (8006e34 <HAL_MPU_Enable+0x3c>)
 8006e10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e14:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8006e16:	f3bf 8f4f 	dsb	sy
}
 8006e1a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006e1c:	f3bf 8f6f 	isb	sy
}
 8006e20:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8006e22:	bf00      	nop
 8006e24:	370c      	adds	r7, #12
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr
 8006e2e:	bf00      	nop
 8006e30:	e000ed90 	.word	0xe000ed90
 8006e34:	e000ed00 	.word	0xe000ed00

08006e38 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b083      	sub	sp, #12
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	785a      	ldrb	r2, [r3, #1]
 8006e44:	4b1b      	ldr	r3, [pc, #108]	@ (8006eb4 <HAL_MPU_ConfigRegion+0x7c>)
 8006e46:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8006e48:	4b1a      	ldr	r3, [pc, #104]	@ (8006eb4 <HAL_MPU_ConfigRegion+0x7c>)
 8006e4a:	691b      	ldr	r3, [r3, #16]
 8006e4c:	4a19      	ldr	r2, [pc, #100]	@ (8006eb4 <HAL_MPU_ConfigRegion+0x7c>)
 8006e4e:	f023 0301 	bic.w	r3, r3, #1
 8006e52:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8006e54:	4a17      	ldr	r2, [pc, #92]	@ (8006eb4 <HAL_MPU_ConfigRegion+0x7c>)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	7b1b      	ldrb	r3, [r3, #12]
 8006e60:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	7adb      	ldrb	r3, [r3, #11]
 8006e66:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006e68:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	7a9b      	ldrb	r3, [r3, #10]
 8006e6e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006e70:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	7b5b      	ldrb	r3, [r3, #13]
 8006e76:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006e78:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	7b9b      	ldrb	r3, [r3, #14]
 8006e7e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006e80:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	7bdb      	ldrb	r3, [r3, #15]
 8006e86:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006e88:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	7a5b      	ldrb	r3, [r3, #9]
 8006e8e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006e90:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	7a1b      	ldrb	r3, [r3, #8]
 8006e96:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006e98:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8006e9a:	687a      	ldr	r2, [r7, #4]
 8006e9c:	7812      	ldrb	r2, [r2, #0]
 8006e9e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006ea0:	4a04      	ldr	r2, [pc, #16]	@ (8006eb4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006ea2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006ea4:	6113      	str	r3, [r2, #16]
}
 8006ea6:	bf00      	nop
 8006ea8:	370c      	adds	r7, #12
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr
 8006eb2:	bf00      	nop
 8006eb4:	e000ed90 	.word	0xe000ed90

08006eb8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b086      	sub	sp, #24
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8006ec0:	f7ff fe72 	bl	8006ba8 <HAL_GetTick>
 8006ec4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d101      	bne.n	8006ed0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e312      	b.n	80074f6 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a66      	ldr	r2, [pc, #408]	@ (8007070 <HAL_DMA_Init+0x1b8>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d04a      	beq.n	8006f70 <HAL_DMA_Init+0xb8>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a65      	ldr	r2, [pc, #404]	@ (8007074 <HAL_DMA_Init+0x1bc>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d045      	beq.n	8006f70 <HAL_DMA_Init+0xb8>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a63      	ldr	r2, [pc, #396]	@ (8007078 <HAL_DMA_Init+0x1c0>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d040      	beq.n	8006f70 <HAL_DMA_Init+0xb8>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a62      	ldr	r2, [pc, #392]	@ (800707c <HAL_DMA_Init+0x1c4>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d03b      	beq.n	8006f70 <HAL_DMA_Init+0xb8>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a60      	ldr	r2, [pc, #384]	@ (8007080 <HAL_DMA_Init+0x1c8>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d036      	beq.n	8006f70 <HAL_DMA_Init+0xb8>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a5f      	ldr	r2, [pc, #380]	@ (8007084 <HAL_DMA_Init+0x1cc>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d031      	beq.n	8006f70 <HAL_DMA_Init+0xb8>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a5d      	ldr	r2, [pc, #372]	@ (8007088 <HAL_DMA_Init+0x1d0>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d02c      	beq.n	8006f70 <HAL_DMA_Init+0xb8>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a5c      	ldr	r2, [pc, #368]	@ (800708c <HAL_DMA_Init+0x1d4>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d027      	beq.n	8006f70 <HAL_DMA_Init+0xb8>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a5a      	ldr	r2, [pc, #360]	@ (8007090 <HAL_DMA_Init+0x1d8>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d022      	beq.n	8006f70 <HAL_DMA_Init+0xb8>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a59      	ldr	r2, [pc, #356]	@ (8007094 <HAL_DMA_Init+0x1dc>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d01d      	beq.n	8006f70 <HAL_DMA_Init+0xb8>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a57      	ldr	r2, [pc, #348]	@ (8007098 <HAL_DMA_Init+0x1e0>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d018      	beq.n	8006f70 <HAL_DMA_Init+0xb8>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a56      	ldr	r2, [pc, #344]	@ (800709c <HAL_DMA_Init+0x1e4>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d013      	beq.n	8006f70 <HAL_DMA_Init+0xb8>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a54      	ldr	r2, [pc, #336]	@ (80070a0 <HAL_DMA_Init+0x1e8>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d00e      	beq.n	8006f70 <HAL_DMA_Init+0xb8>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a53      	ldr	r2, [pc, #332]	@ (80070a4 <HAL_DMA_Init+0x1ec>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d009      	beq.n	8006f70 <HAL_DMA_Init+0xb8>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a51      	ldr	r2, [pc, #324]	@ (80070a8 <HAL_DMA_Init+0x1f0>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d004      	beq.n	8006f70 <HAL_DMA_Init+0xb8>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a50      	ldr	r2, [pc, #320]	@ (80070ac <HAL_DMA_Init+0x1f4>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d101      	bne.n	8006f74 <HAL_DMA_Init+0xbc>
 8006f70:	2301      	movs	r3, #1
 8006f72:	e000      	b.n	8006f76 <HAL_DMA_Init+0xbe>
 8006f74:	2300      	movs	r3, #0
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	f000 813c 	beq.w	80071f4 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2202      	movs	r2, #2
 8006f80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a37      	ldr	r2, [pc, #220]	@ (8007070 <HAL_DMA_Init+0x1b8>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d04a      	beq.n	800702c <HAL_DMA_Init+0x174>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a36      	ldr	r2, [pc, #216]	@ (8007074 <HAL_DMA_Init+0x1bc>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d045      	beq.n	800702c <HAL_DMA_Init+0x174>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a34      	ldr	r2, [pc, #208]	@ (8007078 <HAL_DMA_Init+0x1c0>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d040      	beq.n	800702c <HAL_DMA_Init+0x174>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a33      	ldr	r2, [pc, #204]	@ (800707c <HAL_DMA_Init+0x1c4>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d03b      	beq.n	800702c <HAL_DMA_Init+0x174>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a31      	ldr	r2, [pc, #196]	@ (8007080 <HAL_DMA_Init+0x1c8>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d036      	beq.n	800702c <HAL_DMA_Init+0x174>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a30      	ldr	r2, [pc, #192]	@ (8007084 <HAL_DMA_Init+0x1cc>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d031      	beq.n	800702c <HAL_DMA_Init+0x174>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a2e      	ldr	r2, [pc, #184]	@ (8007088 <HAL_DMA_Init+0x1d0>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d02c      	beq.n	800702c <HAL_DMA_Init+0x174>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a2d      	ldr	r2, [pc, #180]	@ (800708c <HAL_DMA_Init+0x1d4>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d027      	beq.n	800702c <HAL_DMA_Init+0x174>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a2b      	ldr	r2, [pc, #172]	@ (8007090 <HAL_DMA_Init+0x1d8>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d022      	beq.n	800702c <HAL_DMA_Init+0x174>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a2a      	ldr	r2, [pc, #168]	@ (8007094 <HAL_DMA_Init+0x1dc>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d01d      	beq.n	800702c <HAL_DMA_Init+0x174>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a28      	ldr	r2, [pc, #160]	@ (8007098 <HAL_DMA_Init+0x1e0>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d018      	beq.n	800702c <HAL_DMA_Init+0x174>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a27      	ldr	r2, [pc, #156]	@ (800709c <HAL_DMA_Init+0x1e4>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d013      	beq.n	800702c <HAL_DMA_Init+0x174>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a25      	ldr	r2, [pc, #148]	@ (80070a0 <HAL_DMA_Init+0x1e8>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d00e      	beq.n	800702c <HAL_DMA_Init+0x174>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a24      	ldr	r2, [pc, #144]	@ (80070a4 <HAL_DMA_Init+0x1ec>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d009      	beq.n	800702c <HAL_DMA_Init+0x174>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a22      	ldr	r2, [pc, #136]	@ (80070a8 <HAL_DMA_Init+0x1f0>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d004      	beq.n	800702c <HAL_DMA_Init+0x174>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a21      	ldr	r2, [pc, #132]	@ (80070ac <HAL_DMA_Init+0x1f4>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d108      	bne.n	800703e <HAL_DMA_Init+0x186>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f022 0201 	bic.w	r2, r2, #1
 800703a:	601a      	str	r2, [r3, #0]
 800703c:	e007      	b.n	800704e <HAL_DMA_Init+0x196>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f022 0201 	bic.w	r2, r2, #1
 800704c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800704e:	e02f      	b.n	80070b0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007050:	f7ff fdaa 	bl	8006ba8 <HAL_GetTick>
 8007054:	4602      	mov	r2, r0
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	1ad3      	subs	r3, r2, r3
 800705a:	2b05      	cmp	r3, #5
 800705c:	d928      	bls.n	80070b0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2220      	movs	r2, #32
 8007062:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2203      	movs	r2, #3
 8007068:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800706c:	2301      	movs	r3, #1
 800706e:	e242      	b.n	80074f6 <HAL_DMA_Init+0x63e>
 8007070:	40020010 	.word	0x40020010
 8007074:	40020028 	.word	0x40020028
 8007078:	40020040 	.word	0x40020040
 800707c:	40020058 	.word	0x40020058
 8007080:	40020070 	.word	0x40020070
 8007084:	40020088 	.word	0x40020088
 8007088:	400200a0 	.word	0x400200a0
 800708c:	400200b8 	.word	0x400200b8
 8007090:	40020410 	.word	0x40020410
 8007094:	40020428 	.word	0x40020428
 8007098:	40020440 	.word	0x40020440
 800709c:	40020458 	.word	0x40020458
 80070a0:	40020470 	.word	0x40020470
 80070a4:	40020488 	.word	0x40020488
 80070a8:	400204a0 	.word	0x400204a0
 80070ac:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f003 0301 	and.w	r3, r3, #1
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d1c8      	bne.n	8007050 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80070c6:	697a      	ldr	r2, [r7, #20]
 80070c8:	4b83      	ldr	r3, [pc, #524]	@ (80072d8 <HAL_DMA_Init+0x420>)
 80070ca:	4013      	ands	r3, r2
 80070cc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80070d6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	691b      	ldr	r3, [r3, #16]
 80070dc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80070e2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	699b      	ldr	r3, [r3, #24]
 80070e8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80070ee:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6a1b      	ldr	r3, [r3, #32]
 80070f4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80070f6:	697a      	ldr	r2, [r7, #20]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007100:	2b04      	cmp	r3, #4
 8007102:	d107      	bne.n	8007114 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800710c:	4313      	orrs	r3, r2
 800710e:	697a      	ldr	r2, [r7, #20]
 8007110:	4313      	orrs	r3, r2
 8007112:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	2b28      	cmp	r3, #40	@ 0x28
 800711a:	d903      	bls.n	8007124 <HAL_DMA_Init+0x26c>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	2b2e      	cmp	r3, #46	@ 0x2e
 8007122:	d91f      	bls.n	8007164 <HAL_DMA_Init+0x2ac>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	2b3e      	cmp	r3, #62	@ 0x3e
 800712a:	d903      	bls.n	8007134 <HAL_DMA_Init+0x27c>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	2b42      	cmp	r3, #66	@ 0x42
 8007132:	d917      	bls.n	8007164 <HAL_DMA_Init+0x2ac>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	2b46      	cmp	r3, #70	@ 0x46
 800713a:	d903      	bls.n	8007144 <HAL_DMA_Init+0x28c>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	2b48      	cmp	r3, #72	@ 0x48
 8007142:	d90f      	bls.n	8007164 <HAL_DMA_Init+0x2ac>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	2b4e      	cmp	r3, #78	@ 0x4e
 800714a:	d903      	bls.n	8007154 <HAL_DMA_Init+0x29c>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	2b52      	cmp	r3, #82	@ 0x52
 8007152:	d907      	bls.n	8007164 <HAL_DMA_Init+0x2ac>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	2b73      	cmp	r3, #115	@ 0x73
 800715a:	d905      	bls.n	8007168 <HAL_DMA_Init+0x2b0>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	2b77      	cmp	r3, #119	@ 0x77
 8007162:	d801      	bhi.n	8007168 <HAL_DMA_Init+0x2b0>
 8007164:	2301      	movs	r3, #1
 8007166:	e000      	b.n	800716a <HAL_DMA_Init+0x2b2>
 8007168:	2300      	movs	r3, #0
 800716a:	2b00      	cmp	r3, #0
 800716c:	d003      	beq.n	8007176 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007174:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	697a      	ldr	r2, [r7, #20]
 800717c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	695b      	ldr	r3, [r3, #20]
 8007184:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	f023 0307 	bic.w	r3, r3, #7
 800718c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007192:	697a      	ldr	r2, [r7, #20]
 8007194:	4313      	orrs	r3, r2
 8007196:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800719c:	2b04      	cmp	r3, #4
 800719e:	d117      	bne.n	80071d0 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071a4:	697a      	ldr	r2, [r7, #20]
 80071a6:	4313      	orrs	r3, r2
 80071a8:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d00e      	beq.n	80071d0 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f002 fb3c 	bl	8009830 <DMA_CheckFifoParam>
 80071b8:	4603      	mov	r3, r0
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d008      	beq.n	80071d0 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2240      	movs	r2, #64	@ 0x40
 80071c2:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2201      	movs	r2, #1
 80071c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80071cc:	2301      	movs	r3, #1
 80071ce:	e192      	b.n	80074f6 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	697a      	ldr	r2, [r7, #20]
 80071d6:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f002 fa77 	bl	80096cc <DMA_CalcBaseAndBitshift>
 80071de:	4603      	mov	r3, r0
 80071e0:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071e6:	f003 031f 	and.w	r3, r3, #31
 80071ea:	223f      	movs	r2, #63	@ 0x3f
 80071ec:	409a      	lsls	r2, r3
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	609a      	str	r2, [r3, #8]
 80071f2:	e0c8      	b.n	8007386 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a38      	ldr	r2, [pc, #224]	@ (80072dc <HAL_DMA_Init+0x424>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d022      	beq.n	8007244 <HAL_DMA_Init+0x38c>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a37      	ldr	r2, [pc, #220]	@ (80072e0 <HAL_DMA_Init+0x428>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d01d      	beq.n	8007244 <HAL_DMA_Init+0x38c>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a35      	ldr	r2, [pc, #212]	@ (80072e4 <HAL_DMA_Init+0x42c>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d018      	beq.n	8007244 <HAL_DMA_Init+0x38c>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a34      	ldr	r2, [pc, #208]	@ (80072e8 <HAL_DMA_Init+0x430>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d013      	beq.n	8007244 <HAL_DMA_Init+0x38c>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a32      	ldr	r2, [pc, #200]	@ (80072ec <HAL_DMA_Init+0x434>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d00e      	beq.n	8007244 <HAL_DMA_Init+0x38c>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a31      	ldr	r2, [pc, #196]	@ (80072f0 <HAL_DMA_Init+0x438>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d009      	beq.n	8007244 <HAL_DMA_Init+0x38c>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a2f      	ldr	r2, [pc, #188]	@ (80072f4 <HAL_DMA_Init+0x43c>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d004      	beq.n	8007244 <HAL_DMA_Init+0x38c>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a2e      	ldr	r2, [pc, #184]	@ (80072f8 <HAL_DMA_Init+0x440>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d101      	bne.n	8007248 <HAL_DMA_Init+0x390>
 8007244:	2301      	movs	r3, #1
 8007246:	e000      	b.n	800724a <HAL_DMA_Init+0x392>
 8007248:	2300      	movs	r3, #0
 800724a:	2b00      	cmp	r3, #0
 800724c:	f000 8092 	beq.w	8007374 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a21      	ldr	r2, [pc, #132]	@ (80072dc <HAL_DMA_Init+0x424>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d021      	beq.n	800729e <HAL_DMA_Init+0x3e6>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a20      	ldr	r2, [pc, #128]	@ (80072e0 <HAL_DMA_Init+0x428>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d01c      	beq.n	800729e <HAL_DMA_Init+0x3e6>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a1e      	ldr	r2, [pc, #120]	@ (80072e4 <HAL_DMA_Init+0x42c>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d017      	beq.n	800729e <HAL_DMA_Init+0x3e6>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a1d      	ldr	r2, [pc, #116]	@ (80072e8 <HAL_DMA_Init+0x430>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d012      	beq.n	800729e <HAL_DMA_Init+0x3e6>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a1b      	ldr	r2, [pc, #108]	@ (80072ec <HAL_DMA_Init+0x434>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d00d      	beq.n	800729e <HAL_DMA_Init+0x3e6>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a1a      	ldr	r2, [pc, #104]	@ (80072f0 <HAL_DMA_Init+0x438>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d008      	beq.n	800729e <HAL_DMA_Init+0x3e6>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a18      	ldr	r2, [pc, #96]	@ (80072f4 <HAL_DMA_Init+0x43c>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d003      	beq.n	800729e <HAL_DMA_Init+0x3e6>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a17      	ldr	r2, [pc, #92]	@ (80072f8 <HAL_DMA_Init+0x440>)
 800729c:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2202      	movs	r2, #2
 80072a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2200      	movs	r2, #0
 80072aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80072b6:	697a      	ldr	r2, [r7, #20]
 80072b8:	4b10      	ldr	r3, [pc, #64]	@ (80072fc <HAL_DMA_Init+0x444>)
 80072ba:	4013      	ands	r3, r2
 80072bc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	2b40      	cmp	r3, #64	@ 0x40
 80072c4:	d01c      	beq.n	8007300 <HAL_DMA_Init+0x448>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	2b80      	cmp	r3, #128	@ 0x80
 80072cc:	d102      	bne.n	80072d4 <HAL_DMA_Init+0x41c>
 80072ce:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80072d2:	e016      	b.n	8007302 <HAL_DMA_Init+0x44a>
 80072d4:	2300      	movs	r3, #0
 80072d6:	e014      	b.n	8007302 <HAL_DMA_Init+0x44a>
 80072d8:	fe10803f 	.word	0xfe10803f
 80072dc:	58025408 	.word	0x58025408
 80072e0:	5802541c 	.word	0x5802541c
 80072e4:	58025430 	.word	0x58025430
 80072e8:	58025444 	.word	0x58025444
 80072ec:	58025458 	.word	0x58025458
 80072f0:	5802546c 	.word	0x5802546c
 80072f4:	58025480 	.word	0x58025480
 80072f8:	58025494 	.word	0x58025494
 80072fc:	fffe000f 	.word	0xfffe000f
 8007300:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007302:	687a      	ldr	r2, [r7, #4]
 8007304:	68d2      	ldr	r2, [r2, #12]
 8007306:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007308:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	691b      	ldr	r3, [r3, #16]
 800730e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007310:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	695b      	ldr	r3, [r3, #20]
 8007316:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007318:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	699b      	ldr	r3, [r3, #24]
 800731e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007320:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	69db      	ldr	r3, [r3, #28]
 8007326:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007328:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6a1b      	ldr	r3, [r3, #32]
 800732e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007330:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007332:	697a      	ldr	r2, [r7, #20]
 8007334:	4313      	orrs	r3, r2
 8007336:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	697a      	ldr	r2, [r7, #20]
 800733e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	461a      	mov	r2, r3
 8007346:	4b6e      	ldr	r3, [pc, #440]	@ (8007500 <HAL_DMA_Init+0x648>)
 8007348:	4413      	add	r3, r2
 800734a:	4a6e      	ldr	r2, [pc, #440]	@ (8007504 <HAL_DMA_Init+0x64c>)
 800734c:	fba2 2303 	umull	r2, r3, r2, r3
 8007350:	091b      	lsrs	r3, r3, #4
 8007352:	009a      	lsls	r2, r3, #2
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f002 f9b7 	bl	80096cc <DMA_CalcBaseAndBitshift>
 800735e:	4603      	mov	r3, r0
 8007360:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007366:	f003 031f 	and.w	r3, r3, #31
 800736a:	2201      	movs	r2, #1
 800736c:	409a      	lsls	r2, r3
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	605a      	str	r2, [r3, #4]
 8007372:	e008      	b.n	8007386 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2240      	movs	r2, #64	@ 0x40
 8007378:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2203      	movs	r2, #3
 800737e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	e0b7      	b.n	80074f6 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a5f      	ldr	r2, [pc, #380]	@ (8007508 <HAL_DMA_Init+0x650>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d072      	beq.n	8007476 <HAL_DMA_Init+0x5be>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a5d      	ldr	r2, [pc, #372]	@ (800750c <HAL_DMA_Init+0x654>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d06d      	beq.n	8007476 <HAL_DMA_Init+0x5be>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a5c      	ldr	r2, [pc, #368]	@ (8007510 <HAL_DMA_Init+0x658>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d068      	beq.n	8007476 <HAL_DMA_Init+0x5be>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a5a      	ldr	r2, [pc, #360]	@ (8007514 <HAL_DMA_Init+0x65c>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d063      	beq.n	8007476 <HAL_DMA_Init+0x5be>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a59      	ldr	r2, [pc, #356]	@ (8007518 <HAL_DMA_Init+0x660>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d05e      	beq.n	8007476 <HAL_DMA_Init+0x5be>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a57      	ldr	r2, [pc, #348]	@ (800751c <HAL_DMA_Init+0x664>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d059      	beq.n	8007476 <HAL_DMA_Init+0x5be>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a56      	ldr	r2, [pc, #344]	@ (8007520 <HAL_DMA_Init+0x668>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d054      	beq.n	8007476 <HAL_DMA_Init+0x5be>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a54      	ldr	r2, [pc, #336]	@ (8007524 <HAL_DMA_Init+0x66c>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d04f      	beq.n	8007476 <HAL_DMA_Init+0x5be>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a53      	ldr	r2, [pc, #332]	@ (8007528 <HAL_DMA_Init+0x670>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d04a      	beq.n	8007476 <HAL_DMA_Init+0x5be>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a51      	ldr	r2, [pc, #324]	@ (800752c <HAL_DMA_Init+0x674>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d045      	beq.n	8007476 <HAL_DMA_Init+0x5be>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a50      	ldr	r2, [pc, #320]	@ (8007530 <HAL_DMA_Init+0x678>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d040      	beq.n	8007476 <HAL_DMA_Init+0x5be>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a4e      	ldr	r2, [pc, #312]	@ (8007534 <HAL_DMA_Init+0x67c>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d03b      	beq.n	8007476 <HAL_DMA_Init+0x5be>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a4d      	ldr	r2, [pc, #308]	@ (8007538 <HAL_DMA_Init+0x680>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d036      	beq.n	8007476 <HAL_DMA_Init+0x5be>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a4b      	ldr	r2, [pc, #300]	@ (800753c <HAL_DMA_Init+0x684>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d031      	beq.n	8007476 <HAL_DMA_Init+0x5be>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a4a      	ldr	r2, [pc, #296]	@ (8007540 <HAL_DMA_Init+0x688>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d02c      	beq.n	8007476 <HAL_DMA_Init+0x5be>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a48      	ldr	r2, [pc, #288]	@ (8007544 <HAL_DMA_Init+0x68c>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d027      	beq.n	8007476 <HAL_DMA_Init+0x5be>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a47      	ldr	r2, [pc, #284]	@ (8007548 <HAL_DMA_Init+0x690>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d022      	beq.n	8007476 <HAL_DMA_Init+0x5be>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a45      	ldr	r2, [pc, #276]	@ (800754c <HAL_DMA_Init+0x694>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d01d      	beq.n	8007476 <HAL_DMA_Init+0x5be>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a44      	ldr	r2, [pc, #272]	@ (8007550 <HAL_DMA_Init+0x698>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d018      	beq.n	8007476 <HAL_DMA_Init+0x5be>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a42      	ldr	r2, [pc, #264]	@ (8007554 <HAL_DMA_Init+0x69c>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d013      	beq.n	8007476 <HAL_DMA_Init+0x5be>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a41      	ldr	r2, [pc, #260]	@ (8007558 <HAL_DMA_Init+0x6a0>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d00e      	beq.n	8007476 <HAL_DMA_Init+0x5be>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a3f      	ldr	r2, [pc, #252]	@ (800755c <HAL_DMA_Init+0x6a4>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d009      	beq.n	8007476 <HAL_DMA_Init+0x5be>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a3e      	ldr	r2, [pc, #248]	@ (8007560 <HAL_DMA_Init+0x6a8>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d004      	beq.n	8007476 <HAL_DMA_Init+0x5be>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a3c      	ldr	r2, [pc, #240]	@ (8007564 <HAL_DMA_Init+0x6ac>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d101      	bne.n	800747a <HAL_DMA_Init+0x5c2>
 8007476:	2301      	movs	r3, #1
 8007478:	e000      	b.n	800747c <HAL_DMA_Init+0x5c4>
 800747a:	2300      	movs	r3, #0
 800747c:	2b00      	cmp	r3, #0
 800747e:	d032      	beq.n	80074e6 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f002 fa51 	bl	8009928 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	689b      	ldr	r3, [r3, #8]
 800748a:	2b80      	cmp	r3, #128	@ 0x80
 800748c:	d102      	bne.n	8007494 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	685a      	ldr	r2, [r3, #4]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800749c:	b2d2      	uxtb	r2, r2
 800749e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80074a8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d010      	beq.n	80074d4 <HAL_DMA_Init+0x61c>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	2b08      	cmp	r3, #8
 80074b8:	d80c      	bhi.n	80074d4 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f002 face 	bl	8009a5c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80074c4:	2200      	movs	r2, #0
 80074c6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074cc:	687a      	ldr	r2, [r7, #4]
 80074ce:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80074d0:	605a      	str	r2, [r3, #4]
 80074d2:	e008      	b.n	80074e6 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2200      	movs	r2, #0
 80074de:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2200      	movs	r2, #0
 80074ea:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2201      	movs	r2, #1
 80074f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80074f4:	2300      	movs	r3, #0
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3718      	adds	r7, #24
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
 80074fe:	bf00      	nop
 8007500:	a7fdabf8 	.word	0xa7fdabf8
 8007504:	cccccccd 	.word	0xcccccccd
 8007508:	40020010 	.word	0x40020010
 800750c:	40020028 	.word	0x40020028
 8007510:	40020040 	.word	0x40020040
 8007514:	40020058 	.word	0x40020058
 8007518:	40020070 	.word	0x40020070
 800751c:	40020088 	.word	0x40020088
 8007520:	400200a0 	.word	0x400200a0
 8007524:	400200b8 	.word	0x400200b8
 8007528:	40020410 	.word	0x40020410
 800752c:	40020428 	.word	0x40020428
 8007530:	40020440 	.word	0x40020440
 8007534:	40020458 	.word	0x40020458
 8007538:	40020470 	.word	0x40020470
 800753c:	40020488 	.word	0x40020488
 8007540:	400204a0 	.word	0x400204a0
 8007544:	400204b8 	.word	0x400204b8
 8007548:	58025408 	.word	0x58025408
 800754c:	5802541c 	.word	0x5802541c
 8007550:	58025430 	.word	0x58025430
 8007554:	58025444 	.word	0x58025444
 8007558:	58025458 	.word	0x58025458
 800755c:	5802546c 	.word	0x5802546c
 8007560:	58025480 	.word	0x58025480
 8007564:	58025494 	.word	0x58025494

08007568 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b086      	sub	sp, #24
 800756c:	af00      	add	r7, sp, #0
 800756e:	60f8      	str	r0, [r7, #12]
 8007570:	60b9      	str	r1, [r7, #8]
 8007572:	607a      	str	r2, [r7, #4]
 8007574:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007576:	2300      	movs	r3, #0
 8007578:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d101      	bne.n	8007584 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8007580:	2301      	movs	r3, #1
 8007582:	e226      	b.n	80079d2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800758a:	2b01      	cmp	r3, #1
 800758c:	d101      	bne.n	8007592 <HAL_DMA_Start_IT+0x2a>
 800758e:	2302      	movs	r3, #2
 8007590:	e21f      	b.n	80079d2 <HAL_DMA_Start_IT+0x46a>
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2201      	movs	r2, #1
 8007596:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80075a0:	b2db      	uxtb	r3, r3
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	f040 820a 	bne.w	80079bc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2202      	movs	r2, #2
 80075ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2200      	movs	r2, #0
 80075b4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a68      	ldr	r2, [pc, #416]	@ (800775c <HAL_DMA_Start_IT+0x1f4>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d04a      	beq.n	8007656 <HAL_DMA_Start_IT+0xee>
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a66      	ldr	r2, [pc, #408]	@ (8007760 <HAL_DMA_Start_IT+0x1f8>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d045      	beq.n	8007656 <HAL_DMA_Start_IT+0xee>
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a65      	ldr	r2, [pc, #404]	@ (8007764 <HAL_DMA_Start_IT+0x1fc>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d040      	beq.n	8007656 <HAL_DMA_Start_IT+0xee>
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a63      	ldr	r2, [pc, #396]	@ (8007768 <HAL_DMA_Start_IT+0x200>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d03b      	beq.n	8007656 <HAL_DMA_Start_IT+0xee>
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4a62      	ldr	r2, [pc, #392]	@ (800776c <HAL_DMA_Start_IT+0x204>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d036      	beq.n	8007656 <HAL_DMA_Start_IT+0xee>
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a60      	ldr	r2, [pc, #384]	@ (8007770 <HAL_DMA_Start_IT+0x208>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d031      	beq.n	8007656 <HAL_DMA_Start_IT+0xee>
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a5f      	ldr	r2, [pc, #380]	@ (8007774 <HAL_DMA_Start_IT+0x20c>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d02c      	beq.n	8007656 <HAL_DMA_Start_IT+0xee>
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a5d      	ldr	r2, [pc, #372]	@ (8007778 <HAL_DMA_Start_IT+0x210>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d027      	beq.n	8007656 <HAL_DMA_Start_IT+0xee>
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a5c      	ldr	r2, [pc, #368]	@ (800777c <HAL_DMA_Start_IT+0x214>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d022      	beq.n	8007656 <HAL_DMA_Start_IT+0xee>
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a5a      	ldr	r2, [pc, #360]	@ (8007780 <HAL_DMA_Start_IT+0x218>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d01d      	beq.n	8007656 <HAL_DMA_Start_IT+0xee>
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a59      	ldr	r2, [pc, #356]	@ (8007784 <HAL_DMA_Start_IT+0x21c>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d018      	beq.n	8007656 <HAL_DMA_Start_IT+0xee>
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a57      	ldr	r2, [pc, #348]	@ (8007788 <HAL_DMA_Start_IT+0x220>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d013      	beq.n	8007656 <HAL_DMA_Start_IT+0xee>
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a56      	ldr	r2, [pc, #344]	@ (800778c <HAL_DMA_Start_IT+0x224>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d00e      	beq.n	8007656 <HAL_DMA_Start_IT+0xee>
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a54      	ldr	r2, [pc, #336]	@ (8007790 <HAL_DMA_Start_IT+0x228>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d009      	beq.n	8007656 <HAL_DMA_Start_IT+0xee>
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a53      	ldr	r2, [pc, #332]	@ (8007794 <HAL_DMA_Start_IT+0x22c>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d004      	beq.n	8007656 <HAL_DMA_Start_IT+0xee>
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a51      	ldr	r2, [pc, #324]	@ (8007798 <HAL_DMA_Start_IT+0x230>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d108      	bne.n	8007668 <HAL_DMA_Start_IT+0x100>
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f022 0201 	bic.w	r2, r2, #1
 8007664:	601a      	str	r2, [r3, #0]
 8007666:	e007      	b.n	8007678 <HAL_DMA_Start_IT+0x110>
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	681a      	ldr	r2, [r3, #0]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f022 0201 	bic.w	r2, r2, #1
 8007676:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	68b9      	ldr	r1, [r7, #8]
 800767e:	68f8      	ldr	r0, [r7, #12]
 8007680:	f001 fe78 	bl	8009374 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a34      	ldr	r2, [pc, #208]	@ (800775c <HAL_DMA_Start_IT+0x1f4>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d04a      	beq.n	8007724 <HAL_DMA_Start_IT+0x1bc>
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a33      	ldr	r2, [pc, #204]	@ (8007760 <HAL_DMA_Start_IT+0x1f8>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d045      	beq.n	8007724 <HAL_DMA_Start_IT+0x1bc>
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a31      	ldr	r2, [pc, #196]	@ (8007764 <HAL_DMA_Start_IT+0x1fc>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d040      	beq.n	8007724 <HAL_DMA_Start_IT+0x1bc>
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a30      	ldr	r2, [pc, #192]	@ (8007768 <HAL_DMA_Start_IT+0x200>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d03b      	beq.n	8007724 <HAL_DMA_Start_IT+0x1bc>
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a2e      	ldr	r2, [pc, #184]	@ (800776c <HAL_DMA_Start_IT+0x204>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d036      	beq.n	8007724 <HAL_DMA_Start_IT+0x1bc>
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a2d      	ldr	r2, [pc, #180]	@ (8007770 <HAL_DMA_Start_IT+0x208>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d031      	beq.n	8007724 <HAL_DMA_Start_IT+0x1bc>
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a2b      	ldr	r2, [pc, #172]	@ (8007774 <HAL_DMA_Start_IT+0x20c>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d02c      	beq.n	8007724 <HAL_DMA_Start_IT+0x1bc>
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a2a      	ldr	r2, [pc, #168]	@ (8007778 <HAL_DMA_Start_IT+0x210>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d027      	beq.n	8007724 <HAL_DMA_Start_IT+0x1bc>
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a28      	ldr	r2, [pc, #160]	@ (800777c <HAL_DMA_Start_IT+0x214>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d022      	beq.n	8007724 <HAL_DMA_Start_IT+0x1bc>
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a27      	ldr	r2, [pc, #156]	@ (8007780 <HAL_DMA_Start_IT+0x218>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d01d      	beq.n	8007724 <HAL_DMA_Start_IT+0x1bc>
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a25      	ldr	r2, [pc, #148]	@ (8007784 <HAL_DMA_Start_IT+0x21c>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d018      	beq.n	8007724 <HAL_DMA_Start_IT+0x1bc>
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a24      	ldr	r2, [pc, #144]	@ (8007788 <HAL_DMA_Start_IT+0x220>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d013      	beq.n	8007724 <HAL_DMA_Start_IT+0x1bc>
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a22      	ldr	r2, [pc, #136]	@ (800778c <HAL_DMA_Start_IT+0x224>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d00e      	beq.n	8007724 <HAL_DMA_Start_IT+0x1bc>
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a21      	ldr	r2, [pc, #132]	@ (8007790 <HAL_DMA_Start_IT+0x228>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d009      	beq.n	8007724 <HAL_DMA_Start_IT+0x1bc>
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a1f      	ldr	r2, [pc, #124]	@ (8007794 <HAL_DMA_Start_IT+0x22c>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d004      	beq.n	8007724 <HAL_DMA_Start_IT+0x1bc>
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a1e      	ldr	r2, [pc, #120]	@ (8007798 <HAL_DMA_Start_IT+0x230>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d101      	bne.n	8007728 <HAL_DMA_Start_IT+0x1c0>
 8007724:	2301      	movs	r3, #1
 8007726:	e000      	b.n	800772a <HAL_DMA_Start_IT+0x1c2>
 8007728:	2300      	movs	r3, #0
 800772a:	2b00      	cmp	r3, #0
 800772c:	d036      	beq.n	800779c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f023 021e 	bic.w	r2, r3, #30
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f042 0216 	orr.w	r2, r2, #22
 8007740:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007746:	2b00      	cmp	r3, #0
 8007748:	d03e      	beq.n	80077c8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f042 0208 	orr.w	r2, r2, #8
 8007758:	601a      	str	r2, [r3, #0]
 800775a:	e035      	b.n	80077c8 <HAL_DMA_Start_IT+0x260>
 800775c:	40020010 	.word	0x40020010
 8007760:	40020028 	.word	0x40020028
 8007764:	40020040 	.word	0x40020040
 8007768:	40020058 	.word	0x40020058
 800776c:	40020070 	.word	0x40020070
 8007770:	40020088 	.word	0x40020088
 8007774:	400200a0 	.word	0x400200a0
 8007778:	400200b8 	.word	0x400200b8
 800777c:	40020410 	.word	0x40020410
 8007780:	40020428 	.word	0x40020428
 8007784:	40020440 	.word	0x40020440
 8007788:	40020458 	.word	0x40020458
 800778c:	40020470 	.word	0x40020470
 8007790:	40020488 	.word	0x40020488
 8007794:	400204a0 	.word	0x400204a0
 8007798:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f023 020e 	bic.w	r2, r3, #14
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f042 020a 	orr.w	r2, r2, #10
 80077ae:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d007      	beq.n	80077c8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	681a      	ldr	r2, [r3, #0]
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f042 0204 	orr.w	r2, r2, #4
 80077c6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a83      	ldr	r2, [pc, #524]	@ (80079dc <HAL_DMA_Start_IT+0x474>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d072      	beq.n	80078b8 <HAL_DMA_Start_IT+0x350>
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a82      	ldr	r2, [pc, #520]	@ (80079e0 <HAL_DMA_Start_IT+0x478>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d06d      	beq.n	80078b8 <HAL_DMA_Start_IT+0x350>
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a80      	ldr	r2, [pc, #512]	@ (80079e4 <HAL_DMA_Start_IT+0x47c>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d068      	beq.n	80078b8 <HAL_DMA_Start_IT+0x350>
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a7f      	ldr	r2, [pc, #508]	@ (80079e8 <HAL_DMA_Start_IT+0x480>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d063      	beq.n	80078b8 <HAL_DMA_Start_IT+0x350>
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a7d      	ldr	r2, [pc, #500]	@ (80079ec <HAL_DMA_Start_IT+0x484>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d05e      	beq.n	80078b8 <HAL_DMA_Start_IT+0x350>
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a7c      	ldr	r2, [pc, #496]	@ (80079f0 <HAL_DMA_Start_IT+0x488>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d059      	beq.n	80078b8 <HAL_DMA_Start_IT+0x350>
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a7a      	ldr	r2, [pc, #488]	@ (80079f4 <HAL_DMA_Start_IT+0x48c>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d054      	beq.n	80078b8 <HAL_DMA_Start_IT+0x350>
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a79      	ldr	r2, [pc, #484]	@ (80079f8 <HAL_DMA_Start_IT+0x490>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d04f      	beq.n	80078b8 <HAL_DMA_Start_IT+0x350>
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a77      	ldr	r2, [pc, #476]	@ (80079fc <HAL_DMA_Start_IT+0x494>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d04a      	beq.n	80078b8 <HAL_DMA_Start_IT+0x350>
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a76      	ldr	r2, [pc, #472]	@ (8007a00 <HAL_DMA_Start_IT+0x498>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d045      	beq.n	80078b8 <HAL_DMA_Start_IT+0x350>
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a74      	ldr	r2, [pc, #464]	@ (8007a04 <HAL_DMA_Start_IT+0x49c>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d040      	beq.n	80078b8 <HAL_DMA_Start_IT+0x350>
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a73      	ldr	r2, [pc, #460]	@ (8007a08 <HAL_DMA_Start_IT+0x4a0>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d03b      	beq.n	80078b8 <HAL_DMA_Start_IT+0x350>
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a71      	ldr	r2, [pc, #452]	@ (8007a0c <HAL_DMA_Start_IT+0x4a4>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d036      	beq.n	80078b8 <HAL_DMA_Start_IT+0x350>
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a70      	ldr	r2, [pc, #448]	@ (8007a10 <HAL_DMA_Start_IT+0x4a8>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d031      	beq.n	80078b8 <HAL_DMA_Start_IT+0x350>
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a6e      	ldr	r2, [pc, #440]	@ (8007a14 <HAL_DMA_Start_IT+0x4ac>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d02c      	beq.n	80078b8 <HAL_DMA_Start_IT+0x350>
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a6d      	ldr	r2, [pc, #436]	@ (8007a18 <HAL_DMA_Start_IT+0x4b0>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d027      	beq.n	80078b8 <HAL_DMA_Start_IT+0x350>
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a6b      	ldr	r2, [pc, #428]	@ (8007a1c <HAL_DMA_Start_IT+0x4b4>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d022      	beq.n	80078b8 <HAL_DMA_Start_IT+0x350>
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a6a      	ldr	r2, [pc, #424]	@ (8007a20 <HAL_DMA_Start_IT+0x4b8>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d01d      	beq.n	80078b8 <HAL_DMA_Start_IT+0x350>
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a68      	ldr	r2, [pc, #416]	@ (8007a24 <HAL_DMA_Start_IT+0x4bc>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d018      	beq.n	80078b8 <HAL_DMA_Start_IT+0x350>
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a67      	ldr	r2, [pc, #412]	@ (8007a28 <HAL_DMA_Start_IT+0x4c0>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d013      	beq.n	80078b8 <HAL_DMA_Start_IT+0x350>
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a65      	ldr	r2, [pc, #404]	@ (8007a2c <HAL_DMA_Start_IT+0x4c4>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d00e      	beq.n	80078b8 <HAL_DMA_Start_IT+0x350>
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a64      	ldr	r2, [pc, #400]	@ (8007a30 <HAL_DMA_Start_IT+0x4c8>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d009      	beq.n	80078b8 <HAL_DMA_Start_IT+0x350>
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a62      	ldr	r2, [pc, #392]	@ (8007a34 <HAL_DMA_Start_IT+0x4cc>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d004      	beq.n	80078b8 <HAL_DMA_Start_IT+0x350>
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a61      	ldr	r2, [pc, #388]	@ (8007a38 <HAL_DMA_Start_IT+0x4d0>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d101      	bne.n	80078bc <HAL_DMA_Start_IT+0x354>
 80078b8:	2301      	movs	r3, #1
 80078ba:	e000      	b.n	80078be <HAL_DMA_Start_IT+0x356>
 80078bc:	2300      	movs	r3, #0
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d01a      	beq.n	80078f8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d007      	beq.n	80078e0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078d4:	681a      	ldr	r2, [r3, #0]
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80078de:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d007      	beq.n	80078f8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80078ec:	681a      	ldr	r2, [r3, #0]
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80078f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80078f6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a37      	ldr	r2, [pc, #220]	@ (80079dc <HAL_DMA_Start_IT+0x474>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d04a      	beq.n	8007998 <HAL_DMA_Start_IT+0x430>
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a36      	ldr	r2, [pc, #216]	@ (80079e0 <HAL_DMA_Start_IT+0x478>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d045      	beq.n	8007998 <HAL_DMA_Start_IT+0x430>
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a34      	ldr	r2, [pc, #208]	@ (80079e4 <HAL_DMA_Start_IT+0x47c>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d040      	beq.n	8007998 <HAL_DMA_Start_IT+0x430>
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a33      	ldr	r2, [pc, #204]	@ (80079e8 <HAL_DMA_Start_IT+0x480>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d03b      	beq.n	8007998 <HAL_DMA_Start_IT+0x430>
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a31      	ldr	r2, [pc, #196]	@ (80079ec <HAL_DMA_Start_IT+0x484>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d036      	beq.n	8007998 <HAL_DMA_Start_IT+0x430>
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4a30      	ldr	r2, [pc, #192]	@ (80079f0 <HAL_DMA_Start_IT+0x488>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d031      	beq.n	8007998 <HAL_DMA_Start_IT+0x430>
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a2e      	ldr	r2, [pc, #184]	@ (80079f4 <HAL_DMA_Start_IT+0x48c>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d02c      	beq.n	8007998 <HAL_DMA_Start_IT+0x430>
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a2d      	ldr	r2, [pc, #180]	@ (80079f8 <HAL_DMA_Start_IT+0x490>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d027      	beq.n	8007998 <HAL_DMA_Start_IT+0x430>
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a2b      	ldr	r2, [pc, #172]	@ (80079fc <HAL_DMA_Start_IT+0x494>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d022      	beq.n	8007998 <HAL_DMA_Start_IT+0x430>
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a2a      	ldr	r2, [pc, #168]	@ (8007a00 <HAL_DMA_Start_IT+0x498>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d01d      	beq.n	8007998 <HAL_DMA_Start_IT+0x430>
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a28      	ldr	r2, [pc, #160]	@ (8007a04 <HAL_DMA_Start_IT+0x49c>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d018      	beq.n	8007998 <HAL_DMA_Start_IT+0x430>
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a27      	ldr	r2, [pc, #156]	@ (8007a08 <HAL_DMA_Start_IT+0x4a0>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d013      	beq.n	8007998 <HAL_DMA_Start_IT+0x430>
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a25      	ldr	r2, [pc, #148]	@ (8007a0c <HAL_DMA_Start_IT+0x4a4>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d00e      	beq.n	8007998 <HAL_DMA_Start_IT+0x430>
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4a24      	ldr	r2, [pc, #144]	@ (8007a10 <HAL_DMA_Start_IT+0x4a8>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d009      	beq.n	8007998 <HAL_DMA_Start_IT+0x430>
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4a22      	ldr	r2, [pc, #136]	@ (8007a14 <HAL_DMA_Start_IT+0x4ac>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d004      	beq.n	8007998 <HAL_DMA_Start_IT+0x430>
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4a21      	ldr	r2, [pc, #132]	@ (8007a18 <HAL_DMA_Start_IT+0x4b0>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d108      	bne.n	80079aa <HAL_DMA_Start_IT+0x442>
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	681a      	ldr	r2, [r3, #0]
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f042 0201 	orr.w	r2, r2, #1
 80079a6:	601a      	str	r2, [r3, #0]
 80079a8:	e012      	b.n	80079d0 <HAL_DMA_Start_IT+0x468>
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	681a      	ldr	r2, [r3, #0]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f042 0201 	orr.w	r2, r2, #1
 80079b8:	601a      	str	r2, [r3, #0]
 80079ba:	e009      	b.n	80079d0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80079c2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2200      	movs	r2, #0
 80079c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80079cc:	2301      	movs	r3, #1
 80079ce:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80079d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3718      	adds	r7, #24
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
 80079da:	bf00      	nop
 80079dc:	40020010 	.word	0x40020010
 80079e0:	40020028 	.word	0x40020028
 80079e4:	40020040 	.word	0x40020040
 80079e8:	40020058 	.word	0x40020058
 80079ec:	40020070 	.word	0x40020070
 80079f0:	40020088 	.word	0x40020088
 80079f4:	400200a0 	.word	0x400200a0
 80079f8:	400200b8 	.word	0x400200b8
 80079fc:	40020410 	.word	0x40020410
 8007a00:	40020428 	.word	0x40020428
 8007a04:	40020440 	.word	0x40020440
 8007a08:	40020458 	.word	0x40020458
 8007a0c:	40020470 	.word	0x40020470
 8007a10:	40020488 	.word	0x40020488
 8007a14:	400204a0 	.word	0x400204a0
 8007a18:	400204b8 	.word	0x400204b8
 8007a1c:	58025408 	.word	0x58025408
 8007a20:	5802541c 	.word	0x5802541c
 8007a24:	58025430 	.word	0x58025430
 8007a28:	58025444 	.word	0x58025444
 8007a2c:	58025458 	.word	0x58025458
 8007a30:	5802546c 	.word	0x5802546c
 8007a34:	58025480 	.word	0x58025480
 8007a38:	58025494 	.word	0x58025494

08007a3c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b086      	sub	sp, #24
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8007a44:	f7ff f8b0 	bl	8006ba8 <HAL_GetTick>
 8007a48:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d101      	bne.n	8007a54 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8007a50:	2301      	movs	r3, #1
 8007a52:	e2dc      	b.n	800800e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007a5a:	b2db      	uxtb	r3, r3
 8007a5c:	2b02      	cmp	r3, #2
 8007a5e:	d008      	beq.n	8007a72 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2280      	movs	r2, #128	@ 0x80
 8007a64:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	e2cd      	b.n	800800e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a76      	ldr	r2, [pc, #472]	@ (8007c50 <HAL_DMA_Abort+0x214>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d04a      	beq.n	8007b12 <HAL_DMA_Abort+0xd6>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a74      	ldr	r2, [pc, #464]	@ (8007c54 <HAL_DMA_Abort+0x218>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d045      	beq.n	8007b12 <HAL_DMA_Abort+0xd6>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a73      	ldr	r2, [pc, #460]	@ (8007c58 <HAL_DMA_Abort+0x21c>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d040      	beq.n	8007b12 <HAL_DMA_Abort+0xd6>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a71      	ldr	r2, [pc, #452]	@ (8007c5c <HAL_DMA_Abort+0x220>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d03b      	beq.n	8007b12 <HAL_DMA_Abort+0xd6>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a70      	ldr	r2, [pc, #448]	@ (8007c60 <HAL_DMA_Abort+0x224>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d036      	beq.n	8007b12 <HAL_DMA_Abort+0xd6>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a6e      	ldr	r2, [pc, #440]	@ (8007c64 <HAL_DMA_Abort+0x228>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d031      	beq.n	8007b12 <HAL_DMA_Abort+0xd6>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4a6d      	ldr	r2, [pc, #436]	@ (8007c68 <HAL_DMA_Abort+0x22c>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d02c      	beq.n	8007b12 <HAL_DMA_Abort+0xd6>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a6b      	ldr	r2, [pc, #428]	@ (8007c6c <HAL_DMA_Abort+0x230>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d027      	beq.n	8007b12 <HAL_DMA_Abort+0xd6>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a6a      	ldr	r2, [pc, #424]	@ (8007c70 <HAL_DMA_Abort+0x234>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d022      	beq.n	8007b12 <HAL_DMA_Abort+0xd6>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a68      	ldr	r2, [pc, #416]	@ (8007c74 <HAL_DMA_Abort+0x238>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d01d      	beq.n	8007b12 <HAL_DMA_Abort+0xd6>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a67      	ldr	r2, [pc, #412]	@ (8007c78 <HAL_DMA_Abort+0x23c>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d018      	beq.n	8007b12 <HAL_DMA_Abort+0xd6>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a65      	ldr	r2, [pc, #404]	@ (8007c7c <HAL_DMA_Abort+0x240>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d013      	beq.n	8007b12 <HAL_DMA_Abort+0xd6>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a64      	ldr	r2, [pc, #400]	@ (8007c80 <HAL_DMA_Abort+0x244>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d00e      	beq.n	8007b12 <HAL_DMA_Abort+0xd6>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a62      	ldr	r2, [pc, #392]	@ (8007c84 <HAL_DMA_Abort+0x248>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d009      	beq.n	8007b12 <HAL_DMA_Abort+0xd6>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a61      	ldr	r2, [pc, #388]	@ (8007c88 <HAL_DMA_Abort+0x24c>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d004      	beq.n	8007b12 <HAL_DMA_Abort+0xd6>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a5f      	ldr	r2, [pc, #380]	@ (8007c8c <HAL_DMA_Abort+0x250>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d101      	bne.n	8007b16 <HAL_DMA_Abort+0xda>
 8007b12:	2301      	movs	r3, #1
 8007b14:	e000      	b.n	8007b18 <HAL_DMA_Abort+0xdc>
 8007b16:	2300      	movs	r3, #0
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d013      	beq.n	8007b44 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	681a      	ldr	r2, [r3, #0]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f022 021e 	bic.w	r2, r2, #30
 8007b2a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	695a      	ldr	r2, [r3, #20]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007b3a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	617b      	str	r3, [r7, #20]
 8007b42:	e00a      	b.n	8007b5a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	681a      	ldr	r2, [r3, #0]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f022 020e 	bic.w	r2, r2, #14
 8007b52:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a3c      	ldr	r2, [pc, #240]	@ (8007c50 <HAL_DMA_Abort+0x214>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d072      	beq.n	8007c4a <HAL_DMA_Abort+0x20e>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a3a      	ldr	r2, [pc, #232]	@ (8007c54 <HAL_DMA_Abort+0x218>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d06d      	beq.n	8007c4a <HAL_DMA_Abort+0x20e>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a39      	ldr	r2, [pc, #228]	@ (8007c58 <HAL_DMA_Abort+0x21c>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d068      	beq.n	8007c4a <HAL_DMA_Abort+0x20e>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a37      	ldr	r2, [pc, #220]	@ (8007c5c <HAL_DMA_Abort+0x220>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d063      	beq.n	8007c4a <HAL_DMA_Abort+0x20e>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a36      	ldr	r2, [pc, #216]	@ (8007c60 <HAL_DMA_Abort+0x224>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d05e      	beq.n	8007c4a <HAL_DMA_Abort+0x20e>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a34      	ldr	r2, [pc, #208]	@ (8007c64 <HAL_DMA_Abort+0x228>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d059      	beq.n	8007c4a <HAL_DMA_Abort+0x20e>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a33      	ldr	r2, [pc, #204]	@ (8007c68 <HAL_DMA_Abort+0x22c>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d054      	beq.n	8007c4a <HAL_DMA_Abort+0x20e>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a31      	ldr	r2, [pc, #196]	@ (8007c6c <HAL_DMA_Abort+0x230>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d04f      	beq.n	8007c4a <HAL_DMA_Abort+0x20e>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a30      	ldr	r2, [pc, #192]	@ (8007c70 <HAL_DMA_Abort+0x234>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d04a      	beq.n	8007c4a <HAL_DMA_Abort+0x20e>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a2e      	ldr	r2, [pc, #184]	@ (8007c74 <HAL_DMA_Abort+0x238>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d045      	beq.n	8007c4a <HAL_DMA_Abort+0x20e>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a2d      	ldr	r2, [pc, #180]	@ (8007c78 <HAL_DMA_Abort+0x23c>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d040      	beq.n	8007c4a <HAL_DMA_Abort+0x20e>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a2b      	ldr	r2, [pc, #172]	@ (8007c7c <HAL_DMA_Abort+0x240>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d03b      	beq.n	8007c4a <HAL_DMA_Abort+0x20e>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a2a      	ldr	r2, [pc, #168]	@ (8007c80 <HAL_DMA_Abort+0x244>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d036      	beq.n	8007c4a <HAL_DMA_Abort+0x20e>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a28      	ldr	r2, [pc, #160]	@ (8007c84 <HAL_DMA_Abort+0x248>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d031      	beq.n	8007c4a <HAL_DMA_Abort+0x20e>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a27      	ldr	r2, [pc, #156]	@ (8007c88 <HAL_DMA_Abort+0x24c>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d02c      	beq.n	8007c4a <HAL_DMA_Abort+0x20e>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a25      	ldr	r2, [pc, #148]	@ (8007c8c <HAL_DMA_Abort+0x250>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d027      	beq.n	8007c4a <HAL_DMA_Abort+0x20e>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a24      	ldr	r2, [pc, #144]	@ (8007c90 <HAL_DMA_Abort+0x254>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d022      	beq.n	8007c4a <HAL_DMA_Abort+0x20e>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a22      	ldr	r2, [pc, #136]	@ (8007c94 <HAL_DMA_Abort+0x258>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d01d      	beq.n	8007c4a <HAL_DMA_Abort+0x20e>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a21      	ldr	r2, [pc, #132]	@ (8007c98 <HAL_DMA_Abort+0x25c>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d018      	beq.n	8007c4a <HAL_DMA_Abort+0x20e>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a1f      	ldr	r2, [pc, #124]	@ (8007c9c <HAL_DMA_Abort+0x260>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d013      	beq.n	8007c4a <HAL_DMA_Abort+0x20e>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a1e      	ldr	r2, [pc, #120]	@ (8007ca0 <HAL_DMA_Abort+0x264>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d00e      	beq.n	8007c4a <HAL_DMA_Abort+0x20e>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a1c      	ldr	r2, [pc, #112]	@ (8007ca4 <HAL_DMA_Abort+0x268>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d009      	beq.n	8007c4a <HAL_DMA_Abort+0x20e>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a1b      	ldr	r2, [pc, #108]	@ (8007ca8 <HAL_DMA_Abort+0x26c>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d004      	beq.n	8007c4a <HAL_DMA_Abort+0x20e>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a19      	ldr	r2, [pc, #100]	@ (8007cac <HAL_DMA_Abort+0x270>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d132      	bne.n	8007cb0 <HAL_DMA_Abort+0x274>
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	e031      	b.n	8007cb2 <HAL_DMA_Abort+0x276>
 8007c4e:	bf00      	nop
 8007c50:	40020010 	.word	0x40020010
 8007c54:	40020028 	.word	0x40020028
 8007c58:	40020040 	.word	0x40020040
 8007c5c:	40020058 	.word	0x40020058
 8007c60:	40020070 	.word	0x40020070
 8007c64:	40020088 	.word	0x40020088
 8007c68:	400200a0 	.word	0x400200a0
 8007c6c:	400200b8 	.word	0x400200b8
 8007c70:	40020410 	.word	0x40020410
 8007c74:	40020428 	.word	0x40020428
 8007c78:	40020440 	.word	0x40020440
 8007c7c:	40020458 	.word	0x40020458
 8007c80:	40020470 	.word	0x40020470
 8007c84:	40020488 	.word	0x40020488
 8007c88:	400204a0 	.word	0x400204a0
 8007c8c:	400204b8 	.word	0x400204b8
 8007c90:	58025408 	.word	0x58025408
 8007c94:	5802541c 	.word	0x5802541c
 8007c98:	58025430 	.word	0x58025430
 8007c9c:	58025444 	.word	0x58025444
 8007ca0:	58025458 	.word	0x58025458
 8007ca4:	5802546c 	.word	0x5802546c
 8007ca8:	58025480 	.word	0x58025480
 8007cac:	58025494 	.word	0x58025494
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d007      	beq.n	8007cc6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007cc0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007cc4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a6d      	ldr	r2, [pc, #436]	@ (8007e80 <HAL_DMA_Abort+0x444>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d04a      	beq.n	8007d66 <HAL_DMA_Abort+0x32a>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a6b      	ldr	r2, [pc, #428]	@ (8007e84 <HAL_DMA_Abort+0x448>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d045      	beq.n	8007d66 <HAL_DMA_Abort+0x32a>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a6a      	ldr	r2, [pc, #424]	@ (8007e88 <HAL_DMA_Abort+0x44c>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d040      	beq.n	8007d66 <HAL_DMA_Abort+0x32a>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a68      	ldr	r2, [pc, #416]	@ (8007e8c <HAL_DMA_Abort+0x450>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d03b      	beq.n	8007d66 <HAL_DMA_Abort+0x32a>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a67      	ldr	r2, [pc, #412]	@ (8007e90 <HAL_DMA_Abort+0x454>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d036      	beq.n	8007d66 <HAL_DMA_Abort+0x32a>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a65      	ldr	r2, [pc, #404]	@ (8007e94 <HAL_DMA_Abort+0x458>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d031      	beq.n	8007d66 <HAL_DMA_Abort+0x32a>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a64      	ldr	r2, [pc, #400]	@ (8007e98 <HAL_DMA_Abort+0x45c>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d02c      	beq.n	8007d66 <HAL_DMA_Abort+0x32a>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a62      	ldr	r2, [pc, #392]	@ (8007e9c <HAL_DMA_Abort+0x460>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d027      	beq.n	8007d66 <HAL_DMA_Abort+0x32a>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a61      	ldr	r2, [pc, #388]	@ (8007ea0 <HAL_DMA_Abort+0x464>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d022      	beq.n	8007d66 <HAL_DMA_Abort+0x32a>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a5f      	ldr	r2, [pc, #380]	@ (8007ea4 <HAL_DMA_Abort+0x468>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d01d      	beq.n	8007d66 <HAL_DMA_Abort+0x32a>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a5e      	ldr	r2, [pc, #376]	@ (8007ea8 <HAL_DMA_Abort+0x46c>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d018      	beq.n	8007d66 <HAL_DMA_Abort+0x32a>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a5c      	ldr	r2, [pc, #368]	@ (8007eac <HAL_DMA_Abort+0x470>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d013      	beq.n	8007d66 <HAL_DMA_Abort+0x32a>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a5b      	ldr	r2, [pc, #364]	@ (8007eb0 <HAL_DMA_Abort+0x474>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d00e      	beq.n	8007d66 <HAL_DMA_Abort+0x32a>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a59      	ldr	r2, [pc, #356]	@ (8007eb4 <HAL_DMA_Abort+0x478>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d009      	beq.n	8007d66 <HAL_DMA_Abort+0x32a>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a58      	ldr	r2, [pc, #352]	@ (8007eb8 <HAL_DMA_Abort+0x47c>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d004      	beq.n	8007d66 <HAL_DMA_Abort+0x32a>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a56      	ldr	r2, [pc, #344]	@ (8007ebc <HAL_DMA_Abort+0x480>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d108      	bne.n	8007d78 <HAL_DMA_Abort+0x33c>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	681a      	ldr	r2, [r3, #0]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f022 0201 	bic.w	r2, r2, #1
 8007d74:	601a      	str	r2, [r3, #0]
 8007d76:	e007      	b.n	8007d88 <HAL_DMA_Abort+0x34c>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f022 0201 	bic.w	r2, r2, #1
 8007d86:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007d88:	e013      	b.n	8007db2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007d8a:	f7fe ff0d 	bl	8006ba8 <HAL_GetTick>
 8007d8e:	4602      	mov	r2, r0
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	1ad3      	subs	r3, r2, r3
 8007d94:	2b05      	cmp	r3, #5
 8007d96:	d90c      	bls.n	8007db2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2220      	movs	r2, #32
 8007d9c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2203      	movs	r2, #3
 8007da2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2200      	movs	r2, #0
 8007daa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8007dae:	2301      	movs	r3, #1
 8007db0:	e12d      	b.n	800800e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f003 0301 	and.w	r3, r3, #1
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d1e5      	bne.n	8007d8a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4a2f      	ldr	r2, [pc, #188]	@ (8007e80 <HAL_DMA_Abort+0x444>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d04a      	beq.n	8007e5e <HAL_DMA_Abort+0x422>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a2d      	ldr	r2, [pc, #180]	@ (8007e84 <HAL_DMA_Abort+0x448>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d045      	beq.n	8007e5e <HAL_DMA_Abort+0x422>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a2c      	ldr	r2, [pc, #176]	@ (8007e88 <HAL_DMA_Abort+0x44c>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d040      	beq.n	8007e5e <HAL_DMA_Abort+0x422>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a2a      	ldr	r2, [pc, #168]	@ (8007e8c <HAL_DMA_Abort+0x450>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d03b      	beq.n	8007e5e <HAL_DMA_Abort+0x422>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a29      	ldr	r2, [pc, #164]	@ (8007e90 <HAL_DMA_Abort+0x454>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d036      	beq.n	8007e5e <HAL_DMA_Abort+0x422>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a27      	ldr	r2, [pc, #156]	@ (8007e94 <HAL_DMA_Abort+0x458>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d031      	beq.n	8007e5e <HAL_DMA_Abort+0x422>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a26      	ldr	r2, [pc, #152]	@ (8007e98 <HAL_DMA_Abort+0x45c>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d02c      	beq.n	8007e5e <HAL_DMA_Abort+0x422>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a24      	ldr	r2, [pc, #144]	@ (8007e9c <HAL_DMA_Abort+0x460>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d027      	beq.n	8007e5e <HAL_DMA_Abort+0x422>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4a23      	ldr	r2, [pc, #140]	@ (8007ea0 <HAL_DMA_Abort+0x464>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d022      	beq.n	8007e5e <HAL_DMA_Abort+0x422>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a21      	ldr	r2, [pc, #132]	@ (8007ea4 <HAL_DMA_Abort+0x468>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d01d      	beq.n	8007e5e <HAL_DMA_Abort+0x422>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a20      	ldr	r2, [pc, #128]	@ (8007ea8 <HAL_DMA_Abort+0x46c>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d018      	beq.n	8007e5e <HAL_DMA_Abort+0x422>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a1e      	ldr	r2, [pc, #120]	@ (8007eac <HAL_DMA_Abort+0x470>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d013      	beq.n	8007e5e <HAL_DMA_Abort+0x422>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a1d      	ldr	r2, [pc, #116]	@ (8007eb0 <HAL_DMA_Abort+0x474>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d00e      	beq.n	8007e5e <HAL_DMA_Abort+0x422>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a1b      	ldr	r2, [pc, #108]	@ (8007eb4 <HAL_DMA_Abort+0x478>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d009      	beq.n	8007e5e <HAL_DMA_Abort+0x422>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a1a      	ldr	r2, [pc, #104]	@ (8007eb8 <HAL_DMA_Abort+0x47c>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d004      	beq.n	8007e5e <HAL_DMA_Abort+0x422>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a18      	ldr	r2, [pc, #96]	@ (8007ebc <HAL_DMA_Abort+0x480>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d101      	bne.n	8007e62 <HAL_DMA_Abort+0x426>
 8007e5e:	2301      	movs	r3, #1
 8007e60:	e000      	b.n	8007e64 <HAL_DMA_Abort+0x428>
 8007e62:	2300      	movs	r3, #0
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d02b      	beq.n	8007ec0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e6c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e72:	f003 031f 	and.w	r3, r3, #31
 8007e76:	223f      	movs	r2, #63	@ 0x3f
 8007e78:	409a      	lsls	r2, r3
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	609a      	str	r2, [r3, #8]
 8007e7e:	e02a      	b.n	8007ed6 <HAL_DMA_Abort+0x49a>
 8007e80:	40020010 	.word	0x40020010
 8007e84:	40020028 	.word	0x40020028
 8007e88:	40020040 	.word	0x40020040
 8007e8c:	40020058 	.word	0x40020058
 8007e90:	40020070 	.word	0x40020070
 8007e94:	40020088 	.word	0x40020088
 8007e98:	400200a0 	.word	0x400200a0
 8007e9c:	400200b8 	.word	0x400200b8
 8007ea0:	40020410 	.word	0x40020410
 8007ea4:	40020428 	.word	0x40020428
 8007ea8:	40020440 	.word	0x40020440
 8007eac:	40020458 	.word	0x40020458
 8007eb0:	40020470 	.word	0x40020470
 8007eb4:	40020488 	.word	0x40020488
 8007eb8:	400204a0 	.word	0x400204a0
 8007ebc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ec4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007eca:	f003 031f 	and.w	r3, r3, #31
 8007ece:	2201      	movs	r2, #1
 8007ed0:	409a      	lsls	r2, r3
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4a4f      	ldr	r2, [pc, #316]	@ (8008018 <HAL_DMA_Abort+0x5dc>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d072      	beq.n	8007fc6 <HAL_DMA_Abort+0x58a>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a4d      	ldr	r2, [pc, #308]	@ (800801c <HAL_DMA_Abort+0x5e0>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d06d      	beq.n	8007fc6 <HAL_DMA_Abort+0x58a>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4a4c      	ldr	r2, [pc, #304]	@ (8008020 <HAL_DMA_Abort+0x5e4>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d068      	beq.n	8007fc6 <HAL_DMA_Abort+0x58a>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a4a      	ldr	r2, [pc, #296]	@ (8008024 <HAL_DMA_Abort+0x5e8>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d063      	beq.n	8007fc6 <HAL_DMA_Abort+0x58a>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a49      	ldr	r2, [pc, #292]	@ (8008028 <HAL_DMA_Abort+0x5ec>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d05e      	beq.n	8007fc6 <HAL_DMA_Abort+0x58a>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a47      	ldr	r2, [pc, #284]	@ (800802c <HAL_DMA_Abort+0x5f0>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d059      	beq.n	8007fc6 <HAL_DMA_Abort+0x58a>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4a46      	ldr	r2, [pc, #280]	@ (8008030 <HAL_DMA_Abort+0x5f4>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d054      	beq.n	8007fc6 <HAL_DMA_Abort+0x58a>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a44      	ldr	r2, [pc, #272]	@ (8008034 <HAL_DMA_Abort+0x5f8>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d04f      	beq.n	8007fc6 <HAL_DMA_Abort+0x58a>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a43      	ldr	r2, [pc, #268]	@ (8008038 <HAL_DMA_Abort+0x5fc>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d04a      	beq.n	8007fc6 <HAL_DMA_Abort+0x58a>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a41      	ldr	r2, [pc, #260]	@ (800803c <HAL_DMA_Abort+0x600>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d045      	beq.n	8007fc6 <HAL_DMA_Abort+0x58a>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a40      	ldr	r2, [pc, #256]	@ (8008040 <HAL_DMA_Abort+0x604>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d040      	beq.n	8007fc6 <HAL_DMA_Abort+0x58a>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a3e      	ldr	r2, [pc, #248]	@ (8008044 <HAL_DMA_Abort+0x608>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d03b      	beq.n	8007fc6 <HAL_DMA_Abort+0x58a>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a3d      	ldr	r2, [pc, #244]	@ (8008048 <HAL_DMA_Abort+0x60c>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d036      	beq.n	8007fc6 <HAL_DMA_Abort+0x58a>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a3b      	ldr	r2, [pc, #236]	@ (800804c <HAL_DMA_Abort+0x610>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d031      	beq.n	8007fc6 <HAL_DMA_Abort+0x58a>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a3a      	ldr	r2, [pc, #232]	@ (8008050 <HAL_DMA_Abort+0x614>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d02c      	beq.n	8007fc6 <HAL_DMA_Abort+0x58a>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a38      	ldr	r2, [pc, #224]	@ (8008054 <HAL_DMA_Abort+0x618>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d027      	beq.n	8007fc6 <HAL_DMA_Abort+0x58a>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a37      	ldr	r2, [pc, #220]	@ (8008058 <HAL_DMA_Abort+0x61c>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d022      	beq.n	8007fc6 <HAL_DMA_Abort+0x58a>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a35      	ldr	r2, [pc, #212]	@ (800805c <HAL_DMA_Abort+0x620>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d01d      	beq.n	8007fc6 <HAL_DMA_Abort+0x58a>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a34      	ldr	r2, [pc, #208]	@ (8008060 <HAL_DMA_Abort+0x624>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d018      	beq.n	8007fc6 <HAL_DMA_Abort+0x58a>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a32      	ldr	r2, [pc, #200]	@ (8008064 <HAL_DMA_Abort+0x628>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d013      	beq.n	8007fc6 <HAL_DMA_Abort+0x58a>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a31      	ldr	r2, [pc, #196]	@ (8008068 <HAL_DMA_Abort+0x62c>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d00e      	beq.n	8007fc6 <HAL_DMA_Abort+0x58a>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a2f      	ldr	r2, [pc, #188]	@ (800806c <HAL_DMA_Abort+0x630>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d009      	beq.n	8007fc6 <HAL_DMA_Abort+0x58a>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a2e      	ldr	r2, [pc, #184]	@ (8008070 <HAL_DMA_Abort+0x634>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d004      	beq.n	8007fc6 <HAL_DMA_Abort+0x58a>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a2c      	ldr	r2, [pc, #176]	@ (8008074 <HAL_DMA_Abort+0x638>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d101      	bne.n	8007fca <HAL_DMA_Abort+0x58e>
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	e000      	b.n	8007fcc <HAL_DMA_Abort+0x590>
 8007fca:	2300      	movs	r3, #0
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d015      	beq.n	8007ffc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007fd4:	687a      	ldr	r2, [r7, #4]
 8007fd6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007fd8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d00c      	beq.n	8007ffc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007fe6:	681a      	ldr	r2, [r3, #0]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007fec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007ff0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ff6:	687a      	ldr	r2, [r7, #4]
 8007ff8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007ffa:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2201      	movs	r2, #1
 8008000:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2200      	movs	r2, #0
 8008008:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800800c:	2300      	movs	r3, #0
}
 800800e:	4618      	mov	r0, r3
 8008010:	3718      	adds	r7, #24
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}
 8008016:	bf00      	nop
 8008018:	40020010 	.word	0x40020010
 800801c:	40020028 	.word	0x40020028
 8008020:	40020040 	.word	0x40020040
 8008024:	40020058 	.word	0x40020058
 8008028:	40020070 	.word	0x40020070
 800802c:	40020088 	.word	0x40020088
 8008030:	400200a0 	.word	0x400200a0
 8008034:	400200b8 	.word	0x400200b8
 8008038:	40020410 	.word	0x40020410
 800803c:	40020428 	.word	0x40020428
 8008040:	40020440 	.word	0x40020440
 8008044:	40020458 	.word	0x40020458
 8008048:	40020470 	.word	0x40020470
 800804c:	40020488 	.word	0x40020488
 8008050:	400204a0 	.word	0x400204a0
 8008054:	400204b8 	.word	0x400204b8
 8008058:	58025408 	.word	0x58025408
 800805c:	5802541c 	.word	0x5802541c
 8008060:	58025430 	.word	0x58025430
 8008064:	58025444 	.word	0x58025444
 8008068:	58025458 	.word	0x58025458
 800806c:	5802546c 	.word	0x5802546c
 8008070:	58025480 	.word	0x58025480
 8008074:	58025494 	.word	0x58025494

08008078 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b084      	sub	sp, #16
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d101      	bne.n	800808a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8008086:	2301      	movs	r3, #1
 8008088:	e237      	b.n	80084fa <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008090:	b2db      	uxtb	r3, r3
 8008092:	2b02      	cmp	r3, #2
 8008094:	d004      	beq.n	80080a0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2280      	movs	r2, #128	@ 0x80
 800809a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800809c:	2301      	movs	r3, #1
 800809e:	e22c      	b.n	80084fa <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a5c      	ldr	r2, [pc, #368]	@ (8008218 <HAL_DMA_Abort_IT+0x1a0>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d04a      	beq.n	8008140 <HAL_DMA_Abort_IT+0xc8>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a5b      	ldr	r2, [pc, #364]	@ (800821c <HAL_DMA_Abort_IT+0x1a4>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d045      	beq.n	8008140 <HAL_DMA_Abort_IT+0xc8>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a59      	ldr	r2, [pc, #356]	@ (8008220 <HAL_DMA_Abort_IT+0x1a8>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d040      	beq.n	8008140 <HAL_DMA_Abort_IT+0xc8>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4a58      	ldr	r2, [pc, #352]	@ (8008224 <HAL_DMA_Abort_IT+0x1ac>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d03b      	beq.n	8008140 <HAL_DMA_Abort_IT+0xc8>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a56      	ldr	r2, [pc, #344]	@ (8008228 <HAL_DMA_Abort_IT+0x1b0>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d036      	beq.n	8008140 <HAL_DMA_Abort_IT+0xc8>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a55      	ldr	r2, [pc, #340]	@ (800822c <HAL_DMA_Abort_IT+0x1b4>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d031      	beq.n	8008140 <HAL_DMA_Abort_IT+0xc8>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a53      	ldr	r2, [pc, #332]	@ (8008230 <HAL_DMA_Abort_IT+0x1b8>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d02c      	beq.n	8008140 <HAL_DMA_Abort_IT+0xc8>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a52      	ldr	r2, [pc, #328]	@ (8008234 <HAL_DMA_Abort_IT+0x1bc>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d027      	beq.n	8008140 <HAL_DMA_Abort_IT+0xc8>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a50      	ldr	r2, [pc, #320]	@ (8008238 <HAL_DMA_Abort_IT+0x1c0>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d022      	beq.n	8008140 <HAL_DMA_Abort_IT+0xc8>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a4f      	ldr	r2, [pc, #316]	@ (800823c <HAL_DMA_Abort_IT+0x1c4>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d01d      	beq.n	8008140 <HAL_DMA_Abort_IT+0xc8>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4a4d      	ldr	r2, [pc, #308]	@ (8008240 <HAL_DMA_Abort_IT+0x1c8>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d018      	beq.n	8008140 <HAL_DMA_Abort_IT+0xc8>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4a4c      	ldr	r2, [pc, #304]	@ (8008244 <HAL_DMA_Abort_IT+0x1cc>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d013      	beq.n	8008140 <HAL_DMA_Abort_IT+0xc8>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a4a      	ldr	r2, [pc, #296]	@ (8008248 <HAL_DMA_Abort_IT+0x1d0>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d00e      	beq.n	8008140 <HAL_DMA_Abort_IT+0xc8>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a49      	ldr	r2, [pc, #292]	@ (800824c <HAL_DMA_Abort_IT+0x1d4>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d009      	beq.n	8008140 <HAL_DMA_Abort_IT+0xc8>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a47      	ldr	r2, [pc, #284]	@ (8008250 <HAL_DMA_Abort_IT+0x1d8>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d004      	beq.n	8008140 <HAL_DMA_Abort_IT+0xc8>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a46      	ldr	r2, [pc, #280]	@ (8008254 <HAL_DMA_Abort_IT+0x1dc>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d101      	bne.n	8008144 <HAL_DMA_Abort_IT+0xcc>
 8008140:	2301      	movs	r3, #1
 8008142:	e000      	b.n	8008146 <HAL_DMA_Abort_IT+0xce>
 8008144:	2300      	movs	r3, #0
 8008146:	2b00      	cmp	r3, #0
 8008148:	f000 8086 	beq.w	8008258 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2204      	movs	r2, #4
 8008150:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4a2f      	ldr	r2, [pc, #188]	@ (8008218 <HAL_DMA_Abort_IT+0x1a0>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d04a      	beq.n	80081f4 <HAL_DMA_Abort_IT+0x17c>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a2e      	ldr	r2, [pc, #184]	@ (800821c <HAL_DMA_Abort_IT+0x1a4>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d045      	beq.n	80081f4 <HAL_DMA_Abort_IT+0x17c>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a2c      	ldr	r2, [pc, #176]	@ (8008220 <HAL_DMA_Abort_IT+0x1a8>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d040      	beq.n	80081f4 <HAL_DMA_Abort_IT+0x17c>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a2b      	ldr	r2, [pc, #172]	@ (8008224 <HAL_DMA_Abort_IT+0x1ac>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d03b      	beq.n	80081f4 <HAL_DMA_Abort_IT+0x17c>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a29      	ldr	r2, [pc, #164]	@ (8008228 <HAL_DMA_Abort_IT+0x1b0>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d036      	beq.n	80081f4 <HAL_DMA_Abort_IT+0x17c>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a28      	ldr	r2, [pc, #160]	@ (800822c <HAL_DMA_Abort_IT+0x1b4>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d031      	beq.n	80081f4 <HAL_DMA_Abort_IT+0x17c>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a26      	ldr	r2, [pc, #152]	@ (8008230 <HAL_DMA_Abort_IT+0x1b8>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d02c      	beq.n	80081f4 <HAL_DMA_Abort_IT+0x17c>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a25      	ldr	r2, [pc, #148]	@ (8008234 <HAL_DMA_Abort_IT+0x1bc>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d027      	beq.n	80081f4 <HAL_DMA_Abort_IT+0x17c>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a23      	ldr	r2, [pc, #140]	@ (8008238 <HAL_DMA_Abort_IT+0x1c0>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d022      	beq.n	80081f4 <HAL_DMA_Abort_IT+0x17c>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a22      	ldr	r2, [pc, #136]	@ (800823c <HAL_DMA_Abort_IT+0x1c4>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d01d      	beq.n	80081f4 <HAL_DMA_Abort_IT+0x17c>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a20      	ldr	r2, [pc, #128]	@ (8008240 <HAL_DMA_Abort_IT+0x1c8>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d018      	beq.n	80081f4 <HAL_DMA_Abort_IT+0x17c>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a1f      	ldr	r2, [pc, #124]	@ (8008244 <HAL_DMA_Abort_IT+0x1cc>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d013      	beq.n	80081f4 <HAL_DMA_Abort_IT+0x17c>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a1d      	ldr	r2, [pc, #116]	@ (8008248 <HAL_DMA_Abort_IT+0x1d0>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d00e      	beq.n	80081f4 <HAL_DMA_Abort_IT+0x17c>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a1c      	ldr	r2, [pc, #112]	@ (800824c <HAL_DMA_Abort_IT+0x1d4>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d009      	beq.n	80081f4 <HAL_DMA_Abort_IT+0x17c>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4a1a      	ldr	r2, [pc, #104]	@ (8008250 <HAL_DMA_Abort_IT+0x1d8>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d004      	beq.n	80081f4 <HAL_DMA_Abort_IT+0x17c>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4a19      	ldr	r2, [pc, #100]	@ (8008254 <HAL_DMA_Abort_IT+0x1dc>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d108      	bne.n	8008206 <HAL_DMA_Abort_IT+0x18e>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f022 0201 	bic.w	r2, r2, #1
 8008202:	601a      	str	r2, [r3, #0]
 8008204:	e178      	b.n	80084f8 <HAL_DMA_Abort_IT+0x480>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	681a      	ldr	r2, [r3, #0]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f022 0201 	bic.w	r2, r2, #1
 8008214:	601a      	str	r2, [r3, #0]
 8008216:	e16f      	b.n	80084f8 <HAL_DMA_Abort_IT+0x480>
 8008218:	40020010 	.word	0x40020010
 800821c:	40020028 	.word	0x40020028
 8008220:	40020040 	.word	0x40020040
 8008224:	40020058 	.word	0x40020058
 8008228:	40020070 	.word	0x40020070
 800822c:	40020088 	.word	0x40020088
 8008230:	400200a0 	.word	0x400200a0
 8008234:	400200b8 	.word	0x400200b8
 8008238:	40020410 	.word	0x40020410
 800823c:	40020428 	.word	0x40020428
 8008240:	40020440 	.word	0x40020440
 8008244:	40020458 	.word	0x40020458
 8008248:	40020470 	.word	0x40020470
 800824c:	40020488 	.word	0x40020488
 8008250:	400204a0 	.word	0x400204a0
 8008254:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	681a      	ldr	r2, [r3, #0]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f022 020e 	bic.w	r2, r2, #14
 8008266:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a6c      	ldr	r2, [pc, #432]	@ (8008420 <HAL_DMA_Abort_IT+0x3a8>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d04a      	beq.n	8008308 <HAL_DMA_Abort_IT+0x290>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4a6b      	ldr	r2, [pc, #428]	@ (8008424 <HAL_DMA_Abort_IT+0x3ac>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d045      	beq.n	8008308 <HAL_DMA_Abort_IT+0x290>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a69      	ldr	r2, [pc, #420]	@ (8008428 <HAL_DMA_Abort_IT+0x3b0>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d040      	beq.n	8008308 <HAL_DMA_Abort_IT+0x290>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4a68      	ldr	r2, [pc, #416]	@ (800842c <HAL_DMA_Abort_IT+0x3b4>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d03b      	beq.n	8008308 <HAL_DMA_Abort_IT+0x290>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4a66      	ldr	r2, [pc, #408]	@ (8008430 <HAL_DMA_Abort_IT+0x3b8>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d036      	beq.n	8008308 <HAL_DMA_Abort_IT+0x290>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4a65      	ldr	r2, [pc, #404]	@ (8008434 <HAL_DMA_Abort_IT+0x3bc>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d031      	beq.n	8008308 <HAL_DMA_Abort_IT+0x290>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4a63      	ldr	r2, [pc, #396]	@ (8008438 <HAL_DMA_Abort_IT+0x3c0>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d02c      	beq.n	8008308 <HAL_DMA_Abort_IT+0x290>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a62      	ldr	r2, [pc, #392]	@ (800843c <HAL_DMA_Abort_IT+0x3c4>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d027      	beq.n	8008308 <HAL_DMA_Abort_IT+0x290>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a60      	ldr	r2, [pc, #384]	@ (8008440 <HAL_DMA_Abort_IT+0x3c8>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d022      	beq.n	8008308 <HAL_DMA_Abort_IT+0x290>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4a5f      	ldr	r2, [pc, #380]	@ (8008444 <HAL_DMA_Abort_IT+0x3cc>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d01d      	beq.n	8008308 <HAL_DMA_Abort_IT+0x290>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a5d      	ldr	r2, [pc, #372]	@ (8008448 <HAL_DMA_Abort_IT+0x3d0>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d018      	beq.n	8008308 <HAL_DMA_Abort_IT+0x290>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a5c      	ldr	r2, [pc, #368]	@ (800844c <HAL_DMA_Abort_IT+0x3d4>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d013      	beq.n	8008308 <HAL_DMA_Abort_IT+0x290>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a5a      	ldr	r2, [pc, #360]	@ (8008450 <HAL_DMA_Abort_IT+0x3d8>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d00e      	beq.n	8008308 <HAL_DMA_Abort_IT+0x290>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a59      	ldr	r2, [pc, #356]	@ (8008454 <HAL_DMA_Abort_IT+0x3dc>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d009      	beq.n	8008308 <HAL_DMA_Abort_IT+0x290>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4a57      	ldr	r2, [pc, #348]	@ (8008458 <HAL_DMA_Abort_IT+0x3e0>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d004      	beq.n	8008308 <HAL_DMA_Abort_IT+0x290>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a56      	ldr	r2, [pc, #344]	@ (800845c <HAL_DMA_Abort_IT+0x3e4>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d108      	bne.n	800831a <HAL_DMA_Abort_IT+0x2a2>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	681a      	ldr	r2, [r3, #0]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f022 0201 	bic.w	r2, r2, #1
 8008316:	601a      	str	r2, [r3, #0]
 8008318:	e007      	b.n	800832a <HAL_DMA_Abort_IT+0x2b2>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	681a      	ldr	r2, [r3, #0]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f022 0201 	bic.w	r2, r2, #1
 8008328:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a3c      	ldr	r2, [pc, #240]	@ (8008420 <HAL_DMA_Abort_IT+0x3a8>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d072      	beq.n	800841a <HAL_DMA_Abort_IT+0x3a2>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4a3a      	ldr	r2, [pc, #232]	@ (8008424 <HAL_DMA_Abort_IT+0x3ac>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d06d      	beq.n	800841a <HAL_DMA_Abort_IT+0x3a2>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4a39      	ldr	r2, [pc, #228]	@ (8008428 <HAL_DMA_Abort_IT+0x3b0>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d068      	beq.n	800841a <HAL_DMA_Abort_IT+0x3a2>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a37      	ldr	r2, [pc, #220]	@ (800842c <HAL_DMA_Abort_IT+0x3b4>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d063      	beq.n	800841a <HAL_DMA_Abort_IT+0x3a2>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a36      	ldr	r2, [pc, #216]	@ (8008430 <HAL_DMA_Abort_IT+0x3b8>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d05e      	beq.n	800841a <HAL_DMA_Abort_IT+0x3a2>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a34      	ldr	r2, [pc, #208]	@ (8008434 <HAL_DMA_Abort_IT+0x3bc>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d059      	beq.n	800841a <HAL_DMA_Abort_IT+0x3a2>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a33      	ldr	r2, [pc, #204]	@ (8008438 <HAL_DMA_Abort_IT+0x3c0>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d054      	beq.n	800841a <HAL_DMA_Abort_IT+0x3a2>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a31      	ldr	r2, [pc, #196]	@ (800843c <HAL_DMA_Abort_IT+0x3c4>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d04f      	beq.n	800841a <HAL_DMA_Abort_IT+0x3a2>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a30      	ldr	r2, [pc, #192]	@ (8008440 <HAL_DMA_Abort_IT+0x3c8>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d04a      	beq.n	800841a <HAL_DMA_Abort_IT+0x3a2>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a2e      	ldr	r2, [pc, #184]	@ (8008444 <HAL_DMA_Abort_IT+0x3cc>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d045      	beq.n	800841a <HAL_DMA_Abort_IT+0x3a2>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4a2d      	ldr	r2, [pc, #180]	@ (8008448 <HAL_DMA_Abort_IT+0x3d0>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d040      	beq.n	800841a <HAL_DMA_Abort_IT+0x3a2>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a2b      	ldr	r2, [pc, #172]	@ (800844c <HAL_DMA_Abort_IT+0x3d4>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d03b      	beq.n	800841a <HAL_DMA_Abort_IT+0x3a2>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a2a      	ldr	r2, [pc, #168]	@ (8008450 <HAL_DMA_Abort_IT+0x3d8>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d036      	beq.n	800841a <HAL_DMA_Abort_IT+0x3a2>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a28      	ldr	r2, [pc, #160]	@ (8008454 <HAL_DMA_Abort_IT+0x3dc>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d031      	beq.n	800841a <HAL_DMA_Abort_IT+0x3a2>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a27      	ldr	r2, [pc, #156]	@ (8008458 <HAL_DMA_Abort_IT+0x3e0>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d02c      	beq.n	800841a <HAL_DMA_Abort_IT+0x3a2>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a25      	ldr	r2, [pc, #148]	@ (800845c <HAL_DMA_Abort_IT+0x3e4>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d027      	beq.n	800841a <HAL_DMA_Abort_IT+0x3a2>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4a24      	ldr	r2, [pc, #144]	@ (8008460 <HAL_DMA_Abort_IT+0x3e8>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d022      	beq.n	800841a <HAL_DMA_Abort_IT+0x3a2>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a22      	ldr	r2, [pc, #136]	@ (8008464 <HAL_DMA_Abort_IT+0x3ec>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d01d      	beq.n	800841a <HAL_DMA_Abort_IT+0x3a2>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a21      	ldr	r2, [pc, #132]	@ (8008468 <HAL_DMA_Abort_IT+0x3f0>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d018      	beq.n	800841a <HAL_DMA_Abort_IT+0x3a2>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a1f      	ldr	r2, [pc, #124]	@ (800846c <HAL_DMA_Abort_IT+0x3f4>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d013      	beq.n	800841a <HAL_DMA_Abort_IT+0x3a2>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4a1e      	ldr	r2, [pc, #120]	@ (8008470 <HAL_DMA_Abort_IT+0x3f8>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d00e      	beq.n	800841a <HAL_DMA_Abort_IT+0x3a2>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a1c      	ldr	r2, [pc, #112]	@ (8008474 <HAL_DMA_Abort_IT+0x3fc>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d009      	beq.n	800841a <HAL_DMA_Abort_IT+0x3a2>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a1b      	ldr	r2, [pc, #108]	@ (8008478 <HAL_DMA_Abort_IT+0x400>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d004      	beq.n	800841a <HAL_DMA_Abort_IT+0x3a2>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4a19      	ldr	r2, [pc, #100]	@ (800847c <HAL_DMA_Abort_IT+0x404>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d132      	bne.n	8008480 <HAL_DMA_Abort_IT+0x408>
 800841a:	2301      	movs	r3, #1
 800841c:	e031      	b.n	8008482 <HAL_DMA_Abort_IT+0x40a>
 800841e:	bf00      	nop
 8008420:	40020010 	.word	0x40020010
 8008424:	40020028 	.word	0x40020028
 8008428:	40020040 	.word	0x40020040
 800842c:	40020058 	.word	0x40020058
 8008430:	40020070 	.word	0x40020070
 8008434:	40020088 	.word	0x40020088
 8008438:	400200a0 	.word	0x400200a0
 800843c:	400200b8 	.word	0x400200b8
 8008440:	40020410 	.word	0x40020410
 8008444:	40020428 	.word	0x40020428
 8008448:	40020440 	.word	0x40020440
 800844c:	40020458 	.word	0x40020458
 8008450:	40020470 	.word	0x40020470
 8008454:	40020488 	.word	0x40020488
 8008458:	400204a0 	.word	0x400204a0
 800845c:	400204b8 	.word	0x400204b8
 8008460:	58025408 	.word	0x58025408
 8008464:	5802541c 	.word	0x5802541c
 8008468:	58025430 	.word	0x58025430
 800846c:	58025444 	.word	0x58025444
 8008470:	58025458 	.word	0x58025458
 8008474:	5802546c 	.word	0x5802546c
 8008478:	58025480 	.word	0x58025480
 800847c:	58025494 	.word	0x58025494
 8008480:	2300      	movs	r3, #0
 8008482:	2b00      	cmp	r3, #0
 8008484:	d028      	beq.n	80084d8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800848a:	681a      	ldr	r2, [r3, #0]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008490:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008494:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800849a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80084a0:	f003 031f 	and.w	r3, r3, #31
 80084a4:	2201      	movs	r2, #1
 80084a6:	409a      	lsls	r2, r3
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80084b0:	687a      	ldr	r2, [r7, #4]
 80084b2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80084b4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d00c      	beq.n	80084d8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80084c2:	681a      	ldr	r2, [r3, #0]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80084c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80084cc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084d2:	687a      	ldr	r2, [r7, #4]
 80084d4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80084d6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2201      	movs	r2, #1
 80084dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2200      	movs	r2, #0
 80084e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d003      	beq.n	80084f8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80084f8:	2300      	movs	r3, #0
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3710      	adds	r7, #16
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}
 8008502:	bf00      	nop

08008504 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b08a      	sub	sp, #40	@ 0x28
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800850c:	2300      	movs	r3, #0
 800850e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008510:	4b67      	ldr	r3, [pc, #412]	@ (80086b0 <HAL_DMA_IRQHandler+0x1ac>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a67      	ldr	r2, [pc, #412]	@ (80086b4 <HAL_DMA_IRQHandler+0x1b0>)
 8008516:	fba2 2303 	umull	r2, r3, r2, r3
 800851a:	0a9b      	lsrs	r3, r3, #10
 800851c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008522:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008528:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800852a:	6a3b      	ldr	r3, [r7, #32]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8008530:	69fb      	ldr	r3, [r7, #28]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4a5f      	ldr	r2, [pc, #380]	@ (80086b8 <HAL_DMA_IRQHandler+0x1b4>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d04a      	beq.n	80085d6 <HAL_DMA_IRQHandler+0xd2>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4a5d      	ldr	r2, [pc, #372]	@ (80086bc <HAL_DMA_IRQHandler+0x1b8>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d045      	beq.n	80085d6 <HAL_DMA_IRQHandler+0xd2>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a5c      	ldr	r2, [pc, #368]	@ (80086c0 <HAL_DMA_IRQHandler+0x1bc>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d040      	beq.n	80085d6 <HAL_DMA_IRQHandler+0xd2>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a5a      	ldr	r2, [pc, #360]	@ (80086c4 <HAL_DMA_IRQHandler+0x1c0>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d03b      	beq.n	80085d6 <HAL_DMA_IRQHandler+0xd2>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4a59      	ldr	r2, [pc, #356]	@ (80086c8 <HAL_DMA_IRQHandler+0x1c4>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d036      	beq.n	80085d6 <HAL_DMA_IRQHandler+0xd2>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4a57      	ldr	r2, [pc, #348]	@ (80086cc <HAL_DMA_IRQHandler+0x1c8>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d031      	beq.n	80085d6 <HAL_DMA_IRQHandler+0xd2>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4a56      	ldr	r2, [pc, #344]	@ (80086d0 <HAL_DMA_IRQHandler+0x1cc>)
 8008578:	4293      	cmp	r3, r2
 800857a:	d02c      	beq.n	80085d6 <HAL_DMA_IRQHandler+0xd2>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a54      	ldr	r2, [pc, #336]	@ (80086d4 <HAL_DMA_IRQHandler+0x1d0>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d027      	beq.n	80085d6 <HAL_DMA_IRQHandler+0xd2>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4a53      	ldr	r2, [pc, #332]	@ (80086d8 <HAL_DMA_IRQHandler+0x1d4>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d022      	beq.n	80085d6 <HAL_DMA_IRQHandler+0xd2>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a51      	ldr	r2, [pc, #324]	@ (80086dc <HAL_DMA_IRQHandler+0x1d8>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d01d      	beq.n	80085d6 <HAL_DMA_IRQHandler+0xd2>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4a50      	ldr	r2, [pc, #320]	@ (80086e0 <HAL_DMA_IRQHandler+0x1dc>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d018      	beq.n	80085d6 <HAL_DMA_IRQHandler+0xd2>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a4e      	ldr	r2, [pc, #312]	@ (80086e4 <HAL_DMA_IRQHandler+0x1e0>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d013      	beq.n	80085d6 <HAL_DMA_IRQHandler+0xd2>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4a4d      	ldr	r2, [pc, #308]	@ (80086e8 <HAL_DMA_IRQHandler+0x1e4>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d00e      	beq.n	80085d6 <HAL_DMA_IRQHandler+0xd2>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4a4b      	ldr	r2, [pc, #300]	@ (80086ec <HAL_DMA_IRQHandler+0x1e8>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d009      	beq.n	80085d6 <HAL_DMA_IRQHandler+0xd2>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	4a4a      	ldr	r2, [pc, #296]	@ (80086f0 <HAL_DMA_IRQHandler+0x1ec>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d004      	beq.n	80085d6 <HAL_DMA_IRQHandler+0xd2>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4a48      	ldr	r2, [pc, #288]	@ (80086f4 <HAL_DMA_IRQHandler+0x1f0>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d101      	bne.n	80085da <HAL_DMA_IRQHandler+0xd6>
 80085d6:	2301      	movs	r3, #1
 80085d8:	e000      	b.n	80085dc <HAL_DMA_IRQHandler+0xd8>
 80085da:	2300      	movs	r3, #0
 80085dc:	2b00      	cmp	r3, #0
 80085de:	f000 842b 	beq.w	8008e38 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80085e6:	f003 031f 	and.w	r3, r3, #31
 80085ea:	2208      	movs	r2, #8
 80085ec:	409a      	lsls	r2, r3
 80085ee:	69bb      	ldr	r3, [r7, #24]
 80085f0:	4013      	ands	r3, r2
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	f000 80a2 	beq.w	800873c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4a2e      	ldr	r2, [pc, #184]	@ (80086b8 <HAL_DMA_IRQHandler+0x1b4>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d04a      	beq.n	8008698 <HAL_DMA_IRQHandler+0x194>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4a2d      	ldr	r2, [pc, #180]	@ (80086bc <HAL_DMA_IRQHandler+0x1b8>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d045      	beq.n	8008698 <HAL_DMA_IRQHandler+0x194>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4a2b      	ldr	r2, [pc, #172]	@ (80086c0 <HAL_DMA_IRQHandler+0x1bc>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d040      	beq.n	8008698 <HAL_DMA_IRQHandler+0x194>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4a2a      	ldr	r2, [pc, #168]	@ (80086c4 <HAL_DMA_IRQHandler+0x1c0>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d03b      	beq.n	8008698 <HAL_DMA_IRQHandler+0x194>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4a28      	ldr	r2, [pc, #160]	@ (80086c8 <HAL_DMA_IRQHandler+0x1c4>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d036      	beq.n	8008698 <HAL_DMA_IRQHandler+0x194>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	4a27      	ldr	r2, [pc, #156]	@ (80086cc <HAL_DMA_IRQHandler+0x1c8>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d031      	beq.n	8008698 <HAL_DMA_IRQHandler+0x194>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a25      	ldr	r2, [pc, #148]	@ (80086d0 <HAL_DMA_IRQHandler+0x1cc>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d02c      	beq.n	8008698 <HAL_DMA_IRQHandler+0x194>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4a24      	ldr	r2, [pc, #144]	@ (80086d4 <HAL_DMA_IRQHandler+0x1d0>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d027      	beq.n	8008698 <HAL_DMA_IRQHandler+0x194>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a22      	ldr	r2, [pc, #136]	@ (80086d8 <HAL_DMA_IRQHandler+0x1d4>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d022      	beq.n	8008698 <HAL_DMA_IRQHandler+0x194>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4a21      	ldr	r2, [pc, #132]	@ (80086dc <HAL_DMA_IRQHandler+0x1d8>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d01d      	beq.n	8008698 <HAL_DMA_IRQHandler+0x194>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4a1f      	ldr	r2, [pc, #124]	@ (80086e0 <HAL_DMA_IRQHandler+0x1dc>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d018      	beq.n	8008698 <HAL_DMA_IRQHandler+0x194>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4a1e      	ldr	r2, [pc, #120]	@ (80086e4 <HAL_DMA_IRQHandler+0x1e0>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d013      	beq.n	8008698 <HAL_DMA_IRQHandler+0x194>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4a1c      	ldr	r2, [pc, #112]	@ (80086e8 <HAL_DMA_IRQHandler+0x1e4>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d00e      	beq.n	8008698 <HAL_DMA_IRQHandler+0x194>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4a1b      	ldr	r2, [pc, #108]	@ (80086ec <HAL_DMA_IRQHandler+0x1e8>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d009      	beq.n	8008698 <HAL_DMA_IRQHandler+0x194>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4a19      	ldr	r2, [pc, #100]	@ (80086f0 <HAL_DMA_IRQHandler+0x1ec>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d004      	beq.n	8008698 <HAL_DMA_IRQHandler+0x194>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	4a18      	ldr	r2, [pc, #96]	@ (80086f4 <HAL_DMA_IRQHandler+0x1f0>)
 8008694:	4293      	cmp	r3, r2
 8008696:	d12f      	bne.n	80086f8 <HAL_DMA_IRQHandler+0x1f4>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f003 0304 	and.w	r3, r3, #4
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	bf14      	ite	ne
 80086a6:	2301      	movne	r3, #1
 80086a8:	2300      	moveq	r3, #0
 80086aa:	b2db      	uxtb	r3, r3
 80086ac:	e02e      	b.n	800870c <HAL_DMA_IRQHandler+0x208>
 80086ae:	bf00      	nop
 80086b0:	24000018 	.word	0x24000018
 80086b4:	1b4e81b5 	.word	0x1b4e81b5
 80086b8:	40020010 	.word	0x40020010
 80086bc:	40020028 	.word	0x40020028
 80086c0:	40020040 	.word	0x40020040
 80086c4:	40020058 	.word	0x40020058
 80086c8:	40020070 	.word	0x40020070
 80086cc:	40020088 	.word	0x40020088
 80086d0:	400200a0 	.word	0x400200a0
 80086d4:	400200b8 	.word	0x400200b8
 80086d8:	40020410 	.word	0x40020410
 80086dc:	40020428 	.word	0x40020428
 80086e0:	40020440 	.word	0x40020440
 80086e4:	40020458 	.word	0x40020458
 80086e8:	40020470 	.word	0x40020470
 80086ec:	40020488 	.word	0x40020488
 80086f0:	400204a0 	.word	0x400204a0
 80086f4:	400204b8 	.word	0x400204b8
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f003 0308 	and.w	r3, r3, #8
 8008702:	2b00      	cmp	r3, #0
 8008704:	bf14      	ite	ne
 8008706:	2301      	movne	r3, #1
 8008708:	2300      	moveq	r3, #0
 800870a:	b2db      	uxtb	r3, r3
 800870c:	2b00      	cmp	r3, #0
 800870e:	d015      	beq.n	800873c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	681a      	ldr	r2, [r3, #0]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f022 0204 	bic.w	r2, r2, #4
 800871e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008724:	f003 031f 	and.w	r3, r3, #31
 8008728:	2208      	movs	r2, #8
 800872a:	409a      	lsls	r2, r3
 800872c:	6a3b      	ldr	r3, [r7, #32]
 800872e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008734:	f043 0201 	orr.w	r2, r3, #1
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008740:	f003 031f 	and.w	r3, r3, #31
 8008744:	69ba      	ldr	r2, [r7, #24]
 8008746:	fa22 f303 	lsr.w	r3, r2, r3
 800874a:	f003 0301 	and.w	r3, r3, #1
 800874e:	2b00      	cmp	r3, #0
 8008750:	d06e      	beq.n	8008830 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a69      	ldr	r2, [pc, #420]	@ (80088fc <HAL_DMA_IRQHandler+0x3f8>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d04a      	beq.n	80087f2 <HAL_DMA_IRQHandler+0x2ee>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a67      	ldr	r2, [pc, #412]	@ (8008900 <HAL_DMA_IRQHandler+0x3fc>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d045      	beq.n	80087f2 <HAL_DMA_IRQHandler+0x2ee>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a66      	ldr	r2, [pc, #408]	@ (8008904 <HAL_DMA_IRQHandler+0x400>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d040      	beq.n	80087f2 <HAL_DMA_IRQHandler+0x2ee>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a64      	ldr	r2, [pc, #400]	@ (8008908 <HAL_DMA_IRQHandler+0x404>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d03b      	beq.n	80087f2 <HAL_DMA_IRQHandler+0x2ee>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a63      	ldr	r2, [pc, #396]	@ (800890c <HAL_DMA_IRQHandler+0x408>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d036      	beq.n	80087f2 <HAL_DMA_IRQHandler+0x2ee>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4a61      	ldr	r2, [pc, #388]	@ (8008910 <HAL_DMA_IRQHandler+0x40c>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d031      	beq.n	80087f2 <HAL_DMA_IRQHandler+0x2ee>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4a60      	ldr	r2, [pc, #384]	@ (8008914 <HAL_DMA_IRQHandler+0x410>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d02c      	beq.n	80087f2 <HAL_DMA_IRQHandler+0x2ee>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a5e      	ldr	r2, [pc, #376]	@ (8008918 <HAL_DMA_IRQHandler+0x414>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d027      	beq.n	80087f2 <HAL_DMA_IRQHandler+0x2ee>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4a5d      	ldr	r2, [pc, #372]	@ (800891c <HAL_DMA_IRQHandler+0x418>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d022      	beq.n	80087f2 <HAL_DMA_IRQHandler+0x2ee>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4a5b      	ldr	r2, [pc, #364]	@ (8008920 <HAL_DMA_IRQHandler+0x41c>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d01d      	beq.n	80087f2 <HAL_DMA_IRQHandler+0x2ee>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4a5a      	ldr	r2, [pc, #360]	@ (8008924 <HAL_DMA_IRQHandler+0x420>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d018      	beq.n	80087f2 <HAL_DMA_IRQHandler+0x2ee>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4a58      	ldr	r2, [pc, #352]	@ (8008928 <HAL_DMA_IRQHandler+0x424>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d013      	beq.n	80087f2 <HAL_DMA_IRQHandler+0x2ee>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4a57      	ldr	r2, [pc, #348]	@ (800892c <HAL_DMA_IRQHandler+0x428>)
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d00e      	beq.n	80087f2 <HAL_DMA_IRQHandler+0x2ee>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4a55      	ldr	r2, [pc, #340]	@ (8008930 <HAL_DMA_IRQHandler+0x42c>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d009      	beq.n	80087f2 <HAL_DMA_IRQHandler+0x2ee>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	4a54      	ldr	r2, [pc, #336]	@ (8008934 <HAL_DMA_IRQHandler+0x430>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d004      	beq.n	80087f2 <HAL_DMA_IRQHandler+0x2ee>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4a52      	ldr	r2, [pc, #328]	@ (8008938 <HAL_DMA_IRQHandler+0x434>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d10a      	bne.n	8008808 <HAL_DMA_IRQHandler+0x304>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	695b      	ldr	r3, [r3, #20]
 80087f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	bf14      	ite	ne
 8008800:	2301      	movne	r3, #1
 8008802:	2300      	moveq	r3, #0
 8008804:	b2db      	uxtb	r3, r3
 8008806:	e003      	b.n	8008810 <HAL_DMA_IRQHandler+0x30c>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	2300      	movs	r3, #0
 8008810:	2b00      	cmp	r3, #0
 8008812:	d00d      	beq.n	8008830 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008818:	f003 031f 	and.w	r3, r3, #31
 800881c:	2201      	movs	r2, #1
 800881e:	409a      	lsls	r2, r3
 8008820:	6a3b      	ldr	r3, [r7, #32]
 8008822:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008828:	f043 0202 	orr.w	r2, r3, #2
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008834:	f003 031f 	and.w	r3, r3, #31
 8008838:	2204      	movs	r2, #4
 800883a:	409a      	lsls	r2, r3
 800883c:	69bb      	ldr	r3, [r7, #24]
 800883e:	4013      	ands	r3, r2
 8008840:	2b00      	cmp	r3, #0
 8008842:	f000 808f 	beq.w	8008964 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4a2c      	ldr	r2, [pc, #176]	@ (80088fc <HAL_DMA_IRQHandler+0x3f8>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d04a      	beq.n	80088e6 <HAL_DMA_IRQHandler+0x3e2>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4a2a      	ldr	r2, [pc, #168]	@ (8008900 <HAL_DMA_IRQHandler+0x3fc>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d045      	beq.n	80088e6 <HAL_DMA_IRQHandler+0x3e2>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	4a29      	ldr	r2, [pc, #164]	@ (8008904 <HAL_DMA_IRQHandler+0x400>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d040      	beq.n	80088e6 <HAL_DMA_IRQHandler+0x3e2>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4a27      	ldr	r2, [pc, #156]	@ (8008908 <HAL_DMA_IRQHandler+0x404>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d03b      	beq.n	80088e6 <HAL_DMA_IRQHandler+0x3e2>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	4a26      	ldr	r2, [pc, #152]	@ (800890c <HAL_DMA_IRQHandler+0x408>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d036      	beq.n	80088e6 <HAL_DMA_IRQHandler+0x3e2>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4a24      	ldr	r2, [pc, #144]	@ (8008910 <HAL_DMA_IRQHandler+0x40c>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d031      	beq.n	80088e6 <HAL_DMA_IRQHandler+0x3e2>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4a23      	ldr	r2, [pc, #140]	@ (8008914 <HAL_DMA_IRQHandler+0x410>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d02c      	beq.n	80088e6 <HAL_DMA_IRQHandler+0x3e2>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4a21      	ldr	r2, [pc, #132]	@ (8008918 <HAL_DMA_IRQHandler+0x414>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d027      	beq.n	80088e6 <HAL_DMA_IRQHandler+0x3e2>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	4a20      	ldr	r2, [pc, #128]	@ (800891c <HAL_DMA_IRQHandler+0x418>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d022      	beq.n	80088e6 <HAL_DMA_IRQHandler+0x3e2>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4a1e      	ldr	r2, [pc, #120]	@ (8008920 <HAL_DMA_IRQHandler+0x41c>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d01d      	beq.n	80088e6 <HAL_DMA_IRQHandler+0x3e2>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4a1d      	ldr	r2, [pc, #116]	@ (8008924 <HAL_DMA_IRQHandler+0x420>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d018      	beq.n	80088e6 <HAL_DMA_IRQHandler+0x3e2>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4a1b      	ldr	r2, [pc, #108]	@ (8008928 <HAL_DMA_IRQHandler+0x424>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d013      	beq.n	80088e6 <HAL_DMA_IRQHandler+0x3e2>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4a1a      	ldr	r2, [pc, #104]	@ (800892c <HAL_DMA_IRQHandler+0x428>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d00e      	beq.n	80088e6 <HAL_DMA_IRQHandler+0x3e2>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	4a18      	ldr	r2, [pc, #96]	@ (8008930 <HAL_DMA_IRQHandler+0x42c>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d009      	beq.n	80088e6 <HAL_DMA_IRQHandler+0x3e2>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4a17      	ldr	r2, [pc, #92]	@ (8008934 <HAL_DMA_IRQHandler+0x430>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d004      	beq.n	80088e6 <HAL_DMA_IRQHandler+0x3e2>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a15      	ldr	r2, [pc, #84]	@ (8008938 <HAL_DMA_IRQHandler+0x434>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d12a      	bne.n	800893c <HAL_DMA_IRQHandler+0x438>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f003 0302 	and.w	r3, r3, #2
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	bf14      	ite	ne
 80088f4:	2301      	movne	r3, #1
 80088f6:	2300      	moveq	r3, #0
 80088f8:	b2db      	uxtb	r3, r3
 80088fa:	e023      	b.n	8008944 <HAL_DMA_IRQHandler+0x440>
 80088fc:	40020010 	.word	0x40020010
 8008900:	40020028 	.word	0x40020028
 8008904:	40020040 	.word	0x40020040
 8008908:	40020058 	.word	0x40020058
 800890c:	40020070 	.word	0x40020070
 8008910:	40020088 	.word	0x40020088
 8008914:	400200a0 	.word	0x400200a0
 8008918:	400200b8 	.word	0x400200b8
 800891c:	40020410 	.word	0x40020410
 8008920:	40020428 	.word	0x40020428
 8008924:	40020440 	.word	0x40020440
 8008928:	40020458 	.word	0x40020458
 800892c:	40020470 	.word	0x40020470
 8008930:	40020488 	.word	0x40020488
 8008934:	400204a0 	.word	0x400204a0
 8008938:	400204b8 	.word	0x400204b8
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	2300      	movs	r3, #0
 8008944:	2b00      	cmp	r3, #0
 8008946:	d00d      	beq.n	8008964 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800894c:	f003 031f 	and.w	r3, r3, #31
 8008950:	2204      	movs	r2, #4
 8008952:	409a      	lsls	r2, r3
 8008954:	6a3b      	ldr	r3, [r7, #32]
 8008956:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800895c:	f043 0204 	orr.w	r2, r3, #4
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008968:	f003 031f 	and.w	r3, r3, #31
 800896c:	2210      	movs	r2, #16
 800896e:	409a      	lsls	r2, r3
 8008970:	69bb      	ldr	r3, [r7, #24]
 8008972:	4013      	ands	r3, r2
 8008974:	2b00      	cmp	r3, #0
 8008976:	f000 80a6 	beq.w	8008ac6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4a85      	ldr	r2, [pc, #532]	@ (8008b94 <HAL_DMA_IRQHandler+0x690>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d04a      	beq.n	8008a1a <HAL_DMA_IRQHandler+0x516>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4a83      	ldr	r2, [pc, #524]	@ (8008b98 <HAL_DMA_IRQHandler+0x694>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d045      	beq.n	8008a1a <HAL_DMA_IRQHandler+0x516>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4a82      	ldr	r2, [pc, #520]	@ (8008b9c <HAL_DMA_IRQHandler+0x698>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d040      	beq.n	8008a1a <HAL_DMA_IRQHandler+0x516>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a80      	ldr	r2, [pc, #512]	@ (8008ba0 <HAL_DMA_IRQHandler+0x69c>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d03b      	beq.n	8008a1a <HAL_DMA_IRQHandler+0x516>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4a7f      	ldr	r2, [pc, #508]	@ (8008ba4 <HAL_DMA_IRQHandler+0x6a0>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d036      	beq.n	8008a1a <HAL_DMA_IRQHandler+0x516>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a7d      	ldr	r2, [pc, #500]	@ (8008ba8 <HAL_DMA_IRQHandler+0x6a4>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d031      	beq.n	8008a1a <HAL_DMA_IRQHandler+0x516>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4a7c      	ldr	r2, [pc, #496]	@ (8008bac <HAL_DMA_IRQHandler+0x6a8>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d02c      	beq.n	8008a1a <HAL_DMA_IRQHandler+0x516>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4a7a      	ldr	r2, [pc, #488]	@ (8008bb0 <HAL_DMA_IRQHandler+0x6ac>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d027      	beq.n	8008a1a <HAL_DMA_IRQHandler+0x516>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4a79      	ldr	r2, [pc, #484]	@ (8008bb4 <HAL_DMA_IRQHandler+0x6b0>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d022      	beq.n	8008a1a <HAL_DMA_IRQHandler+0x516>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	4a77      	ldr	r2, [pc, #476]	@ (8008bb8 <HAL_DMA_IRQHandler+0x6b4>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d01d      	beq.n	8008a1a <HAL_DMA_IRQHandler+0x516>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	4a76      	ldr	r2, [pc, #472]	@ (8008bbc <HAL_DMA_IRQHandler+0x6b8>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d018      	beq.n	8008a1a <HAL_DMA_IRQHandler+0x516>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a74      	ldr	r2, [pc, #464]	@ (8008bc0 <HAL_DMA_IRQHandler+0x6bc>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d013      	beq.n	8008a1a <HAL_DMA_IRQHandler+0x516>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4a73      	ldr	r2, [pc, #460]	@ (8008bc4 <HAL_DMA_IRQHandler+0x6c0>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d00e      	beq.n	8008a1a <HAL_DMA_IRQHandler+0x516>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a71      	ldr	r2, [pc, #452]	@ (8008bc8 <HAL_DMA_IRQHandler+0x6c4>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d009      	beq.n	8008a1a <HAL_DMA_IRQHandler+0x516>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	4a70      	ldr	r2, [pc, #448]	@ (8008bcc <HAL_DMA_IRQHandler+0x6c8>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d004      	beq.n	8008a1a <HAL_DMA_IRQHandler+0x516>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4a6e      	ldr	r2, [pc, #440]	@ (8008bd0 <HAL_DMA_IRQHandler+0x6cc>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d10a      	bne.n	8008a30 <HAL_DMA_IRQHandler+0x52c>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f003 0308 	and.w	r3, r3, #8
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	bf14      	ite	ne
 8008a28:	2301      	movne	r3, #1
 8008a2a:	2300      	moveq	r3, #0
 8008a2c:	b2db      	uxtb	r3, r3
 8008a2e:	e009      	b.n	8008a44 <HAL_DMA_IRQHandler+0x540>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f003 0304 	and.w	r3, r3, #4
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	bf14      	ite	ne
 8008a3e:	2301      	movne	r3, #1
 8008a40:	2300      	moveq	r3, #0
 8008a42:	b2db      	uxtb	r3, r3
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d03e      	beq.n	8008ac6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a4c:	f003 031f 	and.w	r3, r3, #31
 8008a50:	2210      	movs	r2, #16
 8008a52:	409a      	lsls	r2, r3
 8008a54:	6a3b      	ldr	r3, [r7, #32]
 8008a56:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d018      	beq.n	8008a98 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d108      	bne.n	8008a86 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d024      	beq.n	8008ac6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	4798      	blx	r3
 8008a84:	e01f      	b.n	8008ac6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d01b      	beq.n	8008ac6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	4798      	blx	r3
 8008a96:	e016      	b.n	8008ac6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d107      	bne.n	8008ab6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	681a      	ldr	r2, [r3, #0]
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f022 0208 	bic.w	r2, r2, #8
 8008ab4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d003      	beq.n	8008ac6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008aca:	f003 031f 	and.w	r3, r3, #31
 8008ace:	2220      	movs	r2, #32
 8008ad0:	409a      	lsls	r2, r3
 8008ad2:	69bb      	ldr	r3, [r7, #24]
 8008ad4:	4013      	ands	r3, r2
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	f000 8110 	beq.w	8008cfc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4a2c      	ldr	r2, [pc, #176]	@ (8008b94 <HAL_DMA_IRQHandler+0x690>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d04a      	beq.n	8008b7c <HAL_DMA_IRQHandler+0x678>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a2b      	ldr	r2, [pc, #172]	@ (8008b98 <HAL_DMA_IRQHandler+0x694>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d045      	beq.n	8008b7c <HAL_DMA_IRQHandler+0x678>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4a29      	ldr	r2, [pc, #164]	@ (8008b9c <HAL_DMA_IRQHandler+0x698>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d040      	beq.n	8008b7c <HAL_DMA_IRQHandler+0x678>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a28      	ldr	r2, [pc, #160]	@ (8008ba0 <HAL_DMA_IRQHandler+0x69c>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d03b      	beq.n	8008b7c <HAL_DMA_IRQHandler+0x678>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a26      	ldr	r2, [pc, #152]	@ (8008ba4 <HAL_DMA_IRQHandler+0x6a0>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d036      	beq.n	8008b7c <HAL_DMA_IRQHandler+0x678>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4a25      	ldr	r2, [pc, #148]	@ (8008ba8 <HAL_DMA_IRQHandler+0x6a4>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d031      	beq.n	8008b7c <HAL_DMA_IRQHandler+0x678>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4a23      	ldr	r2, [pc, #140]	@ (8008bac <HAL_DMA_IRQHandler+0x6a8>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d02c      	beq.n	8008b7c <HAL_DMA_IRQHandler+0x678>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4a22      	ldr	r2, [pc, #136]	@ (8008bb0 <HAL_DMA_IRQHandler+0x6ac>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d027      	beq.n	8008b7c <HAL_DMA_IRQHandler+0x678>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a20      	ldr	r2, [pc, #128]	@ (8008bb4 <HAL_DMA_IRQHandler+0x6b0>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d022      	beq.n	8008b7c <HAL_DMA_IRQHandler+0x678>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4a1f      	ldr	r2, [pc, #124]	@ (8008bb8 <HAL_DMA_IRQHandler+0x6b4>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d01d      	beq.n	8008b7c <HAL_DMA_IRQHandler+0x678>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4a1d      	ldr	r2, [pc, #116]	@ (8008bbc <HAL_DMA_IRQHandler+0x6b8>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d018      	beq.n	8008b7c <HAL_DMA_IRQHandler+0x678>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4a1c      	ldr	r2, [pc, #112]	@ (8008bc0 <HAL_DMA_IRQHandler+0x6bc>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d013      	beq.n	8008b7c <HAL_DMA_IRQHandler+0x678>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4a1a      	ldr	r2, [pc, #104]	@ (8008bc4 <HAL_DMA_IRQHandler+0x6c0>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d00e      	beq.n	8008b7c <HAL_DMA_IRQHandler+0x678>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4a19      	ldr	r2, [pc, #100]	@ (8008bc8 <HAL_DMA_IRQHandler+0x6c4>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d009      	beq.n	8008b7c <HAL_DMA_IRQHandler+0x678>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4a17      	ldr	r2, [pc, #92]	@ (8008bcc <HAL_DMA_IRQHandler+0x6c8>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d004      	beq.n	8008b7c <HAL_DMA_IRQHandler+0x678>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	4a16      	ldr	r2, [pc, #88]	@ (8008bd0 <HAL_DMA_IRQHandler+0x6cc>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d12b      	bne.n	8008bd4 <HAL_DMA_IRQHandler+0x6d0>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f003 0310 	and.w	r3, r3, #16
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	bf14      	ite	ne
 8008b8a:	2301      	movne	r3, #1
 8008b8c:	2300      	moveq	r3, #0
 8008b8e:	b2db      	uxtb	r3, r3
 8008b90:	e02a      	b.n	8008be8 <HAL_DMA_IRQHandler+0x6e4>
 8008b92:	bf00      	nop
 8008b94:	40020010 	.word	0x40020010
 8008b98:	40020028 	.word	0x40020028
 8008b9c:	40020040 	.word	0x40020040
 8008ba0:	40020058 	.word	0x40020058
 8008ba4:	40020070 	.word	0x40020070
 8008ba8:	40020088 	.word	0x40020088
 8008bac:	400200a0 	.word	0x400200a0
 8008bb0:	400200b8 	.word	0x400200b8
 8008bb4:	40020410 	.word	0x40020410
 8008bb8:	40020428 	.word	0x40020428
 8008bbc:	40020440 	.word	0x40020440
 8008bc0:	40020458 	.word	0x40020458
 8008bc4:	40020470 	.word	0x40020470
 8008bc8:	40020488 	.word	0x40020488
 8008bcc:	400204a0 	.word	0x400204a0
 8008bd0:	400204b8 	.word	0x400204b8
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f003 0302 	and.w	r3, r3, #2
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	bf14      	ite	ne
 8008be2:	2301      	movne	r3, #1
 8008be4:	2300      	moveq	r3, #0
 8008be6:	b2db      	uxtb	r3, r3
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	f000 8087 	beq.w	8008cfc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008bf2:	f003 031f 	and.w	r3, r3, #31
 8008bf6:	2220      	movs	r2, #32
 8008bf8:	409a      	lsls	r2, r3
 8008bfa:	6a3b      	ldr	r3, [r7, #32]
 8008bfc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008c04:	b2db      	uxtb	r3, r3
 8008c06:	2b04      	cmp	r3, #4
 8008c08:	d139      	bne.n	8008c7e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	681a      	ldr	r2, [r3, #0]
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f022 0216 	bic.w	r2, r2, #22
 8008c18:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	695a      	ldr	r2, [r3, #20]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008c28:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d103      	bne.n	8008c3a <HAL_DMA_IRQHandler+0x736>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d007      	beq.n	8008c4a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	681a      	ldr	r2, [r3, #0]
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f022 0208 	bic.w	r2, r2, #8
 8008c48:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008c4e:	f003 031f 	and.w	r3, r3, #31
 8008c52:	223f      	movs	r2, #63	@ 0x3f
 8008c54:	409a      	lsls	r2, r3
 8008c56:	6a3b      	ldr	r3, [r7, #32]
 8008c58:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2201      	movs	r2, #1
 8008c5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2200      	movs	r2, #0
 8008c66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	f000 834a 	beq.w	8009308 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	4798      	blx	r3
          }
          return;
 8008c7c:	e344      	b.n	8009308 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d018      	beq.n	8008cbe <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d108      	bne.n	8008cac <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d02c      	beq.n	8008cfc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	4798      	blx	r3
 8008caa:	e027      	b.n	8008cfc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d023      	beq.n	8008cfc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	4798      	blx	r3
 8008cbc:	e01e      	b.n	8008cfc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d10f      	bne.n	8008cec <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	681a      	ldr	r2, [r3, #0]
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f022 0210 	bic.w	r2, r2, #16
 8008cda:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2201      	movs	r2, #1
 8008ce0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d003      	beq.n	8008cfc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	f000 8306 	beq.w	8009312 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d0a:	f003 0301 	and.w	r3, r3, #1
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	f000 8088 	beq.w	8008e24 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2204      	movs	r2, #4
 8008d18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a7a      	ldr	r2, [pc, #488]	@ (8008f0c <HAL_DMA_IRQHandler+0xa08>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d04a      	beq.n	8008dbc <HAL_DMA_IRQHandler+0x8b8>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4a79      	ldr	r2, [pc, #484]	@ (8008f10 <HAL_DMA_IRQHandler+0xa0c>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d045      	beq.n	8008dbc <HAL_DMA_IRQHandler+0x8b8>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4a77      	ldr	r2, [pc, #476]	@ (8008f14 <HAL_DMA_IRQHandler+0xa10>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d040      	beq.n	8008dbc <HAL_DMA_IRQHandler+0x8b8>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	4a76      	ldr	r2, [pc, #472]	@ (8008f18 <HAL_DMA_IRQHandler+0xa14>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d03b      	beq.n	8008dbc <HAL_DMA_IRQHandler+0x8b8>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	4a74      	ldr	r2, [pc, #464]	@ (8008f1c <HAL_DMA_IRQHandler+0xa18>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d036      	beq.n	8008dbc <HAL_DMA_IRQHandler+0x8b8>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	4a73      	ldr	r2, [pc, #460]	@ (8008f20 <HAL_DMA_IRQHandler+0xa1c>)
 8008d54:	4293      	cmp	r3, r2
 8008d56:	d031      	beq.n	8008dbc <HAL_DMA_IRQHandler+0x8b8>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4a71      	ldr	r2, [pc, #452]	@ (8008f24 <HAL_DMA_IRQHandler+0xa20>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d02c      	beq.n	8008dbc <HAL_DMA_IRQHandler+0x8b8>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4a70      	ldr	r2, [pc, #448]	@ (8008f28 <HAL_DMA_IRQHandler+0xa24>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d027      	beq.n	8008dbc <HAL_DMA_IRQHandler+0x8b8>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4a6e      	ldr	r2, [pc, #440]	@ (8008f2c <HAL_DMA_IRQHandler+0xa28>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d022      	beq.n	8008dbc <HAL_DMA_IRQHandler+0x8b8>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4a6d      	ldr	r2, [pc, #436]	@ (8008f30 <HAL_DMA_IRQHandler+0xa2c>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d01d      	beq.n	8008dbc <HAL_DMA_IRQHandler+0x8b8>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	4a6b      	ldr	r2, [pc, #428]	@ (8008f34 <HAL_DMA_IRQHandler+0xa30>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d018      	beq.n	8008dbc <HAL_DMA_IRQHandler+0x8b8>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	4a6a      	ldr	r2, [pc, #424]	@ (8008f38 <HAL_DMA_IRQHandler+0xa34>)
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d013      	beq.n	8008dbc <HAL_DMA_IRQHandler+0x8b8>
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	4a68      	ldr	r2, [pc, #416]	@ (8008f3c <HAL_DMA_IRQHandler+0xa38>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d00e      	beq.n	8008dbc <HAL_DMA_IRQHandler+0x8b8>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	4a67      	ldr	r2, [pc, #412]	@ (8008f40 <HAL_DMA_IRQHandler+0xa3c>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d009      	beq.n	8008dbc <HAL_DMA_IRQHandler+0x8b8>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4a65      	ldr	r2, [pc, #404]	@ (8008f44 <HAL_DMA_IRQHandler+0xa40>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d004      	beq.n	8008dbc <HAL_DMA_IRQHandler+0x8b8>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	4a64      	ldr	r2, [pc, #400]	@ (8008f48 <HAL_DMA_IRQHandler+0xa44>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d108      	bne.n	8008dce <HAL_DMA_IRQHandler+0x8ca>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	681a      	ldr	r2, [r3, #0]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f022 0201 	bic.w	r2, r2, #1
 8008dca:	601a      	str	r2, [r3, #0]
 8008dcc:	e007      	b.n	8008dde <HAL_DMA_IRQHandler+0x8da>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	681a      	ldr	r2, [r3, #0]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f022 0201 	bic.w	r2, r2, #1
 8008ddc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	3301      	adds	r3, #1
 8008de2:	60fb      	str	r3, [r7, #12]
 8008de4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d307      	bcc.n	8008dfa <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f003 0301 	and.w	r3, r3, #1
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d1f2      	bne.n	8008dde <HAL_DMA_IRQHandler+0x8da>
 8008df8:	e000      	b.n	8008dfc <HAL_DMA_IRQHandler+0x8f8>
            break;
 8008dfa:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f003 0301 	and.w	r3, r3, #1
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d004      	beq.n	8008e14 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2203      	movs	r2, #3
 8008e0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8008e12:	e003      	b.n	8008e1c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2201      	movs	r2, #1
 8008e18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2200      	movs	r2, #0
 8008e20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	f000 8272 	beq.w	8009312 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	4798      	blx	r3
 8008e36:	e26c      	b.n	8009312 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4a43      	ldr	r2, [pc, #268]	@ (8008f4c <HAL_DMA_IRQHandler+0xa48>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d022      	beq.n	8008e88 <HAL_DMA_IRQHandler+0x984>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4a42      	ldr	r2, [pc, #264]	@ (8008f50 <HAL_DMA_IRQHandler+0xa4c>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d01d      	beq.n	8008e88 <HAL_DMA_IRQHandler+0x984>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4a40      	ldr	r2, [pc, #256]	@ (8008f54 <HAL_DMA_IRQHandler+0xa50>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d018      	beq.n	8008e88 <HAL_DMA_IRQHandler+0x984>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4a3f      	ldr	r2, [pc, #252]	@ (8008f58 <HAL_DMA_IRQHandler+0xa54>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d013      	beq.n	8008e88 <HAL_DMA_IRQHandler+0x984>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a3d      	ldr	r2, [pc, #244]	@ (8008f5c <HAL_DMA_IRQHandler+0xa58>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d00e      	beq.n	8008e88 <HAL_DMA_IRQHandler+0x984>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4a3c      	ldr	r2, [pc, #240]	@ (8008f60 <HAL_DMA_IRQHandler+0xa5c>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d009      	beq.n	8008e88 <HAL_DMA_IRQHandler+0x984>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4a3a      	ldr	r2, [pc, #232]	@ (8008f64 <HAL_DMA_IRQHandler+0xa60>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d004      	beq.n	8008e88 <HAL_DMA_IRQHandler+0x984>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4a39      	ldr	r2, [pc, #228]	@ (8008f68 <HAL_DMA_IRQHandler+0xa64>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d101      	bne.n	8008e8c <HAL_DMA_IRQHandler+0x988>
 8008e88:	2301      	movs	r3, #1
 8008e8a:	e000      	b.n	8008e8e <HAL_DMA_IRQHandler+0x98a>
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	f000 823f 	beq.w	8009312 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ea0:	f003 031f 	and.w	r3, r3, #31
 8008ea4:	2204      	movs	r2, #4
 8008ea6:	409a      	lsls	r2, r3
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	4013      	ands	r3, r2
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	f000 80cd 	beq.w	800904c <HAL_DMA_IRQHandler+0xb48>
 8008eb2:	693b      	ldr	r3, [r7, #16]
 8008eb4:	f003 0304 	and.w	r3, r3, #4
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	f000 80c7 	beq.w	800904c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ec2:	f003 031f 	and.w	r3, r3, #31
 8008ec6:	2204      	movs	r2, #4
 8008ec8:	409a      	lsls	r2, r3
 8008eca:	69fb      	ldr	r3, [r7, #28]
 8008ecc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008ece:	693b      	ldr	r3, [r7, #16]
 8008ed0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d049      	beq.n	8008f6c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008ed8:	693b      	ldr	r3, [r7, #16]
 8008eda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d109      	bne.n	8008ef6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	f000 8210 	beq.w	800930c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008ef4:	e20a      	b.n	800930c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	f000 8206 	beq.w	800930c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008f08:	e200      	b.n	800930c <HAL_DMA_IRQHandler+0xe08>
 8008f0a:	bf00      	nop
 8008f0c:	40020010 	.word	0x40020010
 8008f10:	40020028 	.word	0x40020028
 8008f14:	40020040 	.word	0x40020040
 8008f18:	40020058 	.word	0x40020058
 8008f1c:	40020070 	.word	0x40020070
 8008f20:	40020088 	.word	0x40020088
 8008f24:	400200a0 	.word	0x400200a0
 8008f28:	400200b8 	.word	0x400200b8
 8008f2c:	40020410 	.word	0x40020410
 8008f30:	40020428 	.word	0x40020428
 8008f34:	40020440 	.word	0x40020440
 8008f38:	40020458 	.word	0x40020458
 8008f3c:	40020470 	.word	0x40020470
 8008f40:	40020488 	.word	0x40020488
 8008f44:	400204a0 	.word	0x400204a0
 8008f48:	400204b8 	.word	0x400204b8
 8008f4c:	58025408 	.word	0x58025408
 8008f50:	5802541c 	.word	0x5802541c
 8008f54:	58025430 	.word	0x58025430
 8008f58:	58025444 	.word	0x58025444
 8008f5c:	58025458 	.word	0x58025458
 8008f60:	5802546c 	.word	0x5802546c
 8008f64:	58025480 	.word	0x58025480
 8008f68:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	f003 0320 	and.w	r3, r3, #32
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d160      	bne.n	8009038 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4a7f      	ldr	r2, [pc, #508]	@ (8009178 <HAL_DMA_IRQHandler+0xc74>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d04a      	beq.n	8009016 <HAL_DMA_IRQHandler+0xb12>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4a7d      	ldr	r2, [pc, #500]	@ (800917c <HAL_DMA_IRQHandler+0xc78>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d045      	beq.n	8009016 <HAL_DMA_IRQHandler+0xb12>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	4a7c      	ldr	r2, [pc, #496]	@ (8009180 <HAL_DMA_IRQHandler+0xc7c>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d040      	beq.n	8009016 <HAL_DMA_IRQHandler+0xb12>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	4a7a      	ldr	r2, [pc, #488]	@ (8009184 <HAL_DMA_IRQHandler+0xc80>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d03b      	beq.n	8009016 <HAL_DMA_IRQHandler+0xb12>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4a79      	ldr	r2, [pc, #484]	@ (8009188 <HAL_DMA_IRQHandler+0xc84>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d036      	beq.n	8009016 <HAL_DMA_IRQHandler+0xb12>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	4a77      	ldr	r2, [pc, #476]	@ (800918c <HAL_DMA_IRQHandler+0xc88>)
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d031      	beq.n	8009016 <HAL_DMA_IRQHandler+0xb12>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	4a76      	ldr	r2, [pc, #472]	@ (8009190 <HAL_DMA_IRQHandler+0xc8c>)
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d02c      	beq.n	8009016 <HAL_DMA_IRQHandler+0xb12>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a74      	ldr	r2, [pc, #464]	@ (8009194 <HAL_DMA_IRQHandler+0xc90>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d027      	beq.n	8009016 <HAL_DMA_IRQHandler+0xb12>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	4a73      	ldr	r2, [pc, #460]	@ (8009198 <HAL_DMA_IRQHandler+0xc94>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d022      	beq.n	8009016 <HAL_DMA_IRQHandler+0xb12>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	4a71      	ldr	r2, [pc, #452]	@ (800919c <HAL_DMA_IRQHandler+0xc98>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d01d      	beq.n	8009016 <HAL_DMA_IRQHandler+0xb12>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	4a70      	ldr	r2, [pc, #448]	@ (80091a0 <HAL_DMA_IRQHandler+0xc9c>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d018      	beq.n	8009016 <HAL_DMA_IRQHandler+0xb12>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4a6e      	ldr	r2, [pc, #440]	@ (80091a4 <HAL_DMA_IRQHandler+0xca0>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d013      	beq.n	8009016 <HAL_DMA_IRQHandler+0xb12>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	4a6d      	ldr	r2, [pc, #436]	@ (80091a8 <HAL_DMA_IRQHandler+0xca4>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d00e      	beq.n	8009016 <HAL_DMA_IRQHandler+0xb12>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	4a6b      	ldr	r2, [pc, #428]	@ (80091ac <HAL_DMA_IRQHandler+0xca8>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d009      	beq.n	8009016 <HAL_DMA_IRQHandler+0xb12>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	4a6a      	ldr	r2, [pc, #424]	@ (80091b0 <HAL_DMA_IRQHandler+0xcac>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d004      	beq.n	8009016 <HAL_DMA_IRQHandler+0xb12>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4a68      	ldr	r2, [pc, #416]	@ (80091b4 <HAL_DMA_IRQHandler+0xcb0>)
 8009012:	4293      	cmp	r3, r2
 8009014:	d108      	bne.n	8009028 <HAL_DMA_IRQHandler+0xb24>
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	681a      	ldr	r2, [r3, #0]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f022 0208 	bic.w	r2, r2, #8
 8009024:	601a      	str	r2, [r3, #0]
 8009026:	e007      	b.n	8009038 <HAL_DMA_IRQHandler+0xb34>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	681a      	ldr	r2, [r3, #0]
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f022 0204 	bic.w	r2, r2, #4
 8009036:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800903c:	2b00      	cmp	r3, #0
 800903e:	f000 8165 	beq.w	800930c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800904a:	e15f      	b.n	800930c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009050:	f003 031f 	and.w	r3, r3, #31
 8009054:	2202      	movs	r2, #2
 8009056:	409a      	lsls	r2, r3
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	4013      	ands	r3, r2
 800905c:	2b00      	cmp	r3, #0
 800905e:	f000 80c5 	beq.w	80091ec <HAL_DMA_IRQHandler+0xce8>
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	f003 0302 	and.w	r3, r3, #2
 8009068:	2b00      	cmp	r3, #0
 800906a:	f000 80bf 	beq.w	80091ec <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009072:	f003 031f 	and.w	r3, r3, #31
 8009076:	2202      	movs	r2, #2
 8009078:	409a      	lsls	r2, r3
 800907a:	69fb      	ldr	r3, [r7, #28]
 800907c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009084:	2b00      	cmp	r3, #0
 8009086:	d018      	beq.n	80090ba <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800908e:	2b00      	cmp	r3, #0
 8009090:	d109      	bne.n	80090a6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009096:	2b00      	cmp	r3, #0
 8009098:	f000 813a 	beq.w	8009310 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80090a4:	e134      	b.n	8009310 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	f000 8130 	beq.w	8009310 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80090b8:	e12a      	b.n	8009310 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	f003 0320 	and.w	r3, r3, #32
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	f040 8089 	bne.w	80091d8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	4a2b      	ldr	r2, [pc, #172]	@ (8009178 <HAL_DMA_IRQHandler+0xc74>)
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d04a      	beq.n	8009166 <HAL_DMA_IRQHandler+0xc62>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4a29      	ldr	r2, [pc, #164]	@ (800917c <HAL_DMA_IRQHandler+0xc78>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d045      	beq.n	8009166 <HAL_DMA_IRQHandler+0xc62>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	4a28      	ldr	r2, [pc, #160]	@ (8009180 <HAL_DMA_IRQHandler+0xc7c>)
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d040      	beq.n	8009166 <HAL_DMA_IRQHandler+0xc62>
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	4a26      	ldr	r2, [pc, #152]	@ (8009184 <HAL_DMA_IRQHandler+0xc80>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d03b      	beq.n	8009166 <HAL_DMA_IRQHandler+0xc62>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	4a25      	ldr	r2, [pc, #148]	@ (8009188 <HAL_DMA_IRQHandler+0xc84>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d036      	beq.n	8009166 <HAL_DMA_IRQHandler+0xc62>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4a23      	ldr	r2, [pc, #140]	@ (800918c <HAL_DMA_IRQHandler+0xc88>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d031      	beq.n	8009166 <HAL_DMA_IRQHandler+0xc62>
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	4a22      	ldr	r2, [pc, #136]	@ (8009190 <HAL_DMA_IRQHandler+0xc8c>)
 8009108:	4293      	cmp	r3, r2
 800910a:	d02c      	beq.n	8009166 <HAL_DMA_IRQHandler+0xc62>
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4a20      	ldr	r2, [pc, #128]	@ (8009194 <HAL_DMA_IRQHandler+0xc90>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d027      	beq.n	8009166 <HAL_DMA_IRQHandler+0xc62>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	4a1f      	ldr	r2, [pc, #124]	@ (8009198 <HAL_DMA_IRQHandler+0xc94>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d022      	beq.n	8009166 <HAL_DMA_IRQHandler+0xc62>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	4a1d      	ldr	r2, [pc, #116]	@ (800919c <HAL_DMA_IRQHandler+0xc98>)
 8009126:	4293      	cmp	r3, r2
 8009128:	d01d      	beq.n	8009166 <HAL_DMA_IRQHandler+0xc62>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	4a1c      	ldr	r2, [pc, #112]	@ (80091a0 <HAL_DMA_IRQHandler+0xc9c>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d018      	beq.n	8009166 <HAL_DMA_IRQHandler+0xc62>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	4a1a      	ldr	r2, [pc, #104]	@ (80091a4 <HAL_DMA_IRQHandler+0xca0>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d013      	beq.n	8009166 <HAL_DMA_IRQHandler+0xc62>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	4a19      	ldr	r2, [pc, #100]	@ (80091a8 <HAL_DMA_IRQHandler+0xca4>)
 8009144:	4293      	cmp	r3, r2
 8009146:	d00e      	beq.n	8009166 <HAL_DMA_IRQHandler+0xc62>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	4a17      	ldr	r2, [pc, #92]	@ (80091ac <HAL_DMA_IRQHandler+0xca8>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d009      	beq.n	8009166 <HAL_DMA_IRQHandler+0xc62>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	4a16      	ldr	r2, [pc, #88]	@ (80091b0 <HAL_DMA_IRQHandler+0xcac>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d004      	beq.n	8009166 <HAL_DMA_IRQHandler+0xc62>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a14      	ldr	r2, [pc, #80]	@ (80091b4 <HAL_DMA_IRQHandler+0xcb0>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d128      	bne.n	80091b8 <HAL_DMA_IRQHandler+0xcb4>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	681a      	ldr	r2, [r3, #0]
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f022 0214 	bic.w	r2, r2, #20
 8009174:	601a      	str	r2, [r3, #0]
 8009176:	e027      	b.n	80091c8 <HAL_DMA_IRQHandler+0xcc4>
 8009178:	40020010 	.word	0x40020010
 800917c:	40020028 	.word	0x40020028
 8009180:	40020040 	.word	0x40020040
 8009184:	40020058 	.word	0x40020058
 8009188:	40020070 	.word	0x40020070
 800918c:	40020088 	.word	0x40020088
 8009190:	400200a0 	.word	0x400200a0
 8009194:	400200b8 	.word	0x400200b8
 8009198:	40020410 	.word	0x40020410
 800919c:	40020428 	.word	0x40020428
 80091a0:	40020440 	.word	0x40020440
 80091a4:	40020458 	.word	0x40020458
 80091a8:	40020470 	.word	0x40020470
 80091ac:	40020488 	.word	0x40020488
 80091b0:	400204a0 	.word	0x400204a0
 80091b4:	400204b8 	.word	0x400204b8
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	681a      	ldr	r2, [r3, #0]
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f022 020a 	bic.w	r2, r2, #10
 80091c6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2201      	movs	r2, #1
 80091cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2200      	movs	r2, #0
 80091d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091dc:	2b00      	cmp	r3, #0
 80091de:	f000 8097 	beq.w	8009310 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80091ea:	e091      	b.n	8009310 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80091f0:	f003 031f 	and.w	r3, r3, #31
 80091f4:	2208      	movs	r2, #8
 80091f6:	409a      	lsls	r2, r3
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	4013      	ands	r3, r2
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	f000 8088 	beq.w	8009312 <HAL_DMA_IRQHandler+0xe0e>
 8009202:	693b      	ldr	r3, [r7, #16]
 8009204:	f003 0308 	and.w	r3, r3, #8
 8009208:	2b00      	cmp	r3, #0
 800920a:	f000 8082 	beq.w	8009312 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	4a41      	ldr	r2, [pc, #260]	@ (8009318 <HAL_DMA_IRQHandler+0xe14>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d04a      	beq.n	80092ae <HAL_DMA_IRQHandler+0xdaa>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	4a3f      	ldr	r2, [pc, #252]	@ (800931c <HAL_DMA_IRQHandler+0xe18>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d045      	beq.n	80092ae <HAL_DMA_IRQHandler+0xdaa>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	4a3e      	ldr	r2, [pc, #248]	@ (8009320 <HAL_DMA_IRQHandler+0xe1c>)
 8009228:	4293      	cmp	r3, r2
 800922a:	d040      	beq.n	80092ae <HAL_DMA_IRQHandler+0xdaa>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	4a3c      	ldr	r2, [pc, #240]	@ (8009324 <HAL_DMA_IRQHandler+0xe20>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d03b      	beq.n	80092ae <HAL_DMA_IRQHandler+0xdaa>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4a3b      	ldr	r2, [pc, #236]	@ (8009328 <HAL_DMA_IRQHandler+0xe24>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d036      	beq.n	80092ae <HAL_DMA_IRQHandler+0xdaa>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4a39      	ldr	r2, [pc, #228]	@ (800932c <HAL_DMA_IRQHandler+0xe28>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d031      	beq.n	80092ae <HAL_DMA_IRQHandler+0xdaa>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	4a38      	ldr	r2, [pc, #224]	@ (8009330 <HAL_DMA_IRQHandler+0xe2c>)
 8009250:	4293      	cmp	r3, r2
 8009252:	d02c      	beq.n	80092ae <HAL_DMA_IRQHandler+0xdaa>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4a36      	ldr	r2, [pc, #216]	@ (8009334 <HAL_DMA_IRQHandler+0xe30>)
 800925a:	4293      	cmp	r3, r2
 800925c:	d027      	beq.n	80092ae <HAL_DMA_IRQHandler+0xdaa>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	4a35      	ldr	r2, [pc, #212]	@ (8009338 <HAL_DMA_IRQHandler+0xe34>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d022      	beq.n	80092ae <HAL_DMA_IRQHandler+0xdaa>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	4a33      	ldr	r2, [pc, #204]	@ (800933c <HAL_DMA_IRQHandler+0xe38>)
 800926e:	4293      	cmp	r3, r2
 8009270:	d01d      	beq.n	80092ae <HAL_DMA_IRQHandler+0xdaa>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	4a32      	ldr	r2, [pc, #200]	@ (8009340 <HAL_DMA_IRQHandler+0xe3c>)
 8009278:	4293      	cmp	r3, r2
 800927a:	d018      	beq.n	80092ae <HAL_DMA_IRQHandler+0xdaa>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	4a30      	ldr	r2, [pc, #192]	@ (8009344 <HAL_DMA_IRQHandler+0xe40>)
 8009282:	4293      	cmp	r3, r2
 8009284:	d013      	beq.n	80092ae <HAL_DMA_IRQHandler+0xdaa>
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	4a2f      	ldr	r2, [pc, #188]	@ (8009348 <HAL_DMA_IRQHandler+0xe44>)
 800928c:	4293      	cmp	r3, r2
 800928e:	d00e      	beq.n	80092ae <HAL_DMA_IRQHandler+0xdaa>
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	4a2d      	ldr	r2, [pc, #180]	@ (800934c <HAL_DMA_IRQHandler+0xe48>)
 8009296:	4293      	cmp	r3, r2
 8009298:	d009      	beq.n	80092ae <HAL_DMA_IRQHandler+0xdaa>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	4a2c      	ldr	r2, [pc, #176]	@ (8009350 <HAL_DMA_IRQHandler+0xe4c>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d004      	beq.n	80092ae <HAL_DMA_IRQHandler+0xdaa>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	4a2a      	ldr	r2, [pc, #168]	@ (8009354 <HAL_DMA_IRQHandler+0xe50>)
 80092aa:	4293      	cmp	r3, r2
 80092ac:	d108      	bne.n	80092c0 <HAL_DMA_IRQHandler+0xdbc>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	681a      	ldr	r2, [r3, #0]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f022 021c 	bic.w	r2, r2, #28
 80092bc:	601a      	str	r2, [r3, #0]
 80092be:	e007      	b.n	80092d0 <HAL_DMA_IRQHandler+0xdcc>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	681a      	ldr	r2, [r3, #0]
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f022 020e 	bic.w	r2, r2, #14
 80092ce:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80092d4:	f003 031f 	and.w	r3, r3, #31
 80092d8:	2201      	movs	r2, #1
 80092da:	409a      	lsls	r2, r3
 80092dc:	69fb      	ldr	r3, [r7, #28]
 80092de:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2201      	movs	r2, #1
 80092e4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2201      	movs	r2, #1
 80092ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2200      	movs	r2, #0
 80092f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d009      	beq.n	8009312 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	4798      	blx	r3
 8009306:	e004      	b.n	8009312 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8009308:	bf00      	nop
 800930a:	e002      	b.n	8009312 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800930c:	bf00      	nop
 800930e:	e000      	b.n	8009312 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009310:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8009312:	3728      	adds	r7, #40	@ 0x28
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}
 8009318:	40020010 	.word	0x40020010
 800931c:	40020028 	.word	0x40020028
 8009320:	40020040 	.word	0x40020040
 8009324:	40020058 	.word	0x40020058
 8009328:	40020070 	.word	0x40020070
 800932c:	40020088 	.word	0x40020088
 8009330:	400200a0 	.word	0x400200a0
 8009334:	400200b8 	.word	0x400200b8
 8009338:	40020410 	.word	0x40020410
 800933c:	40020428 	.word	0x40020428
 8009340:	40020440 	.word	0x40020440
 8009344:	40020458 	.word	0x40020458
 8009348:	40020470 	.word	0x40020470
 800934c:	40020488 	.word	0x40020488
 8009350:	400204a0 	.word	0x400204a0
 8009354:	400204b8 	.word	0x400204b8

08009358 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 8009358:	b480      	push	{r7}
 800935a:	b083      	sub	sp, #12
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009366:	b2db      	uxtb	r3, r3
}
 8009368:	4618      	mov	r0, r3
 800936a:	370c      	adds	r7, #12
 800936c:	46bd      	mov	sp, r7
 800936e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009372:	4770      	bx	lr

08009374 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009374:	b480      	push	{r7}
 8009376:	b087      	sub	sp, #28
 8009378:	af00      	add	r7, sp, #0
 800937a:	60f8      	str	r0, [r7, #12]
 800937c:	60b9      	str	r1, [r7, #8]
 800937e:	607a      	str	r2, [r7, #4]
 8009380:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009386:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800938c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	4a7f      	ldr	r2, [pc, #508]	@ (8009590 <DMA_SetConfig+0x21c>)
 8009394:	4293      	cmp	r3, r2
 8009396:	d072      	beq.n	800947e <DMA_SetConfig+0x10a>
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	4a7d      	ldr	r2, [pc, #500]	@ (8009594 <DMA_SetConfig+0x220>)
 800939e:	4293      	cmp	r3, r2
 80093a0:	d06d      	beq.n	800947e <DMA_SetConfig+0x10a>
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	4a7c      	ldr	r2, [pc, #496]	@ (8009598 <DMA_SetConfig+0x224>)
 80093a8:	4293      	cmp	r3, r2
 80093aa:	d068      	beq.n	800947e <DMA_SetConfig+0x10a>
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	4a7a      	ldr	r2, [pc, #488]	@ (800959c <DMA_SetConfig+0x228>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d063      	beq.n	800947e <DMA_SetConfig+0x10a>
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	4a79      	ldr	r2, [pc, #484]	@ (80095a0 <DMA_SetConfig+0x22c>)
 80093bc:	4293      	cmp	r3, r2
 80093be:	d05e      	beq.n	800947e <DMA_SetConfig+0x10a>
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	4a77      	ldr	r2, [pc, #476]	@ (80095a4 <DMA_SetConfig+0x230>)
 80093c6:	4293      	cmp	r3, r2
 80093c8:	d059      	beq.n	800947e <DMA_SetConfig+0x10a>
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	4a76      	ldr	r2, [pc, #472]	@ (80095a8 <DMA_SetConfig+0x234>)
 80093d0:	4293      	cmp	r3, r2
 80093d2:	d054      	beq.n	800947e <DMA_SetConfig+0x10a>
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	4a74      	ldr	r2, [pc, #464]	@ (80095ac <DMA_SetConfig+0x238>)
 80093da:	4293      	cmp	r3, r2
 80093dc:	d04f      	beq.n	800947e <DMA_SetConfig+0x10a>
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	4a73      	ldr	r2, [pc, #460]	@ (80095b0 <DMA_SetConfig+0x23c>)
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d04a      	beq.n	800947e <DMA_SetConfig+0x10a>
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	4a71      	ldr	r2, [pc, #452]	@ (80095b4 <DMA_SetConfig+0x240>)
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d045      	beq.n	800947e <DMA_SetConfig+0x10a>
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	4a70      	ldr	r2, [pc, #448]	@ (80095b8 <DMA_SetConfig+0x244>)
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d040      	beq.n	800947e <DMA_SetConfig+0x10a>
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	4a6e      	ldr	r2, [pc, #440]	@ (80095bc <DMA_SetConfig+0x248>)
 8009402:	4293      	cmp	r3, r2
 8009404:	d03b      	beq.n	800947e <DMA_SetConfig+0x10a>
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	4a6d      	ldr	r2, [pc, #436]	@ (80095c0 <DMA_SetConfig+0x24c>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d036      	beq.n	800947e <DMA_SetConfig+0x10a>
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4a6b      	ldr	r2, [pc, #428]	@ (80095c4 <DMA_SetConfig+0x250>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d031      	beq.n	800947e <DMA_SetConfig+0x10a>
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	4a6a      	ldr	r2, [pc, #424]	@ (80095c8 <DMA_SetConfig+0x254>)
 8009420:	4293      	cmp	r3, r2
 8009422:	d02c      	beq.n	800947e <DMA_SetConfig+0x10a>
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	4a68      	ldr	r2, [pc, #416]	@ (80095cc <DMA_SetConfig+0x258>)
 800942a:	4293      	cmp	r3, r2
 800942c:	d027      	beq.n	800947e <DMA_SetConfig+0x10a>
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	4a67      	ldr	r2, [pc, #412]	@ (80095d0 <DMA_SetConfig+0x25c>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d022      	beq.n	800947e <DMA_SetConfig+0x10a>
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	4a65      	ldr	r2, [pc, #404]	@ (80095d4 <DMA_SetConfig+0x260>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d01d      	beq.n	800947e <DMA_SetConfig+0x10a>
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	4a64      	ldr	r2, [pc, #400]	@ (80095d8 <DMA_SetConfig+0x264>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d018      	beq.n	800947e <DMA_SetConfig+0x10a>
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4a62      	ldr	r2, [pc, #392]	@ (80095dc <DMA_SetConfig+0x268>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d013      	beq.n	800947e <DMA_SetConfig+0x10a>
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	4a61      	ldr	r2, [pc, #388]	@ (80095e0 <DMA_SetConfig+0x26c>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d00e      	beq.n	800947e <DMA_SetConfig+0x10a>
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4a5f      	ldr	r2, [pc, #380]	@ (80095e4 <DMA_SetConfig+0x270>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d009      	beq.n	800947e <DMA_SetConfig+0x10a>
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	4a5e      	ldr	r2, [pc, #376]	@ (80095e8 <DMA_SetConfig+0x274>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d004      	beq.n	800947e <DMA_SetConfig+0x10a>
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	4a5c      	ldr	r2, [pc, #368]	@ (80095ec <DMA_SetConfig+0x278>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d101      	bne.n	8009482 <DMA_SetConfig+0x10e>
 800947e:	2301      	movs	r3, #1
 8009480:	e000      	b.n	8009484 <DMA_SetConfig+0x110>
 8009482:	2300      	movs	r3, #0
 8009484:	2b00      	cmp	r3, #0
 8009486:	d00d      	beq.n	80094a4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800948c:	68fa      	ldr	r2, [r7, #12]
 800948e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8009490:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009496:	2b00      	cmp	r3, #0
 8009498:	d004      	beq.n	80094a4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800949e:	68fa      	ldr	r2, [r7, #12]
 80094a0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80094a2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	4a39      	ldr	r2, [pc, #228]	@ (8009590 <DMA_SetConfig+0x21c>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d04a      	beq.n	8009544 <DMA_SetConfig+0x1d0>
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	4a38      	ldr	r2, [pc, #224]	@ (8009594 <DMA_SetConfig+0x220>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d045      	beq.n	8009544 <DMA_SetConfig+0x1d0>
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	4a36      	ldr	r2, [pc, #216]	@ (8009598 <DMA_SetConfig+0x224>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d040      	beq.n	8009544 <DMA_SetConfig+0x1d0>
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	4a35      	ldr	r2, [pc, #212]	@ (800959c <DMA_SetConfig+0x228>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d03b      	beq.n	8009544 <DMA_SetConfig+0x1d0>
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	4a33      	ldr	r2, [pc, #204]	@ (80095a0 <DMA_SetConfig+0x22c>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d036      	beq.n	8009544 <DMA_SetConfig+0x1d0>
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	4a32      	ldr	r2, [pc, #200]	@ (80095a4 <DMA_SetConfig+0x230>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d031      	beq.n	8009544 <DMA_SetConfig+0x1d0>
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	4a30      	ldr	r2, [pc, #192]	@ (80095a8 <DMA_SetConfig+0x234>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d02c      	beq.n	8009544 <DMA_SetConfig+0x1d0>
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	4a2f      	ldr	r2, [pc, #188]	@ (80095ac <DMA_SetConfig+0x238>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d027      	beq.n	8009544 <DMA_SetConfig+0x1d0>
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	4a2d      	ldr	r2, [pc, #180]	@ (80095b0 <DMA_SetConfig+0x23c>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d022      	beq.n	8009544 <DMA_SetConfig+0x1d0>
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	4a2c      	ldr	r2, [pc, #176]	@ (80095b4 <DMA_SetConfig+0x240>)
 8009504:	4293      	cmp	r3, r2
 8009506:	d01d      	beq.n	8009544 <DMA_SetConfig+0x1d0>
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	4a2a      	ldr	r2, [pc, #168]	@ (80095b8 <DMA_SetConfig+0x244>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d018      	beq.n	8009544 <DMA_SetConfig+0x1d0>
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4a29      	ldr	r2, [pc, #164]	@ (80095bc <DMA_SetConfig+0x248>)
 8009518:	4293      	cmp	r3, r2
 800951a:	d013      	beq.n	8009544 <DMA_SetConfig+0x1d0>
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4a27      	ldr	r2, [pc, #156]	@ (80095c0 <DMA_SetConfig+0x24c>)
 8009522:	4293      	cmp	r3, r2
 8009524:	d00e      	beq.n	8009544 <DMA_SetConfig+0x1d0>
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	4a26      	ldr	r2, [pc, #152]	@ (80095c4 <DMA_SetConfig+0x250>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d009      	beq.n	8009544 <DMA_SetConfig+0x1d0>
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	4a24      	ldr	r2, [pc, #144]	@ (80095c8 <DMA_SetConfig+0x254>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d004      	beq.n	8009544 <DMA_SetConfig+0x1d0>
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	4a23      	ldr	r2, [pc, #140]	@ (80095cc <DMA_SetConfig+0x258>)
 8009540:	4293      	cmp	r3, r2
 8009542:	d101      	bne.n	8009548 <DMA_SetConfig+0x1d4>
 8009544:	2301      	movs	r3, #1
 8009546:	e000      	b.n	800954a <DMA_SetConfig+0x1d6>
 8009548:	2300      	movs	r3, #0
 800954a:	2b00      	cmp	r3, #0
 800954c:	d059      	beq.n	8009602 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009552:	f003 031f 	and.w	r3, r3, #31
 8009556:	223f      	movs	r2, #63	@ 0x3f
 8009558:	409a      	lsls	r2, r3
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	681a      	ldr	r2, [r3, #0]
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800956c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	683a      	ldr	r2, [r7, #0]
 8009574:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	689b      	ldr	r3, [r3, #8]
 800957a:	2b40      	cmp	r3, #64	@ 0x40
 800957c:	d138      	bne.n	80095f0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	687a      	ldr	r2, [r7, #4]
 8009584:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	68ba      	ldr	r2, [r7, #8]
 800958c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800958e:	e086      	b.n	800969e <DMA_SetConfig+0x32a>
 8009590:	40020010 	.word	0x40020010
 8009594:	40020028 	.word	0x40020028
 8009598:	40020040 	.word	0x40020040
 800959c:	40020058 	.word	0x40020058
 80095a0:	40020070 	.word	0x40020070
 80095a4:	40020088 	.word	0x40020088
 80095a8:	400200a0 	.word	0x400200a0
 80095ac:	400200b8 	.word	0x400200b8
 80095b0:	40020410 	.word	0x40020410
 80095b4:	40020428 	.word	0x40020428
 80095b8:	40020440 	.word	0x40020440
 80095bc:	40020458 	.word	0x40020458
 80095c0:	40020470 	.word	0x40020470
 80095c4:	40020488 	.word	0x40020488
 80095c8:	400204a0 	.word	0x400204a0
 80095cc:	400204b8 	.word	0x400204b8
 80095d0:	58025408 	.word	0x58025408
 80095d4:	5802541c 	.word	0x5802541c
 80095d8:	58025430 	.word	0x58025430
 80095dc:	58025444 	.word	0x58025444
 80095e0:	58025458 	.word	0x58025458
 80095e4:	5802546c 	.word	0x5802546c
 80095e8:	58025480 	.word	0x58025480
 80095ec:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	68ba      	ldr	r2, [r7, #8]
 80095f6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	687a      	ldr	r2, [r7, #4]
 80095fe:	60da      	str	r2, [r3, #12]
}
 8009600:	e04d      	b.n	800969e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	4a29      	ldr	r2, [pc, #164]	@ (80096ac <DMA_SetConfig+0x338>)
 8009608:	4293      	cmp	r3, r2
 800960a:	d022      	beq.n	8009652 <DMA_SetConfig+0x2de>
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	4a27      	ldr	r2, [pc, #156]	@ (80096b0 <DMA_SetConfig+0x33c>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d01d      	beq.n	8009652 <DMA_SetConfig+0x2de>
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4a26      	ldr	r2, [pc, #152]	@ (80096b4 <DMA_SetConfig+0x340>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d018      	beq.n	8009652 <DMA_SetConfig+0x2de>
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4a24      	ldr	r2, [pc, #144]	@ (80096b8 <DMA_SetConfig+0x344>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d013      	beq.n	8009652 <DMA_SetConfig+0x2de>
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	4a23      	ldr	r2, [pc, #140]	@ (80096bc <DMA_SetConfig+0x348>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d00e      	beq.n	8009652 <DMA_SetConfig+0x2de>
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4a21      	ldr	r2, [pc, #132]	@ (80096c0 <DMA_SetConfig+0x34c>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d009      	beq.n	8009652 <DMA_SetConfig+0x2de>
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	4a20      	ldr	r2, [pc, #128]	@ (80096c4 <DMA_SetConfig+0x350>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d004      	beq.n	8009652 <DMA_SetConfig+0x2de>
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	4a1e      	ldr	r2, [pc, #120]	@ (80096c8 <DMA_SetConfig+0x354>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d101      	bne.n	8009656 <DMA_SetConfig+0x2e2>
 8009652:	2301      	movs	r3, #1
 8009654:	e000      	b.n	8009658 <DMA_SetConfig+0x2e4>
 8009656:	2300      	movs	r3, #0
 8009658:	2b00      	cmp	r3, #0
 800965a:	d020      	beq.n	800969e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009660:	f003 031f 	and.w	r3, r3, #31
 8009664:	2201      	movs	r2, #1
 8009666:	409a      	lsls	r2, r3
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	683a      	ldr	r2, [r7, #0]
 8009672:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	689b      	ldr	r3, [r3, #8]
 8009678:	2b40      	cmp	r3, #64	@ 0x40
 800967a:	d108      	bne.n	800968e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	687a      	ldr	r2, [r7, #4]
 8009682:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	68ba      	ldr	r2, [r7, #8]
 800968a:	60da      	str	r2, [r3, #12]
}
 800968c:	e007      	b.n	800969e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	68ba      	ldr	r2, [r7, #8]
 8009694:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	687a      	ldr	r2, [r7, #4]
 800969c:	60da      	str	r2, [r3, #12]
}
 800969e:	bf00      	nop
 80096a0:	371c      	adds	r7, #28
 80096a2:	46bd      	mov	sp, r7
 80096a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a8:	4770      	bx	lr
 80096aa:	bf00      	nop
 80096ac:	58025408 	.word	0x58025408
 80096b0:	5802541c 	.word	0x5802541c
 80096b4:	58025430 	.word	0x58025430
 80096b8:	58025444 	.word	0x58025444
 80096bc:	58025458 	.word	0x58025458
 80096c0:	5802546c 	.word	0x5802546c
 80096c4:	58025480 	.word	0x58025480
 80096c8:	58025494 	.word	0x58025494

080096cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b085      	sub	sp, #20
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4a42      	ldr	r2, [pc, #264]	@ (80097e4 <DMA_CalcBaseAndBitshift+0x118>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d04a      	beq.n	8009774 <DMA_CalcBaseAndBitshift+0xa8>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	4a41      	ldr	r2, [pc, #260]	@ (80097e8 <DMA_CalcBaseAndBitshift+0x11c>)
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d045      	beq.n	8009774 <DMA_CalcBaseAndBitshift+0xa8>
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	4a3f      	ldr	r2, [pc, #252]	@ (80097ec <DMA_CalcBaseAndBitshift+0x120>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d040      	beq.n	8009774 <DMA_CalcBaseAndBitshift+0xa8>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	4a3e      	ldr	r2, [pc, #248]	@ (80097f0 <DMA_CalcBaseAndBitshift+0x124>)
 80096f8:	4293      	cmp	r3, r2
 80096fa:	d03b      	beq.n	8009774 <DMA_CalcBaseAndBitshift+0xa8>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4a3c      	ldr	r2, [pc, #240]	@ (80097f4 <DMA_CalcBaseAndBitshift+0x128>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d036      	beq.n	8009774 <DMA_CalcBaseAndBitshift+0xa8>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4a3b      	ldr	r2, [pc, #236]	@ (80097f8 <DMA_CalcBaseAndBitshift+0x12c>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d031      	beq.n	8009774 <DMA_CalcBaseAndBitshift+0xa8>
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4a39      	ldr	r2, [pc, #228]	@ (80097fc <DMA_CalcBaseAndBitshift+0x130>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d02c      	beq.n	8009774 <DMA_CalcBaseAndBitshift+0xa8>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	4a38      	ldr	r2, [pc, #224]	@ (8009800 <DMA_CalcBaseAndBitshift+0x134>)
 8009720:	4293      	cmp	r3, r2
 8009722:	d027      	beq.n	8009774 <DMA_CalcBaseAndBitshift+0xa8>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	4a36      	ldr	r2, [pc, #216]	@ (8009804 <DMA_CalcBaseAndBitshift+0x138>)
 800972a:	4293      	cmp	r3, r2
 800972c:	d022      	beq.n	8009774 <DMA_CalcBaseAndBitshift+0xa8>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	4a35      	ldr	r2, [pc, #212]	@ (8009808 <DMA_CalcBaseAndBitshift+0x13c>)
 8009734:	4293      	cmp	r3, r2
 8009736:	d01d      	beq.n	8009774 <DMA_CalcBaseAndBitshift+0xa8>
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	4a33      	ldr	r2, [pc, #204]	@ (800980c <DMA_CalcBaseAndBitshift+0x140>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d018      	beq.n	8009774 <DMA_CalcBaseAndBitshift+0xa8>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	4a32      	ldr	r2, [pc, #200]	@ (8009810 <DMA_CalcBaseAndBitshift+0x144>)
 8009748:	4293      	cmp	r3, r2
 800974a:	d013      	beq.n	8009774 <DMA_CalcBaseAndBitshift+0xa8>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	4a30      	ldr	r2, [pc, #192]	@ (8009814 <DMA_CalcBaseAndBitshift+0x148>)
 8009752:	4293      	cmp	r3, r2
 8009754:	d00e      	beq.n	8009774 <DMA_CalcBaseAndBitshift+0xa8>
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	4a2f      	ldr	r2, [pc, #188]	@ (8009818 <DMA_CalcBaseAndBitshift+0x14c>)
 800975c:	4293      	cmp	r3, r2
 800975e:	d009      	beq.n	8009774 <DMA_CalcBaseAndBitshift+0xa8>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	4a2d      	ldr	r2, [pc, #180]	@ (800981c <DMA_CalcBaseAndBitshift+0x150>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d004      	beq.n	8009774 <DMA_CalcBaseAndBitshift+0xa8>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	4a2c      	ldr	r2, [pc, #176]	@ (8009820 <DMA_CalcBaseAndBitshift+0x154>)
 8009770:	4293      	cmp	r3, r2
 8009772:	d101      	bne.n	8009778 <DMA_CalcBaseAndBitshift+0xac>
 8009774:	2301      	movs	r3, #1
 8009776:	e000      	b.n	800977a <DMA_CalcBaseAndBitshift+0xae>
 8009778:	2300      	movs	r3, #0
 800977a:	2b00      	cmp	r3, #0
 800977c:	d024      	beq.n	80097c8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	b2db      	uxtb	r3, r3
 8009784:	3b10      	subs	r3, #16
 8009786:	4a27      	ldr	r2, [pc, #156]	@ (8009824 <DMA_CalcBaseAndBitshift+0x158>)
 8009788:	fba2 2303 	umull	r2, r3, r2, r3
 800978c:	091b      	lsrs	r3, r3, #4
 800978e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	f003 0307 	and.w	r3, r3, #7
 8009796:	4a24      	ldr	r2, [pc, #144]	@ (8009828 <DMA_CalcBaseAndBitshift+0x15c>)
 8009798:	5cd3      	ldrb	r3, [r2, r3]
 800979a:	461a      	mov	r2, r3
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	2b03      	cmp	r3, #3
 80097a4:	d908      	bls.n	80097b8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	461a      	mov	r2, r3
 80097ac:	4b1f      	ldr	r3, [pc, #124]	@ (800982c <DMA_CalcBaseAndBitshift+0x160>)
 80097ae:	4013      	ands	r3, r2
 80097b0:	1d1a      	adds	r2, r3, #4
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	659a      	str	r2, [r3, #88]	@ 0x58
 80097b6:	e00d      	b.n	80097d4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	461a      	mov	r2, r3
 80097be:	4b1b      	ldr	r3, [pc, #108]	@ (800982c <DMA_CalcBaseAndBitshift+0x160>)
 80097c0:	4013      	ands	r3, r2
 80097c2:	687a      	ldr	r2, [r7, #4]
 80097c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80097c6:	e005      	b.n	80097d4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80097d8:	4618      	mov	r0, r3
 80097da:	3714      	adds	r7, #20
 80097dc:	46bd      	mov	sp, r7
 80097de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e2:	4770      	bx	lr
 80097e4:	40020010 	.word	0x40020010
 80097e8:	40020028 	.word	0x40020028
 80097ec:	40020040 	.word	0x40020040
 80097f0:	40020058 	.word	0x40020058
 80097f4:	40020070 	.word	0x40020070
 80097f8:	40020088 	.word	0x40020088
 80097fc:	400200a0 	.word	0x400200a0
 8009800:	400200b8 	.word	0x400200b8
 8009804:	40020410 	.word	0x40020410
 8009808:	40020428 	.word	0x40020428
 800980c:	40020440 	.word	0x40020440
 8009810:	40020458 	.word	0x40020458
 8009814:	40020470 	.word	0x40020470
 8009818:	40020488 	.word	0x40020488
 800981c:	400204a0 	.word	0x400204a0
 8009820:	400204b8 	.word	0x400204b8
 8009824:	aaaaaaab 	.word	0xaaaaaaab
 8009828:	0801f9a4 	.word	0x0801f9a4
 800982c:	fffffc00 	.word	0xfffffc00

08009830 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8009830:	b480      	push	{r7}
 8009832:	b085      	sub	sp, #20
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009838:	2300      	movs	r3, #0
 800983a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	699b      	ldr	r3, [r3, #24]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d120      	bne.n	8009886 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009848:	2b03      	cmp	r3, #3
 800984a:	d858      	bhi.n	80098fe <DMA_CheckFifoParam+0xce>
 800984c:	a201      	add	r2, pc, #4	@ (adr r2, 8009854 <DMA_CheckFifoParam+0x24>)
 800984e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009852:	bf00      	nop
 8009854:	08009865 	.word	0x08009865
 8009858:	08009877 	.word	0x08009877
 800985c:	08009865 	.word	0x08009865
 8009860:	080098ff 	.word	0x080098ff
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009868:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800986c:	2b00      	cmp	r3, #0
 800986e:	d048      	beq.n	8009902 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8009870:	2301      	movs	r3, #1
 8009872:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009874:	e045      	b.n	8009902 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800987a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800987e:	d142      	bne.n	8009906 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8009880:	2301      	movs	r3, #1
 8009882:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009884:	e03f      	b.n	8009906 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	699b      	ldr	r3, [r3, #24]
 800988a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800988e:	d123      	bne.n	80098d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009894:	2b03      	cmp	r3, #3
 8009896:	d838      	bhi.n	800990a <DMA_CheckFifoParam+0xda>
 8009898:	a201      	add	r2, pc, #4	@ (adr r2, 80098a0 <DMA_CheckFifoParam+0x70>)
 800989a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800989e:	bf00      	nop
 80098a0:	080098b1 	.word	0x080098b1
 80098a4:	080098b7 	.word	0x080098b7
 80098a8:	080098b1 	.word	0x080098b1
 80098ac:	080098c9 	.word	0x080098c9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80098b0:	2301      	movs	r3, #1
 80098b2:	73fb      	strb	r3, [r7, #15]
        break;
 80098b4:	e030      	b.n	8009918 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d025      	beq.n	800990e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80098c2:	2301      	movs	r3, #1
 80098c4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80098c6:	e022      	b.n	800990e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098cc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80098d0:	d11f      	bne.n	8009912 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80098d2:	2301      	movs	r3, #1
 80098d4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80098d6:	e01c      	b.n	8009912 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098dc:	2b02      	cmp	r3, #2
 80098de:	d902      	bls.n	80098e6 <DMA_CheckFifoParam+0xb6>
 80098e0:	2b03      	cmp	r3, #3
 80098e2:	d003      	beq.n	80098ec <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80098e4:	e018      	b.n	8009918 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80098e6:	2301      	movs	r3, #1
 80098e8:	73fb      	strb	r3, [r7, #15]
        break;
 80098ea:	e015      	b.n	8009918 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d00e      	beq.n	8009916 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80098f8:	2301      	movs	r3, #1
 80098fa:	73fb      	strb	r3, [r7, #15]
    break;
 80098fc:	e00b      	b.n	8009916 <DMA_CheckFifoParam+0xe6>
        break;
 80098fe:	bf00      	nop
 8009900:	e00a      	b.n	8009918 <DMA_CheckFifoParam+0xe8>
        break;
 8009902:	bf00      	nop
 8009904:	e008      	b.n	8009918 <DMA_CheckFifoParam+0xe8>
        break;
 8009906:	bf00      	nop
 8009908:	e006      	b.n	8009918 <DMA_CheckFifoParam+0xe8>
        break;
 800990a:	bf00      	nop
 800990c:	e004      	b.n	8009918 <DMA_CheckFifoParam+0xe8>
        break;
 800990e:	bf00      	nop
 8009910:	e002      	b.n	8009918 <DMA_CheckFifoParam+0xe8>
        break;
 8009912:	bf00      	nop
 8009914:	e000      	b.n	8009918 <DMA_CheckFifoParam+0xe8>
    break;
 8009916:	bf00      	nop
    }
  }

  return status;
 8009918:	7bfb      	ldrb	r3, [r7, #15]
}
 800991a:	4618      	mov	r0, r3
 800991c:	3714      	adds	r7, #20
 800991e:	46bd      	mov	sp, r7
 8009920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009924:	4770      	bx	lr
 8009926:	bf00      	nop

08009928 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009928:	b480      	push	{r7}
 800992a:	b085      	sub	sp, #20
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	4a38      	ldr	r2, [pc, #224]	@ (8009a1c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800993c:	4293      	cmp	r3, r2
 800993e:	d022      	beq.n	8009986 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	4a36      	ldr	r2, [pc, #216]	@ (8009a20 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8009946:	4293      	cmp	r3, r2
 8009948:	d01d      	beq.n	8009986 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	4a35      	ldr	r2, [pc, #212]	@ (8009a24 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8009950:	4293      	cmp	r3, r2
 8009952:	d018      	beq.n	8009986 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	4a33      	ldr	r2, [pc, #204]	@ (8009a28 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800995a:	4293      	cmp	r3, r2
 800995c:	d013      	beq.n	8009986 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	4a32      	ldr	r2, [pc, #200]	@ (8009a2c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d00e      	beq.n	8009986 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	4a30      	ldr	r2, [pc, #192]	@ (8009a30 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800996e:	4293      	cmp	r3, r2
 8009970:	d009      	beq.n	8009986 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	4a2f      	ldr	r2, [pc, #188]	@ (8009a34 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8009978:	4293      	cmp	r3, r2
 800997a:	d004      	beq.n	8009986 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	4a2d      	ldr	r2, [pc, #180]	@ (8009a38 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8009982:	4293      	cmp	r3, r2
 8009984:	d101      	bne.n	800998a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8009986:	2301      	movs	r3, #1
 8009988:	e000      	b.n	800998c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800998a:	2300      	movs	r3, #0
 800998c:	2b00      	cmp	r3, #0
 800998e:	d01a      	beq.n	80099c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	b2db      	uxtb	r3, r3
 8009996:	3b08      	subs	r3, #8
 8009998:	4a28      	ldr	r2, [pc, #160]	@ (8009a3c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800999a:	fba2 2303 	umull	r2, r3, r2, r3
 800999e:	091b      	lsrs	r3, r3, #4
 80099a0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80099a2:	68fa      	ldr	r2, [r7, #12]
 80099a4:	4b26      	ldr	r3, [pc, #152]	@ (8009a40 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80099a6:	4413      	add	r3, r2
 80099a8:	009b      	lsls	r3, r3, #2
 80099aa:	461a      	mov	r2, r3
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	4a24      	ldr	r2, [pc, #144]	@ (8009a44 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80099b4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	f003 031f 	and.w	r3, r3, #31
 80099bc:	2201      	movs	r2, #1
 80099be:	409a      	lsls	r2, r3
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80099c4:	e024      	b.n	8009a10 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	b2db      	uxtb	r3, r3
 80099cc:	3b10      	subs	r3, #16
 80099ce:	4a1e      	ldr	r2, [pc, #120]	@ (8009a48 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80099d0:	fba2 2303 	umull	r2, r3, r2, r3
 80099d4:	091b      	lsrs	r3, r3, #4
 80099d6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	4a1c      	ldr	r2, [pc, #112]	@ (8009a4c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d806      	bhi.n	80099ee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	4a1b      	ldr	r2, [pc, #108]	@ (8009a50 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d902      	bls.n	80099ee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	3308      	adds	r3, #8
 80099ec:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80099ee:	68fa      	ldr	r2, [r7, #12]
 80099f0:	4b18      	ldr	r3, [pc, #96]	@ (8009a54 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80099f2:	4413      	add	r3, r2
 80099f4:	009b      	lsls	r3, r3, #2
 80099f6:	461a      	mov	r2, r3
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	4a16      	ldr	r2, [pc, #88]	@ (8009a58 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8009a00:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	f003 031f 	and.w	r3, r3, #31
 8009a08:	2201      	movs	r2, #1
 8009a0a:	409a      	lsls	r2, r3
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009a10:	bf00      	nop
 8009a12:	3714      	adds	r7, #20
 8009a14:	46bd      	mov	sp, r7
 8009a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1a:	4770      	bx	lr
 8009a1c:	58025408 	.word	0x58025408
 8009a20:	5802541c 	.word	0x5802541c
 8009a24:	58025430 	.word	0x58025430
 8009a28:	58025444 	.word	0x58025444
 8009a2c:	58025458 	.word	0x58025458
 8009a30:	5802546c 	.word	0x5802546c
 8009a34:	58025480 	.word	0x58025480
 8009a38:	58025494 	.word	0x58025494
 8009a3c:	cccccccd 	.word	0xcccccccd
 8009a40:	16009600 	.word	0x16009600
 8009a44:	58025880 	.word	0x58025880
 8009a48:	aaaaaaab 	.word	0xaaaaaaab
 8009a4c:	400204b8 	.word	0x400204b8
 8009a50:	4002040f 	.word	0x4002040f
 8009a54:	10008200 	.word	0x10008200
 8009a58:	40020880 	.word	0x40020880

08009a5c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b085      	sub	sp, #20
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	685b      	ldr	r3, [r3, #4]
 8009a68:	b2db      	uxtb	r3, r3
 8009a6a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d04a      	beq.n	8009b08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	2b08      	cmp	r3, #8
 8009a76:	d847      	bhi.n	8009b08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	4a25      	ldr	r2, [pc, #148]	@ (8009b14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d022      	beq.n	8009ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4a24      	ldr	r2, [pc, #144]	@ (8009b18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	d01d      	beq.n	8009ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	4a22      	ldr	r2, [pc, #136]	@ (8009b1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8009a92:	4293      	cmp	r3, r2
 8009a94:	d018      	beq.n	8009ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	4a21      	ldr	r2, [pc, #132]	@ (8009b20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d013      	beq.n	8009ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4a1f      	ldr	r2, [pc, #124]	@ (8009b24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d00e      	beq.n	8009ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	4a1e      	ldr	r2, [pc, #120]	@ (8009b28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d009      	beq.n	8009ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	4a1c      	ldr	r2, [pc, #112]	@ (8009b2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8009aba:	4293      	cmp	r3, r2
 8009abc:	d004      	beq.n	8009ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	4a1b      	ldr	r2, [pc, #108]	@ (8009b30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	d101      	bne.n	8009acc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8009ac8:	2301      	movs	r3, #1
 8009aca:	e000      	b.n	8009ace <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8009acc:	2300      	movs	r3, #0
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d00a      	beq.n	8009ae8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8009ad2:	68fa      	ldr	r2, [r7, #12]
 8009ad4:	4b17      	ldr	r3, [pc, #92]	@ (8009b34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8009ad6:	4413      	add	r3, r2
 8009ad8:	009b      	lsls	r3, r3, #2
 8009ada:	461a      	mov	r2, r3
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	4a15      	ldr	r2, [pc, #84]	@ (8009b38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8009ae4:	671a      	str	r2, [r3, #112]	@ 0x70
 8009ae6:	e009      	b.n	8009afc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009ae8:	68fa      	ldr	r2, [r7, #12]
 8009aea:	4b14      	ldr	r3, [pc, #80]	@ (8009b3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8009aec:	4413      	add	r3, r2
 8009aee:	009b      	lsls	r3, r3, #2
 8009af0:	461a      	mov	r2, r3
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	4a11      	ldr	r2, [pc, #68]	@ (8009b40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8009afa:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	3b01      	subs	r3, #1
 8009b00:	2201      	movs	r2, #1
 8009b02:	409a      	lsls	r2, r3
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8009b08:	bf00      	nop
 8009b0a:	3714      	adds	r7, #20
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b12:	4770      	bx	lr
 8009b14:	58025408 	.word	0x58025408
 8009b18:	5802541c 	.word	0x5802541c
 8009b1c:	58025430 	.word	0x58025430
 8009b20:	58025444 	.word	0x58025444
 8009b24:	58025458 	.word	0x58025458
 8009b28:	5802546c 	.word	0x5802546c
 8009b2c:	58025480 	.word	0x58025480
 8009b30:	58025494 	.word	0x58025494
 8009b34:	1600963f 	.word	0x1600963f
 8009b38:	58025940 	.word	0x58025940
 8009b3c:	1000823f 	.word	0x1000823f
 8009b40:	40020940 	.word	0x40020940

08009b44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8009b44:	b480      	push	{r7}
 8009b46:	b089      	sub	sp, #36	@ 0x24
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
 8009b4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8009b52:	4b86      	ldr	r3, [pc, #536]	@ (8009d6c <HAL_GPIO_Init+0x228>)
 8009b54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009b56:	e18c      	b.n	8009e72 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	681a      	ldr	r2, [r3, #0]
 8009b5c:	2101      	movs	r1, #1
 8009b5e:	69fb      	ldr	r3, [r7, #28]
 8009b60:	fa01 f303 	lsl.w	r3, r1, r3
 8009b64:	4013      	ands	r3, r2
 8009b66:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	f000 817e 	beq.w	8009e6c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	685b      	ldr	r3, [r3, #4]
 8009b74:	f003 0303 	and.w	r3, r3, #3
 8009b78:	2b01      	cmp	r3, #1
 8009b7a:	d005      	beq.n	8009b88 <HAL_GPIO_Init+0x44>
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	685b      	ldr	r3, [r3, #4]
 8009b80:	f003 0303 	and.w	r3, r3, #3
 8009b84:	2b02      	cmp	r3, #2
 8009b86:	d130      	bne.n	8009bea <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	689b      	ldr	r3, [r3, #8]
 8009b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009b8e:	69fb      	ldr	r3, [r7, #28]
 8009b90:	005b      	lsls	r3, r3, #1
 8009b92:	2203      	movs	r2, #3
 8009b94:	fa02 f303 	lsl.w	r3, r2, r3
 8009b98:	43db      	mvns	r3, r3
 8009b9a:	69ba      	ldr	r2, [r7, #24]
 8009b9c:	4013      	ands	r3, r2
 8009b9e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	68da      	ldr	r2, [r3, #12]
 8009ba4:	69fb      	ldr	r3, [r7, #28]
 8009ba6:	005b      	lsls	r3, r3, #1
 8009ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8009bac:	69ba      	ldr	r2, [r7, #24]
 8009bae:	4313      	orrs	r3, r2
 8009bb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	69ba      	ldr	r2, [r7, #24]
 8009bb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	685b      	ldr	r3, [r3, #4]
 8009bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009bbe:	2201      	movs	r2, #1
 8009bc0:	69fb      	ldr	r3, [r7, #28]
 8009bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8009bc6:	43db      	mvns	r3, r3
 8009bc8:	69ba      	ldr	r2, [r7, #24]
 8009bca:	4013      	ands	r3, r2
 8009bcc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	685b      	ldr	r3, [r3, #4]
 8009bd2:	091b      	lsrs	r3, r3, #4
 8009bd4:	f003 0201 	and.w	r2, r3, #1
 8009bd8:	69fb      	ldr	r3, [r7, #28]
 8009bda:	fa02 f303 	lsl.w	r3, r2, r3
 8009bde:	69ba      	ldr	r2, [r7, #24]
 8009be0:	4313      	orrs	r3, r2
 8009be2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	69ba      	ldr	r2, [r7, #24]
 8009be8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	685b      	ldr	r3, [r3, #4]
 8009bee:	f003 0303 	and.w	r3, r3, #3
 8009bf2:	2b03      	cmp	r3, #3
 8009bf4:	d017      	beq.n	8009c26 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	68db      	ldr	r3, [r3, #12]
 8009bfa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009bfc:	69fb      	ldr	r3, [r7, #28]
 8009bfe:	005b      	lsls	r3, r3, #1
 8009c00:	2203      	movs	r2, #3
 8009c02:	fa02 f303 	lsl.w	r3, r2, r3
 8009c06:	43db      	mvns	r3, r3
 8009c08:	69ba      	ldr	r2, [r7, #24]
 8009c0a:	4013      	ands	r3, r2
 8009c0c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	689a      	ldr	r2, [r3, #8]
 8009c12:	69fb      	ldr	r3, [r7, #28]
 8009c14:	005b      	lsls	r3, r3, #1
 8009c16:	fa02 f303 	lsl.w	r3, r2, r3
 8009c1a:	69ba      	ldr	r2, [r7, #24]
 8009c1c:	4313      	orrs	r3, r2
 8009c1e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	69ba      	ldr	r2, [r7, #24]
 8009c24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	685b      	ldr	r3, [r3, #4]
 8009c2a:	f003 0303 	and.w	r3, r3, #3
 8009c2e:	2b02      	cmp	r3, #2
 8009c30:	d123      	bne.n	8009c7a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009c32:	69fb      	ldr	r3, [r7, #28]
 8009c34:	08da      	lsrs	r2, r3, #3
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	3208      	adds	r2, #8
 8009c3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009c40:	69fb      	ldr	r3, [r7, #28]
 8009c42:	f003 0307 	and.w	r3, r3, #7
 8009c46:	009b      	lsls	r3, r3, #2
 8009c48:	220f      	movs	r2, #15
 8009c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8009c4e:	43db      	mvns	r3, r3
 8009c50:	69ba      	ldr	r2, [r7, #24]
 8009c52:	4013      	ands	r3, r2
 8009c54:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	691a      	ldr	r2, [r3, #16]
 8009c5a:	69fb      	ldr	r3, [r7, #28]
 8009c5c:	f003 0307 	and.w	r3, r3, #7
 8009c60:	009b      	lsls	r3, r3, #2
 8009c62:	fa02 f303 	lsl.w	r3, r2, r3
 8009c66:	69ba      	ldr	r2, [r7, #24]
 8009c68:	4313      	orrs	r3, r2
 8009c6a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009c6c:	69fb      	ldr	r3, [r7, #28]
 8009c6e:	08da      	lsrs	r2, r3, #3
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	3208      	adds	r2, #8
 8009c74:	69b9      	ldr	r1, [r7, #24]
 8009c76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009c80:	69fb      	ldr	r3, [r7, #28]
 8009c82:	005b      	lsls	r3, r3, #1
 8009c84:	2203      	movs	r2, #3
 8009c86:	fa02 f303 	lsl.w	r3, r2, r3
 8009c8a:	43db      	mvns	r3, r3
 8009c8c:	69ba      	ldr	r2, [r7, #24]
 8009c8e:	4013      	ands	r3, r2
 8009c90:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	685b      	ldr	r3, [r3, #4]
 8009c96:	f003 0203 	and.w	r2, r3, #3
 8009c9a:	69fb      	ldr	r3, [r7, #28]
 8009c9c:	005b      	lsls	r3, r3, #1
 8009c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8009ca2:	69ba      	ldr	r2, [r7, #24]
 8009ca4:	4313      	orrs	r3, r2
 8009ca6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	69ba      	ldr	r2, [r7, #24]
 8009cac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	685b      	ldr	r3, [r3, #4]
 8009cb2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	f000 80d8 	beq.w	8009e6c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009cbc:	4b2c      	ldr	r3, [pc, #176]	@ (8009d70 <HAL_GPIO_Init+0x22c>)
 8009cbe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009cc2:	4a2b      	ldr	r2, [pc, #172]	@ (8009d70 <HAL_GPIO_Init+0x22c>)
 8009cc4:	f043 0302 	orr.w	r3, r3, #2
 8009cc8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8009ccc:	4b28      	ldr	r3, [pc, #160]	@ (8009d70 <HAL_GPIO_Init+0x22c>)
 8009cce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009cd2:	f003 0302 	and.w	r3, r3, #2
 8009cd6:	60fb      	str	r3, [r7, #12]
 8009cd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009cda:	4a26      	ldr	r2, [pc, #152]	@ (8009d74 <HAL_GPIO_Init+0x230>)
 8009cdc:	69fb      	ldr	r3, [r7, #28]
 8009cde:	089b      	lsrs	r3, r3, #2
 8009ce0:	3302      	adds	r3, #2
 8009ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009ce8:	69fb      	ldr	r3, [r7, #28]
 8009cea:	f003 0303 	and.w	r3, r3, #3
 8009cee:	009b      	lsls	r3, r3, #2
 8009cf0:	220f      	movs	r2, #15
 8009cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8009cf6:	43db      	mvns	r3, r3
 8009cf8:	69ba      	ldr	r2, [r7, #24]
 8009cfa:	4013      	ands	r3, r2
 8009cfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	4a1d      	ldr	r2, [pc, #116]	@ (8009d78 <HAL_GPIO_Init+0x234>)
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d04a      	beq.n	8009d9c <HAL_GPIO_Init+0x258>
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	4a1c      	ldr	r2, [pc, #112]	@ (8009d7c <HAL_GPIO_Init+0x238>)
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	d02b      	beq.n	8009d66 <HAL_GPIO_Init+0x222>
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	4a1b      	ldr	r2, [pc, #108]	@ (8009d80 <HAL_GPIO_Init+0x23c>)
 8009d12:	4293      	cmp	r3, r2
 8009d14:	d025      	beq.n	8009d62 <HAL_GPIO_Init+0x21e>
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	4a1a      	ldr	r2, [pc, #104]	@ (8009d84 <HAL_GPIO_Init+0x240>)
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d01f      	beq.n	8009d5e <HAL_GPIO_Init+0x21a>
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	4a19      	ldr	r2, [pc, #100]	@ (8009d88 <HAL_GPIO_Init+0x244>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d019      	beq.n	8009d5a <HAL_GPIO_Init+0x216>
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	4a18      	ldr	r2, [pc, #96]	@ (8009d8c <HAL_GPIO_Init+0x248>)
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	d013      	beq.n	8009d56 <HAL_GPIO_Init+0x212>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	4a17      	ldr	r2, [pc, #92]	@ (8009d90 <HAL_GPIO_Init+0x24c>)
 8009d32:	4293      	cmp	r3, r2
 8009d34:	d00d      	beq.n	8009d52 <HAL_GPIO_Init+0x20e>
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	4a16      	ldr	r2, [pc, #88]	@ (8009d94 <HAL_GPIO_Init+0x250>)
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d007      	beq.n	8009d4e <HAL_GPIO_Init+0x20a>
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	4a15      	ldr	r2, [pc, #84]	@ (8009d98 <HAL_GPIO_Init+0x254>)
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d101      	bne.n	8009d4a <HAL_GPIO_Init+0x206>
 8009d46:	2309      	movs	r3, #9
 8009d48:	e029      	b.n	8009d9e <HAL_GPIO_Init+0x25a>
 8009d4a:	230a      	movs	r3, #10
 8009d4c:	e027      	b.n	8009d9e <HAL_GPIO_Init+0x25a>
 8009d4e:	2307      	movs	r3, #7
 8009d50:	e025      	b.n	8009d9e <HAL_GPIO_Init+0x25a>
 8009d52:	2306      	movs	r3, #6
 8009d54:	e023      	b.n	8009d9e <HAL_GPIO_Init+0x25a>
 8009d56:	2305      	movs	r3, #5
 8009d58:	e021      	b.n	8009d9e <HAL_GPIO_Init+0x25a>
 8009d5a:	2304      	movs	r3, #4
 8009d5c:	e01f      	b.n	8009d9e <HAL_GPIO_Init+0x25a>
 8009d5e:	2303      	movs	r3, #3
 8009d60:	e01d      	b.n	8009d9e <HAL_GPIO_Init+0x25a>
 8009d62:	2302      	movs	r3, #2
 8009d64:	e01b      	b.n	8009d9e <HAL_GPIO_Init+0x25a>
 8009d66:	2301      	movs	r3, #1
 8009d68:	e019      	b.n	8009d9e <HAL_GPIO_Init+0x25a>
 8009d6a:	bf00      	nop
 8009d6c:	58000080 	.word	0x58000080
 8009d70:	58024400 	.word	0x58024400
 8009d74:	58000400 	.word	0x58000400
 8009d78:	58020000 	.word	0x58020000
 8009d7c:	58020400 	.word	0x58020400
 8009d80:	58020800 	.word	0x58020800
 8009d84:	58020c00 	.word	0x58020c00
 8009d88:	58021000 	.word	0x58021000
 8009d8c:	58021400 	.word	0x58021400
 8009d90:	58021800 	.word	0x58021800
 8009d94:	58021c00 	.word	0x58021c00
 8009d98:	58022400 	.word	0x58022400
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	69fa      	ldr	r2, [r7, #28]
 8009da0:	f002 0203 	and.w	r2, r2, #3
 8009da4:	0092      	lsls	r2, r2, #2
 8009da6:	4093      	lsls	r3, r2
 8009da8:	69ba      	ldr	r2, [r7, #24]
 8009daa:	4313      	orrs	r3, r2
 8009dac:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009dae:	4938      	ldr	r1, [pc, #224]	@ (8009e90 <HAL_GPIO_Init+0x34c>)
 8009db0:	69fb      	ldr	r3, [r7, #28]
 8009db2:	089b      	lsrs	r3, r3, #2
 8009db4:	3302      	adds	r3, #2
 8009db6:	69ba      	ldr	r2, [r7, #24]
 8009db8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009dbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009dc4:	693b      	ldr	r3, [r7, #16]
 8009dc6:	43db      	mvns	r3, r3
 8009dc8:	69ba      	ldr	r2, [r7, #24]
 8009dca:	4013      	ands	r3, r2
 8009dcc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	685b      	ldr	r3, [r3, #4]
 8009dd2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d003      	beq.n	8009de2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8009dda:	69ba      	ldr	r2, [r7, #24]
 8009ddc:	693b      	ldr	r3, [r7, #16]
 8009dde:	4313      	orrs	r3, r2
 8009de0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8009de2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009de6:	69bb      	ldr	r3, [r7, #24]
 8009de8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8009dea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009dee:	685b      	ldr	r3, [r3, #4]
 8009df0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009df2:	693b      	ldr	r3, [r7, #16]
 8009df4:	43db      	mvns	r3, r3
 8009df6:	69ba      	ldr	r2, [r7, #24]
 8009df8:	4013      	ands	r3, r2
 8009dfa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	685b      	ldr	r3, [r3, #4]
 8009e00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d003      	beq.n	8009e10 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8009e08:	69ba      	ldr	r2, [r7, #24]
 8009e0a:	693b      	ldr	r3, [r7, #16]
 8009e0c:	4313      	orrs	r3, r2
 8009e0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8009e10:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009e14:	69bb      	ldr	r3, [r7, #24]
 8009e16:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8009e18:	697b      	ldr	r3, [r7, #20]
 8009e1a:	685b      	ldr	r3, [r3, #4]
 8009e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009e1e:	693b      	ldr	r3, [r7, #16]
 8009e20:	43db      	mvns	r3, r3
 8009e22:	69ba      	ldr	r2, [r7, #24]
 8009e24:	4013      	ands	r3, r2
 8009e26:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	685b      	ldr	r3, [r3, #4]
 8009e2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d003      	beq.n	8009e3c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8009e34:	69ba      	ldr	r2, [r7, #24]
 8009e36:	693b      	ldr	r3, [r7, #16]
 8009e38:	4313      	orrs	r3, r2
 8009e3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009e3c:	697b      	ldr	r3, [r7, #20]
 8009e3e:	69ba      	ldr	r2, [r7, #24]
 8009e40:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009e48:	693b      	ldr	r3, [r7, #16]
 8009e4a:	43db      	mvns	r3, r3
 8009e4c:	69ba      	ldr	r2, [r7, #24]
 8009e4e:	4013      	ands	r3, r2
 8009e50:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	685b      	ldr	r3, [r3, #4]
 8009e56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d003      	beq.n	8009e66 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8009e5e:	69ba      	ldr	r2, [r7, #24]
 8009e60:	693b      	ldr	r3, [r7, #16]
 8009e62:	4313      	orrs	r3, r2
 8009e64:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8009e66:	697b      	ldr	r3, [r7, #20]
 8009e68:	69ba      	ldr	r2, [r7, #24]
 8009e6a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8009e6c:	69fb      	ldr	r3, [r7, #28]
 8009e6e:	3301      	adds	r3, #1
 8009e70:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	681a      	ldr	r2, [r3, #0]
 8009e76:	69fb      	ldr	r3, [r7, #28]
 8009e78:	fa22 f303 	lsr.w	r3, r2, r3
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	f47f ae6b 	bne.w	8009b58 <HAL_GPIO_Init+0x14>
  }
}
 8009e82:	bf00      	nop
 8009e84:	bf00      	nop
 8009e86:	3724      	adds	r7, #36	@ 0x24
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8e:	4770      	bx	lr
 8009e90:	58000400 	.word	0x58000400

08009e94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009e94:	b480      	push	{r7}
 8009e96:	b083      	sub	sp, #12
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
 8009e9c:	460b      	mov	r3, r1
 8009e9e:	807b      	strh	r3, [r7, #2]
 8009ea0:	4613      	mov	r3, r2
 8009ea2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009ea4:	787b      	ldrb	r3, [r7, #1]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d003      	beq.n	8009eb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009eaa:	887a      	ldrh	r2, [r7, #2]
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8009eb0:	e003      	b.n	8009eba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009eb2:	887b      	ldrh	r3, [r7, #2]
 8009eb4:	041a      	lsls	r2, r3, #16
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	619a      	str	r2, [r3, #24]
}
 8009eba:	bf00      	nop
 8009ebc:	370c      	adds	r7, #12
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec4:	4770      	bx	lr

08009ec6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009ec6:	b480      	push	{r7}
 8009ec8:	b085      	sub	sp, #20
 8009eca:	af00      	add	r7, sp, #0
 8009ecc:	6078      	str	r0, [r7, #4]
 8009ece:	460b      	mov	r3, r1
 8009ed0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	695b      	ldr	r3, [r3, #20]
 8009ed6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009ed8:	887a      	ldrh	r2, [r7, #2]
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	4013      	ands	r3, r2
 8009ede:	041a      	lsls	r2, r3, #16
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	43d9      	mvns	r1, r3
 8009ee4:	887b      	ldrh	r3, [r7, #2]
 8009ee6:	400b      	ands	r3, r1
 8009ee8:	431a      	orrs	r2, r3
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	619a      	str	r2, [r3, #24]
}
 8009eee:	bf00      	nop
 8009ef0:	3714      	adds	r7, #20
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef8:	4770      	bx	lr
	...

08009efc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b082      	sub	sp, #8
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d101      	bne.n	8009f0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	e08b      	b.n	800a026 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009f14:	b2db      	uxtb	r3, r3
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d106      	bne.n	8009f28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	f7f9 fe12 	bl	8003b4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2224      	movs	r2, #36	@ 0x24
 8009f2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	681a      	ldr	r2, [r3, #0]
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f022 0201 	bic.w	r2, r2, #1
 8009f3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	685a      	ldr	r2, [r3, #4]
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8009f4c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	689a      	ldr	r2, [r3, #8]
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009f5c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	68db      	ldr	r3, [r3, #12]
 8009f62:	2b01      	cmp	r3, #1
 8009f64:	d107      	bne.n	8009f76 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	689a      	ldr	r2, [r3, #8]
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009f72:	609a      	str	r2, [r3, #8]
 8009f74:	e006      	b.n	8009f84 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	689a      	ldr	r2, [r3, #8]
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8009f82:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	68db      	ldr	r3, [r3, #12]
 8009f88:	2b02      	cmp	r3, #2
 8009f8a:	d108      	bne.n	8009f9e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	685a      	ldr	r2, [r3, #4]
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009f9a:	605a      	str	r2, [r3, #4]
 8009f9c:	e007      	b.n	8009fae <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	685a      	ldr	r2, [r3, #4]
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009fac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	6859      	ldr	r1, [r3, #4]
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681a      	ldr	r2, [r3, #0]
 8009fb8:	4b1d      	ldr	r3, [pc, #116]	@ (800a030 <HAL_I2C_Init+0x134>)
 8009fba:	430b      	orrs	r3, r1
 8009fbc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	68da      	ldr	r2, [r3, #12]
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009fcc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	691a      	ldr	r2, [r3, #16]
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	695b      	ldr	r3, [r3, #20]
 8009fd6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	699b      	ldr	r3, [r3, #24]
 8009fde:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	430a      	orrs	r2, r1
 8009fe6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	69d9      	ldr	r1, [r3, #28]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	6a1a      	ldr	r2, [r3, #32]
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	430a      	orrs	r2, r1
 8009ff6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	681a      	ldr	r2, [r3, #0]
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f042 0201 	orr.w	r2, r2, #1
 800a006:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2200      	movs	r2, #0
 800a00c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2220      	movs	r2, #32
 800a012:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2200      	movs	r2, #0
 800a01a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2200      	movs	r2, #0
 800a020:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800a024:	2300      	movs	r3, #0
}
 800a026:	4618      	mov	r0, r3
 800a028:	3708      	adds	r7, #8
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}
 800a02e:	bf00      	nop
 800a030:	02008000 	.word	0x02008000

0800a034 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b088      	sub	sp, #32
 800a038:	af02      	add	r7, sp, #8
 800a03a:	60f8      	str	r0, [r7, #12]
 800a03c:	607a      	str	r2, [r7, #4]
 800a03e:	461a      	mov	r2, r3
 800a040:	460b      	mov	r3, r1
 800a042:	817b      	strh	r3, [r7, #10]
 800a044:	4613      	mov	r3, r2
 800a046:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a04e:	b2db      	uxtb	r3, r3
 800a050:	2b20      	cmp	r3, #32
 800a052:	f040 80fd 	bne.w	800a250 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a05c:	2b01      	cmp	r3, #1
 800a05e:	d101      	bne.n	800a064 <HAL_I2C_Master_Transmit+0x30>
 800a060:	2302      	movs	r3, #2
 800a062:	e0f6      	b.n	800a252 <HAL_I2C_Master_Transmit+0x21e>
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	2201      	movs	r2, #1
 800a068:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a06c:	f7fc fd9c 	bl	8006ba8 <HAL_GetTick>
 800a070:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a072:	693b      	ldr	r3, [r7, #16]
 800a074:	9300      	str	r3, [sp, #0]
 800a076:	2319      	movs	r3, #25
 800a078:	2201      	movs	r2, #1
 800a07a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a07e:	68f8      	ldr	r0, [r7, #12]
 800a080:	f001 f891 	bl	800b1a6 <I2C_WaitOnFlagUntilTimeout>
 800a084:	4603      	mov	r3, r0
 800a086:	2b00      	cmp	r3, #0
 800a088:	d001      	beq.n	800a08e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800a08a:	2301      	movs	r3, #1
 800a08c:	e0e1      	b.n	800a252 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	2221      	movs	r2, #33	@ 0x21
 800a092:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	2210      	movs	r2, #16
 800a09a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	687a      	ldr	r2, [r7, #4]
 800a0a8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	893a      	ldrh	r2, [r7, #8]
 800a0ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a0ba:	b29b      	uxth	r3, r3
 800a0bc:	2bff      	cmp	r3, #255	@ 0xff
 800a0be:	d906      	bls.n	800a0ce <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	22ff      	movs	r2, #255	@ 0xff
 800a0c4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800a0c6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a0ca:	617b      	str	r3, [r7, #20]
 800a0cc:	e007      	b.n	800a0de <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a0d2:	b29a      	uxth	r2, r3
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800a0d8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a0dc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d024      	beq.n	800a130 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0ea:	781a      	ldrb	r2, [r3, #0]
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0f6:	1c5a      	adds	r2, r3, #1
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a100:	b29b      	uxth	r3, r3
 800a102:	3b01      	subs	r3, #1
 800a104:	b29a      	uxth	r2, r3
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a10e:	3b01      	subs	r3, #1
 800a110:	b29a      	uxth	r2, r3
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a11a:	b2db      	uxtb	r3, r3
 800a11c:	3301      	adds	r3, #1
 800a11e:	b2da      	uxtb	r2, r3
 800a120:	8979      	ldrh	r1, [r7, #10]
 800a122:	4b4e      	ldr	r3, [pc, #312]	@ (800a25c <HAL_I2C_Master_Transmit+0x228>)
 800a124:	9300      	str	r3, [sp, #0]
 800a126:	697b      	ldr	r3, [r7, #20]
 800a128:	68f8      	ldr	r0, [r7, #12]
 800a12a:	f001 fa8b 	bl	800b644 <I2C_TransferConfig>
 800a12e:	e066      	b.n	800a1fe <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a134:	b2da      	uxtb	r2, r3
 800a136:	8979      	ldrh	r1, [r7, #10]
 800a138:	4b48      	ldr	r3, [pc, #288]	@ (800a25c <HAL_I2C_Master_Transmit+0x228>)
 800a13a:	9300      	str	r3, [sp, #0]
 800a13c:	697b      	ldr	r3, [r7, #20]
 800a13e:	68f8      	ldr	r0, [r7, #12]
 800a140:	f001 fa80 	bl	800b644 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800a144:	e05b      	b.n	800a1fe <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a146:	693a      	ldr	r2, [r7, #16]
 800a148:	6a39      	ldr	r1, [r7, #32]
 800a14a:	68f8      	ldr	r0, [r7, #12]
 800a14c:	f001 f884 	bl	800b258 <I2C_WaitOnTXISFlagUntilTimeout>
 800a150:	4603      	mov	r3, r0
 800a152:	2b00      	cmp	r3, #0
 800a154:	d001      	beq.n	800a15a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800a156:	2301      	movs	r3, #1
 800a158:	e07b      	b.n	800a252 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a15e:	781a      	ldrb	r2, [r3, #0]
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a16a:	1c5a      	adds	r2, r3, #1
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a174:	b29b      	uxth	r3, r3
 800a176:	3b01      	subs	r3, #1
 800a178:	b29a      	uxth	r2, r3
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a182:	3b01      	subs	r3, #1
 800a184:	b29a      	uxth	r2, r3
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a18e:	b29b      	uxth	r3, r3
 800a190:	2b00      	cmp	r3, #0
 800a192:	d034      	beq.n	800a1fe <HAL_I2C_Master_Transmit+0x1ca>
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d130      	bne.n	800a1fe <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a19c:	693b      	ldr	r3, [r7, #16]
 800a19e:	9300      	str	r3, [sp, #0]
 800a1a0:	6a3b      	ldr	r3, [r7, #32]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	2180      	movs	r1, #128	@ 0x80
 800a1a6:	68f8      	ldr	r0, [r7, #12]
 800a1a8:	f000 fffd 	bl	800b1a6 <I2C_WaitOnFlagUntilTimeout>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d001      	beq.n	800a1b6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	e04d      	b.n	800a252 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a1ba:	b29b      	uxth	r3, r3
 800a1bc:	2bff      	cmp	r3, #255	@ 0xff
 800a1be:	d90e      	bls.n	800a1de <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	22ff      	movs	r2, #255	@ 0xff
 800a1c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a1ca:	b2da      	uxtb	r2, r3
 800a1cc:	8979      	ldrh	r1, [r7, #10]
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	9300      	str	r3, [sp, #0]
 800a1d2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a1d6:	68f8      	ldr	r0, [r7, #12]
 800a1d8:	f001 fa34 	bl	800b644 <I2C_TransferConfig>
 800a1dc:	e00f      	b.n	800a1fe <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a1e2:	b29a      	uxth	r2, r3
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a1ec:	b2da      	uxtb	r2, r3
 800a1ee:	8979      	ldrh	r1, [r7, #10]
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	9300      	str	r3, [sp, #0]
 800a1f4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a1f8:	68f8      	ldr	r0, [r7, #12]
 800a1fa:	f001 fa23 	bl	800b644 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a202:	b29b      	uxth	r3, r3
 800a204:	2b00      	cmp	r3, #0
 800a206:	d19e      	bne.n	800a146 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a208:	693a      	ldr	r2, [r7, #16]
 800a20a:	6a39      	ldr	r1, [r7, #32]
 800a20c:	68f8      	ldr	r0, [r7, #12]
 800a20e:	f001 f86a 	bl	800b2e6 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a212:	4603      	mov	r3, r0
 800a214:	2b00      	cmp	r3, #0
 800a216:	d001      	beq.n	800a21c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800a218:	2301      	movs	r3, #1
 800a21a:	e01a      	b.n	800a252 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	2220      	movs	r2, #32
 800a222:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	6859      	ldr	r1, [r3, #4]
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681a      	ldr	r2, [r3, #0]
 800a22e:	4b0c      	ldr	r3, [pc, #48]	@ (800a260 <HAL_I2C_Master_Transmit+0x22c>)
 800a230:	400b      	ands	r3, r1
 800a232:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	2220      	movs	r2, #32
 800a238:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	2200      	movs	r2, #0
 800a240:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	2200      	movs	r2, #0
 800a248:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a24c:	2300      	movs	r3, #0
 800a24e:	e000      	b.n	800a252 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800a250:	2302      	movs	r3, #2
  }
}
 800a252:	4618      	mov	r0, r3
 800a254:	3718      	adds	r7, #24
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}
 800a25a:	bf00      	nop
 800a25c:	80002000 	.word	0x80002000
 800a260:	fe00e800 	.word	0xfe00e800

0800a264 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b088      	sub	sp, #32
 800a268:	af02      	add	r7, sp, #8
 800a26a:	60f8      	str	r0, [r7, #12]
 800a26c:	607a      	str	r2, [r7, #4]
 800a26e:	461a      	mov	r2, r3
 800a270:	460b      	mov	r3, r1
 800a272:	817b      	strh	r3, [r7, #10]
 800a274:	4613      	mov	r3, r2
 800a276:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a27e:	b2db      	uxtb	r3, r3
 800a280:	2b20      	cmp	r3, #32
 800a282:	f040 80db 	bne.w	800a43c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a28c:	2b01      	cmp	r3, #1
 800a28e:	d101      	bne.n	800a294 <HAL_I2C_Master_Receive+0x30>
 800a290:	2302      	movs	r3, #2
 800a292:	e0d4      	b.n	800a43e <HAL_I2C_Master_Receive+0x1da>
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	2201      	movs	r2, #1
 800a298:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a29c:	f7fc fc84 	bl	8006ba8 <HAL_GetTick>
 800a2a0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	9300      	str	r3, [sp, #0]
 800a2a6:	2319      	movs	r3, #25
 800a2a8:	2201      	movs	r2, #1
 800a2aa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a2ae:	68f8      	ldr	r0, [r7, #12]
 800a2b0:	f000 ff79 	bl	800b1a6 <I2C_WaitOnFlagUntilTimeout>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d001      	beq.n	800a2be <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	e0bf      	b.n	800a43e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	2222      	movs	r2, #34	@ 0x22
 800a2c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	2210      	movs	r2, #16
 800a2ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	687a      	ldr	r2, [r7, #4]
 800a2d8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	893a      	ldrh	r2, [r7, #8]
 800a2de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a2ea:	b29b      	uxth	r3, r3
 800a2ec:	2bff      	cmp	r3, #255	@ 0xff
 800a2ee:	d90e      	bls.n	800a30e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	22ff      	movs	r2, #255	@ 0xff
 800a2f4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a2fa:	b2da      	uxtb	r2, r3
 800a2fc:	8979      	ldrh	r1, [r7, #10]
 800a2fe:	4b52      	ldr	r3, [pc, #328]	@ (800a448 <HAL_I2C_Master_Receive+0x1e4>)
 800a300:	9300      	str	r3, [sp, #0]
 800a302:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a306:	68f8      	ldr	r0, [r7, #12]
 800a308:	f001 f99c 	bl	800b644 <I2C_TransferConfig>
 800a30c:	e06d      	b.n	800a3ea <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a312:	b29a      	uxth	r2, r3
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a31c:	b2da      	uxtb	r2, r3
 800a31e:	8979      	ldrh	r1, [r7, #10]
 800a320:	4b49      	ldr	r3, [pc, #292]	@ (800a448 <HAL_I2C_Master_Receive+0x1e4>)
 800a322:	9300      	str	r3, [sp, #0]
 800a324:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a328:	68f8      	ldr	r0, [r7, #12]
 800a32a:	f001 f98b 	bl	800b644 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800a32e:	e05c      	b.n	800a3ea <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a330:	697a      	ldr	r2, [r7, #20]
 800a332:	6a39      	ldr	r1, [r7, #32]
 800a334:	68f8      	ldr	r0, [r7, #12]
 800a336:	f001 f819 	bl	800b36c <I2C_WaitOnRXNEFlagUntilTimeout>
 800a33a:	4603      	mov	r3, r0
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d001      	beq.n	800a344 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800a340:	2301      	movs	r3, #1
 800a342:	e07c      	b.n	800a43e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a34e:	b2d2      	uxtb	r2, r2
 800a350:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a356:	1c5a      	adds	r2, r3, #1
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a360:	3b01      	subs	r3, #1
 800a362:	b29a      	uxth	r2, r3
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a36c:	b29b      	uxth	r3, r3
 800a36e:	3b01      	subs	r3, #1
 800a370:	b29a      	uxth	r2, r3
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a37a:	b29b      	uxth	r3, r3
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d034      	beq.n	800a3ea <HAL_I2C_Master_Receive+0x186>
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a384:	2b00      	cmp	r3, #0
 800a386:	d130      	bne.n	800a3ea <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a388:	697b      	ldr	r3, [r7, #20]
 800a38a:	9300      	str	r3, [sp, #0]
 800a38c:	6a3b      	ldr	r3, [r7, #32]
 800a38e:	2200      	movs	r2, #0
 800a390:	2180      	movs	r1, #128	@ 0x80
 800a392:	68f8      	ldr	r0, [r7, #12]
 800a394:	f000 ff07 	bl	800b1a6 <I2C_WaitOnFlagUntilTimeout>
 800a398:	4603      	mov	r3, r0
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d001      	beq.n	800a3a2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800a39e:	2301      	movs	r3, #1
 800a3a0:	e04d      	b.n	800a43e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a3a6:	b29b      	uxth	r3, r3
 800a3a8:	2bff      	cmp	r3, #255	@ 0xff
 800a3aa:	d90e      	bls.n	800a3ca <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	22ff      	movs	r2, #255	@ 0xff
 800a3b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a3b6:	b2da      	uxtb	r2, r3
 800a3b8:	8979      	ldrh	r1, [r7, #10]
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	9300      	str	r3, [sp, #0]
 800a3be:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a3c2:	68f8      	ldr	r0, [r7, #12]
 800a3c4:	f001 f93e 	bl	800b644 <I2C_TransferConfig>
 800a3c8:	e00f      	b.n	800a3ea <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a3ce:	b29a      	uxth	r2, r3
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a3d8:	b2da      	uxtb	r2, r3
 800a3da:	8979      	ldrh	r1, [r7, #10]
 800a3dc:	2300      	movs	r3, #0
 800a3de:	9300      	str	r3, [sp, #0]
 800a3e0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a3e4:	68f8      	ldr	r0, [r7, #12]
 800a3e6:	f001 f92d 	bl	800b644 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a3ee:	b29b      	uxth	r3, r3
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d19d      	bne.n	800a330 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a3f4:	697a      	ldr	r2, [r7, #20]
 800a3f6:	6a39      	ldr	r1, [r7, #32]
 800a3f8:	68f8      	ldr	r0, [r7, #12]
 800a3fa:	f000 ff74 	bl	800b2e6 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a3fe:	4603      	mov	r3, r0
 800a400:	2b00      	cmp	r3, #0
 800a402:	d001      	beq.n	800a408 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800a404:	2301      	movs	r3, #1
 800a406:	e01a      	b.n	800a43e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	2220      	movs	r2, #32
 800a40e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	6859      	ldr	r1, [r3, #4]
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	681a      	ldr	r2, [r3, #0]
 800a41a:	4b0c      	ldr	r3, [pc, #48]	@ (800a44c <HAL_I2C_Master_Receive+0x1e8>)
 800a41c:	400b      	ands	r3, r1
 800a41e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	2220      	movs	r2, #32
 800a424:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	2200      	movs	r2, #0
 800a42c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	2200      	movs	r2, #0
 800a434:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a438:	2300      	movs	r3, #0
 800a43a:	e000      	b.n	800a43e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800a43c:	2302      	movs	r3, #2
  }
}
 800a43e:	4618      	mov	r0, r3
 800a440:	3718      	adds	r7, #24
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}
 800a446:	bf00      	nop
 800a448:	80002400 	.word	0x80002400
 800a44c:	fe00e800 	.word	0xfe00e800

0800a450 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b084      	sub	sp, #16
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	699b      	ldr	r3, [r3, #24]
 800a45e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d005      	beq.n	800a47c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a474:	68ba      	ldr	r2, [r7, #8]
 800a476:	68f9      	ldr	r1, [r7, #12]
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	4798      	blx	r3
  }
}
 800a47c:	bf00      	nop
 800a47e:	3710      	adds	r7, #16
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}

0800a484 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b086      	sub	sp, #24
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	699b      	ldr	r3, [r3, #24]
 800a492:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800a49c:	697b      	ldr	r3, [r7, #20]
 800a49e:	0a1b      	lsrs	r3, r3, #8
 800a4a0:	f003 0301 	and.w	r3, r3, #1
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d010      	beq.n	800a4ca <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800a4a8:	693b      	ldr	r3, [r7, #16]
 800a4aa:	09db      	lsrs	r3, r3, #7
 800a4ac:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d00a      	beq.n	800a4ca <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a4b8:	f043 0201 	orr.w	r2, r3, #1
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a4c8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800a4ca:	697b      	ldr	r3, [r7, #20]
 800a4cc:	0a9b      	lsrs	r3, r3, #10
 800a4ce:	f003 0301 	and.w	r3, r3, #1
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d010      	beq.n	800a4f8 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800a4d6:	693b      	ldr	r3, [r7, #16]
 800a4d8:	09db      	lsrs	r3, r3, #7
 800a4da:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d00a      	beq.n	800a4f8 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a4e6:	f043 0208 	orr.w	r2, r3, #8
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a4f6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	0a5b      	lsrs	r3, r3, #9
 800a4fc:	f003 0301 	and.w	r3, r3, #1
 800a500:	2b00      	cmp	r3, #0
 800a502:	d010      	beq.n	800a526 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800a504:	693b      	ldr	r3, [r7, #16]
 800a506:	09db      	lsrs	r3, r3, #7
 800a508:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d00a      	beq.n	800a526 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a514:	f043 0202 	orr.w	r2, r3, #2
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a524:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a52a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	f003 030b 	and.w	r3, r3, #11
 800a532:	2b00      	cmp	r3, #0
 800a534:	d003      	beq.n	800a53e <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800a536:	68f9      	ldr	r1, [r7, #12]
 800a538:	6878      	ldr	r0, [r7, #4]
 800a53a:	f000 fcdb 	bl	800aef4 <I2C_ITError>
  }
}
 800a53e:	bf00      	nop
 800a540:	3718      	adds	r7, #24
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}

0800a546 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a546:	b480      	push	{r7}
 800a548:	b083      	sub	sp, #12
 800a54a:	af00      	add	r7, sp, #0
 800a54c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800a54e:	bf00      	nop
 800a550:	370c      	adds	r7, #12
 800a552:	46bd      	mov	sp, r7
 800a554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a558:	4770      	bx	lr

0800a55a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a55a:	b480      	push	{r7}
 800a55c:	b083      	sub	sp, #12
 800a55e:	af00      	add	r7, sp, #0
 800a560:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800a562:	bf00      	nop
 800a564:	370c      	adds	r7, #12
 800a566:	46bd      	mov	sp, r7
 800a568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56c:	4770      	bx	lr

0800a56e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800a56e:	b480      	push	{r7}
 800a570:	b083      	sub	sp, #12
 800a572:	af00      	add	r7, sp, #0
 800a574:	6078      	str	r0, [r7, #4]
 800a576:	460b      	mov	r3, r1
 800a578:	70fb      	strb	r3, [r7, #3]
 800a57a:	4613      	mov	r3, r2
 800a57c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800a57e:	bf00      	nop
 800a580:	370c      	adds	r7, #12
 800a582:	46bd      	mov	sp, r7
 800a584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a588:	4770      	bx	lr

0800a58a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a58a:	b480      	push	{r7}
 800a58c:	b083      	sub	sp, #12
 800a58e:	af00      	add	r7, sp, #0
 800a590:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800a592:	bf00      	nop
 800a594:	370c      	adds	r7, #12
 800a596:	46bd      	mov	sp, r7
 800a598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59c:	4770      	bx	lr

0800a59e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800a59e:	b480      	push	{r7}
 800a5a0:	b083      	sub	sp, #12
 800a5a2:	af00      	add	r7, sp, #0
 800a5a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800a5a6:	bf00      	nop
 800a5a8:	370c      	adds	r7, #12
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b0:	4770      	bx	lr

0800a5b2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a5b2:	b480      	push	{r7}
 800a5b4:	b083      	sub	sp, #12
 800a5b6:	af00      	add	r7, sp, #0
 800a5b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800a5ba:	bf00      	nop
 800a5bc:	370c      	adds	r7, #12
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c4:	4770      	bx	lr

0800a5c6 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800a5c6:	b580      	push	{r7, lr}
 800a5c8:	b086      	sub	sp, #24
 800a5ca:	af00      	add	r7, sp, #0
 800a5cc:	60f8      	str	r0, [r7, #12]
 800a5ce:	60b9      	str	r1, [r7, #8]
 800a5d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a5e2:	2b01      	cmp	r3, #1
 800a5e4:	d101      	bne.n	800a5ea <I2C_Slave_ISR_IT+0x24>
 800a5e6:	2302      	movs	r3, #2
 800a5e8:	e0ed      	b.n	800a7c6 <I2C_Slave_ISR_IT+0x200>
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	2201      	movs	r2, #1
 800a5ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	095b      	lsrs	r3, r3, #5
 800a5f6:	f003 0301 	and.w	r3, r3, #1
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d00a      	beq.n	800a614 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	095b      	lsrs	r3, r3, #5
 800a602:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a606:	2b00      	cmp	r3, #0
 800a608:	d004      	beq.n	800a614 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800a60a:	6939      	ldr	r1, [r7, #16]
 800a60c:	68f8      	ldr	r0, [r7, #12]
 800a60e:	f000 f9c1 	bl	800a994 <I2C_ITSlaveCplt>
 800a612:	e0d3      	b.n	800a7bc <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	091b      	lsrs	r3, r3, #4
 800a618:	f003 0301 	and.w	r3, r3, #1
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d04d      	beq.n	800a6bc <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	091b      	lsrs	r3, r3, #4
 800a624:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d047      	beq.n	800a6bc <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a630:	b29b      	uxth	r3, r3
 800a632:	2b00      	cmp	r3, #0
 800a634:	d128      	bne.n	800a688 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a63c:	b2db      	uxtb	r3, r3
 800a63e:	2b28      	cmp	r3, #40	@ 0x28
 800a640:	d108      	bne.n	800a654 <I2C_Slave_ISR_IT+0x8e>
 800a642:	697b      	ldr	r3, [r7, #20]
 800a644:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a648:	d104      	bne.n	800a654 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800a64a:	6939      	ldr	r1, [r7, #16]
 800a64c:	68f8      	ldr	r0, [r7, #12]
 800a64e:	f000 fbfb 	bl	800ae48 <I2C_ITListenCplt>
 800a652:	e032      	b.n	800a6ba <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a65a:	b2db      	uxtb	r3, r3
 800a65c:	2b29      	cmp	r3, #41	@ 0x29
 800a65e:	d10e      	bne.n	800a67e <I2C_Slave_ISR_IT+0xb8>
 800a660:	697b      	ldr	r3, [r7, #20]
 800a662:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a666:	d00a      	beq.n	800a67e <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	2210      	movs	r2, #16
 800a66e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800a670:	68f8      	ldr	r0, [r7, #12]
 800a672:	f000 fd56 	bl	800b122 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800a676:	68f8      	ldr	r0, [r7, #12]
 800a678:	f000 f92d 	bl	800a8d6 <I2C_ITSlaveSeqCplt>
 800a67c:	e01d      	b.n	800a6ba <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	2210      	movs	r2, #16
 800a684:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800a686:	e096      	b.n	800a7b6 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	2210      	movs	r2, #16
 800a68e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a694:	f043 0204 	orr.w	r2, r3, #4
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800a69c:	697b      	ldr	r3, [r7, #20]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d004      	beq.n	800a6ac <I2C_Slave_ISR_IT+0xe6>
 800a6a2:	697b      	ldr	r3, [r7, #20]
 800a6a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a6a8:	f040 8085 	bne.w	800a7b6 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a6b0:	4619      	mov	r1, r3
 800a6b2:	68f8      	ldr	r0, [r7, #12]
 800a6b4:	f000 fc1e 	bl	800aef4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800a6b8:	e07d      	b.n	800a7b6 <I2C_Slave_ISR_IT+0x1f0>
 800a6ba:	e07c      	b.n	800a7b6 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800a6bc:	693b      	ldr	r3, [r7, #16]
 800a6be:	089b      	lsrs	r3, r3, #2
 800a6c0:	f003 0301 	and.w	r3, r3, #1
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d030      	beq.n	800a72a <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	089b      	lsrs	r3, r3, #2
 800a6cc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d02a      	beq.n	800a72a <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a6d8:	b29b      	uxth	r3, r3
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d018      	beq.n	800a710 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6e8:	b2d2      	uxtb	r2, r2
 800a6ea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6f0:	1c5a      	adds	r2, r3, #1
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a6fa:	3b01      	subs	r3, #1
 800a6fc:	b29a      	uxth	r2, r3
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a706:	b29b      	uxth	r3, r3
 800a708:	3b01      	subs	r3, #1
 800a70a:	b29a      	uxth	r2, r3
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a714:	b29b      	uxth	r3, r3
 800a716:	2b00      	cmp	r3, #0
 800a718:	d14f      	bne.n	800a7ba <I2C_Slave_ISR_IT+0x1f4>
 800a71a:	697b      	ldr	r3, [r7, #20]
 800a71c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a720:	d04b      	beq.n	800a7ba <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800a722:	68f8      	ldr	r0, [r7, #12]
 800a724:	f000 f8d7 	bl	800a8d6 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800a728:	e047      	b.n	800a7ba <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800a72a:	693b      	ldr	r3, [r7, #16]
 800a72c:	08db      	lsrs	r3, r3, #3
 800a72e:	f003 0301 	and.w	r3, r3, #1
 800a732:	2b00      	cmp	r3, #0
 800a734:	d00a      	beq.n	800a74c <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	08db      	lsrs	r3, r3, #3
 800a73a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d004      	beq.n	800a74c <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800a742:	6939      	ldr	r1, [r7, #16]
 800a744:	68f8      	ldr	r0, [r7, #12]
 800a746:	f000 f842 	bl	800a7ce <I2C_ITAddrCplt>
 800a74a:	e037      	b.n	800a7bc <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800a74c:	693b      	ldr	r3, [r7, #16]
 800a74e:	085b      	lsrs	r3, r3, #1
 800a750:	f003 0301 	and.w	r3, r3, #1
 800a754:	2b00      	cmp	r3, #0
 800a756:	d031      	beq.n	800a7bc <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	085b      	lsrs	r3, r3, #1
 800a75c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800a760:	2b00      	cmp	r3, #0
 800a762:	d02b      	beq.n	800a7bc <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a768:	b29b      	uxth	r3, r3
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d018      	beq.n	800a7a0 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a772:	781a      	ldrb	r2, [r3, #0]
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a77e:	1c5a      	adds	r2, r3, #1
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a788:	b29b      	uxth	r3, r3
 800a78a:	3b01      	subs	r3, #1
 800a78c:	b29a      	uxth	r2, r3
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a796:	3b01      	subs	r3, #1
 800a798:	b29a      	uxth	r2, r3
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800a79e:	e00d      	b.n	800a7bc <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800a7a0:	697b      	ldr	r3, [r7, #20]
 800a7a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a7a6:	d002      	beq.n	800a7ae <I2C_Slave_ISR_IT+0x1e8>
 800a7a8:	697b      	ldr	r3, [r7, #20]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d106      	bne.n	800a7bc <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800a7ae:	68f8      	ldr	r0, [r7, #12]
 800a7b0:	f000 f891 	bl	800a8d6 <I2C_ITSlaveSeqCplt>
 800a7b4:	e002      	b.n	800a7bc <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 800a7b6:	bf00      	nop
 800a7b8:	e000      	b.n	800a7bc <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 800a7ba:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	2200      	movs	r2, #0
 800a7c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800a7c4:	2300      	movs	r3, #0
}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	3718      	adds	r7, #24
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}

0800a7ce <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a7ce:	b580      	push	{r7, lr}
 800a7d0:	b084      	sub	sp, #16
 800a7d2:	af00      	add	r7, sp, #0
 800a7d4:	6078      	str	r0, [r7, #4]
 800a7d6:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a7de:	b2db      	uxtb	r3, r3
 800a7e0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800a7e4:	2b28      	cmp	r3, #40	@ 0x28
 800a7e6:	d16a      	bne.n	800a8be <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	699b      	ldr	r3, [r3, #24]
 800a7ee:	0c1b      	lsrs	r3, r3, #16
 800a7f0:	b2db      	uxtb	r3, r3
 800a7f2:	f003 0301 	and.w	r3, r3, #1
 800a7f6:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	699b      	ldr	r3, [r3, #24]
 800a7fe:	0c1b      	lsrs	r3, r3, #16
 800a800:	b29b      	uxth	r3, r3
 800a802:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800a806:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	689b      	ldr	r3, [r3, #8]
 800a80e:	b29b      	uxth	r3, r3
 800a810:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a814:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	68db      	ldr	r3, [r3, #12]
 800a81c:	b29b      	uxth	r3, r3
 800a81e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800a822:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	68db      	ldr	r3, [r3, #12]
 800a828:	2b02      	cmp	r3, #2
 800a82a:	d138      	bne.n	800a89e <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800a82c:	897b      	ldrh	r3, [r7, #10]
 800a82e:	09db      	lsrs	r3, r3, #7
 800a830:	b29a      	uxth	r2, r3
 800a832:	89bb      	ldrh	r3, [r7, #12]
 800a834:	4053      	eors	r3, r2
 800a836:	b29b      	uxth	r3, r3
 800a838:	f003 0306 	and.w	r3, r3, #6
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d11c      	bne.n	800a87a <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800a840:	897b      	ldrh	r3, [r7, #10]
 800a842:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a848:	1c5a      	adds	r2, r3, #1
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a852:	2b02      	cmp	r3, #2
 800a854:	d13b      	bne.n	800a8ce <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2200      	movs	r2, #0
 800a85a:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	2208      	movs	r2, #8
 800a862:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2200      	movs	r2, #0
 800a868:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800a86c:	89ba      	ldrh	r2, [r7, #12]
 800a86e:	7bfb      	ldrb	r3, [r7, #15]
 800a870:	4619      	mov	r1, r3
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f7ff fe7b 	bl	800a56e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800a878:	e029      	b.n	800a8ce <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800a87a:	893b      	ldrh	r3, [r7, #8]
 800a87c:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800a87e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f000 ff10 	bl	800b6a8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2200      	movs	r2, #0
 800a88c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800a890:	89ba      	ldrh	r2, [r7, #12]
 800a892:	7bfb      	ldrb	r3, [r7, #15]
 800a894:	4619      	mov	r1, r3
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f7ff fe69 	bl	800a56e <HAL_I2C_AddrCallback>
}
 800a89c:	e017      	b.n	800a8ce <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800a89e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f000 ff00 	bl	800b6a8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800a8b0:	89ba      	ldrh	r2, [r7, #12]
 800a8b2:	7bfb      	ldrb	r3, [r7, #15]
 800a8b4:	4619      	mov	r1, r3
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f7ff fe59 	bl	800a56e <HAL_I2C_AddrCallback>
}
 800a8bc:	e007      	b.n	800a8ce <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	2208      	movs	r2, #8
 800a8c4:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800a8ce:	bf00      	nop
 800a8d0:	3710      	adds	r7, #16
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bd80      	pop	{r7, pc}

0800a8d6 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800a8d6:	b580      	push	{r7, lr}
 800a8d8:	b084      	sub	sp, #16
 800a8da:	af00      	add	r7, sp, #0
 800a8dc:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	0b9b      	lsrs	r3, r3, #14
 800a8f2:	f003 0301 	and.w	r3, r3, #1
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d008      	beq.n	800a90c <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	681a      	ldr	r2, [r3, #0]
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a908:	601a      	str	r2, [r3, #0]
 800a90a:	e00d      	b.n	800a928 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	0bdb      	lsrs	r3, r3, #15
 800a910:	f003 0301 	and.w	r3, r3, #1
 800a914:	2b00      	cmp	r3, #0
 800a916:	d007      	beq.n	800a928 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	681a      	ldr	r2, [r3, #0]
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a926:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a92e:	b2db      	uxtb	r3, r3
 800a930:	2b29      	cmp	r3, #41	@ 0x29
 800a932:	d112      	bne.n	800a95a <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2228      	movs	r2, #40	@ 0x28
 800a938:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2221      	movs	r2, #33	@ 0x21
 800a940:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a942:	2101      	movs	r1, #1
 800a944:	6878      	ldr	r0, [r7, #4]
 800a946:	f000 feaf 	bl	800b6a8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2200      	movs	r2, #0
 800a94e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f7ff fdf7 	bl	800a546 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a958:	e017      	b.n	800a98a <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a960:	b2db      	uxtb	r3, r3
 800a962:	2b2a      	cmp	r3, #42	@ 0x2a
 800a964:	d111      	bne.n	800a98a <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2228      	movs	r2, #40	@ 0x28
 800a96a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2222      	movs	r2, #34	@ 0x22
 800a972:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800a974:	2102      	movs	r1, #2
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f000 fe96 	bl	800b6a8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2200      	movs	r2, #0
 800a980:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a984:	6878      	ldr	r0, [r7, #4]
 800a986:	f7ff fde8 	bl	800a55a <HAL_I2C_SlaveRxCpltCallback>
}
 800a98a:	bf00      	nop
 800a98c:	3710      	adds	r7, #16
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}
	...

0800a994 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b086      	sub	sp, #24
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
 800a99c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9ae:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a9b6:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	2220      	movs	r2, #32
 800a9be:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800a9c0:	7afb      	ldrb	r3, [r7, #11]
 800a9c2:	2b21      	cmp	r3, #33	@ 0x21
 800a9c4:	d002      	beq.n	800a9cc <I2C_ITSlaveCplt+0x38>
 800a9c6:	7afb      	ldrb	r3, [r7, #11]
 800a9c8:	2b29      	cmp	r3, #41	@ 0x29
 800a9ca:	d108      	bne.n	800a9de <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800a9cc:	f248 0101 	movw	r1, #32769	@ 0x8001
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f000 fe69 	bl	800b6a8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2221      	movs	r2, #33	@ 0x21
 800a9da:	631a      	str	r2, [r3, #48]	@ 0x30
 800a9dc:	e019      	b.n	800aa12 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800a9de:	7afb      	ldrb	r3, [r7, #11]
 800a9e0:	2b22      	cmp	r3, #34	@ 0x22
 800a9e2:	d002      	beq.n	800a9ea <I2C_ITSlaveCplt+0x56>
 800a9e4:	7afb      	ldrb	r3, [r7, #11]
 800a9e6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a9e8:	d108      	bne.n	800a9fc <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800a9ea:	f248 0102 	movw	r1, #32770	@ 0x8002
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f000 fe5a 	bl	800b6a8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2222      	movs	r2, #34	@ 0x22
 800a9f8:	631a      	str	r2, [r3, #48]	@ 0x30
 800a9fa:	e00a      	b.n	800aa12 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800a9fc:	7afb      	ldrb	r3, [r7, #11]
 800a9fe:	2b28      	cmp	r3, #40	@ 0x28
 800aa00:	d107      	bne.n	800aa12 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800aa02:	f248 0103 	movw	r1, #32771	@ 0x8003
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	f000 fe4e 	bl	800b6a8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2200      	movs	r2, #0
 800aa10:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	685a      	ldr	r2, [r3, #4]
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800aa20:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	6859      	ldr	r1, [r3, #4]
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681a      	ldr	r2, [r3, #0]
 800aa2c:	4b80      	ldr	r3, [pc, #512]	@ (800ac30 <I2C_ITSlaveCplt+0x29c>)
 800aa2e:	400b      	ands	r3, r1
 800aa30:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	f000 fb75 	bl	800b122 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800aa38:	693b      	ldr	r3, [r7, #16]
 800aa3a:	0b9b      	lsrs	r3, r3, #14
 800aa3c:	f003 0301 	and.w	r3, r3, #1
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d07a      	beq.n	800ab3a <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	681a      	ldr	r2, [r3, #0]
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800aa52:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	f000 8112 	beq.w	800ac82 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	4a73      	ldr	r2, [pc, #460]	@ (800ac34 <I2C_ITSlaveCplt+0x2a0>)
 800aa66:	4293      	cmp	r3, r2
 800aa68:	d059      	beq.n	800ab1e <I2C_ITSlaveCplt+0x18a>
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	4a71      	ldr	r2, [pc, #452]	@ (800ac38 <I2C_ITSlaveCplt+0x2a4>)
 800aa72:	4293      	cmp	r3, r2
 800aa74:	d053      	beq.n	800ab1e <I2C_ITSlaveCplt+0x18a>
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	4a6f      	ldr	r2, [pc, #444]	@ (800ac3c <I2C_ITSlaveCplt+0x2a8>)
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	d04d      	beq.n	800ab1e <I2C_ITSlaveCplt+0x18a>
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	4a6d      	ldr	r2, [pc, #436]	@ (800ac40 <I2C_ITSlaveCplt+0x2ac>)
 800aa8a:	4293      	cmp	r3, r2
 800aa8c:	d047      	beq.n	800ab1e <I2C_ITSlaveCplt+0x18a>
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	4a6b      	ldr	r2, [pc, #428]	@ (800ac44 <I2C_ITSlaveCplt+0x2b0>)
 800aa96:	4293      	cmp	r3, r2
 800aa98:	d041      	beq.n	800ab1e <I2C_ITSlaveCplt+0x18a>
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	4a69      	ldr	r2, [pc, #420]	@ (800ac48 <I2C_ITSlaveCplt+0x2b4>)
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	d03b      	beq.n	800ab1e <I2C_ITSlaveCplt+0x18a>
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	4a67      	ldr	r2, [pc, #412]	@ (800ac4c <I2C_ITSlaveCplt+0x2b8>)
 800aaae:	4293      	cmp	r3, r2
 800aab0:	d035      	beq.n	800ab1e <I2C_ITSlaveCplt+0x18a>
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	4a65      	ldr	r2, [pc, #404]	@ (800ac50 <I2C_ITSlaveCplt+0x2bc>)
 800aaba:	4293      	cmp	r3, r2
 800aabc:	d02f      	beq.n	800ab1e <I2C_ITSlaveCplt+0x18a>
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	4a63      	ldr	r2, [pc, #396]	@ (800ac54 <I2C_ITSlaveCplt+0x2c0>)
 800aac6:	4293      	cmp	r3, r2
 800aac8:	d029      	beq.n	800ab1e <I2C_ITSlaveCplt+0x18a>
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	4a61      	ldr	r2, [pc, #388]	@ (800ac58 <I2C_ITSlaveCplt+0x2c4>)
 800aad2:	4293      	cmp	r3, r2
 800aad4:	d023      	beq.n	800ab1e <I2C_ITSlaveCplt+0x18a>
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	4a5f      	ldr	r2, [pc, #380]	@ (800ac5c <I2C_ITSlaveCplt+0x2c8>)
 800aade:	4293      	cmp	r3, r2
 800aae0:	d01d      	beq.n	800ab1e <I2C_ITSlaveCplt+0x18a>
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	4a5d      	ldr	r2, [pc, #372]	@ (800ac60 <I2C_ITSlaveCplt+0x2cc>)
 800aaea:	4293      	cmp	r3, r2
 800aaec:	d017      	beq.n	800ab1e <I2C_ITSlaveCplt+0x18a>
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	4a5b      	ldr	r2, [pc, #364]	@ (800ac64 <I2C_ITSlaveCplt+0x2d0>)
 800aaf6:	4293      	cmp	r3, r2
 800aaf8:	d011      	beq.n	800ab1e <I2C_ITSlaveCplt+0x18a>
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	4a59      	ldr	r2, [pc, #356]	@ (800ac68 <I2C_ITSlaveCplt+0x2d4>)
 800ab02:	4293      	cmp	r3, r2
 800ab04:	d00b      	beq.n	800ab1e <I2C_ITSlaveCplt+0x18a>
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	4a57      	ldr	r2, [pc, #348]	@ (800ac6c <I2C_ITSlaveCplt+0x2d8>)
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	d005      	beq.n	800ab1e <I2C_ITSlaveCplt+0x18a>
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	4a55      	ldr	r2, [pc, #340]	@ (800ac70 <I2C_ITSlaveCplt+0x2dc>)
 800ab1a:	4293      	cmp	r3, r2
 800ab1c:	d105      	bne.n	800ab2a <I2C_ITSlaveCplt+0x196>
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	685b      	ldr	r3, [r3, #4]
 800ab26:	b29b      	uxth	r3, r3
 800ab28:	e004      	b.n	800ab34 <I2C_ITSlaveCplt+0x1a0>
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	685b      	ldr	r3, [r3, #4]
 800ab32:	b29b      	uxth	r3, r3
 800ab34:	687a      	ldr	r2, [r7, #4]
 800ab36:	8553      	strh	r3, [r2, #42]	@ 0x2a
 800ab38:	e0a3      	b.n	800ac82 <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800ab3a:	693b      	ldr	r3, [r7, #16]
 800ab3c:	0bdb      	lsrs	r3, r3, #15
 800ab3e:	f003 0301 	and.w	r3, r3, #1
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	f000 809d 	beq.w	800ac82 <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	681a      	ldr	r2, [r3, #0]
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800ab56:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	f000 8090 	beq.w	800ac82 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	4a32      	ldr	r2, [pc, #200]	@ (800ac34 <I2C_ITSlaveCplt+0x2a0>)
 800ab6a:	4293      	cmp	r3, r2
 800ab6c:	d059      	beq.n	800ac22 <I2C_ITSlaveCplt+0x28e>
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	4a30      	ldr	r2, [pc, #192]	@ (800ac38 <I2C_ITSlaveCplt+0x2a4>)
 800ab76:	4293      	cmp	r3, r2
 800ab78:	d053      	beq.n	800ac22 <I2C_ITSlaveCplt+0x28e>
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	4a2e      	ldr	r2, [pc, #184]	@ (800ac3c <I2C_ITSlaveCplt+0x2a8>)
 800ab82:	4293      	cmp	r3, r2
 800ab84:	d04d      	beq.n	800ac22 <I2C_ITSlaveCplt+0x28e>
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	4a2c      	ldr	r2, [pc, #176]	@ (800ac40 <I2C_ITSlaveCplt+0x2ac>)
 800ab8e:	4293      	cmp	r3, r2
 800ab90:	d047      	beq.n	800ac22 <I2C_ITSlaveCplt+0x28e>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	4a2a      	ldr	r2, [pc, #168]	@ (800ac44 <I2C_ITSlaveCplt+0x2b0>)
 800ab9a:	4293      	cmp	r3, r2
 800ab9c:	d041      	beq.n	800ac22 <I2C_ITSlaveCplt+0x28e>
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	4a28      	ldr	r2, [pc, #160]	@ (800ac48 <I2C_ITSlaveCplt+0x2b4>)
 800aba6:	4293      	cmp	r3, r2
 800aba8:	d03b      	beq.n	800ac22 <I2C_ITSlaveCplt+0x28e>
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	4a26      	ldr	r2, [pc, #152]	@ (800ac4c <I2C_ITSlaveCplt+0x2b8>)
 800abb2:	4293      	cmp	r3, r2
 800abb4:	d035      	beq.n	800ac22 <I2C_ITSlaveCplt+0x28e>
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	4a24      	ldr	r2, [pc, #144]	@ (800ac50 <I2C_ITSlaveCplt+0x2bc>)
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d02f      	beq.n	800ac22 <I2C_ITSlaveCplt+0x28e>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	4a22      	ldr	r2, [pc, #136]	@ (800ac54 <I2C_ITSlaveCplt+0x2c0>)
 800abca:	4293      	cmp	r3, r2
 800abcc:	d029      	beq.n	800ac22 <I2C_ITSlaveCplt+0x28e>
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	4a20      	ldr	r2, [pc, #128]	@ (800ac58 <I2C_ITSlaveCplt+0x2c4>)
 800abd6:	4293      	cmp	r3, r2
 800abd8:	d023      	beq.n	800ac22 <I2C_ITSlaveCplt+0x28e>
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	4a1e      	ldr	r2, [pc, #120]	@ (800ac5c <I2C_ITSlaveCplt+0x2c8>)
 800abe2:	4293      	cmp	r3, r2
 800abe4:	d01d      	beq.n	800ac22 <I2C_ITSlaveCplt+0x28e>
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	4a1c      	ldr	r2, [pc, #112]	@ (800ac60 <I2C_ITSlaveCplt+0x2cc>)
 800abee:	4293      	cmp	r3, r2
 800abf0:	d017      	beq.n	800ac22 <I2C_ITSlaveCplt+0x28e>
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	4a1a      	ldr	r2, [pc, #104]	@ (800ac64 <I2C_ITSlaveCplt+0x2d0>)
 800abfa:	4293      	cmp	r3, r2
 800abfc:	d011      	beq.n	800ac22 <I2C_ITSlaveCplt+0x28e>
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	4a18      	ldr	r2, [pc, #96]	@ (800ac68 <I2C_ITSlaveCplt+0x2d4>)
 800ac06:	4293      	cmp	r3, r2
 800ac08:	d00b      	beq.n	800ac22 <I2C_ITSlaveCplt+0x28e>
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	4a16      	ldr	r2, [pc, #88]	@ (800ac6c <I2C_ITSlaveCplt+0x2d8>)
 800ac12:	4293      	cmp	r3, r2
 800ac14:	d005      	beq.n	800ac22 <I2C_ITSlaveCplt+0x28e>
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	4a14      	ldr	r2, [pc, #80]	@ (800ac70 <I2C_ITSlaveCplt+0x2dc>)
 800ac1e:	4293      	cmp	r3, r2
 800ac20:	d128      	bne.n	800ac74 <I2C_ITSlaveCplt+0x2e0>
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	685b      	ldr	r3, [r3, #4]
 800ac2a:	b29b      	uxth	r3, r3
 800ac2c:	e027      	b.n	800ac7e <I2C_ITSlaveCplt+0x2ea>
 800ac2e:	bf00      	nop
 800ac30:	fe00e800 	.word	0xfe00e800
 800ac34:	40020010 	.word	0x40020010
 800ac38:	40020028 	.word	0x40020028
 800ac3c:	40020040 	.word	0x40020040
 800ac40:	40020058 	.word	0x40020058
 800ac44:	40020070 	.word	0x40020070
 800ac48:	40020088 	.word	0x40020088
 800ac4c:	400200a0 	.word	0x400200a0
 800ac50:	400200b8 	.word	0x400200b8
 800ac54:	40020410 	.word	0x40020410
 800ac58:	40020428 	.word	0x40020428
 800ac5c:	40020440 	.word	0x40020440
 800ac60:	40020458 	.word	0x40020458
 800ac64:	40020470 	.word	0x40020470
 800ac68:	40020488 	.word	0x40020488
 800ac6c:	400204a0 	.word	0x400204a0
 800ac70:	400204b8 	.word	0x400204b8
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	685b      	ldr	r3, [r3, #4]
 800ac7c:	b29b      	uxth	r3, r3
 800ac7e:	687a      	ldr	r2, [r7, #4]
 800ac80:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800ac82:	697b      	ldr	r3, [r7, #20]
 800ac84:	089b      	lsrs	r3, r3, #2
 800ac86:	f003 0301 	and.w	r3, r3, #1
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d020      	beq.n	800acd0 <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800ac8e:	697b      	ldr	r3, [r7, #20]
 800ac90:	f023 0304 	bic.w	r3, r3, #4
 800ac94:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aca0:	b2d2      	uxtb	r2, r2
 800aca2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aca8:	1c5a      	adds	r2, r3, #1
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d00c      	beq.n	800acd0 <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800acba:	3b01      	subs	r3, #1
 800acbc:	b29a      	uxth	r2, r3
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800acc6:	b29b      	uxth	r3, r3
 800acc8:	3b01      	subs	r3, #1
 800acca:	b29a      	uxth	r2, r3
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800acd4:	b29b      	uxth	r3, r3
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d005      	beq.n	800ace6 <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800acde:	f043 0204 	orr.w	r2, r3, #4
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800ace6:	697b      	ldr	r3, [r7, #20]
 800ace8:	091b      	lsrs	r3, r3, #4
 800acea:	f003 0301 	and.w	r3, r3, #1
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d04a      	beq.n	800ad88 <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800acf2:	693b      	ldr	r3, [r7, #16]
 800acf4:	091b      	lsrs	r3, r3, #4
 800acf6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d044      	beq.n	800ad88 <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ad02:	b29b      	uxth	r3, r3
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d128      	bne.n	800ad5a <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ad0e:	b2db      	uxtb	r3, r3
 800ad10:	2b28      	cmp	r3, #40	@ 0x28
 800ad12:	d108      	bne.n	800ad26 <I2C_ITSlaveCplt+0x392>
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ad1a:	d104      	bne.n	800ad26 <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800ad1c:	6979      	ldr	r1, [r7, #20]
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f000 f892 	bl	800ae48 <I2C_ITListenCplt>
 800ad24:	e030      	b.n	800ad88 <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ad2c:	b2db      	uxtb	r3, r3
 800ad2e:	2b29      	cmp	r3, #41	@ 0x29
 800ad30:	d10e      	bne.n	800ad50 <I2C_ITSlaveCplt+0x3bc>
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800ad38:	d00a      	beq.n	800ad50 <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	2210      	movs	r2, #16
 800ad40:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f000 f9ed 	bl	800b122 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	f7ff fdc4 	bl	800a8d6 <I2C_ITSlaveSeqCplt>
 800ad4e:	e01b      	b.n	800ad88 <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	2210      	movs	r2, #16
 800ad56:	61da      	str	r2, [r3, #28]
 800ad58:	e016      	b.n	800ad88 <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	2210      	movs	r2, #16
 800ad60:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad66:	f043 0204 	orr.w	r2, r3, #4
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d003      	beq.n	800ad7c <I2C_ITSlaveCplt+0x3e8>
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ad7a:	d105      	bne.n	800ad88 <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad80:	4619      	mov	r1, r3
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	f000 f8b6 	bl	800aef4 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2200      	movs	r2, #0
 800ad94:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d010      	beq.n	800adc0 <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ada2:	4619      	mov	r1, r3
 800ada4:	6878      	ldr	r0, [r7, #4]
 800ada6:	f000 f8a5 	bl	800aef4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800adb0:	b2db      	uxtb	r3, r3
 800adb2:	2b28      	cmp	r3, #40	@ 0x28
 800adb4:	d141      	bne.n	800ae3a <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800adb6:	6979      	ldr	r1, [r7, #20]
 800adb8:	6878      	ldr	r0, [r7, #4]
 800adba:	f000 f845 	bl	800ae48 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800adbe:	e03c      	b.n	800ae3a <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adc4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800adc8:	d014      	beq.n	800adf4 <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f7ff fd83 	bl	800a8d6 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	4a1c      	ldr	r2, [pc, #112]	@ (800ae44 <I2C_ITSlaveCplt+0x4b0>)
 800add4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2220      	movs	r2, #32
 800adda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2200      	movs	r2, #0
 800ade2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2200      	movs	r2, #0
 800ade8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800adec:	6878      	ldr	r0, [r7, #4]
 800adee:	f7ff fbcc 	bl	800a58a <HAL_I2C_ListenCpltCallback>
}
 800adf2:	e022      	b.n	800ae3a <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800adfa:	b2db      	uxtb	r3, r3
 800adfc:	2b22      	cmp	r3, #34	@ 0x22
 800adfe:	d10e      	bne.n	800ae1e <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2220      	movs	r2, #32
 800ae04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	2200      	movs	r2, #0
 800ae12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800ae16:	6878      	ldr	r0, [r7, #4]
 800ae18:	f7ff fb9f 	bl	800a55a <HAL_I2C_SlaveRxCpltCallback>
}
 800ae1c:	e00d      	b.n	800ae3a <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2220      	movs	r2, #32
 800ae22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2200      	movs	r2, #0
 800ae2a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2200      	movs	r2, #0
 800ae30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800ae34:	6878      	ldr	r0, [r7, #4]
 800ae36:	f7ff fb86 	bl	800a546 <HAL_I2C_SlaveTxCpltCallback>
}
 800ae3a:	bf00      	nop
 800ae3c:	3718      	adds	r7, #24
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	bd80      	pop	{r7, pc}
 800ae42:	bf00      	nop
 800ae44:	ffff0000 	.word	0xffff0000

0800ae48 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b082      	sub	sp, #8
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
 800ae50:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	4a26      	ldr	r2, [pc, #152]	@ (800aef0 <I2C_ITListenCplt+0xa8>)
 800ae56:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2220      	movs	r2, #32
 800ae62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2200      	movs	r2, #0
 800ae6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2200      	movs	r2, #0
 800ae72:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	089b      	lsrs	r3, r3, #2
 800ae78:	f003 0301 	and.w	r3, r3, #1
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d022      	beq.n	800aec6 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae8a:	b2d2      	uxtb	r2, r2
 800ae8c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae92:	1c5a      	adds	r2, r3, #1
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d012      	beq.n	800aec6 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aea4:	3b01      	subs	r3, #1
 800aea6:	b29a      	uxth	r2, r3
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aeb0:	b29b      	uxth	r3, r3
 800aeb2:	3b01      	subs	r3, #1
 800aeb4:	b29a      	uxth	r2, r3
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aebe:	f043 0204 	orr.w	r2, r3, #4
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800aec6:	f248 0103 	movw	r1, #32771	@ 0x8003
 800aeca:	6878      	ldr	r0, [r7, #4]
 800aecc:	f000 fbec 	bl	800b6a8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	2210      	movs	r2, #16
 800aed6:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2200      	movs	r2, #0
 800aedc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800aee0:	6878      	ldr	r0, [r7, #4]
 800aee2:	f7ff fb52 	bl	800a58a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800aee6:	bf00      	nop
 800aee8:	3708      	adds	r7, #8
 800aeea:	46bd      	mov	sp, r7
 800aeec:	bd80      	pop	{r7, pc}
 800aeee:	bf00      	nop
 800aef0:	ffff0000 	.word	0xffff0000

0800aef4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b084      	sub	sp, #16
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
 800aefc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800af04:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2200      	movs	r2, #0
 800af0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	4a6d      	ldr	r2, [pc, #436]	@ (800b0c8 <I2C_ITError+0x1d4>)
 800af12:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2200      	movs	r2, #0
 800af18:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	431a      	orrs	r2, r3
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800af26:	7bfb      	ldrb	r3, [r7, #15]
 800af28:	2b28      	cmp	r3, #40	@ 0x28
 800af2a:	d005      	beq.n	800af38 <I2C_ITError+0x44>
 800af2c:	7bfb      	ldrb	r3, [r7, #15]
 800af2e:	2b29      	cmp	r3, #41	@ 0x29
 800af30:	d002      	beq.n	800af38 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800af32:	7bfb      	ldrb	r3, [r7, #15]
 800af34:	2b2a      	cmp	r3, #42	@ 0x2a
 800af36:	d10b      	bne.n	800af50 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800af38:	2103      	movs	r1, #3
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	f000 fbb4 	bl	800b6a8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2228      	movs	r2, #40	@ 0x28
 800af44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	4a60      	ldr	r2, [pc, #384]	@ (800b0cc <I2C_ITError+0x1d8>)
 800af4c:	635a      	str	r2, [r3, #52]	@ 0x34
 800af4e:	e030      	b.n	800afb2 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800af50:	f248 0103 	movw	r1, #32771	@ 0x8003
 800af54:	6878      	ldr	r0, [r7, #4]
 800af56:	f000 fba7 	bl	800b6a8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f000 f8e1 	bl	800b122 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800af66:	b2db      	uxtb	r3, r3
 800af68:	2b60      	cmp	r3, #96	@ 0x60
 800af6a:	d01f      	beq.n	800afac <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2220      	movs	r2, #32
 800af70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	699b      	ldr	r3, [r3, #24]
 800af7a:	f003 0320 	and.w	r3, r3, #32
 800af7e:	2b20      	cmp	r3, #32
 800af80:	d114      	bne.n	800afac <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	699b      	ldr	r3, [r3, #24]
 800af88:	f003 0310 	and.w	r3, r3, #16
 800af8c:	2b10      	cmp	r3, #16
 800af8e:	d109      	bne.n	800afa4 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	2210      	movs	r2, #16
 800af96:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af9c:	f043 0204 	orr.w	r2, r3, #4
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	2220      	movs	r2, #32
 800afaa:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2200      	movs	r2, #0
 800afb0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afb6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d039      	beq.n	800b034 <I2C_ITError+0x140>
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	2b11      	cmp	r3, #17
 800afc4:	d002      	beq.n	800afcc <I2C_ITError+0xd8>
 800afc6:	68bb      	ldr	r3, [r7, #8]
 800afc8:	2b21      	cmp	r3, #33	@ 0x21
 800afca:	d133      	bne.n	800b034 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800afd6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800afda:	d107      	bne.n	800afec <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	681a      	ldr	r2, [r3, #0]
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800afea:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aff0:	4618      	mov	r0, r3
 800aff2:	f7fe f9b1 	bl	8009358 <HAL_DMA_GetState>
 800aff6:	4603      	mov	r3, r0
 800aff8:	2b01      	cmp	r3, #1
 800affa:	d017      	beq.n	800b02c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b000:	4a33      	ldr	r2, [pc, #204]	@ (800b0d0 <I2C_ITError+0x1dc>)
 800b002:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2200      	movs	r2, #0
 800b008:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b010:	4618      	mov	r0, r3
 800b012:	f7fd f831 	bl	8008078 <HAL_DMA_Abort_IT>
 800b016:	4603      	mov	r3, r0
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d04d      	beq.n	800b0b8 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b020:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b022:	687a      	ldr	r2, [r7, #4]
 800b024:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800b026:	4610      	mov	r0, r2
 800b028:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b02a:	e045      	b.n	800b0b8 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	f000 f851 	bl	800b0d4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b032:	e041      	b.n	800b0b8 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d039      	beq.n	800b0b0 <I2C_ITError+0x1bc>
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	2b12      	cmp	r3, #18
 800b040:	d002      	beq.n	800b048 <I2C_ITError+0x154>
 800b042:	68bb      	ldr	r3, [r7, #8]
 800b044:	2b22      	cmp	r3, #34	@ 0x22
 800b046:	d133      	bne.n	800b0b0 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b052:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b056:	d107      	bne.n	800b068 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	681a      	ldr	r2, [r3, #0]
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b066:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b06c:	4618      	mov	r0, r3
 800b06e:	f7fe f973 	bl	8009358 <HAL_DMA_GetState>
 800b072:	4603      	mov	r3, r0
 800b074:	2b01      	cmp	r3, #1
 800b076:	d017      	beq.n	800b0a8 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b07c:	4a14      	ldr	r2, [pc, #80]	@ (800b0d0 <I2C_ITError+0x1dc>)
 800b07e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2200      	movs	r2, #0
 800b084:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b08c:	4618      	mov	r0, r3
 800b08e:	f7fc fff3 	bl	8008078 <HAL_DMA_Abort_IT>
 800b092:	4603      	mov	r3, r0
 800b094:	2b00      	cmp	r3, #0
 800b096:	d011      	beq.n	800b0bc <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b09c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b09e:	687a      	ldr	r2, [r7, #4]
 800b0a0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800b0a2:	4610      	mov	r0, r2
 800b0a4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b0a6:	e009      	b.n	800b0bc <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800b0a8:	6878      	ldr	r0, [r7, #4]
 800b0aa:	f000 f813 	bl	800b0d4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b0ae:	e005      	b.n	800b0bc <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	f000 f80f 	bl	800b0d4 <I2C_TreatErrorCallback>
  }
}
 800b0b6:	e002      	b.n	800b0be <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b0b8:	bf00      	nop
 800b0ba:	e000      	b.n	800b0be <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b0bc:	bf00      	nop
}
 800b0be:	bf00      	nop
 800b0c0:	3710      	adds	r7, #16
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}
 800b0c6:	bf00      	nop
 800b0c8:	ffff0000 	.word	0xffff0000
 800b0cc:	0800a5c7 	.word	0x0800a5c7
 800b0d0:	0800b16b 	.word	0x0800b16b

0800b0d4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b082      	sub	sp, #8
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b0e2:	b2db      	uxtb	r3, r3
 800b0e4:	2b60      	cmp	r3, #96	@ 0x60
 800b0e6:	d10e      	bne.n	800b106 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2220      	movs	r2, #32
 800b0ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f7ff fa57 	bl	800a5b2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b104:	e009      	b.n	800b11a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2200      	movs	r2, #0
 800b10a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2200      	movs	r2, #0
 800b110:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	f7ff fa42 	bl	800a59e <HAL_I2C_ErrorCallback>
}
 800b11a:	bf00      	nop
 800b11c:	3708      	adds	r7, #8
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}

0800b122 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800b122:	b480      	push	{r7}
 800b124:	b083      	sub	sp, #12
 800b126:	af00      	add	r7, sp, #0
 800b128:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	699b      	ldr	r3, [r3, #24]
 800b130:	f003 0302 	and.w	r3, r3, #2
 800b134:	2b02      	cmp	r3, #2
 800b136:	d103      	bne.n	800b140 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	2200      	movs	r2, #0
 800b13e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	699b      	ldr	r3, [r3, #24]
 800b146:	f003 0301 	and.w	r3, r3, #1
 800b14a:	2b01      	cmp	r3, #1
 800b14c:	d007      	beq.n	800b15e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	699a      	ldr	r2, [r3, #24]
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	f042 0201 	orr.w	r2, r2, #1
 800b15c:	619a      	str	r2, [r3, #24]
  }
}
 800b15e:	bf00      	nop
 800b160:	370c      	adds	r7, #12
 800b162:	46bd      	mov	sp, r7
 800b164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b168:	4770      	bx	lr

0800b16a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800b16a:	b580      	push	{r7, lr}
 800b16c:	b084      	sub	sp, #16
 800b16e:	af00      	add	r7, sp, #0
 800b170:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b176:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d003      	beq.n	800b188 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b184:	2200      	movs	r2, #0
 800b186:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d003      	beq.n	800b198 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b194:	2200      	movs	r2, #0
 800b196:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800b198:	68f8      	ldr	r0, [r7, #12]
 800b19a:	f7ff ff9b 	bl	800b0d4 <I2C_TreatErrorCallback>
}
 800b19e:	bf00      	nop
 800b1a0:	3710      	adds	r7, #16
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd80      	pop	{r7, pc}

0800b1a6 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b1a6:	b580      	push	{r7, lr}
 800b1a8:	b084      	sub	sp, #16
 800b1aa:	af00      	add	r7, sp, #0
 800b1ac:	60f8      	str	r0, [r7, #12]
 800b1ae:	60b9      	str	r1, [r7, #8]
 800b1b0:	603b      	str	r3, [r7, #0]
 800b1b2:	4613      	mov	r3, r2
 800b1b4:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b1b6:	e03b      	b.n	800b230 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b1b8:	69ba      	ldr	r2, [r7, #24]
 800b1ba:	6839      	ldr	r1, [r7, #0]
 800b1bc:	68f8      	ldr	r0, [r7, #12]
 800b1be:	f000 f961 	bl	800b484 <I2C_IsErrorOccurred>
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d001      	beq.n	800b1cc <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800b1c8:	2301      	movs	r3, #1
 800b1ca:	e041      	b.n	800b250 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b1d2:	d02d      	beq.n	800b230 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b1d4:	f7fb fce8 	bl	8006ba8 <HAL_GetTick>
 800b1d8:	4602      	mov	r2, r0
 800b1da:	69bb      	ldr	r3, [r7, #24]
 800b1dc:	1ad3      	subs	r3, r2, r3
 800b1de:	683a      	ldr	r2, [r7, #0]
 800b1e0:	429a      	cmp	r2, r3
 800b1e2:	d302      	bcc.n	800b1ea <I2C_WaitOnFlagUntilTimeout+0x44>
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d122      	bne.n	800b230 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	699a      	ldr	r2, [r3, #24]
 800b1f0:	68bb      	ldr	r3, [r7, #8]
 800b1f2:	4013      	ands	r3, r2
 800b1f4:	68ba      	ldr	r2, [r7, #8]
 800b1f6:	429a      	cmp	r2, r3
 800b1f8:	bf0c      	ite	eq
 800b1fa:	2301      	moveq	r3, #1
 800b1fc:	2300      	movne	r3, #0
 800b1fe:	b2db      	uxtb	r3, r3
 800b200:	461a      	mov	r2, r3
 800b202:	79fb      	ldrb	r3, [r7, #7]
 800b204:	429a      	cmp	r2, r3
 800b206:	d113      	bne.n	800b230 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b20c:	f043 0220 	orr.w	r2, r3, #32
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	2220      	movs	r2, #32
 800b218:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	2200      	movs	r2, #0
 800b220:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	2200      	movs	r2, #0
 800b228:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800b22c:	2301      	movs	r3, #1
 800b22e:	e00f      	b.n	800b250 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	699a      	ldr	r2, [r3, #24]
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	4013      	ands	r3, r2
 800b23a:	68ba      	ldr	r2, [r7, #8]
 800b23c:	429a      	cmp	r2, r3
 800b23e:	bf0c      	ite	eq
 800b240:	2301      	moveq	r3, #1
 800b242:	2300      	movne	r3, #0
 800b244:	b2db      	uxtb	r3, r3
 800b246:	461a      	mov	r2, r3
 800b248:	79fb      	ldrb	r3, [r7, #7]
 800b24a:	429a      	cmp	r2, r3
 800b24c:	d0b4      	beq.n	800b1b8 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b24e:	2300      	movs	r3, #0
}
 800b250:	4618      	mov	r0, r3
 800b252:	3710      	adds	r7, #16
 800b254:	46bd      	mov	sp, r7
 800b256:	bd80      	pop	{r7, pc}

0800b258 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b084      	sub	sp, #16
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	60f8      	str	r0, [r7, #12]
 800b260:	60b9      	str	r1, [r7, #8]
 800b262:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b264:	e033      	b.n	800b2ce <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b266:	687a      	ldr	r2, [r7, #4]
 800b268:	68b9      	ldr	r1, [r7, #8]
 800b26a:	68f8      	ldr	r0, [r7, #12]
 800b26c:	f000 f90a 	bl	800b484 <I2C_IsErrorOccurred>
 800b270:	4603      	mov	r3, r0
 800b272:	2b00      	cmp	r3, #0
 800b274:	d001      	beq.n	800b27a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b276:	2301      	movs	r3, #1
 800b278:	e031      	b.n	800b2de <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b27a:	68bb      	ldr	r3, [r7, #8]
 800b27c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b280:	d025      	beq.n	800b2ce <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b282:	f7fb fc91 	bl	8006ba8 <HAL_GetTick>
 800b286:	4602      	mov	r2, r0
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	1ad3      	subs	r3, r2, r3
 800b28c:	68ba      	ldr	r2, [r7, #8]
 800b28e:	429a      	cmp	r2, r3
 800b290:	d302      	bcc.n	800b298 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800b292:	68bb      	ldr	r3, [r7, #8]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d11a      	bne.n	800b2ce <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	699b      	ldr	r3, [r3, #24]
 800b29e:	f003 0302 	and.w	r3, r3, #2
 800b2a2:	2b02      	cmp	r3, #2
 800b2a4:	d013      	beq.n	800b2ce <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b2aa:	f043 0220 	orr.w	r2, r3, #32
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	2220      	movs	r2, #32
 800b2b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	2200      	movs	r2, #0
 800b2be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	e007      	b.n	800b2de <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	699b      	ldr	r3, [r3, #24]
 800b2d4:	f003 0302 	and.w	r3, r3, #2
 800b2d8:	2b02      	cmp	r3, #2
 800b2da:	d1c4      	bne.n	800b266 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b2dc:	2300      	movs	r3, #0
}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	3710      	adds	r7, #16
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}

0800b2e6 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b2e6:	b580      	push	{r7, lr}
 800b2e8:	b084      	sub	sp, #16
 800b2ea:	af00      	add	r7, sp, #0
 800b2ec:	60f8      	str	r0, [r7, #12]
 800b2ee:	60b9      	str	r1, [r7, #8]
 800b2f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b2f2:	e02f      	b.n	800b354 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b2f4:	687a      	ldr	r2, [r7, #4]
 800b2f6:	68b9      	ldr	r1, [r7, #8]
 800b2f8:	68f8      	ldr	r0, [r7, #12]
 800b2fa:	f000 f8c3 	bl	800b484 <I2C_IsErrorOccurred>
 800b2fe:	4603      	mov	r3, r0
 800b300:	2b00      	cmp	r3, #0
 800b302:	d001      	beq.n	800b308 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b304:	2301      	movs	r3, #1
 800b306:	e02d      	b.n	800b364 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b308:	f7fb fc4e 	bl	8006ba8 <HAL_GetTick>
 800b30c:	4602      	mov	r2, r0
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	1ad3      	subs	r3, r2, r3
 800b312:	68ba      	ldr	r2, [r7, #8]
 800b314:	429a      	cmp	r2, r3
 800b316:	d302      	bcc.n	800b31e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800b318:	68bb      	ldr	r3, [r7, #8]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d11a      	bne.n	800b354 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	699b      	ldr	r3, [r3, #24]
 800b324:	f003 0320 	and.w	r3, r3, #32
 800b328:	2b20      	cmp	r3, #32
 800b32a:	d013      	beq.n	800b354 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b330:	f043 0220 	orr.w	r2, r3, #32
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	2220      	movs	r2, #32
 800b33c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	2200      	movs	r2, #0
 800b344:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	2200      	movs	r2, #0
 800b34c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800b350:	2301      	movs	r3, #1
 800b352:	e007      	b.n	800b364 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	699b      	ldr	r3, [r3, #24]
 800b35a:	f003 0320 	and.w	r3, r3, #32
 800b35e:	2b20      	cmp	r3, #32
 800b360:	d1c8      	bne.n	800b2f4 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b362:	2300      	movs	r3, #0
}
 800b364:	4618      	mov	r0, r3
 800b366:	3710      	adds	r7, #16
 800b368:	46bd      	mov	sp, r7
 800b36a:	bd80      	pop	{r7, pc}

0800b36c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b086      	sub	sp, #24
 800b370:	af00      	add	r7, sp, #0
 800b372:	60f8      	str	r0, [r7, #12]
 800b374:	60b9      	str	r1, [r7, #8]
 800b376:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b378:	2300      	movs	r3, #0
 800b37a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800b37c:	e071      	b.n	800b462 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b37e:	687a      	ldr	r2, [r7, #4]
 800b380:	68b9      	ldr	r1, [r7, #8]
 800b382:	68f8      	ldr	r0, [r7, #12]
 800b384:	f000 f87e 	bl	800b484 <I2C_IsErrorOccurred>
 800b388:	4603      	mov	r3, r0
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d001      	beq.n	800b392 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800b38e:	2301      	movs	r3, #1
 800b390:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	699b      	ldr	r3, [r3, #24]
 800b398:	f003 0320 	and.w	r3, r3, #32
 800b39c:	2b20      	cmp	r3, #32
 800b39e:	d13b      	bne.n	800b418 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800b3a0:	7dfb      	ldrb	r3, [r7, #23]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d138      	bne.n	800b418 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	699b      	ldr	r3, [r3, #24]
 800b3ac:	f003 0304 	and.w	r3, r3, #4
 800b3b0:	2b04      	cmp	r3, #4
 800b3b2:	d105      	bne.n	800b3c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d001      	beq.n	800b3c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800b3bc:	2300      	movs	r3, #0
 800b3be:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	699b      	ldr	r3, [r3, #24]
 800b3c6:	f003 0310 	and.w	r3, r3, #16
 800b3ca:	2b10      	cmp	r3, #16
 800b3cc:	d121      	bne.n	800b412 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	2210      	movs	r2, #16
 800b3d4:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	2204      	movs	r2, #4
 800b3da:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	2220      	movs	r2, #32
 800b3e2:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	6859      	ldr	r1, [r3, #4]
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	681a      	ldr	r2, [r3, #0]
 800b3ee:	4b24      	ldr	r3, [pc, #144]	@ (800b480 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800b3f0:	400b      	ands	r3, r1
 800b3f2:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	2220      	movs	r2, #32
 800b3f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	2200      	movs	r2, #0
 800b400:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	2200      	movs	r2, #0
 800b408:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800b40c:	2301      	movs	r3, #1
 800b40e:	75fb      	strb	r3, [r7, #23]
 800b410:	e002      	b.n	800b418 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	2200      	movs	r2, #0
 800b416:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800b418:	f7fb fbc6 	bl	8006ba8 <HAL_GetTick>
 800b41c:	4602      	mov	r2, r0
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	1ad3      	subs	r3, r2, r3
 800b422:	68ba      	ldr	r2, [r7, #8]
 800b424:	429a      	cmp	r2, r3
 800b426:	d302      	bcc.n	800b42e <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800b428:	68bb      	ldr	r3, [r7, #8]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d119      	bne.n	800b462 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800b42e:	7dfb      	ldrb	r3, [r7, #23]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d116      	bne.n	800b462 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	699b      	ldr	r3, [r3, #24]
 800b43a:	f003 0304 	and.w	r3, r3, #4
 800b43e:	2b04      	cmp	r3, #4
 800b440:	d00f      	beq.n	800b462 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b446:	f043 0220 	orr.w	r2, r3, #32
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	2220      	movs	r2, #32
 800b452:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	2200      	movs	r2, #0
 800b45a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800b45e:	2301      	movs	r3, #1
 800b460:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	699b      	ldr	r3, [r3, #24]
 800b468:	f003 0304 	and.w	r3, r3, #4
 800b46c:	2b04      	cmp	r3, #4
 800b46e:	d002      	beq.n	800b476 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800b470:	7dfb      	ldrb	r3, [r7, #23]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d083      	beq.n	800b37e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800b476:	7dfb      	ldrb	r3, [r7, #23]
}
 800b478:	4618      	mov	r0, r3
 800b47a:	3718      	adds	r7, #24
 800b47c:	46bd      	mov	sp, r7
 800b47e:	bd80      	pop	{r7, pc}
 800b480:	fe00e800 	.word	0xfe00e800

0800b484 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b08a      	sub	sp, #40	@ 0x28
 800b488:	af00      	add	r7, sp, #0
 800b48a:	60f8      	str	r0, [r7, #12]
 800b48c:	60b9      	str	r1, [r7, #8]
 800b48e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b490:	2300      	movs	r3, #0
 800b492:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	699b      	ldr	r3, [r3, #24]
 800b49c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800b49e:	2300      	movs	r3, #0
 800b4a0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800b4a6:	69bb      	ldr	r3, [r7, #24]
 800b4a8:	f003 0310 	and.w	r3, r3, #16
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d068      	beq.n	800b582 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	2210      	movs	r2, #16
 800b4b6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b4b8:	e049      	b.n	800b54e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800b4ba:	68bb      	ldr	r3, [r7, #8]
 800b4bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b4c0:	d045      	beq.n	800b54e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b4c2:	f7fb fb71 	bl	8006ba8 <HAL_GetTick>
 800b4c6:	4602      	mov	r2, r0
 800b4c8:	69fb      	ldr	r3, [r7, #28]
 800b4ca:	1ad3      	subs	r3, r2, r3
 800b4cc:	68ba      	ldr	r2, [r7, #8]
 800b4ce:	429a      	cmp	r2, r3
 800b4d0:	d302      	bcc.n	800b4d8 <I2C_IsErrorOccurred+0x54>
 800b4d2:	68bb      	ldr	r3, [r7, #8]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d13a      	bne.n	800b54e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	685b      	ldr	r3, [r3, #4]
 800b4de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b4e2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b4ea:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	699b      	ldr	r3, [r3, #24]
 800b4f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b4f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b4fa:	d121      	bne.n	800b540 <I2C_IsErrorOccurred+0xbc>
 800b4fc:	697b      	ldr	r3, [r7, #20]
 800b4fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b502:	d01d      	beq.n	800b540 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800b504:	7cfb      	ldrb	r3, [r7, #19]
 800b506:	2b20      	cmp	r3, #32
 800b508:	d01a      	beq.n	800b540 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	685a      	ldr	r2, [r3, #4]
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b518:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800b51a:	f7fb fb45 	bl	8006ba8 <HAL_GetTick>
 800b51e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b520:	e00e      	b.n	800b540 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800b522:	f7fb fb41 	bl	8006ba8 <HAL_GetTick>
 800b526:	4602      	mov	r2, r0
 800b528:	69fb      	ldr	r3, [r7, #28]
 800b52a:	1ad3      	subs	r3, r2, r3
 800b52c:	2b19      	cmp	r3, #25
 800b52e:	d907      	bls.n	800b540 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800b530:	6a3b      	ldr	r3, [r7, #32]
 800b532:	f043 0320 	orr.w	r3, r3, #32
 800b536:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800b538:	2301      	movs	r3, #1
 800b53a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800b53e:	e006      	b.n	800b54e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	699b      	ldr	r3, [r3, #24]
 800b546:	f003 0320 	and.w	r3, r3, #32
 800b54a:	2b20      	cmp	r3, #32
 800b54c:	d1e9      	bne.n	800b522 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	699b      	ldr	r3, [r3, #24]
 800b554:	f003 0320 	and.w	r3, r3, #32
 800b558:	2b20      	cmp	r3, #32
 800b55a:	d003      	beq.n	800b564 <I2C_IsErrorOccurred+0xe0>
 800b55c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b560:	2b00      	cmp	r3, #0
 800b562:	d0aa      	beq.n	800b4ba <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800b564:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d103      	bne.n	800b574 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	2220      	movs	r2, #32
 800b572:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800b574:	6a3b      	ldr	r3, [r7, #32]
 800b576:	f043 0304 	orr.w	r3, r3, #4
 800b57a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800b57c:	2301      	movs	r3, #1
 800b57e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	699b      	ldr	r3, [r3, #24]
 800b588:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800b58a:	69bb      	ldr	r3, [r7, #24]
 800b58c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b590:	2b00      	cmp	r3, #0
 800b592:	d00b      	beq.n	800b5ac <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800b594:	6a3b      	ldr	r3, [r7, #32]
 800b596:	f043 0301 	orr.w	r3, r3, #1
 800b59a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b5a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b5a6:	2301      	movs	r3, #1
 800b5a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800b5ac:	69bb      	ldr	r3, [r7, #24]
 800b5ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d00b      	beq.n	800b5ce <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800b5b6:	6a3b      	ldr	r3, [r7, #32]
 800b5b8:	f043 0308 	orr.w	r3, r3, #8
 800b5bc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b5c6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b5c8:	2301      	movs	r3, #1
 800b5ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800b5ce:	69bb      	ldr	r3, [r7, #24]
 800b5d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d00b      	beq.n	800b5f0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800b5d8:	6a3b      	ldr	r3, [r7, #32]
 800b5da:	f043 0302 	orr.w	r3, r3, #2
 800b5de:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b5e8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b5ea:	2301      	movs	r3, #1
 800b5ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800b5f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d01c      	beq.n	800b632 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b5f8:	68f8      	ldr	r0, [r7, #12]
 800b5fa:	f7ff fd92 	bl	800b122 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	6859      	ldr	r1, [r3, #4]
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	681a      	ldr	r2, [r3, #0]
 800b608:	4b0d      	ldr	r3, [pc, #52]	@ (800b640 <I2C_IsErrorOccurred+0x1bc>)
 800b60a:	400b      	ands	r3, r1
 800b60c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b612:	6a3b      	ldr	r3, [r7, #32]
 800b614:	431a      	orrs	r2, r3
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	2220      	movs	r2, #32
 800b61e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	2200      	movs	r2, #0
 800b626:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	2200      	movs	r2, #0
 800b62e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800b632:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800b636:	4618      	mov	r0, r3
 800b638:	3728      	adds	r7, #40	@ 0x28
 800b63a:	46bd      	mov	sp, r7
 800b63c:	bd80      	pop	{r7, pc}
 800b63e:	bf00      	nop
 800b640:	fe00e800 	.word	0xfe00e800

0800b644 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b644:	b480      	push	{r7}
 800b646:	b087      	sub	sp, #28
 800b648:	af00      	add	r7, sp, #0
 800b64a:	60f8      	str	r0, [r7, #12]
 800b64c:	607b      	str	r3, [r7, #4]
 800b64e:	460b      	mov	r3, r1
 800b650:	817b      	strh	r3, [r7, #10]
 800b652:	4613      	mov	r3, r2
 800b654:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b656:	897b      	ldrh	r3, [r7, #10]
 800b658:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b65c:	7a7b      	ldrb	r3, [r7, #9]
 800b65e:	041b      	lsls	r3, r3, #16
 800b660:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b664:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b66a:	6a3b      	ldr	r3, [r7, #32]
 800b66c:	4313      	orrs	r3, r2
 800b66e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b672:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	685a      	ldr	r2, [r3, #4]
 800b67a:	6a3b      	ldr	r3, [r7, #32]
 800b67c:	0d5b      	lsrs	r3, r3, #21
 800b67e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800b682:	4b08      	ldr	r3, [pc, #32]	@ (800b6a4 <I2C_TransferConfig+0x60>)
 800b684:	430b      	orrs	r3, r1
 800b686:	43db      	mvns	r3, r3
 800b688:	ea02 0103 	and.w	r1, r2, r3
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	697a      	ldr	r2, [r7, #20]
 800b692:	430a      	orrs	r2, r1
 800b694:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800b696:	bf00      	nop
 800b698:	371c      	adds	r7, #28
 800b69a:	46bd      	mov	sp, r7
 800b69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a0:	4770      	bx	lr
 800b6a2:	bf00      	nop
 800b6a4:	03ff63ff 	.word	0x03ff63ff

0800b6a8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800b6a8:	b480      	push	{r7}
 800b6aa:	b085      	sub	sp, #20
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
 800b6b0:	460b      	mov	r3, r1
 800b6b2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800b6b8:	887b      	ldrh	r3, [r7, #2]
 800b6ba:	f003 0301 	and.w	r3, r3, #1
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d00f      	beq.n	800b6e2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 800b6c8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b6d0:	b2db      	uxtb	r3, r3
 800b6d2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800b6d6:	2b28      	cmp	r3, #40	@ 0x28
 800b6d8:	d003      	beq.n	800b6e2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800b6e0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800b6e2:	887b      	ldrh	r3, [r7, #2]
 800b6e4:	f003 0302 	and.w	r3, r3, #2
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d00f      	beq.n	800b70c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800b6f2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b6fa:	b2db      	uxtb	r3, r3
 800b6fc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800b700:	2b28      	cmp	r3, #40	@ 0x28
 800b702:	d003      	beq.n	800b70c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800b70a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800b70c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b710:	2b00      	cmp	r3, #0
 800b712:	da03      	bge.n	800b71c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800b71a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800b71c:	887b      	ldrh	r3, [r7, #2]
 800b71e:	2b10      	cmp	r3, #16
 800b720:	d103      	bne.n	800b72a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800b728:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800b72a:	887b      	ldrh	r3, [r7, #2]
 800b72c:	2b20      	cmp	r3, #32
 800b72e:	d103      	bne.n	800b738 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	f043 0320 	orr.w	r3, r3, #32
 800b736:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800b738:	887b      	ldrh	r3, [r7, #2]
 800b73a:	2b40      	cmp	r3, #64	@ 0x40
 800b73c:	d103      	bne.n	800b746 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b744:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	6819      	ldr	r1, [r3, #0]
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	43da      	mvns	r2, r3
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	400a      	ands	r2, r1
 800b756:	601a      	str	r2, [r3, #0]
}
 800b758:	bf00      	nop
 800b75a:	3714      	adds	r7, #20
 800b75c:	46bd      	mov	sp, r7
 800b75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b762:	4770      	bx	lr

0800b764 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b764:	b480      	push	{r7}
 800b766:	b083      	sub	sp, #12
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
 800b76c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b774:	b2db      	uxtb	r3, r3
 800b776:	2b20      	cmp	r3, #32
 800b778:	d138      	bne.n	800b7ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b780:	2b01      	cmp	r3, #1
 800b782:	d101      	bne.n	800b788 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b784:	2302      	movs	r3, #2
 800b786:	e032      	b.n	800b7ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2201      	movs	r2, #1
 800b78c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2224      	movs	r2, #36	@ 0x24
 800b794:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	681a      	ldr	r2, [r3, #0]
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	f022 0201 	bic.w	r2, r2, #1
 800b7a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	681a      	ldr	r2, [r3, #0]
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800b7b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	6819      	ldr	r1, [r3, #0]
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	683a      	ldr	r2, [r7, #0]
 800b7c4:	430a      	orrs	r2, r1
 800b7c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	681a      	ldr	r2, [r3, #0]
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	f042 0201 	orr.w	r2, r2, #1
 800b7d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2220      	movs	r2, #32
 800b7dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	e000      	b.n	800b7ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b7ec:	2302      	movs	r3, #2
  }
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	370c      	adds	r7, #12
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f8:	4770      	bx	lr

0800b7fa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b7fa:	b480      	push	{r7}
 800b7fc:	b085      	sub	sp, #20
 800b7fe:	af00      	add	r7, sp, #0
 800b800:	6078      	str	r0, [r7, #4]
 800b802:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b80a:	b2db      	uxtb	r3, r3
 800b80c:	2b20      	cmp	r3, #32
 800b80e:	d139      	bne.n	800b884 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b816:	2b01      	cmp	r3, #1
 800b818:	d101      	bne.n	800b81e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b81a:	2302      	movs	r3, #2
 800b81c:	e033      	b.n	800b886 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	2201      	movs	r2, #1
 800b822:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	2224      	movs	r2, #36	@ 0x24
 800b82a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	681a      	ldr	r2, [r3, #0]
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	f022 0201 	bic.w	r2, r2, #1
 800b83c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800b84c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	021b      	lsls	r3, r3, #8
 800b852:	68fa      	ldr	r2, [r7, #12]
 800b854:	4313      	orrs	r3, r2
 800b856:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	68fa      	ldr	r2, [r7, #12]
 800b85e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	681a      	ldr	r2, [r3, #0]
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	f042 0201 	orr.w	r2, r2, #1
 800b86e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2220      	movs	r2, #32
 800b874:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2200      	movs	r2, #0
 800b87c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b880:	2300      	movs	r3, #0
 800b882:	e000      	b.n	800b886 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b884:	2302      	movs	r3, #2
  }
}
 800b886:	4618      	mov	r0, r3
 800b888:	3714      	adds	r7, #20
 800b88a:	46bd      	mov	sp, r7
 800b88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b890:	4770      	bx	lr
	...

0800b894 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b086      	sub	sp, #24
 800b898:	af02      	add	r7, sp, #8
 800b89a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b89c:	2300      	movs	r3, #0
 800b89e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800b8a0:	f7fb f982 	bl	8006ba8 <HAL_GetTick>
 800b8a4:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d102      	bne.n	800b8b2 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 800b8ac:	2301      	movs	r3, #1
 800b8ae:	73fb      	strb	r3, [r7, #15]
 800b8b0:	e0a5      	b.n	800b9fe <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	f040 809e 	bne.w	800b9fe <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f7f9 f8d8 	bl	8004a78 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 800b8c8:	f241 3188 	movw	r1, #5000	@ 0x1388
 800b8cc:	6878      	ldr	r0, [r7, #4]
 800b8ce:	f000 fa40 	bl	800bd52 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	689a      	ldr	r2, [r3, #8]
 800b8d8:	4b4b      	ldr	r3, [pc, #300]	@ (800ba08 <HAL_OSPI_Init+0x174>)
 800b8da:	4013      	ands	r3, r2
 800b8dc:	687a      	ldr	r2, [r7, #4]
 800b8de:	68d1      	ldr	r1, [r2, #12]
 800b8e0:	687a      	ldr	r2, [r7, #4]
 800b8e2:	6912      	ldr	r2, [r2, #16]
 800b8e4:	3a01      	subs	r2, #1
 800b8e6:	0412      	lsls	r2, r2, #16
 800b8e8:	4311      	orrs	r1, r2
 800b8ea:	687a      	ldr	r2, [r7, #4]
 800b8ec:	6952      	ldr	r2, [r2, #20]
 800b8ee:	3a01      	subs	r2, #1
 800b8f0:	0212      	lsls	r2, r2, #8
 800b8f2:	4311      	orrs	r1, r2
 800b8f4:	687a      	ldr	r2, [r7, #4]
 800b8f6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800b8f8:	4311      	orrs	r1, r2
 800b8fa:	687a      	ldr	r2, [r7, #4]
 800b8fc:	69d2      	ldr	r2, [r2, #28]
 800b8fe:	4311      	orrs	r1, r2
 800b900:	687a      	ldr	r2, [r7, #4]
 800b902:	6812      	ldr	r2, [r2, #0]
 800b904:	430b      	orrs	r3, r1
 800b906:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	68db      	ldr	r3, [r3, #12]
 800b90e:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	6a1a      	ldr	r2, [r3, #32]
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	430a      	orrs	r2, r1
 800b91c:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b922:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	430a      	orrs	r2, r1
 800b92e:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	687a      	ldr	r2, [r7, #4]
 800b936:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800b938:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	685b      	ldr	r3, [r3, #4]
 800b948:	3b01      	subs	r3, #1
 800b94a:	021a      	lsls	r2, r3, #8
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	430a      	orrs	r2, r1
 800b952:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b958:	9300      	str	r3, [sp, #0]
 800b95a:	68bb      	ldr	r3, [r7, #8]
 800b95c:	2200      	movs	r2, #0
 800b95e:	2120      	movs	r1, #32
 800b960:	6878      	ldr	r0, [r7, #4]
 800b962:	f000 fef1 	bl	800c748 <OSPI_WaitFlagStateUntilTimeout>
 800b966:	4603      	mov	r3, r0
 800b968:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800b96a:	7bfb      	ldrb	r3, [r7, #15]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d146      	bne.n	800b9fe <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	68db      	ldr	r3, [r3, #12]
 800b976:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b97e:	1e5a      	subs	r2, r3, #1
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	430a      	orrs	r2, r1
 800b986:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	689a      	ldr	r2, [r3, #8]
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	430a      	orrs	r2, r1
 800b99c:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800b9a6:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9b2:	431a      	orrs	r2, r3
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	430a      	orrs	r2, r1
 800b9ba:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	681a      	ldr	r2, [r3, #0]
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	f042 0201 	orr.w	r2, r2, #1
 800b9cc:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	699b      	ldr	r3, [r3, #24]
 800b9d2:	2b02      	cmp	r3, #2
 800b9d4:	d107      	bne.n	800b9e6 <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	689a      	ldr	r2, [r3, #8]
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	f042 0202 	orr.w	r2, r2, #2
 800b9e4:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	68db      	ldr	r3, [r3, #12]
 800b9ea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b9ee:	d103      	bne.n	800b9f8 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2201      	movs	r2, #1
 800b9f4:	651a      	str	r2, [r3, #80]	@ 0x50
 800b9f6:	e002      	b.n	800b9fe <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	2202      	movs	r2, #2
 800b9fc:	651a      	str	r2, [r3, #80]	@ 0x50
      }
    }
  }

  /* Return function status */
  return status;
 800b9fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba00:	4618      	mov	r0, r3
 800ba02:	3710      	adds	r7, #16
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bd80      	pop	{r7, pc}
 800ba08:	f8e0f8f4 	.word	0xf8e0f8f4

0800ba0c <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b08a      	sub	sp, #40	@ 0x28
 800ba10:	af02      	add	r7, sp, #8
 800ba12:	60f8      	str	r0, [r7, #12]
 800ba14:	60b9      	str	r1, [r7, #8]
 800ba16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 800ba18:	f7fb f8c6 	bl	8006ba8 <HAL_GetTick>
 800ba1c:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE(cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800ba1e:	68bb      	ldr	r3, [r7, #8]
 800ba20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba22:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE(cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba28:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 800ba2a:	697b      	ldr	r3, [r7, #20]
 800ba2c:	2b02      	cmp	r3, #2
 800ba2e:	d104      	bne.n	800ba3a <HAL_OSPI_Command+0x2e>
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	68db      	ldr	r3, [r3, #12]
 800ba34:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ba38:	d115      	bne.n	800ba66 <HAL_OSPI_Command+0x5a>
 800ba3a:	697b      	ldr	r3, [r7, #20]
 800ba3c:	2b14      	cmp	r3, #20
 800ba3e:	d107      	bne.n	800ba50 <HAL_OSPI_Command+0x44>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800ba40:	68bb      	ldr	r3, [r7, #8]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	2b02      	cmp	r3, #2
 800ba46:	d00e      	beq.n	800ba66 <HAL_OSPI_Command+0x5a>
                                                   || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 800ba48:	68bb      	ldr	r3, [r7, #8]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	2b03      	cmp	r3, #3
 800ba4e:	d00a      	beq.n	800ba66 <HAL_OSPI_Command+0x5a>
 800ba50:	697b      	ldr	r3, [r7, #20]
 800ba52:	2b24      	cmp	r3, #36	@ 0x24
 800ba54:	d15b      	bne.n	800bb0e <HAL_OSPI_Command+0x102>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 800ba56:	68bb      	ldr	r3, [r7, #8]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	2b01      	cmp	r3, #1
 800ba5c:	d003      	beq.n	800ba66 <HAL_OSPI_Command+0x5a>
                                                   (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))))
 800ba5e:	68bb      	ldr	r3, [r7, #8]
 800ba60:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 800ba62:	2b03      	cmp	r3, #3
 800ba64:	d153      	bne.n	800bb0e <HAL_OSPI_Command+0x102>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	9300      	str	r3, [sp, #0]
 800ba6a:	69bb      	ldr	r3, [r7, #24]
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	2120      	movs	r1, #32
 800ba70:	68f8      	ldr	r0, [r7, #12]
 800ba72:	f000 fe69 	bl	800c748 <OSPI_WaitFlagStateUntilTimeout>
 800ba76:	4603      	mov	r3, r0
 800ba78:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 800ba7a:	7ffb      	ldrb	r3, [r7, #31]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d14c      	bne.n	800bb1a <HAL_OSPI_Command+0x10e>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	2200      	movs	r2, #0
 800ba84:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 800ba86:	68b9      	ldr	r1, [r7, #8]
 800ba88:	68f8      	ldr	r0, [r7, #12]
 800ba8a:	f000 fe95 	bl	800c7b8 <OSPI_ConfigCmd>
 800ba8e:	4603      	mov	r3, r0
 800ba90:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 800ba92:	7ffb      	ldrb	r3, [r7, #31]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d140      	bne.n	800bb1a <HAL_OSPI_Command+0x10e>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 800ba98:	68bb      	ldr	r3, [r7, #8]
 800ba9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d10e      	bne.n	800babe <HAL_OSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	9300      	str	r3, [sp, #0]
 800baa4:	69bb      	ldr	r3, [r7, #24]
 800baa6:	2201      	movs	r2, #1
 800baa8:	2102      	movs	r1, #2
 800baaa:	68f8      	ldr	r0, [r7, #12]
 800baac:	f000 fe4c 	bl	800c748 <OSPI_WaitFlagStateUntilTimeout>
 800bab0:	4603      	mov	r3, r0
 800bab2:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	2202      	movs	r2, #2
 800baba:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 800babc:	e02d      	b.n	800bb1a <HAL_OSPI_Command+0x10e>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d103      	bne.n	800bace <HAL_OSPI_Command+0xc2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	2204      	movs	r2, #4
 800baca:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 800bacc:	e025      	b.n	800bb1a <HAL_OSPI_Command+0x10e>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 800bace:	68bb      	ldr	r3, [r7, #8]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	2b01      	cmp	r3, #1
 800bad4:	d10b      	bne.n	800baee <HAL_OSPI_Command+0xe2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bada:	2b24      	cmp	r3, #36	@ 0x24
 800badc:	d103      	bne.n	800bae6 <HAL_OSPI_Command+0xda>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	2204      	movs	r2, #4
 800bae2:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 800bae4:	e019      	b.n	800bb1a <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	2214      	movs	r2, #20
 800baea:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 800baec:	e015      	b.n	800bb1a <HAL_OSPI_Command+0x10e>
            }
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800baee:	68bb      	ldr	r3, [r7, #8]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	2b02      	cmp	r3, #2
 800baf4:	d111      	bne.n	800bb1a <HAL_OSPI_Command+0x10e>
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bafa:	2b14      	cmp	r3, #20
 800bafc:	d103      	bne.n	800bb06 <HAL_OSPI_Command+0xfa>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	2204      	movs	r2, #4
 800bb02:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 800bb04:	e009      	b.n	800bb1a <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	2224      	movs	r2, #36	@ 0x24
 800bb0a:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 800bb0c:	e005      	b.n	800bb1a <HAL_OSPI_Command+0x10e>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 800bb0e:	2301      	movs	r3, #1
 800bb10:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	2210      	movs	r2, #16
 800bb16:	655a      	str	r2, [r3, #84]	@ 0x54
 800bb18:	e000      	b.n	800bb1c <HAL_OSPI_Command+0x110>
    if (status == HAL_OK)
 800bb1a:	bf00      	nop
  }

  /* Return function status */
  return status;
 800bb1c:	7ffb      	ldrb	r3, [r7, #31]
}
 800bb1e:	4618      	mov	r0, r3
 800bb20:	3720      	adds	r7, #32
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bd80      	pop	{r7, pc}

0800bb26 <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 800bb26:	b580      	push	{r7, lr}
 800bb28:	b08a      	sub	sp, #40	@ 0x28
 800bb2a:	af02      	add	r7, sp, #8
 800bb2c:	60f8      	str	r0, [r7, #12]
 800bb2e:	60b9      	str	r1, [r7, #8]
 800bb30:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800bb32:	f7fb f839 	bl	8006ba8 <HAL_GetTick>
 800bb36:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	3350      	adds	r3, #80	@ 0x50
 800bb3e:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 800bb40:	68bb      	ldr	r3, [r7, #8]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d105      	bne.n	800bb52 <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 800bb46:	2301      	movs	r3, #1
 800bb48:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	2208      	movs	r2, #8
 800bb4e:	655a      	str	r2, [r3, #84]	@ 0x54
 800bb50:	e057      	b.n	800bc02 <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb56:	2b04      	cmp	r3, #4
 800bb58:	d14e      	bne.n	800bbf8 <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb60:	1c5a      	adds	r2, r3, #1
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	649a      	str	r2, [r3, #72]	@ 0x48
      hospi->XferSize  = hospi->XferCount;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	645a      	str	r2, [r3, #68]	@ 0x44
      hospi->pBuffPtr  = pData;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	68ba      	ldr	r2, [r7, #8]
 800bb72:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	681a      	ldr	r2, [r3, #0]
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800bb82:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	9300      	str	r3, [sp, #0]
 800bb88:	69bb      	ldr	r3, [r7, #24]
 800bb8a:	2201      	movs	r2, #1
 800bb8c:	2104      	movs	r1, #4
 800bb8e:	68f8      	ldr	r0, [r7, #12]
 800bb90:	f000 fdda 	bl	800c748 <OSPI_WaitFlagStateUntilTimeout>
 800bb94:	4603      	mov	r3, r0
 800bb96:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800bb98:	7ffb      	ldrb	r3, [r7, #31]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d113      	bne.n	800bbc6 <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bba2:	781a      	ldrb	r2, [r3, #0]
 800bba4:	697b      	ldr	r3, [r7, #20]
 800bba6:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bbac:	1c5a      	adds	r2, r3, #1
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	641a      	str	r2, [r3, #64]	@ 0x40
        hospi->XferCount--;
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bbb6:	1e5a      	subs	r2, r3, #1
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	649a      	str	r2, [r3, #72]	@ 0x48
      }
      while (hospi->XferCount > 0U);
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d1df      	bne.n	800bb84 <HAL_OSPI_Transmit+0x5e>
 800bbc4:	e000      	b.n	800bbc8 <HAL_OSPI_Transmit+0xa2>
          break;
 800bbc6:	bf00      	nop

      if (status == HAL_OK)
 800bbc8:	7ffb      	ldrb	r3, [r7, #31]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d119      	bne.n	800bc02 <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	9300      	str	r3, [sp, #0]
 800bbd2:	69bb      	ldr	r3, [r7, #24]
 800bbd4:	2201      	movs	r2, #1
 800bbd6:	2102      	movs	r1, #2
 800bbd8:	68f8      	ldr	r0, [r7, #12]
 800bbda:	f000 fdb5 	bl	800c748 <OSPI_WaitFlagStateUntilTimeout>
 800bbde:	4603      	mov	r3, r0
 800bbe0:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800bbe2:	7ffb      	ldrb	r3, [r7, #31]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d10c      	bne.n	800bc02 <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	2202      	movs	r2, #2
 800bbee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	2202      	movs	r2, #2
 800bbf4:	651a      	str	r2, [r3, #80]	@ 0x50
 800bbf6:	e004      	b.n	800bc02 <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 800bbf8:	2301      	movs	r3, #1
 800bbfa:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	2210      	movs	r2, #16
 800bc00:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
 800bc02:	7ffb      	ldrb	r3, [r7, #31]
}
 800bc04:	4618      	mov	r0, r3
 800bc06:	3720      	adds	r7, #32
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	bd80      	pop	{r7, pc}

0800bc0c <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b08c      	sub	sp, #48	@ 0x30
 800bc10:	af02      	add	r7, sp, #8
 800bc12:	60f8      	str	r0, [r7, #12]
 800bc14:	60b9      	str	r1, [r7, #8]
 800bc16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800bc18:	f7fa ffc6 	bl	8006ba8 <HAL_GetTick>
 800bc1c:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	3350      	adds	r3, #80	@ 0x50
 800bc24:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bc2c:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800bc36:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 800bc38:	68bb      	ldr	r3, [r7, #8]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d106      	bne.n	800bc4c <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 800bc3e:	2301      	movs	r3, #1
 800bc40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	2208      	movs	r2, #8
 800bc48:	655a      	str	r2, [r3, #84]	@ 0x54
 800bc4a:	e07c      	b.n	800bd46 <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc50:	2b04      	cmp	r3, #4
 800bc52:	d172      	bne.n	800bd3a <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc5a:	1c5a      	adds	r2, r3, #1
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	649a      	str	r2, [r3, #72]	@ 0x48
      hospi->XferSize  = hospi->XferCount;
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	645a      	str	r2, [r3, #68]	@ 0x44
      hospi->pBuffPtr  = pData;
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	68ba      	ldr	r2, [r7, #8]
 800bc6c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800bc80:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	68db      	ldr	r3, [r3, #12]
 800bc86:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bc8a:	d104      	bne.n	800bc96 <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	69ba      	ldr	r2, [r7, #24]
 800bc92:	649a      	str	r2, [r3, #72]	@ 0x48
 800bc94:	e011      	b.n	800bcba <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800bc9e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d004      	beq.n	800bcb0 <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	69ba      	ldr	r2, [r7, #24]
 800bcac:	649a      	str	r2, [r3, #72]	@ 0x48
 800bcae:	e004      	b.n	800bcba <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	697a      	ldr	r2, [r7, #20]
 800bcb6:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	9300      	str	r3, [sp, #0]
 800bcbe:	6a3b      	ldr	r3, [r7, #32]
 800bcc0:	2201      	movs	r2, #1
 800bcc2:	2106      	movs	r1, #6
 800bcc4:	68f8      	ldr	r0, [r7, #12]
 800bcc6:	f000 fd3f 	bl	800c748 <OSPI_WaitFlagStateUntilTimeout>
 800bcca:	4603      	mov	r3, r0
 800bccc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status != HAL_OK)
 800bcd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d114      	bne.n	800bd02 <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bcdc:	69fa      	ldr	r2, [r7, #28]
 800bcde:	7812      	ldrb	r2, [r2, #0]
 800bce0:	b2d2      	uxtb	r2, r2
 800bce2:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bce8:	1c5a      	adds	r2, r3, #1
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	641a      	str	r2, [r3, #64]	@ 0x40
        hospi->XferCount--;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bcf2:	1e5a      	subs	r2, r3, #1
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	649a      	str	r2, [r3, #72]	@ 0x48
      }
      while (hospi->XferCount > 0U);
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d1dc      	bne.n	800bcba <HAL_OSPI_Receive+0xae>
 800bd00:	e000      	b.n	800bd04 <HAL_OSPI_Receive+0xf8>
          break;
 800bd02:	bf00      	nop

      if (status == HAL_OK)
 800bd04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d11c      	bne.n	800bd46 <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	9300      	str	r3, [sp, #0]
 800bd10:	6a3b      	ldr	r3, [r7, #32]
 800bd12:	2201      	movs	r2, #1
 800bd14:	2102      	movs	r1, #2
 800bd16:	68f8      	ldr	r0, [r7, #12]
 800bd18:	f000 fd16 	bl	800c748 <OSPI_WaitFlagStateUntilTimeout>
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status == HAL_OK)
 800bd22:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d10d      	bne.n	800bd46 <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	2202      	movs	r2, #2
 800bd30:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	2202      	movs	r2, #2
 800bd36:	651a      	str	r2, [r3, #80]	@ 0x50
 800bd38:	e005      	b.n	800bd46 <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 800bd3a:	2301      	movs	r3, #1
 800bd3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	2210      	movs	r2, #16
 800bd44:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
 800bd46:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	3728      	adds	r7, #40	@ 0x28
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bd80      	pop	{r7, pc}

0800bd52 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 800bd52:	b480      	push	{r7}
 800bd54:	b083      	sub	sp, #12
 800bd56:	af00      	add	r7, sp, #0
 800bd58:	6078      	str	r0, [r7, #4]
 800bd5a:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	683a      	ldr	r2, [r7, #0]
 800bd60:	659a      	str	r2, [r3, #88]	@ 0x58
  return HAL_OK;
 800bd62:	2300      	movs	r3, #0
}
 800bd64:	4618      	mov	r0, r3
 800bd66:	370c      	adds	r7, #12
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6e:	4770      	bx	lr

0800bd70 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b094      	sub	sp, #80	@ 0x50
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	60f8      	str	r0, [r7, #12]
 800bd78:	60b9      	str	r1, [r7, #8]
 800bd7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 800bd82:	2300      	movs	r3, #0
 800bd84:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	4a9d      	ldr	r2, [pc, #628]	@ (800c004 <HAL_OSPIM_Config+0x294>)
 800bd8e:	4293      	cmp	r3, r2
 800bd90:	d105      	bne.n	800bd9e <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 800bd92:	2300      	movs	r3, #0
 800bd94:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 1U;
 800bd96:	2301      	movs	r3, #1
 800bd98:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 800bd9c:	e004      	b.n	800bda8 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 800bd9e:	2301      	movs	r3, #1
 800bda0:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 0U;
 800bda2:	2300      	movs	r3, #0
 800bda4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800bda8:	2300      	movs	r3, #0
 800bdaa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800bdae:	e01d      	b.n	800bdec <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 800bdb0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800bdb4:	3301      	adds	r3, #1
 800bdb6:	b2d8      	uxtb	r0, r3
 800bdb8:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 800bdbc:	f107 0114 	add.w	r1, r7, #20
 800bdc0:	4613      	mov	r3, r2
 800bdc2:	005b      	lsls	r3, r3, #1
 800bdc4:	4413      	add	r3, r2
 800bdc6:	00db      	lsls	r3, r3, #3
 800bdc8:	440b      	add	r3, r1
 800bdca:	4619      	mov	r1, r3
 800bdcc:	f000 fe6e 	bl	800caac <OSPIM_GetConfig>
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d005      	beq.n	800bde2 <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 800bdd6:	2301      	movs	r3, #1
 800bdd8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	2208      	movs	r2, #8
 800bde0:	655a      	str	r2, [r3, #84]	@ 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800bde2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800bde6:	3301      	adds	r3, #1
 800bde8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800bdec:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800bdf0:	2b01      	cmp	r3, #1
 800bdf2:	d9dd      	bls.n	800bdb0 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 800bdf4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	f040 8499 	bne.w	800c730 <HAL_OSPIM_Config+0x9c0>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 800bdfe:	4b81      	ldr	r3, [pc, #516]	@ (800c004 <HAL_OSPIM_Config+0x294>)
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	f003 0301 	and.w	r3, r3, #1
 800be06:	2b00      	cmp	r3, #0
 800be08:	d00b      	beq.n	800be22 <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800be0a:	4b7e      	ldr	r3, [pc, #504]	@ (800c004 <HAL_OSPIM_Config+0x294>)
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	4a7d      	ldr	r2, [pc, #500]	@ (800c004 <HAL_OSPIM_Config+0x294>)
 800be10:	f023 0301 	bic.w	r3, r3, #1
 800be14:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 800be16:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800be1a:	f043 0301 	orr.w	r3, r3, #1
 800be1e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 800be22:	4b79      	ldr	r3, [pc, #484]	@ (800c008 <HAL_OSPIM_Config+0x298>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	f003 0301 	and.w	r3, r3, #1
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d00b      	beq.n	800be46 <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800be2e:	4b76      	ldr	r3, [pc, #472]	@ (800c008 <HAL_OSPIM_Config+0x298>)
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	4a75      	ldr	r2, [pc, #468]	@ (800c008 <HAL_OSPIM_Config+0x298>)
 800be34:	f023 0301 	bic.w	r3, r3, #1
 800be38:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 800be3a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800be3e:	f043 0302 	orr.w	r3, r3, #2
 800be42:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 800be46:	4971      	ldr	r1, [pc, #452]	@ (800c00c <HAL_OSPIM_Config+0x29c>)
 800be48:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800be4a:	4613      	mov	r3, r2
 800be4c:	005b      	lsls	r3, r3, #1
 800be4e:	4413      	add	r3, r2
 800be50:	00db      	lsls	r3, r3, #3
 800be52:	3350      	adds	r3, #80	@ 0x50
 800be54:	443b      	add	r3, r7
 800be56:	3b34      	subs	r3, #52	@ 0x34
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	3b01      	subs	r3, #1
 800be5c:	009b      	lsls	r3, r3, #2
 800be5e:	440b      	add	r3, r1
 800be60:	6859      	ldr	r1, [r3, #4]
 800be62:	486a      	ldr	r0, [pc, #424]	@ (800c00c <HAL_OSPIM_Config+0x29c>)
 800be64:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800be66:	4613      	mov	r3, r2
 800be68:	005b      	lsls	r3, r3, #1
 800be6a:	4413      	add	r3, r2
 800be6c:	00db      	lsls	r3, r3, #3
 800be6e:	3350      	adds	r3, #80	@ 0x50
 800be70:	443b      	add	r3, r7
 800be72:	3b34      	subs	r3, #52	@ 0x34
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	3b01      	subs	r3, #1
 800be78:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 800be7c:	009b      	lsls	r3, r3, #2
 800be7e:	4403      	add	r3, r0
 800be80:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 800be82:	4b62      	ldr	r3, [pc, #392]	@ (800c00c <HAL_OSPIM_Config+0x29c>)
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	f003 0301 	and.w	r3, r3, #1
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	f000 80c0 	beq.w	800c010 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 800be90:	4b5e      	ldr	r3, [pc, #376]	@ (800c00c <HAL_OSPIM_Config+0x29c>)
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	4a5d      	ldr	r2, [pc, #372]	@ (800c00c <HAL_OSPIM_Config+0x29c>)
 800be96:	f023 0301 	bic.w	r3, r3, #1
 800be9a:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 800be9c:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800bea0:	2b01      	cmp	r3, #1
 800bea2:	f040 8162 	bne.w	800c16a <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 800bea6:	4959      	ldr	r1, [pc, #356]	@ (800c00c <HAL_OSPIM_Config+0x29c>)
 800bea8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800beac:	4613      	mov	r3, r2
 800beae:	005b      	lsls	r3, r3, #1
 800beb0:	4413      	add	r3, r2
 800beb2:	00db      	lsls	r3, r3, #3
 800beb4:	3350      	adds	r3, #80	@ 0x50
 800beb6:	443b      	add	r3, r7
 800beb8:	3b3c      	subs	r3, #60	@ 0x3c
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	3b01      	subs	r3, #1
 800bebe:	009b      	lsls	r3, r3, #2
 800bec0:	440b      	add	r3, r1
 800bec2:	6859      	ldr	r1, [r3, #4]
 800bec4:	4851      	ldr	r0, [pc, #324]	@ (800c00c <HAL_OSPIM_Config+0x29c>)
 800bec6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800beca:	4613      	mov	r3, r2
 800becc:	005b      	lsls	r3, r3, #1
 800bece:	4413      	add	r3, r2
 800bed0:	00db      	lsls	r3, r3, #3
 800bed2:	3350      	adds	r3, #80	@ 0x50
 800bed4:	443b      	add	r3, r7
 800bed6:	3b3c      	subs	r3, #60	@ 0x3c
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	3b01      	subs	r3, #1
 800bedc:	f041 0202 	orr.w	r2, r1, #2
 800bee0:	009b      	lsls	r3, r3, #2
 800bee2:	4403      	add	r3, r0
 800bee4:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800bee6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800beea:	4613      	mov	r3, r2
 800beec:	005b      	lsls	r3, r3, #1
 800beee:	4413      	add	r3, r2
 800bef0:	00db      	lsls	r3, r3, #3
 800bef2:	3350      	adds	r3, #80	@ 0x50
 800bef4:	443b      	add	r3, r7
 800bef6:	3b38      	subs	r3, #56	@ 0x38
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d01f      	beq.n	800bf3e <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 800befe:	4943      	ldr	r1, [pc, #268]	@ (800c00c <HAL_OSPIM_Config+0x29c>)
 800bf00:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800bf04:	4613      	mov	r3, r2
 800bf06:	005b      	lsls	r3, r3, #1
 800bf08:	4413      	add	r3, r2
 800bf0a:	00db      	lsls	r3, r3, #3
 800bf0c:	3350      	adds	r3, #80	@ 0x50
 800bf0e:	443b      	add	r3, r7
 800bf10:	3b38      	subs	r3, #56	@ 0x38
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	3b01      	subs	r3, #1
 800bf16:	009b      	lsls	r3, r3, #2
 800bf18:	440b      	add	r3, r1
 800bf1a:	6859      	ldr	r1, [r3, #4]
 800bf1c:	483b      	ldr	r0, [pc, #236]	@ (800c00c <HAL_OSPIM_Config+0x29c>)
 800bf1e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800bf22:	4613      	mov	r3, r2
 800bf24:	005b      	lsls	r3, r3, #1
 800bf26:	4413      	add	r3, r2
 800bf28:	00db      	lsls	r3, r3, #3
 800bf2a:	3350      	adds	r3, #80	@ 0x50
 800bf2c:	443b      	add	r3, r7
 800bf2e:	3b38      	subs	r3, #56	@ 0x38
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	3b01      	subs	r3, #1
 800bf34:	f041 0220 	orr.w	r2, r1, #32
 800bf38:	009b      	lsls	r3, r3, #2
 800bf3a:	4403      	add	r3, r0
 800bf3c:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800bf3e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800bf42:	4613      	mov	r3, r2
 800bf44:	005b      	lsls	r3, r3, #1
 800bf46:	4413      	add	r3, r2
 800bf48:	00db      	lsls	r3, r3, #3
 800bf4a:	3350      	adds	r3, #80	@ 0x50
 800bf4c:	443b      	add	r3, r7
 800bf4e:	3b30      	subs	r3, #48	@ 0x30
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d023      	beq.n	800bf9e <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 800bf56:	492d      	ldr	r1, [pc, #180]	@ (800c00c <HAL_OSPIM_Config+0x29c>)
 800bf58:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800bf5c:	4613      	mov	r3, r2
 800bf5e:	005b      	lsls	r3, r3, #1
 800bf60:	4413      	add	r3, r2
 800bf62:	00db      	lsls	r3, r3, #3
 800bf64:	3350      	adds	r3, #80	@ 0x50
 800bf66:	443b      	add	r3, r7
 800bf68:	3b30      	subs	r3, #48	@ 0x30
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	3b01      	subs	r3, #1
 800bf6e:	f003 0301 	and.w	r3, r3, #1
 800bf72:	009b      	lsls	r3, r3, #2
 800bf74:	440b      	add	r3, r1
 800bf76:	6859      	ldr	r1, [r3, #4]
 800bf78:	4824      	ldr	r0, [pc, #144]	@ (800c00c <HAL_OSPIM_Config+0x29c>)
 800bf7a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800bf7e:	4613      	mov	r3, r2
 800bf80:	005b      	lsls	r3, r3, #1
 800bf82:	4413      	add	r3, r2
 800bf84:	00db      	lsls	r3, r3, #3
 800bf86:	3350      	adds	r3, #80	@ 0x50
 800bf88:	443b      	add	r3, r7
 800bf8a:	3b30      	subs	r3, #48	@ 0x30
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	3b01      	subs	r3, #1
 800bf90:	f003 0301 	and.w	r3, r3, #1
 800bf94:	f441 2280 	orr.w	r2, r1, #262144	@ 0x40000
 800bf98:	009b      	lsls	r3, r3, #2
 800bf9a:	4403      	add	r3, r0
 800bf9c:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800bf9e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800bfa2:	4613      	mov	r3, r2
 800bfa4:	005b      	lsls	r3, r3, #1
 800bfa6:	4413      	add	r3, r2
 800bfa8:	00db      	lsls	r3, r3, #3
 800bfaa:	3350      	adds	r3, #80	@ 0x50
 800bfac:	443b      	add	r3, r7
 800bfae:	3b2c      	subs	r3, #44	@ 0x2c
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	f000 80d9 	beq.w	800c16a <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 800bfb8:	4914      	ldr	r1, [pc, #80]	@ (800c00c <HAL_OSPIM_Config+0x29c>)
 800bfba:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800bfbe:	4613      	mov	r3, r2
 800bfc0:	005b      	lsls	r3, r3, #1
 800bfc2:	4413      	add	r3, r2
 800bfc4:	00db      	lsls	r3, r3, #3
 800bfc6:	3350      	adds	r3, #80	@ 0x50
 800bfc8:	443b      	add	r3, r7
 800bfca:	3b2c      	subs	r3, #44	@ 0x2c
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	3b01      	subs	r3, #1
 800bfd0:	f003 0301 	and.w	r3, r3, #1
 800bfd4:	009b      	lsls	r3, r3, #2
 800bfd6:	440b      	add	r3, r1
 800bfd8:	6859      	ldr	r1, [r3, #4]
 800bfda:	480c      	ldr	r0, [pc, #48]	@ (800c00c <HAL_OSPIM_Config+0x29c>)
 800bfdc:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800bfe0:	4613      	mov	r3, r2
 800bfe2:	005b      	lsls	r3, r3, #1
 800bfe4:	4413      	add	r3, r2
 800bfe6:	00db      	lsls	r3, r3, #3
 800bfe8:	3350      	adds	r3, #80	@ 0x50
 800bfea:	443b      	add	r3, r7
 800bfec:	3b2c      	subs	r3, #44	@ 0x2c
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	3b01      	subs	r3, #1
 800bff2:	f003 0301 	and.w	r3, r3, #1
 800bff6:	f041 6280 	orr.w	r2, r1, #67108864	@ 0x4000000
 800bffa:	009b      	lsls	r3, r3, #2
 800bffc:	4403      	add	r3, r0
 800bffe:	605a      	str	r2, [r3, #4]
 800c000:	e0b3      	b.n	800c16a <HAL_OSPIM_Config+0x3fa>
 800c002:	bf00      	nop
 800c004:	52005000 	.word	0x52005000
 800c008:	5200a000 	.word	0x5200a000
 800c00c:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 800c010:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c012:	4613      	mov	r3, r2
 800c014:	005b      	lsls	r3, r3, #1
 800c016:	4413      	add	r3, r2
 800c018:	00db      	lsls	r3, r3, #3
 800c01a:	3350      	adds	r3, #80	@ 0x50
 800c01c:	443b      	add	r3, r7
 800c01e:	3b3c      	subs	r3, #60	@ 0x3c
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	2b00      	cmp	r3, #0
 800c024:	f000 80a1 	beq.w	800c16a <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 800c028:	4995      	ldr	r1, [pc, #596]	@ (800c280 <HAL_OSPIM_Config+0x510>)
 800c02a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c02c:	4613      	mov	r3, r2
 800c02e:	005b      	lsls	r3, r3, #1
 800c030:	4413      	add	r3, r2
 800c032:	00db      	lsls	r3, r3, #3
 800c034:	3350      	adds	r3, #80	@ 0x50
 800c036:	443b      	add	r3, r7
 800c038:	3b3c      	subs	r3, #60	@ 0x3c
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	3b01      	subs	r3, #1
 800c03e:	009b      	lsls	r3, r3, #2
 800c040:	440b      	add	r3, r1
 800c042:	6859      	ldr	r1, [r3, #4]
 800c044:	488e      	ldr	r0, [pc, #568]	@ (800c280 <HAL_OSPIM_Config+0x510>)
 800c046:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c048:	4613      	mov	r3, r2
 800c04a:	005b      	lsls	r3, r3, #1
 800c04c:	4413      	add	r3, r2
 800c04e:	00db      	lsls	r3, r3, #3
 800c050:	3350      	adds	r3, #80	@ 0x50
 800c052:	443b      	add	r3, r7
 800c054:	3b3c      	subs	r3, #60	@ 0x3c
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	3b01      	subs	r3, #1
 800c05a:	f021 0201 	bic.w	r2, r1, #1
 800c05e:	009b      	lsls	r3, r3, #2
 800c060:	4403      	add	r3, r0
 800c062:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 800c064:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c066:	4613      	mov	r3, r2
 800c068:	005b      	lsls	r3, r3, #1
 800c06a:	4413      	add	r3, r2
 800c06c:	00db      	lsls	r3, r3, #3
 800c06e:	3350      	adds	r3, #80	@ 0x50
 800c070:	443b      	add	r3, r7
 800c072:	3b38      	subs	r3, #56	@ 0x38
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d01d      	beq.n	800c0b6 <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 800c07a:	4981      	ldr	r1, [pc, #516]	@ (800c280 <HAL_OSPIM_Config+0x510>)
 800c07c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c07e:	4613      	mov	r3, r2
 800c080:	005b      	lsls	r3, r3, #1
 800c082:	4413      	add	r3, r2
 800c084:	00db      	lsls	r3, r3, #3
 800c086:	3350      	adds	r3, #80	@ 0x50
 800c088:	443b      	add	r3, r7
 800c08a:	3b38      	subs	r3, #56	@ 0x38
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	3b01      	subs	r3, #1
 800c090:	009b      	lsls	r3, r3, #2
 800c092:	440b      	add	r3, r1
 800c094:	6859      	ldr	r1, [r3, #4]
 800c096:	487a      	ldr	r0, [pc, #488]	@ (800c280 <HAL_OSPIM_Config+0x510>)
 800c098:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c09a:	4613      	mov	r3, r2
 800c09c:	005b      	lsls	r3, r3, #1
 800c09e:	4413      	add	r3, r2
 800c0a0:	00db      	lsls	r3, r3, #3
 800c0a2:	3350      	adds	r3, #80	@ 0x50
 800c0a4:	443b      	add	r3, r7
 800c0a6:	3b38      	subs	r3, #56	@ 0x38
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	3b01      	subs	r3, #1
 800c0ac:	f021 0210 	bic.w	r2, r1, #16
 800c0b0:	009b      	lsls	r3, r3, #2
 800c0b2:	4403      	add	r3, r0
 800c0b4:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800c0b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c0b8:	4613      	mov	r3, r2
 800c0ba:	005b      	lsls	r3, r3, #1
 800c0bc:	4413      	add	r3, r2
 800c0be:	00db      	lsls	r3, r3, #3
 800c0c0:	3350      	adds	r3, #80	@ 0x50
 800c0c2:	443b      	add	r3, r7
 800c0c4:	3b30      	subs	r3, #48	@ 0x30
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d021      	beq.n	800c110 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 800c0cc:	496c      	ldr	r1, [pc, #432]	@ (800c280 <HAL_OSPIM_Config+0x510>)
 800c0ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c0d0:	4613      	mov	r3, r2
 800c0d2:	005b      	lsls	r3, r3, #1
 800c0d4:	4413      	add	r3, r2
 800c0d6:	00db      	lsls	r3, r3, #3
 800c0d8:	3350      	adds	r3, #80	@ 0x50
 800c0da:	443b      	add	r3, r7
 800c0dc:	3b30      	subs	r3, #48	@ 0x30
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	3b01      	subs	r3, #1
 800c0e2:	f003 0301 	and.w	r3, r3, #1
 800c0e6:	009b      	lsls	r3, r3, #2
 800c0e8:	440b      	add	r3, r1
 800c0ea:	6859      	ldr	r1, [r3, #4]
 800c0ec:	4864      	ldr	r0, [pc, #400]	@ (800c280 <HAL_OSPIM_Config+0x510>)
 800c0ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c0f0:	4613      	mov	r3, r2
 800c0f2:	005b      	lsls	r3, r3, #1
 800c0f4:	4413      	add	r3, r2
 800c0f6:	00db      	lsls	r3, r3, #3
 800c0f8:	3350      	adds	r3, #80	@ 0x50
 800c0fa:	443b      	add	r3, r7
 800c0fc:	3b30      	subs	r3, #48	@ 0x30
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	3b01      	subs	r3, #1
 800c102:	f003 0301 	and.w	r3, r3, #1
 800c106:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 800c10a:	009b      	lsls	r3, r3, #2
 800c10c:	4403      	add	r3, r0
 800c10e:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800c110:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c112:	4613      	mov	r3, r2
 800c114:	005b      	lsls	r3, r3, #1
 800c116:	4413      	add	r3, r2
 800c118:	00db      	lsls	r3, r3, #3
 800c11a:	3350      	adds	r3, #80	@ 0x50
 800c11c:	443b      	add	r3, r7
 800c11e:	3b2c      	subs	r3, #44	@ 0x2c
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d021      	beq.n	800c16a <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 800c126:	4956      	ldr	r1, [pc, #344]	@ (800c280 <HAL_OSPIM_Config+0x510>)
 800c128:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c12a:	4613      	mov	r3, r2
 800c12c:	005b      	lsls	r3, r3, #1
 800c12e:	4413      	add	r3, r2
 800c130:	00db      	lsls	r3, r3, #3
 800c132:	3350      	adds	r3, #80	@ 0x50
 800c134:	443b      	add	r3, r7
 800c136:	3b2c      	subs	r3, #44	@ 0x2c
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	3b01      	subs	r3, #1
 800c13c:	f003 0301 	and.w	r3, r3, #1
 800c140:	009b      	lsls	r3, r3, #2
 800c142:	440b      	add	r3, r1
 800c144:	6859      	ldr	r1, [r3, #4]
 800c146:	484e      	ldr	r0, [pc, #312]	@ (800c280 <HAL_OSPIM_Config+0x510>)
 800c148:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c14a:	4613      	mov	r3, r2
 800c14c:	005b      	lsls	r3, r3, #1
 800c14e:	4413      	add	r3, r2
 800c150:	00db      	lsls	r3, r3, #3
 800c152:	3350      	adds	r3, #80	@ 0x50
 800c154:	443b      	add	r3, r7
 800c156:	3b2c      	subs	r3, #44	@ 0x2c
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	3b01      	subs	r3, #1
 800c15c:	f003 0301 	and.w	r3, r3, #1
 800c160:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 800c164:	009b      	lsls	r3, r3, #2
 800c166:	4403      	add	r3, r0
 800c168:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 800c16a:	68bb      	ldr	r3, [r7, #8]
 800c16c:	6819      	ldr	r1, [r3, #0]
 800c16e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800c172:	4613      	mov	r3, r2
 800c174:	005b      	lsls	r3, r3, #1
 800c176:	4413      	add	r3, r2
 800c178:	00db      	lsls	r3, r3, #3
 800c17a:	3350      	adds	r3, #80	@ 0x50
 800c17c:	443b      	add	r3, r7
 800c17e:	3b3c      	subs	r3, #60	@ 0x3c
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	4299      	cmp	r1, r3
 800c184:	d03c      	beq.n	800c200 <HAL_OSPIM_Config+0x490>
 800c186:	68bb      	ldr	r3, [r7, #8]
 800c188:	6899      	ldr	r1, [r3, #8]
 800c18a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800c18e:	4613      	mov	r3, r2
 800c190:	005b      	lsls	r3, r3, #1
 800c192:	4413      	add	r3, r2
 800c194:	00db      	lsls	r3, r3, #3
 800c196:	3350      	adds	r3, #80	@ 0x50
 800c198:	443b      	add	r3, r7
 800c19a:	3b34      	subs	r3, #52	@ 0x34
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	4299      	cmp	r1, r3
 800c1a0:	d02e      	beq.n	800c200 <HAL_OSPIM_Config+0x490>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 800c1a2:	68bb      	ldr	r3, [r7, #8]
 800c1a4:	6859      	ldr	r1, [r3, #4]
 800c1a6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800c1aa:	4613      	mov	r3, r2
 800c1ac:	005b      	lsls	r3, r3, #1
 800c1ae:	4413      	add	r3, r2
 800c1b0:	00db      	lsls	r3, r3, #3
 800c1b2:	3350      	adds	r3, #80	@ 0x50
 800c1b4:	443b      	add	r3, r7
 800c1b6:	3b38      	subs	r3, #56	@ 0x38
 800c1b8:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 800c1ba:	4299      	cmp	r1, r3
 800c1bc:	d103      	bne.n	800c1c6 <HAL_OSPIM_Config+0x456>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 800c1be:	68bb      	ldr	r3, [r7, #8]
 800c1c0:	685b      	ldr	r3, [r3, #4]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d11c      	bne.n	800c200 <HAL_OSPIM_Config+0x490>
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800c1c6:	68bb      	ldr	r3, [r7, #8]
 800c1c8:	68d9      	ldr	r1, [r3, #12]
 800c1ca:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800c1ce:	4613      	mov	r3, r2
 800c1d0:	005b      	lsls	r3, r3, #1
 800c1d2:	4413      	add	r3, r2
 800c1d4:	00db      	lsls	r3, r3, #3
 800c1d6:	3350      	adds	r3, #80	@ 0x50
 800c1d8:	443b      	add	r3, r7
 800c1da:	3b30      	subs	r3, #48	@ 0x30
 800c1dc:	681b      	ldr	r3, [r3, #0]
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 800c1de:	4299      	cmp	r1, r3
 800c1e0:	d00e      	beq.n	800c200 <HAL_OSPIM_Config+0x490>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800c1e2:	68bb      	ldr	r3, [r7, #8]
 800c1e4:	6919      	ldr	r1, [r3, #16]
 800c1e6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800c1ea:	4613      	mov	r3, r2
 800c1ec:	005b      	lsls	r3, r3, #1
 800c1ee:	4413      	add	r3, r2
 800c1f0:	00db      	lsls	r3, r3, #3
 800c1f2:	3350      	adds	r3, #80	@ 0x50
 800c1f4:	443b      	add	r3, r7
 800c1f6:	3b2c      	subs	r3, #44	@ 0x2c
 800c1f8:	681b      	ldr	r3, [r3, #0]
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800c1fa:	4299      	cmp	r1, r3
 800c1fc:	f040 810e 	bne.w	800c41c <HAL_OSPIM_Config+0x6ac>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 800c200:	68bb      	ldr	r3, [r7, #8]
 800c202:	6819      	ldr	r1, [r3, #0]
 800c204:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800c208:	4613      	mov	r3, r2
 800c20a:	005b      	lsls	r3, r3, #1
 800c20c:	4413      	add	r3, r2
 800c20e:	00db      	lsls	r3, r3, #3
 800c210:	3350      	adds	r3, #80	@ 0x50
 800c212:	443b      	add	r3, r7
 800c214:	3b3c      	subs	r3, #60	@ 0x3c
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	4299      	cmp	r1, r3
 800c21a:	d133      	bne.n	800c284 <HAL_OSPIM_Config+0x514>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 800c21c:	68bb      	ldr	r3, [r7, #8]
 800c21e:	6859      	ldr	r1, [r3, #4]
 800c220:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800c224:	4613      	mov	r3, r2
 800c226:	005b      	lsls	r3, r3, #1
 800c228:	4413      	add	r3, r2
 800c22a:	00db      	lsls	r3, r3, #3
 800c22c:	3350      	adds	r3, #80	@ 0x50
 800c22e:	443b      	add	r3, r7
 800c230:	3b38      	subs	r3, #56	@ 0x38
 800c232:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 800c234:	4299      	cmp	r1, r3
 800c236:	d125      	bne.n	800c284 <HAL_OSPIM_Config+0x514>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 800c238:	68bb      	ldr	r3, [r7, #8]
 800c23a:	68d9      	ldr	r1, [r3, #12]
 800c23c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800c240:	4613      	mov	r3, r2
 800c242:	005b      	lsls	r3, r3, #1
 800c244:	4413      	add	r3, r2
 800c246:	00db      	lsls	r3, r3, #3
 800c248:	3350      	adds	r3, #80	@ 0x50
 800c24a:	443b      	add	r3, r7
 800c24c:	3b30      	subs	r3, #48	@ 0x30
 800c24e:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 800c250:	4299      	cmp	r1, r3
 800c252:	d117      	bne.n	800c284 <HAL_OSPIM_Config+0x514>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800c254:	68bb      	ldr	r3, [r7, #8]
 800c256:	6919      	ldr	r1, [r3, #16]
 800c258:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800c25c:	4613      	mov	r3, r2
 800c25e:	005b      	lsls	r3, r3, #1
 800c260:	4413      	add	r3, r2
 800c262:	00db      	lsls	r3, r3, #3
 800c264:	3350      	adds	r3, #80	@ 0x50
 800c266:	443b      	add	r3, r7
 800c268:	3b2c      	subs	r3, #44	@ 0x2c
 800c26a:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 800c26c:	4299      	cmp	r1, r3
 800c26e:	d109      	bne.n	800c284 <HAL_OSPIM_Config+0x514>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 800c270:	4b03      	ldr	r3, [pc, #12]	@ (800c280 <HAL_OSPIM_Config+0x510>)
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	4a02      	ldr	r2, [pc, #8]	@ (800c280 <HAL_OSPIM_Config+0x510>)
 800c276:	f043 0301 	orr.w	r3, r3, #1
 800c27a:	6013      	str	r3, [r2, #0]
 800c27c:	e0ce      	b.n	800c41c <HAL_OSPIM_Config+0x6ac>
 800c27e:	bf00      	nop
 800c280:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 800c284:	49bb      	ldr	r1, [pc, #748]	@ (800c574 <HAL_OSPIM_Config+0x804>)
 800c286:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800c28a:	4613      	mov	r3, r2
 800c28c:	005b      	lsls	r3, r3, #1
 800c28e:	4413      	add	r3, r2
 800c290:	00db      	lsls	r3, r3, #3
 800c292:	3350      	adds	r3, #80	@ 0x50
 800c294:	443b      	add	r3, r7
 800c296:	3b3c      	subs	r3, #60	@ 0x3c
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	3b01      	subs	r3, #1
 800c29c:	009b      	lsls	r3, r3, #2
 800c29e:	440b      	add	r3, r1
 800c2a0:	6859      	ldr	r1, [r3, #4]
 800c2a2:	48b4      	ldr	r0, [pc, #720]	@ (800c574 <HAL_OSPIM_Config+0x804>)
 800c2a4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800c2a8:	4613      	mov	r3, r2
 800c2aa:	005b      	lsls	r3, r3, #1
 800c2ac:	4413      	add	r3, r2
 800c2ae:	00db      	lsls	r3, r3, #3
 800c2b0:	3350      	adds	r3, #80	@ 0x50
 800c2b2:	443b      	add	r3, r7
 800c2b4:	3b3c      	subs	r3, #60	@ 0x3c
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	3b01      	subs	r3, #1
 800c2ba:	f021 0201 	bic.w	r2, r1, #1
 800c2be:	009b      	lsls	r3, r3, #2
 800c2c0:	4403      	add	r3, r0
 800c2c2:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800c2c4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800c2c8:	4613      	mov	r3, r2
 800c2ca:	005b      	lsls	r3, r3, #1
 800c2cc:	4413      	add	r3, r2
 800c2ce:	00db      	lsls	r3, r3, #3
 800c2d0:	3350      	adds	r3, #80	@ 0x50
 800c2d2:	443b      	add	r3, r7
 800c2d4:	3b38      	subs	r3, #56	@ 0x38
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d01f      	beq.n	800c31c <HAL_OSPIM_Config+0x5ac>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 800c2dc:	49a5      	ldr	r1, [pc, #660]	@ (800c574 <HAL_OSPIM_Config+0x804>)
 800c2de:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800c2e2:	4613      	mov	r3, r2
 800c2e4:	005b      	lsls	r3, r3, #1
 800c2e6:	4413      	add	r3, r2
 800c2e8:	00db      	lsls	r3, r3, #3
 800c2ea:	3350      	adds	r3, #80	@ 0x50
 800c2ec:	443b      	add	r3, r7
 800c2ee:	3b38      	subs	r3, #56	@ 0x38
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	3b01      	subs	r3, #1
 800c2f4:	009b      	lsls	r3, r3, #2
 800c2f6:	440b      	add	r3, r1
 800c2f8:	6859      	ldr	r1, [r3, #4]
 800c2fa:	489e      	ldr	r0, [pc, #632]	@ (800c574 <HAL_OSPIM_Config+0x804>)
 800c2fc:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800c300:	4613      	mov	r3, r2
 800c302:	005b      	lsls	r3, r3, #1
 800c304:	4413      	add	r3, r2
 800c306:	00db      	lsls	r3, r3, #3
 800c308:	3350      	adds	r3, #80	@ 0x50
 800c30a:	443b      	add	r3, r7
 800c30c:	3b38      	subs	r3, #56	@ 0x38
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	3b01      	subs	r3, #1
 800c312:	f021 0210 	bic.w	r2, r1, #16
 800c316:	009b      	lsls	r3, r3, #2
 800c318:	4403      	add	r3, r0
 800c31a:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 800c31c:	4995      	ldr	r1, [pc, #596]	@ (800c574 <HAL_OSPIM_Config+0x804>)
 800c31e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800c322:	4613      	mov	r3, r2
 800c324:	005b      	lsls	r3, r3, #1
 800c326:	4413      	add	r3, r2
 800c328:	00db      	lsls	r3, r3, #3
 800c32a:	3350      	adds	r3, #80	@ 0x50
 800c32c:	443b      	add	r3, r7
 800c32e:	3b34      	subs	r3, #52	@ 0x34
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	3b01      	subs	r3, #1
 800c334:	009b      	lsls	r3, r3, #2
 800c336:	440b      	add	r3, r1
 800c338:	6859      	ldr	r1, [r3, #4]
 800c33a:	488e      	ldr	r0, [pc, #568]	@ (800c574 <HAL_OSPIM_Config+0x804>)
 800c33c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800c340:	4613      	mov	r3, r2
 800c342:	005b      	lsls	r3, r3, #1
 800c344:	4413      	add	r3, r2
 800c346:	00db      	lsls	r3, r3, #3
 800c348:	3350      	adds	r3, #80	@ 0x50
 800c34a:	443b      	add	r3, r7
 800c34c:	3b34      	subs	r3, #52	@ 0x34
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	3b01      	subs	r3, #1
 800c352:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 800c356:	009b      	lsls	r3, r3, #2
 800c358:	4403      	add	r3, r0
 800c35a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800c35c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800c360:	4613      	mov	r3, r2
 800c362:	005b      	lsls	r3, r3, #1
 800c364:	4413      	add	r3, r2
 800c366:	00db      	lsls	r3, r3, #3
 800c368:	3350      	adds	r3, #80	@ 0x50
 800c36a:	443b      	add	r3, r7
 800c36c:	3b30      	subs	r3, #48	@ 0x30
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d023      	beq.n	800c3bc <HAL_OSPIM_Config+0x64c>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800c374:	497f      	ldr	r1, [pc, #508]	@ (800c574 <HAL_OSPIM_Config+0x804>)
 800c376:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800c37a:	4613      	mov	r3, r2
 800c37c:	005b      	lsls	r3, r3, #1
 800c37e:	4413      	add	r3, r2
 800c380:	00db      	lsls	r3, r3, #3
 800c382:	3350      	adds	r3, #80	@ 0x50
 800c384:	443b      	add	r3, r7
 800c386:	3b30      	subs	r3, #48	@ 0x30
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	3b01      	subs	r3, #1
 800c38c:	f003 0301 	and.w	r3, r3, #1
 800c390:	009b      	lsls	r3, r3, #2
 800c392:	440b      	add	r3, r1
 800c394:	6859      	ldr	r1, [r3, #4]
 800c396:	4877      	ldr	r0, [pc, #476]	@ (800c574 <HAL_OSPIM_Config+0x804>)
 800c398:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800c39c:	4613      	mov	r3, r2
 800c39e:	005b      	lsls	r3, r3, #1
 800c3a0:	4413      	add	r3, r2
 800c3a2:	00db      	lsls	r3, r3, #3
 800c3a4:	3350      	adds	r3, #80	@ 0x50
 800c3a6:	443b      	add	r3, r7
 800c3a8:	3b30      	subs	r3, #48	@ 0x30
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	3b01      	subs	r3, #1
 800c3ae:	f003 0301 	and.w	r3, r3, #1
 800c3b2:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 800c3b6:	009b      	lsls	r3, r3, #2
 800c3b8:	4403      	add	r3, r0
 800c3ba:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800c3bc:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800c3c0:	4613      	mov	r3, r2
 800c3c2:	005b      	lsls	r3, r3, #1
 800c3c4:	4413      	add	r3, r2
 800c3c6:	00db      	lsls	r3, r3, #3
 800c3c8:	3350      	adds	r3, #80	@ 0x50
 800c3ca:	443b      	add	r3, r7
 800c3cc:	3b2c      	subs	r3, #44	@ 0x2c
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d023      	beq.n	800c41c <HAL_OSPIM_Config+0x6ac>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800c3d4:	4967      	ldr	r1, [pc, #412]	@ (800c574 <HAL_OSPIM_Config+0x804>)
 800c3d6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800c3da:	4613      	mov	r3, r2
 800c3dc:	005b      	lsls	r3, r3, #1
 800c3de:	4413      	add	r3, r2
 800c3e0:	00db      	lsls	r3, r3, #3
 800c3e2:	3350      	adds	r3, #80	@ 0x50
 800c3e4:	443b      	add	r3, r7
 800c3e6:	3b2c      	subs	r3, #44	@ 0x2c
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	3b01      	subs	r3, #1
 800c3ec:	f003 0301 	and.w	r3, r3, #1
 800c3f0:	009b      	lsls	r3, r3, #2
 800c3f2:	440b      	add	r3, r1
 800c3f4:	6859      	ldr	r1, [r3, #4]
 800c3f6:	485f      	ldr	r0, [pc, #380]	@ (800c574 <HAL_OSPIM_Config+0x804>)
 800c3f8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800c3fc:	4613      	mov	r3, r2
 800c3fe:	005b      	lsls	r3, r3, #1
 800c400:	4413      	add	r3, r2
 800c402:	00db      	lsls	r3, r3, #3
 800c404:	3350      	adds	r3, #80	@ 0x50
 800c406:	443b      	add	r3, r7
 800c408:	3b2c      	subs	r3, #44	@ 0x2c
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	3b01      	subs	r3, #1
 800c40e:	f003 0301 	and.w	r3, r3, #1
 800c412:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 800c416:	009b      	lsls	r3, r3, #2
 800c418:	4403      	add	r3, r0
 800c41a:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 800c41c:	4a55      	ldr	r2, [pc, #340]	@ (800c574 <HAL_OSPIM_Config+0x804>)
 800c41e:	68bb      	ldr	r3, [r7, #8]
 800c420:	689b      	ldr	r3, [r3, #8]
 800c422:	3b01      	subs	r3, #1
 800c424:	009b      	lsls	r3, r3, #2
 800c426:	4413      	add	r3, r2
 800c428:	685b      	ldr	r3, [r3, #4]
 800c42a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c42e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c430:	025b      	lsls	r3, r3, #9
 800c432:	431a      	orrs	r2, r3
 800c434:	494f      	ldr	r1, [pc, #316]	@ (800c574 <HAL_OSPIM_Config+0x804>)
 800c436:	68bb      	ldr	r3, [r7, #8]
 800c438:	689b      	ldr	r3, [r3, #8]
 800c43a:	3b01      	subs	r3, #1
 800c43c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c440:	009b      	lsls	r3, r3, #2
 800c442:	440b      	add	r3, r1
 800c444:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 800c446:	68bb      	ldr	r3, [r7, #8]
 800c448:	695b      	ldr	r3, [r3, #20]
 800c44a:	1e5a      	subs	r2, r3, #1
 800c44c:	4b49      	ldr	r3, [pc, #292]	@ (800c574 <HAL_OSPIM_Config+0x804>)
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	0c1b      	lsrs	r3, r3, #16
 800c452:	b2db      	uxtb	r3, r3
 800c454:	429a      	cmp	r2, r3
 800c456:	d90a      	bls.n	800c46e <HAL_OSPIM_Config+0x6fe>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 800c458:	4b46      	ldr	r3, [pc, #280]	@ (800c574 <HAL_OSPIM_Config+0x804>)
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 800c460:	68bb      	ldr	r3, [r7, #8]
 800c462:	695b      	ldr	r3, [r3, #20]
 800c464:	3b01      	subs	r3, #1
 800c466:	041b      	lsls	r3, r3, #16
 800c468:	4942      	ldr	r1, [pc, #264]	@ (800c574 <HAL_OSPIM_Config+0x804>)
 800c46a:	4313      	orrs	r3, r2
 800c46c:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 800c46e:	4b41      	ldr	r3, [pc, #260]	@ (800c574 <HAL_OSPIM_Config+0x804>)
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	f003 0301 	and.w	r3, r3, #1
 800c476:	2b00      	cmp	r3, #0
 800c478:	f000 809a 	beq.w	800c5b0 <HAL_OSPIM_Config+0x840>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 800c47c:	4a3d      	ldr	r2, [pc, #244]	@ (800c574 <HAL_OSPIM_Config+0x804>)
 800c47e:	68bb      	ldr	r3, [r7, #8]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	3b01      	subs	r3, #1
 800c484:	009b      	lsls	r3, r3, #2
 800c486:	4413      	add	r3, r2
 800c488:	685b      	ldr	r3, [r3, #4]
 800c48a:	f023 0203 	bic.w	r2, r3, #3
 800c48e:	4939      	ldr	r1, [pc, #228]	@ (800c574 <HAL_OSPIM_Config+0x804>)
 800c490:	68bb      	ldr	r3, [r7, #8]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	3b01      	subs	r3, #1
 800c496:	f042 0201 	orr.w	r2, r2, #1
 800c49a:	009b      	lsls	r3, r3, #2
 800c49c:	440b      	add	r3, r1
 800c49e:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 800c4a0:	68bb      	ldr	r3, [r7, #8]
 800c4a2:	685b      	ldr	r3, [r3, #4]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d011      	beq.n	800c4cc <HAL_OSPIM_Config+0x75c>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 800c4a8:	4a32      	ldr	r2, [pc, #200]	@ (800c574 <HAL_OSPIM_Config+0x804>)
 800c4aa:	68bb      	ldr	r3, [r7, #8]
 800c4ac:	685b      	ldr	r3, [r3, #4]
 800c4ae:	3b01      	subs	r3, #1
 800c4b0:	009b      	lsls	r3, r3, #2
 800c4b2:	4413      	add	r3, r2
 800c4b4:	685b      	ldr	r3, [r3, #4]
 800c4b6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800c4ba:	492e      	ldr	r1, [pc, #184]	@ (800c574 <HAL_OSPIM_Config+0x804>)
 800c4bc:	68bb      	ldr	r3, [r7, #8]
 800c4be:	685b      	ldr	r3, [r3, #4]
 800c4c0:	3b01      	subs	r3, #1
 800c4c2:	f042 0210 	orr.w	r2, r2, #16
 800c4c6:	009b      	lsls	r3, r3, #2
 800c4c8:	440b      	add	r3, r1
 800c4ca:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800c4cc:	68bb      	ldr	r3, [r7, #8]
 800c4ce:	68db      	ldr	r3, [r3, #12]
 800c4d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d016      	beq.n	800c506 <HAL_OSPIM_Config+0x796>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800c4d8:	4a26      	ldr	r2, [pc, #152]	@ (800c574 <HAL_OSPIM_Config+0x804>)
 800c4da:	68bb      	ldr	r3, [r7, #8]
 800c4dc:	68db      	ldr	r3, [r3, #12]
 800c4de:	3b01      	subs	r3, #1
 800c4e0:	f003 0301 	and.w	r3, r3, #1
 800c4e4:	009b      	lsls	r3, r3, #2
 800c4e6:	4413      	add	r3, r2
 800c4e8:	685b      	ldr	r3, [r3, #4]
 800c4ea:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800c4ee:	4921      	ldr	r1, [pc, #132]	@ (800c574 <HAL_OSPIM_Config+0x804>)
 800c4f0:	68bb      	ldr	r3, [r7, #8]
 800c4f2:	68db      	ldr	r3, [r3, #12]
 800c4f4:	3b01      	subs	r3, #1
 800c4f6:	f003 0301 	and.w	r3, r3, #1
 800c4fa:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800c4fe:	009b      	lsls	r3, r3, #2
 800c500:	440b      	add	r3, r1
 800c502:	605a      	str	r2, [r3, #4]
 800c504:	e019      	b.n	800c53a <HAL_OSPIM_Config+0x7ca>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800c506:	68bb      	ldr	r3, [r7, #8]
 800c508:	68db      	ldr	r3, [r3, #12]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d015      	beq.n	800c53a <HAL_OSPIM_Config+0x7ca>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800c50e:	4a19      	ldr	r2, [pc, #100]	@ (800c574 <HAL_OSPIM_Config+0x804>)
 800c510:	68bb      	ldr	r3, [r7, #8]
 800c512:	68db      	ldr	r3, [r3, #12]
 800c514:	3b01      	subs	r3, #1
 800c516:	f003 0301 	and.w	r3, r3, #1
 800c51a:	009b      	lsls	r3, r3, #2
 800c51c:	4413      	add	r3, r2
 800c51e:	685b      	ldr	r3, [r3, #4]
 800c520:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 800c524:	4913      	ldr	r1, [pc, #76]	@ (800c574 <HAL_OSPIM_Config+0x804>)
 800c526:	68bb      	ldr	r3, [r7, #8]
 800c528:	68db      	ldr	r3, [r3, #12]
 800c52a:	3b01      	subs	r3, #1
 800c52c:	f003 0301 	and.w	r3, r3, #1
 800c530:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800c534:	009b      	lsls	r3, r3, #2
 800c536:	440b      	add	r3, r1
 800c538:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800c53a:	68bb      	ldr	r3, [r7, #8]
 800c53c:	691b      	ldr	r3, [r3, #16]
 800c53e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c542:	2b00      	cmp	r3, #0
 800c544:	d018      	beq.n	800c578 <HAL_OSPIM_Config+0x808>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800c546:	4a0b      	ldr	r2, [pc, #44]	@ (800c574 <HAL_OSPIM_Config+0x804>)
 800c548:	68bb      	ldr	r3, [r7, #8]
 800c54a:	691b      	ldr	r3, [r3, #16]
 800c54c:	3b01      	subs	r3, #1
 800c54e:	f003 0301 	and.w	r3, r3, #1
 800c552:	009b      	lsls	r3, r3, #2
 800c554:	4413      	add	r3, r2
 800c556:	685b      	ldr	r3, [r3, #4]
 800c558:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800c55c:	4905      	ldr	r1, [pc, #20]	@ (800c574 <HAL_OSPIM_Config+0x804>)
 800c55e:	68bb      	ldr	r3, [r7, #8]
 800c560:	691b      	ldr	r3, [r3, #16]
 800c562:	3b01      	subs	r3, #1
 800c564:	f003 0301 	and.w	r3, r3, #1
 800c568:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 800c56c:	009b      	lsls	r3, r3, #2
 800c56e:	440b      	add	r3, r1
 800c570:	605a      	str	r2, [r3, #4]
 800c572:	e0c5      	b.n	800c700 <HAL_OSPIM_Config+0x990>
 800c574:	5200b400 	.word	0x5200b400
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800c578:	68bb      	ldr	r3, [r7, #8]
 800c57a:	691b      	ldr	r3, [r3, #16]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	f000 80bf 	beq.w	800c700 <HAL_OSPIM_Config+0x990>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800c582:	4a6e      	ldr	r2, [pc, #440]	@ (800c73c <HAL_OSPIM_Config+0x9cc>)
 800c584:	68bb      	ldr	r3, [r7, #8]
 800c586:	691b      	ldr	r3, [r3, #16]
 800c588:	3b01      	subs	r3, #1
 800c58a:	f003 0301 	and.w	r3, r3, #1
 800c58e:	009b      	lsls	r3, r3, #2
 800c590:	4413      	add	r3, r2
 800c592:	685b      	ldr	r3, [r3, #4]
 800c594:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 800c598:	4968      	ldr	r1, [pc, #416]	@ (800c73c <HAL_OSPIM_Config+0x9cc>)
 800c59a:	68bb      	ldr	r3, [r7, #8]
 800c59c:	691b      	ldr	r3, [r3, #16]
 800c59e:	3b01      	subs	r3, #1
 800c5a0:	f003 0301 	and.w	r3, r3, #1
 800c5a4:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 800c5a8:	009b      	lsls	r3, r3, #2
 800c5aa:	440b      	add	r3, r1
 800c5ac:	605a      	str	r2, [r3, #4]
 800c5ae:	e0a7      	b.n	800c700 <HAL_OSPIM_Config+0x990>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 800c5b0:	4a62      	ldr	r2, [pc, #392]	@ (800c73c <HAL_OSPIM_Config+0x9cc>)
 800c5b2:	68bb      	ldr	r3, [r7, #8]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	3b01      	subs	r3, #1
 800c5b8:	009b      	lsls	r3, r3, #2
 800c5ba:	4413      	add	r3, r2
 800c5bc:	685b      	ldr	r3, [r3, #4]
 800c5be:	f023 0203 	bic.w	r2, r3, #3
 800c5c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c5c4:	005b      	lsls	r3, r3, #1
 800c5c6:	431a      	orrs	r2, r3
 800c5c8:	495c      	ldr	r1, [pc, #368]	@ (800c73c <HAL_OSPIM_Config+0x9cc>)
 800c5ca:	68bb      	ldr	r3, [r7, #8]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	3b01      	subs	r3, #1
 800c5d0:	f042 0201 	orr.w	r2, r2, #1
 800c5d4:	009b      	lsls	r3, r3, #2
 800c5d6:	440b      	add	r3, r1
 800c5d8:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 800c5da:	68bb      	ldr	r3, [r7, #8]
 800c5dc:	685b      	ldr	r3, [r3, #4]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d014      	beq.n	800c60c <HAL_OSPIM_Config+0x89c>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 800c5e2:	4a56      	ldr	r2, [pc, #344]	@ (800c73c <HAL_OSPIM_Config+0x9cc>)
 800c5e4:	68bb      	ldr	r3, [r7, #8]
 800c5e6:	685b      	ldr	r3, [r3, #4]
 800c5e8:	3b01      	subs	r3, #1
 800c5ea:	009b      	lsls	r3, r3, #2
 800c5ec:	4413      	add	r3, r2
 800c5ee:	685b      	ldr	r3, [r3, #4]
 800c5f0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800c5f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c5f6:	015b      	lsls	r3, r3, #5
 800c5f8:	431a      	orrs	r2, r3
 800c5fa:	4950      	ldr	r1, [pc, #320]	@ (800c73c <HAL_OSPIM_Config+0x9cc>)
 800c5fc:	68bb      	ldr	r3, [r7, #8]
 800c5fe:	685b      	ldr	r3, [r3, #4]
 800c600:	3b01      	subs	r3, #1
 800c602:	f042 0210 	orr.w	r2, r2, #16
 800c606:	009b      	lsls	r3, r3, #2
 800c608:	440b      	add	r3, r1
 800c60a:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800c60c:	68bb      	ldr	r3, [r7, #8]
 800c60e:	68db      	ldr	r3, [r3, #12]
 800c610:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c614:	2b00      	cmp	r3, #0
 800c616:	d019      	beq.n	800c64c <HAL_OSPIM_Config+0x8dc>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800c618:	4a48      	ldr	r2, [pc, #288]	@ (800c73c <HAL_OSPIM_Config+0x9cc>)
 800c61a:	68bb      	ldr	r3, [r7, #8]
 800c61c:	68db      	ldr	r3, [r3, #12]
 800c61e:	3b01      	subs	r3, #1
 800c620:	f003 0301 	and.w	r3, r3, #1
 800c624:	009b      	lsls	r3, r3, #2
 800c626:	4413      	add	r3, r2
 800c628:	685b      	ldr	r3, [r3, #4]
 800c62a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800c62e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c630:	049b      	lsls	r3, r3, #18
 800c632:	431a      	orrs	r2, r3
 800c634:	4941      	ldr	r1, [pc, #260]	@ (800c73c <HAL_OSPIM_Config+0x9cc>)
 800c636:	68bb      	ldr	r3, [r7, #8]
 800c638:	68db      	ldr	r3, [r3, #12]
 800c63a:	3b01      	subs	r3, #1
 800c63c:	f003 0301 	and.w	r3, r3, #1
 800c640:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800c644:	009b      	lsls	r3, r3, #2
 800c646:	440b      	add	r3, r1
 800c648:	605a      	str	r2, [r3, #4]
 800c64a:	e01c      	b.n	800c686 <HAL_OSPIM_Config+0x916>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800c64c:	68bb      	ldr	r3, [r7, #8]
 800c64e:	68db      	ldr	r3, [r3, #12]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d018      	beq.n	800c686 <HAL_OSPIM_Config+0x916>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800c654:	4a39      	ldr	r2, [pc, #228]	@ (800c73c <HAL_OSPIM_Config+0x9cc>)
 800c656:	68bb      	ldr	r3, [r7, #8]
 800c658:	68db      	ldr	r3, [r3, #12]
 800c65a:	3b01      	subs	r3, #1
 800c65c:	f003 0301 	and.w	r3, r3, #1
 800c660:	009b      	lsls	r3, r3, #2
 800c662:	4413      	add	r3, r2
 800c664:	685b      	ldr	r3, [r3, #4]
 800c666:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 800c66a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c66c:	069b      	lsls	r3, r3, #26
 800c66e:	431a      	orrs	r2, r3
 800c670:	4932      	ldr	r1, [pc, #200]	@ (800c73c <HAL_OSPIM_Config+0x9cc>)
 800c672:	68bb      	ldr	r3, [r7, #8]
 800c674:	68db      	ldr	r3, [r3, #12]
 800c676:	3b01      	subs	r3, #1
 800c678:	f003 0301 	and.w	r3, r3, #1
 800c67c:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800c680:	009b      	lsls	r3, r3, #2
 800c682:	440b      	add	r3, r1
 800c684:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800c686:	68bb      	ldr	r3, [r7, #8]
 800c688:	691b      	ldr	r3, [r3, #16]
 800c68a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d019      	beq.n	800c6c6 <HAL_OSPIM_Config+0x956>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800c692:	4a2a      	ldr	r2, [pc, #168]	@ (800c73c <HAL_OSPIM_Config+0x9cc>)
 800c694:	68bb      	ldr	r3, [r7, #8]
 800c696:	691b      	ldr	r3, [r3, #16]
 800c698:	3b01      	subs	r3, #1
 800c69a:	f003 0301 	and.w	r3, r3, #1
 800c69e:	009b      	lsls	r3, r3, #2
 800c6a0:	4413      	add	r3, r2
 800c6a2:	685b      	ldr	r3, [r3, #4]
 800c6a4:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800c6a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c6aa:	049b      	lsls	r3, r3, #18
 800c6ac:	431a      	orrs	r2, r3
 800c6ae:	4923      	ldr	r1, [pc, #140]	@ (800c73c <HAL_OSPIM_Config+0x9cc>)
 800c6b0:	68bb      	ldr	r3, [r7, #8]
 800c6b2:	691b      	ldr	r3, [r3, #16]
 800c6b4:	3b01      	subs	r3, #1
 800c6b6:	f003 0301 	and.w	r3, r3, #1
 800c6ba:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 800c6be:	009b      	lsls	r3, r3, #2
 800c6c0:	440b      	add	r3, r1
 800c6c2:	605a      	str	r2, [r3, #4]
 800c6c4:	e01c      	b.n	800c700 <HAL_OSPIM_Config+0x990>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800c6c6:	68bb      	ldr	r3, [r7, #8]
 800c6c8:	691b      	ldr	r3, [r3, #16]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d018      	beq.n	800c700 <HAL_OSPIM_Config+0x990>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800c6ce:	4a1b      	ldr	r2, [pc, #108]	@ (800c73c <HAL_OSPIM_Config+0x9cc>)
 800c6d0:	68bb      	ldr	r3, [r7, #8]
 800c6d2:	691b      	ldr	r3, [r3, #16]
 800c6d4:	3b01      	subs	r3, #1
 800c6d6:	f003 0301 	and.w	r3, r3, #1
 800c6da:	009b      	lsls	r3, r3, #2
 800c6dc:	4413      	add	r3, r2
 800c6de:	685b      	ldr	r3, [r3, #4]
 800c6e0:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 800c6e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c6e6:	069b      	lsls	r3, r3, #26
 800c6e8:	431a      	orrs	r2, r3
 800c6ea:	4914      	ldr	r1, [pc, #80]	@ (800c73c <HAL_OSPIM_Config+0x9cc>)
 800c6ec:	68bb      	ldr	r3, [r7, #8]
 800c6ee:	691b      	ldr	r3, [r3, #16]
 800c6f0:	3b01      	subs	r3, #1
 800c6f2:	f003 0301 	and.w	r3, r3, #1
 800c6f6:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 800c6fa:	009b      	lsls	r3, r3, #2
 800c6fc:	440b      	add	r3, r1
 800c6fe:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 800c700:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800c704:	f003 0301 	and.w	r3, r3, #1
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d005      	beq.n	800c718 <HAL_OSPIM_Config+0x9a8>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800c70c:	4b0c      	ldr	r3, [pc, #48]	@ (800c740 <HAL_OSPIM_Config+0x9d0>)
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	4a0b      	ldr	r2, [pc, #44]	@ (800c740 <HAL_OSPIM_Config+0x9d0>)
 800c712:	f043 0301 	orr.w	r3, r3, #1
 800c716:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 800c718:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800c71c:	f003 0302 	and.w	r3, r3, #2
 800c720:	2b00      	cmp	r3, #0
 800c722:	d005      	beq.n	800c730 <HAL_OSPIM_Config+0x9c0>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800c724:	4b07      	ldr	r3, [pc, #28]	@ (800c744 <HAL_OSPIM_Config+0x9d4>)
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	4a06      	ldr	r2, [pc, #24]	@ (800c744 <HAL_OSPIM_Config+0x9d4>)
 800c72a:	f043 0301 	orr.w	r3, r3, #1
 800c72e:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 800c730:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800c734:	4618      	mov	r0, r3
 800c736:	3750      	adds	r7, #80	@ 0x50
 800c738:	46bd      	mov	sp, r7
 800c73a:	bd80      	pop	{r7, pc}
 800c73c:	5200b400 	.word	0x5200b400
 800c740:	52005000 	.word	0x52005000
 800c744:	5200a000 	.word	0x5200a000

0800c748 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b084      	sub	sp, #16
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	60f8      	str	r0, [r7, #12]
 800c750:	60b9      	str	r1, [r7, #8]
 800c752:	603b      	str	r3, [r7, #0]
 800c754:	4613      	mov	r3, r2
 800c756:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800c758:	e01a      	b.n	800c790 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c75a:	69bb      	ldr	r3, [r7, #24]
 800c75c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c760:	d016      	beq.n	800c790 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c762:	f7fa fa21 	bl	8006ba8 <HAL_GetTick>
 800c766:	4602      	mov	r2, r0
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	1ad3      	subs	r3, r2, r3
 800c76c:	69ba      	ldr	r2, [r7, #24]
 800c76e:	429a      	cmp	r2, r3
 800c770:	d302      	bcc.n	800c778 <OSPI_WaitFlagStateUntilTimeout+0x30>
 800c772:	69bb      	ldr	r3, [r7, #24]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d10b      	bne.n	800c790 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c77e:	651a      	str	r2, [r3, #80]	@ 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c784:	f043 0201 	orr.w	r2, r3, #1
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	655a      	str	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 800c78c:	2301      	movs	r3, #1
 800c78e:	e00e      	b.n	800c7ae <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	6a1a      	ldr	r2, [r3, #32]
 800c796:	68bb      	ldr	r3, [r7, #8]
 800c798:	4013      	ands	r3, r2
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	bf14      	ite	ne
 800c79e:	2301      	movne	r3, #1
 800c7a0:	2300      	moveq	r3, #0
 800c7a2:	b2db      	uxtb	r3, r3
 800c7a4:	461a      	mov	r2, r3
 800c7a6:	79fb      	ldrb	r3, [r7, #7]
 800c7a8:	429a      	cmp	r2, r3
 800c7aa:	d1d6      	bne.n	800c75a <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c7ac:	2300      	movs	r3, #0
}
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	3710      	adds	r7, #16
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	bd80      	pop	{r7, pc}
	...

0800c7b8 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 800c7b8:	b480      	push	{r7}
 800c7ba:	b089      	sub	sp, #36	@ 0x24
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
 800c7c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	681a      	ldr	r2, [r3, #0]
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800c7d4:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	689b      	ldr	r3, [r3, #8]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d10a      	bne.n	800c7f4 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800c7e8:	683b      	ldr	r3, [r7, #0]
 800c7ea:	685a      	ldr	r2, [r3, #4]
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	430a      	orrs	r2, r1
 800c7f2:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800c7f4:	683b      	ldr	r3, [r7, #0]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	2b02      	cmp	r3, #2
 800c7fa:	d114      	bne.n	800c826 <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800c804:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800c80e:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800c818:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800c822:	60fb      	str	r3, [r7, #12]
 800c824:	e02c      	b.n	800c880 <OSPI_ConfigCmd+0xc8>
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	2b03      	cmp	r3, #3
 800c82c:	d114      	bne.n	800c858 <OSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hospi->Instance->WPCCR);
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800c836:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WPTCR);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800c840:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WPIR);
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c84a:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WPABR);
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800c854:	60fb      	str	r3, [r7, #12]
 800c856:	e013      	b.n	800c880 <OSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800c860:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800c86a:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800c874:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800c87e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 800c880:	683b      	ldr	r3, [r7, #0]
 800c882:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c884:	683b      	ldr	r3, [r7, #0]
 800c886:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c888:	431a      	orrs	r2, r3
 800c88a:	69bb      	ldr	r3, [r7, #24]
 800c88c:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 800c88e:	683b      	ldr	r3, [r7, #0]
 800c890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c892:	2b00      	cmp	r3, #0
 800c894:	d012      	beq.n	800c8bc <OSPI_ConfigCmd+0x104>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 800c896:	683b      	ldr	r3, [r7, #0]
 800c898:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 800c89e:	69bb      	ldr	r3, [r7, #24]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800c8a6:	683b      	ldr	r3, [r7, #0]
 800c8a8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800c8aa:	683b      	ldr	r3, [r7, #0]
 800c8ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c8ae:	4319      	orrs	r1, r3
 800c8b0:	683b      	ldr	r3, [r7, #0]
 800c8b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c8b4:	430b      	orrs	r3, r1
 800c8b6:	431a      	orrs	r2, r3
 800c8b8:	69bb      	ldr	r3, [r7, #24]
 800c8ba:	601a      	str	r2, [r3, #0]
               (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 800c8bc:	697b      	ldr	r3, [r7, #20]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	f023 021f 	bic.w	r2, r3, #31
 800c8c4:	683b      	ldr	r3, [r7, #0]
 800c8c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c8c8:	431a      	orrs	r2, r3
 800c8ca:	697b      	ldr	r3, [r7, #20]
 800c8cc:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800c8ce:	683b      	ldr	r3, [r7, #0]
 800c8d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d009      	beq.n	800c8ea <OSPI_ConfigCmd+0x132>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800c8d6:	683b      	ldr	r3, [r7, #0]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d105      	bne.n	800c8ea <OSPI_ConfigCmd+0x132>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 800c8de:	683b      	ldr	r3, [r7, #0]
 800c8e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	3a01      	subs	r2, #1
 800c8e8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 800c8ea:	683b      	ldr	r3, [r7, #0]
 800c8ec:	68db      	ldr	r3, [r3, #12]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	f000 8095 	beq.w	800ca1e <OSPI_ConfigCmd+0x266>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800c8f4:	683b      	ldr	r3, [r7, #0]
 800c8f6:	69db      	ldr	r3, [r3, #28]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d053      	beq.n	800c9a4 <OSPI_ConfigCmd+0x1ec>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800c8fc:	683b      	ldr	r3, [r7, #0]
 800c8fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c900:	2b00      	cmp	r3, #0
 800c902:	d01e      	beq.n	800c942 <OSPI_ConfigCmd+0x18a>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800c904:	69bb      	ldr	r3, [r7, #24]
 800c906:	681a      	ldr	r2, [r3, #0]
 800c908:	4b64      	ldr	r3, [pc, #400]	@ (800ca9c <OSPI_ConfigCmd+0x2e4>)
 800c90a:	4013      	ands	r3, r2
 800c90c:	683a      	ldr	r2, [r7, #0]
 800c90e:	68d1      	ldr	r1, [r2, #12]
 800c910:	683a      	ldr	r2, [r7, #0]
 800c912:	6952      	ldr	r2, [r2, #20]
 800c914:	4311      	orrs	r1, r2
 800c916:	683a      	ldr	r2, [r7, #0]
 800c918:	6912      	ldr	r2, [r2, #16]
 800c91a:	4311      	orrs	r1, r2
 800c91c:	683a      	ldr	r2, [r7, #0]
 800c91e:	69d2      	ldr	r2, [r2, #28]
 800c920:	4311      	orrs	r1, r2
 800c922:	683a      	ldr	r2, [r7, #0]
 800c924:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800c926:	4311      	orrs	r1, r2
 800c928:	683a      	ldr	r2, [r7, #0]
 800c92a:	6a12      	ldr	r2, [r2, #32]
 800c92c:	4311      	orrs	r1, r2
 800c92e:	683a      	ldr	r2, [r7, #0]
 800c930:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800c932:	4311      	orrs	r1, r2
 800c934:	683a      	ldr	r2, [r7, #0]
 800c936:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800c938:	430a      	orrs	r2, r1
 800c93a:	431a      	orrs	r2, r3
 800c93c:	69bb      	ldr	r3, [r7, #24]
 800c93e:	601a      	str	r2, [r3, #0]
 800c940:	e026      	b.n	800c990 <OSPI_ConfigCmd+0x1d8>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800c942:	69bb      	ldr	r3, [r7, #24]
 800c944:	681a      	ldr	r2, [r3, #0]
 800c946:	4b56      	ldr	r3, [pc, #344]	@ (800caa0 <OSPI_ConfigCmd+0x2e8>)
 800c948:	4013      	ands	r3, r2
 800c94a:	683a      	ldr	r2, [r7, #0]
 800c94c:	68d1      	ldr	r1, [r2, #12]
 800c94e:	683a      	ldr	r2, [r7, #0]
 800c950:	6952      	ldr	r2, [r2, #20]
 800c952:	4311      	orrs	r1, r2
 800c954:	683a      	ldr	r2, [r7, #0]
 800c956:	6912      	ldr	r2, [r2, #16]
 800c958:	4311      	orrs	r1, r2
 800c95a:	683a      	ldr	r2, [r7, #0]
 800c95c:	69d2      	ldr	r2, [r2, #28]
 800c95e:	4311      	orrs	r1, r2
 800c960:	683a      	ldr	r2, [r7, #0]
 800c962:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800c964:	4311      	orrs	r1, r2
 800c966:	683a      	ldr	r2, [r7, #0]
 800c968:	6a12      	ldr	r2, [r2, #32]
 800c96a:	430a      	orrs	r2, r1
 800c96c:	431a      	orrs	r2, r3
 800c96e:	69bb      	ldr	r3, [r7, #24]
 800c970:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                    cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c976:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c97a:	d109      	bne.n	800c990 <OSPI_ConfigCmd+0x1d8>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800c980:	2b08      	cmp	r3, #8
 800c982:	d105      	bne.n	800c990 <OSPI_ConfigCmd+0x1d8>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800c984:	69bb      	ldr	r3, [r7, #24]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c98c:	69bb      	ldr	r3, [r7, #24]
 800c98e:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 800c990:	683b      	ldr	r3, [r7, #0]
 800c992:	689a      	ldr	r2, [r3, #8]
 800c994:	693b      	ldr	r3, [r7, #16]
 800c996:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	683a      	ldr	r2, [r7, #0]
 800c99e:	6992      	ldr	r2, [r2, #24]
 800c9a0:	649a      	str	r2, [r3, #72]	@ 0x48
 800c9a2:	e074      	b.n	800ca8e <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800c9a4:	683b      	ldr	r3, [r7, #0]
 800c9a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d015      	beq.n	800c9d8 <OSPI_ConfigCmd+0x220>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 800c9ac:	69bb      	ldr	r3, [r7, #24]
 800c9ae:	681a      	ldr	r2, [r3, #0]
 800c9b0:	4b3c      	ldr	r3, [pc, #240]	@ (800caa4 <OSPI_ConfigCmd+0x2ec>)
 800c9b2:	4013      	ands	r3, r2
 800c9b4:	683a      	ldr	r2, [r7, #0]
 800c9b6:	68d1      	ldr	r1, [r2, #12]
 800c9b8:	683a      	ldr	r2, [r7, #0]
 800c9ba:	6952      	ldr	r2, [r2, #20]
 800c9bc:	4311      	orrs	r1, r2
 800c9be:	683a      	ldr	r2, [r7, #0]
 800c9c0:	6912      	ldr	r2, [r2, #16]
 800c9c2:	4311      	orrs	r1, r2
 800c9c4:	683a      	ldr	r2, [r7, #0]
 800c9c6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800c9c8:	4311      	orrs	r1, r2
 800c9ca:	683a      	ldr	r2, [r7, #0]
 800c9cc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800c9ce:	430a      	orrs	r2, r1
 800c9d0:	431a      	orrs	r2, r3
 800c9d2:	69bb      	ldr	r3, [r7, #24]
 800c9d4:	601a      	str	r2, [r3, #0]
 800c9d6:	e01d      	b.n	800ca14 <OSPI_ConfigCmd+0x25c>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 800c9d8:	69bb      	ldr	r3, [r7, #24]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	68d9      	ldr	r1, [r3, #12]
 800c9e4:	683b      	ldr	r3, [r7, #0]
 800c9e6:	695b      	ldr	r3, [r3, #20]
 800c9e8:	4319      	orrs	r1, r3
 800c9ea:	683b      	ldr	r3, [r7, #0]
 800c9ec:	691b      	ldr	r3, [r3, #16]
 800c9ee:	430b      	orrs	r3, r1
 800c9f0:	431a      	orrs	r2, r3
 800c9f2:	69bb      	ldr	r3, [r7, #24]
 800c9f4:	601a      	str	r2, [r3, #0]
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c9fe:	d109      	bne.n	800ca14 <OSPI_ConfigCmd+0x25c>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800ca00:	683b      	ldr	r3, [r7, #0]
 800ca02:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800ca04:	2b08      	cmp	r3, #8
 800ca06:	d105      	bne.n	800ca14 <OSPI_ConfigCmd+0x25c>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800ca08:	69bb      	ldr	r3, [r7, #24]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800ca10:	69bb      	ldr	r3, [r7, #24]
 800ca12:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	689a      	ldr	r2, [r3, #8]
 800ca18:	693b      	ldr	r3, [r7, #16]
 800ca1a:	601a      	str	r2, [r3, #0]
 800ca1c:	e037      	b.n	800ca8e <OSPI_ConfigCmd+0x2d6>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800ca1e:	683b      	ldr	r3, [r7, #0]
 800ca20:	69db      	ldr	r3, [r3, #28]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d02e      	beq.n	800ca84 <OSPI_ConfigCmd+0x2cc>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800ca26:	683b      	ldr	r3, [r7, #0]
 800ca28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d015      	beq.n	800ca5a <OSPI_ConfigCmd+0x2a2>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 800ca2e:	69bb      	ldr	r3, [r7, #24]
 800ca30:	681a      	ldr	r2, [r3, #0]
 800ca32:	4b1d      	ldr	r3, [pc, #116]	@ (800caa8 <OSPI_ConfigCmd+0x2f0>)
 800ca34:	4013      	ands	r3, r2
 800ca36:	683a      	ldr	r2, [r7, #0]
 800ca38:	69d1      	ldr	r1, [r2, #28]
 800ca3a:	683a      	ldr	r2, [r7, #0]
 800ca3c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800ca3e:	4311      	orrs	r1, r2
 800ca40:	683a      	ldr	r2, [r7, #0]
 800ca42:	6a12      	ldr	r2, [r2, #32]
 800ca44:	4311      	orrs	r1, r2
 800ca46:	683a      	ldr	r2, [r7, #0]
 800ca48:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800ca4a:	4311      	orrs	r1, r2
 800ca4c:	683a      	ldr	r2, [r7, #0]
 800ca4e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800ca50:	430a      	orrs	r2, r1
 800ca52:	431a      	orrs	r2, r3
 800ca54:	69bb      	ldr	r3, [r7, #24]
 800ca56:	601a      	str	r2, [r3, #0]
 800ca58:	e00e      	b.n	800ca78 <OSPI_ConfigCmd+0x2c0>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 800ca5a:	69bb      	ldr	r3, [r7, #24]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800ca62:	683b      	ldr	r3, [r7, #0]
 800ca64:	69d9      	ldr	r1, [r3, #28]
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca6a:	4319      	orrs	r1, r3
 800ca6c:	683b      	ldr	r3, [r7, #0]
 800ca6e:	6a1b      	ldr	r3, [r3, #32]
 800ca70:	430b      	orrs	r3, r1
 800ca72:	431a      	orrs	r2, r3
 800ca74:	69bb      	ldr	r3, [r7, #24]
 800ca76:	601a      	str	r2, [r3, #0]
                   (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	683a      	ldr	r2, [r7, #0]
 800ca7e:	6992      	ldr	r2, [r2, #24]
 800ca80:	649a      	str	r2, [r3, #72]	@ 0x48
 800ca82:	e004      	b.n	800ca8e <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 800ca84:	2301      	movs	r3, #1
 800ca86:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	2208      	movs	r2, #8
 800ca8c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
 800ca8e:	7ffb      	ldrb	r3, [r7, #31]
}
 800ca90:	4618      	mov	r0, r3
 800ca92:	3724      	adds	r7, #36	@ 0x24
 800ca94:	46bd      	mov	sp, r7
 800ca96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9a:	4770      	bx	lr
 800ca9c:	f0ffc0c0 	.word	0xf0ffc0c0
 800caa0:	ffffc0c0 	.word	0xffffc0c0
 800caa4:	f0ffffc0 	.word	0xf0ffffc0
 800caa8:	f0ffc0ff 	.word	0xf0ffc0ff

0800caac <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 800caac:	b480      	push	{r7}
 800caae:	b087      	sub	sp, #28
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	4603      	mov	r3, r0
 800cab4:	6039      	str	r1, [r7, #0]
 800cab6:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800cab8:	2300      	movs	r3, #0
 800caba:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 800cabc:	2300      	movs	r3, #0
 800cabe:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 800cac0:	79fb      	ldrb	r3, [r7, #7]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d005      	beq.n	800cad2 <OSPIM_GetConfig+0x26>
 800cac6:	79fb      	ldrb	r3, [r7, #7]
 800cac8:	2b02      	cmp	r3, #2
 800caca:	d802      	bhi.n	800cad2 <OSPIM_GetConfig+0x26>
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d102      	bne.n	800cad8 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 800cad2:	2301      	movs	r3, #1
 800cad4:	75fb      	strb	r3, [r7, #23]
 800cad6:	e098      	b.n	800cc0a <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 800cad8:	683b      	ldr	r3, [r7, #0]
 800cada:	2200      	movs	r2, #0
 800cadc:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	2200      	movs	r2, #0
 800cae2:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	2200      	movs	r2, #0
 800cae8:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	2200      	movs	r2, #0
 800caee:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 800caf0:	683b      	ldr	r3, [r7, #0]
 800caf2:	2200      	movs	r2, #0
 800caf4:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 800caf6:	79fb      	ldrb	r3, [r7, #7]
 800caf8:	2b02      	cmp	r3, #2
 800cafa:	d10b      	bne.n	800cb14 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 800cafc:	4b46      	ldr	r3, [pc, #280]	@ (800cc18 <OSPIM_GetConfig+0x16c>)
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	f003 0301 	and.w	r3, r3, #1
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d102      	bne.n	800cb0e <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 800cb08:	4b44      	ldr	r3, [pc, #272]	@ (800cc1c <OSPIM_GetConfig+0x170>)
 800cb0a:	613b      	str	r3, [r7, #16]
 800cb0c:	e002      	b.n	800cb14 <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 800cb0e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cb12:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800cb14:	2300      	movs	r3, #0
 800cb16:	60fb      	str	r3, [r7, #12]
 800cb18:	e074      	b.n	800cc04 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 800cb1a:	4a3f      	ldr	r2, [pc, #252]	@ (800cc18 <OSPIM_GetConfig+0x16c>)
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	009b      	lsls	r3, r3, #2
 800cb20:	4413      	add	r3, r2
 800cb22:	685b      	ldr	r3, [r3, #4]
 800cb24:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 800cb26:	68bb      	ldr	r3, [r7, #8]
 800cb28:	f003 0301 	and.w	r3, r3, #1
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d00a      	beq.n	800cb46 <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 800cb30:	68ba      	ldr	r2, [r7, #8]
 800cb32:	693b      	ldr	r3, [r7, #16]
 800cb34:	4053      	eors	r3, r2
 800cb36:	f003 0302 	and.w	r3, r3, #2
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d103      	bne.n	800cb46 <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	1c5a      	adds	r2, r3, #1
 800cb42:	683b      	ldr	r3, [r7, #0]
 800cb44:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 800cb46:	68bb      	ldr	r3, [r7, #8]
 800cb48:	f003 0310 	and.w	r3, r3, #16
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d00a      	beq.n	800cb66 <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 800cb50:	68ba      	ldr	r2, [r7, #8]
 800cb52:	693b      	ldr	r3, [r7, #16]
 800cb54:	4053      	eors	r3, r2
 800cb56:	f003 0320 	and.w	r3, r3, #32
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d103      	bne.n	800cb66 <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	1c5a      	adds	r2, r3, #1
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 800cb66:	68bb      	ldr	r3, [r7, #8]
 800cb68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d00a      	beq.n	800cb86 <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 800cb70:	68ba      	ldr	r2, [r7, #8]
 800cb72:	693b      	ldr	r3, [r7, #16]
 800cb74:	4053      	eors	r3, r2
 800cb76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d103      	bne.n	800cb86 <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	1c5a      	adds	r2, r3, #1
 800cb82:	683b      	ldr	r3, [r7, #0]
 800cb84:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 800cb86:	68bb      	ldr	r3, [r7, #8]
 800cb88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d018      	beq.n	800cbc2 <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 800cb90:	68ba      	ldr	r2, [r7, #8]
 800cb92:	693b      	ldr	r3, [r7, #16]
 800cb94:	4053      	eors	r3, r2
 800cb96:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d111      	bne.n	800cbc2 <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 800cb9e:	68bb      	ldr	r3, [r7, #8]
 800cba0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d106      	bne.n	800cbb6 <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	3301      	adds	r3, #1
 800cbac:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	60da      	str	r2, [r3, #12]
 800cbb4:	e005      	b.n	800cbc2 <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	3301      	adds	r3, #1
 800cbba:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800cbbe:	683b      	ldr	r3, [r7, #0]
 800cbc0:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 800cbc2:	68bb      	ldr	r3, [r7, #8]
 800cbc4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d018      	beq.n	800cbfe <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 800cbcc:	68ba      	ldr	r2, [r7, #8]
 800cbce:	693b      	ldr	r3, [r7, #16]
 800cbd0:	4053      	eors	r3, r2
 800cbd2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d111      	bne.n	800cbfe <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 800cbda:	68bb      	ldr	r3, [r7, #8]
 800cbdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d106      	bne.n	800cbf2 <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	3301      	adds	r3, #1
 800cbe8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800cbec:	683b      	ldr	r3, [r7, #0]
 800cbee:	611a      	str	r2, [r3, #16]
 800cbf0:	e005      	b.n	800cbfe <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	3301      	adds	r3, #1
 800cbf6:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800cbfa:	683b      	ldr	r3, [r7, #0]
 800cbfc:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	3301      	adds	r3, #1
 800cc02:	60fb      	str	r3, [r7, #12]
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	2b01      	cmp	r3, #1
 800cc08:	d987      	bls.n	800cb1a <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 800cc0a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	371c      	adds	r7, #28
 800cc10:	46bd      	mov	sp, r7
 800cc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc16:	4770      	bx	lr
 800cc18:	5200b400 	.word	0x5200b400
 800cc1c:	04040222 	.word	0x04040222

0800cc20 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b084      	sub	sp, #16
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800cc28:	4b19      	ldr	r3, [pc, #100]	@ (800cc90 <HAL_PWREx_ConfigSupply+0x70>)
 800cc2a:	68db      	ldr	r3, [r3, #12]
 800cc2c:	f003 0304 	and.w	r3, r3, #4
 800cc30:	2b04      	cmp	r3, #4
 800cc32:	d00a      	beq.n	800cc4a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800cc34:	4b16      	ldr	r3, [pc, #88]	@ (800cc90 <HAL_PWREx_ConfigSupply+0x70>)
 800cc36:	68db      	ldr	r3, [r3, #12]
 800cc38:	f003 0307 	and.w	r3, r3, #7
 800cc3c:	687a      	ldr	r2, [r7, #4]
 800cc3e:	429a      	cmp	r2, r3
 800cc40:	d001      	beq.n	800cc46 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800cc42:	2301      	movs	r3, #1
 800cc44:	e01f      	b.n	800cc86 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800cc46:	2300      	movs	r3, #0
 800cc48:	e01d      	b.n	800cc86 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800cc4a:	4b11      	ldr	r3, [pc, #68]	@ (800cc90 <HAL_PWREx_ConfigSupply+0x70>)
 800cc4c:	68db      	ldr	r3, [r3, #12]
 800cc4e:	f023 0207 	bic.w	r2, r3, #7
 800cc52:	490f      	ldr	r1, [pc, #60]	@ (800cc90 <HAL_PWREx_ConfigSupply+0x70>)
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	4313      	orrs	r3, r2
 800cc58:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800cc5a:	f7f9 ffa5 	bl	8006ba8 <HAL_GetTick>
 800cc5e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800cc60:	e009      	b.n	800cc76 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800cc62:	f7f9 ffa1 	bl	8006ba8 <HAL_GetTick>
 800cc66:	4602      	mov	r2, r0
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	1ad3      	subs	r3, r2, r3
 800cc6c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800cc70:	d901      	bls.n	800cc76 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800cc72:	2301      	movs	r3, #1
 800cc74:	e007      	b.n	800cc86 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800cc76:	4b06      	ldr	r3, [pc, #24]	@ (800cc90 <HAL_PWREx_ConfigSupply+0x70>)
 800cc78:	685b      	ldr	r3, [r3, #4]
 800cc7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cc7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cc82:	d1ee      	bne.n	800cc62 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800cc84:	2300      	movs	r3, #0
}
 800cc86:	4618      	mov	r0, r3
 800cc88:	3710      	adds	r7, #16
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	bd80      	pop	{r7, pc}
 800cc8e:	bf00      	nop
 800cc90:	58024800 	.word	0x58024800

0800cc94 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b08c      	sub	sp, #48	@ 0x30
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d101      	bne.n	800cca6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800cca2:	2301      	movs	r3, #1
 800cca4:	e3c8      	b.n	800d438 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	f003 0301 	and.w	r3, r3, #1
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	f000 8087 	beq.w	800cdc2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ccb4:	4b88      	ldr	r3, [pc, #544]	@ (800ced8 <HAL_RCC_OscConfig+0x244>)
 800ccb6:	691b      	ldr	r3, [r3, #16]
 800ccb8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ccbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ccbe:	4b86      	ldr	r3, [pc, #536]	@ (800ced8 <HAL_RCC_OscConfig+0x244>)
 800ccc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ccc2:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800ccc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccc6:	2b10      	cmp	r3, #16
 800ccc8:	d007      	beq.n	800ccda <HAL_RCC_OscConfig+0x46>
 800ccca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cccc:	2b18      	cmp	r3, #24
 800ccce:	d110      	bne.n	800ccf2 <HAL_RCC_OscConfig+0x5e>
 800ccd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccd2:	f003 0303 	and.w	r3, r3, #3
 800ccd6:	2b02      	cmp	r3, #2
 800ccd8:	d10b      	bne.n	800ccf2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ccda:	4b7f      	ldr	r3, [pc, #508]	@ (800ced8 <HAL_RCC_OscConfig+0x244>)
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d06c      	beq.n	800cdc0 <HAL_RCC_OscConfig+0x12c>
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	685b      	ldr	r3, [r3, #4]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d168      	bne.n	800cdc0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800ccee:	2301      	movs	r3, #1
 800ccf0:	e3a2      	b.n	800d438 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	685b      	ldr	r3, [r3, #4]
 800ccf6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ccfa:	d106      	bne.n	800cd0a <HAL_RCC_OscConfig+0x76>
 800ccfc:	4b76      	ldr	r3, [pc, #472]	@ (800ced8 <HAL_RCC_OscConfig+0x244>)
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	4a75      	ldr	r2, [pc, #468]	@ (800ced8 <HAL_RCC_OscConfig+0x244>)
 800cd02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cd06:	6013      	str	r3, [r2, #0]
 800cd08:	e02e      	b.n	800cd68 <HAL_RCC_OscConfig+0xd4>
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	685b      	ldr	r3, [r3, #4]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d10c      	bne.n	800cd2c <HAL_RCC_OscConfig+0x98>
 800cd12:	4b71      	ldr	r3, [pc, #452]	@ (800ced8 <HAL_RCC_OscConfig+0x244>)
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	4a70      	ldr	r2, [pc, #448]	@ (800ced8 <HAL_RCC_OscConfig+0x244>)
 800cd18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cd1c:	6013      	str	r3, [r2, #0]
 800cd1e:	4b6e      	ldr	r3, [pc, #440]	@ (800ced8 <HAL_RCC_OscConfig+0x244>)
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	4a6d      	ldr	r2, [pc, #436]	@ (800ced8 <HAL_RCC_OscConfig+0x244>)
 800cd24:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800cd28:	6013      	str	r3, [r2, #0]
 800cd2a:	e01d      	b.n	800cd68 <HAL_RCC_OscConfig+0xd4>
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	685b      	ldr	r3, [r3, #4]
 800cd30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800cd34:	d10c      	bne.n	800cd50 <HAL_RCC_OscConfig+0xbc>
 800cd36:	4b68      	ldr	r3, [pc, #416]	@ (800ced8 <HAL_RCC_OscConfig+0x244>)
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	4a67      	ldr	r2, [pc, #412]	@ (800ced8 <HAL_RCC_OscConfig+0x244>)
 800cd3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800cd40:	6013      	str	r3, [r2, #0]
 800cd42:	4b65      	ldr	r3, [pc, #404]	@ (800ced8 <HAL_RCC_OscConfig+0x244>)
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	4a64      	ldr	r2, [pc, #400]	@ (800ced8 <HAL_RCC_OscConfig+0x244>)
 800cd48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cd4c:	6013      	str	r3, [r2, #0]
 800cd4e:	e00b      	b.n	800cd68 <HAL_RCC_OscConfig+0xd4>
 800cd50:	4b61      	ldr	r3, [pc, #388]	@ (800ced8 <HAL_RCC_OscConfig+0x244>)
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	4a60      	ldr	r2, [pc, #384]	@ (800ced8 <HAL_RCC_OscConfig+0x244>)
 800cd56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cd5a:	6013      	str	r3, [r2, #0]
 800cd5c:	4b5e      	ldr	r3, [pc, #376]	@ (800ced8 <HAL_RCC_OscConfig+0x244>)
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	4a5d      	ldr	r2, [pc, #372]	@ (800ced8 <HAL_RCC_OscConfig+0x244>)
 800cd62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800cd66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	685b      	ldr	r3, [r3, #4]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d013      	beq.n	800cd98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd70:	f7f9 ff1a 	bl	8006ba8 <HAL_GetTick>
 800cd74:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800cd76:	e008      	b.n	800cd8a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cd78:	f7f9 ff16 	bl	8006ba8 <HAL_GetTick>
 800cd7c:	4602      	mov	r2, r0
 800cd7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd80:	1ad3      	subs	r3, r2, r3
 800cd82:	2b64      	cmp	r3, #100	@ 0x64
 800cd84:	d901      	bls.n	800cd8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800cd86:	2303      	movs	r3, #3
 800cd88:	e356      	b.n	800d438 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800cd8a:	4b53      	ldr	r3, [pc, #332]	@ (800ced8 <HAL_RCC_OscConfig+0x244>)
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d0f0      	beq.n	800cd78 <HAL_RCC_OscConfig+0xe4>
 800cd96:	e014      	b.n	800cdc2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd98:	f7f9 ff06 	bl	8006ba8 <HAL_GetTick>
 800cd9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800cd9e:	e008      	b.n	800cdb2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cda0:	f7f9 ff02 	bl	8006ba8 <HAL_GetTick>
 800cda4:	4602      	mov	r2, r0
 800cda6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cda8:	1ad3      	subs	r3, r2, r3
 800cdaa:	2b64      	cmp	r3, #100	@ 0x64
 800cdac:	d901      	bls.n	800cdb2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800cdae:	2303      	movs	r3, #3
 800cdb0:	e342      	b.n	800d438 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800cdb2:	4b49      	ldr	r3, [pc, #292]	@ (800ced8 <HAL_RCC_OscConfig+0x244>)
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d1f0      	bne.n	800cda0 <HAL_RCC_OscConfig+0x10c>
 800cdbe:	e000      	b.n	800cdc2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cdc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	f003 0302 	and.w	r3, r3, #2
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	f000 808c 	beq.w	800cee8 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cdd0:	4b41      	ldr	r3, [pc, #260]	@ (800ced8 <HAL_RCC_OscConfig+0x244>)
 800cdd2:	691b      	ldr	r3, [r3, #16]
 800cdd4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cdd8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800cdda:	4b3f      	ldr	r3, [pc, #252]	@ (800ced8 <HAL_RCC_OscConfig+0x244>)
 800cddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cdde:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800cde0:	6a3b      	ldr	r3, [r7, #32]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d007      	beq.n	800cdf6 <HAL_RCC_OscConfig+0x162>
 800cde6:	6a3b      	ldr	r3, [r7, #32]
 800cde8:	2b18      	cmp	r3, #24
 800cdea:	d137      	bne.n	800ce5c <HAL_RCC_OscConfig+0x1c8>
 800cdec:	69fb      	ldr	r3, [r7, #28]
 800cdee:	f003 0303 	and.w	r3, r3, #3
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d132      	bne.n	800ce5c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800cdf6:	4b38      	ldr	r3, [pc, #224]	@ (800ced8 <HAL_RCC_OscConfig+0x244>)
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	f003 0304 	and.w	r3, r3, #4
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d005      	beq.n	800ce0e <HAL_RCC_OscConfig+0x17a>
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	68db      	ldr	r3, [r3, #12]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d101      	bne.n	800ce0e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800ce0a:	2301      	movs	r3, #1
 800ce0c:	e314      	b.n	800d438 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800ce0e:	4b32      	ldr	r3, [pc, #200]	@ (800ced8 <HAL_RCC_OscConfig+0x244>)
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	f023 0219 	bic.w	r2, r3, #25
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	68db      	ldr	r3, [r3, #12]
 800ce1a:	492f      	ldr	r1, [pc, #188]	@ (800ced8 <HAL_RCC_OscConfig+0x244>)
 800ce1c:	4313      	orrs	r3, r2
 800ce1e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ce20:	f7f9 fec2 	bl	8006ba8 <HAL_GetTick>
 800ce24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ce26:	e008      	b.n	800ce3a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ce28:	f7f9 febe 	bl	8006ba8 <HAL_GetTick>
 800ce2c:	4602      	mov	r2, r0
 800ce2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce30:	1ad3      	subs	r3, r2, r3
 800ce32:	2b02      	cmp	r3, #2
 800ce34:	d901      	bls.n	800ce3a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800ce36:	2303      	movs	r3, #3
 800ce38:	e2fe      	b.n	800d438 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ce3a:	4b27      	ldr	r3, [pc, #156]	@ (800ced8 <HAL_RCC_OscConfig+0x244>)
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	f003 0304 	and.w	r3, r3, #4
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d0f0      	beq.n	800ce28 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ce46:	4b24      	ldr	r3, [pc, #144]	@ (800ced8 <HAL_RCC_OscConfig+0x244>)
 800ce48:	685b      	ldr	r3, [r3, #4]
 800ce4a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	691b      	ldr	r3, [r3, #16]
 800ce52:	061b      	lsls	r3, r3, #24
 800ce54:	4920      	ldr	r1, [pc, #128]	@ (800ced8 <HAL_RCC_OscConfig+0x244>)
 800ce56:	4313      	orrs	r3, r2
 800ce58:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ce5a:	e045      	b.n	800cee8 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	68db      	ldr	r3, [r3, #12]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d026      	beq.n	800ceb2 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800ce64:	4b1c      	ldr	r3, [pc, #112]	@ (800ced8 <HAL_RCC_OscConfig+0x244>)
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	f023 0219 	bic.w	r2, r3, #25
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	68db      	ldr	r3, [r3, #12]
 800ce70:	4919      	ldr	r1, [pc, #100]	@ (800ced8 <HAL_RCC_OscConfig+0x244>)
 800ce72:	4313      	orrs	r3, r2
 800ce74:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ce76:	f7f9 fe97 	bl	8006ba8 <HAL_GetTick>
 800ce7a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ce7c:	e008      	b.n	800ce90 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ce7e:	f7f9 fe93 	bl	8006ba8 <HAL_GetTick>
 800ce82:	4602      	mov	r2, r0
 800ce84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce86:	1ad3      	subs	r3, r2, r3
 800ce88:	2b02      	cmp	r3, #2
 800ce8a:	d901      	bls.n	800ce90 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800ce8c:	2303      	movs	r3, #3
 800ce8e:	e2d3      	b.n	800d438 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ce90:	4b11      	ldr	r3, [pc, #68]	@ (800ced8 <HAL_RCC_OscConfig+0x244>)
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	f003 0304 	and.w	r3, r3, #4
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d0f0      	beq.n	800ce7e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ce9c:	4b0e      	ldr	r3, [pc, #56]	@ (800ced8 <HAL_RCC_OscConfig+0x244>)
 800ce9e:	685b      	ldr	r3, [r3, #4]
 800cea0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	691b      	ldr	r3, [r3, #16]
 800cea8:	061b      	lsls	r3, r3, #24
 800ceaa:	490b      	ldr	r1, [pc, #44]	@ (800ced8 <HAL_RCC_OscConfig+0x244>)
 800ceac:	4313      	orrs	r3, r2
 800ceae:	604b      	str	r3, [r1, #4]
 800ceb0:	e01a      	b.n	800cee8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ceb2:	4b09      	ldr	r3, [pc, #36]	@ (800ced8 <HAL_RCC_OscConfig+0x244>)
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	4a08      	ldr	r2, [pc, #32]	@ (800ced8 <HAL_RCC_OscConfig+0x244>)
 800ceb8:	f023 0301 	bic.w	r3, r3, #1
 800cebc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cebe:	f7f9 fe73 	bl	8006ba8 <HAL_GetTick>
 800cec2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800cec4:	e00a      	b.n	800cedc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cec6:	f7f9 fe6f 	bl	8006ba8 <HAL_GetTick>
 800ceca:	4602      	mov	r2, r0
 800cecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cece:	1ad3      	subs	r3, r2, r3
 800ced0:	2b02      	cmp	r3, #2
 800ced2:	d903      	bls.n	800cedc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800ced4:	2303      	movs	r3, #3
 800ced6:	e2af      	b.n	800d438 <HAL_RCC_OscConfig+0x7a4>
 800ced8:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800cedc:	4b96      	ldr	r3, [pc, #600]	@ (800d138 <HAL_RCC_OscConfig+0x4a4>)
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	f003 0304 	and.w	r3, r3, #4
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d1ee      	bne.n	800cec6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	f003 0310 	and.w	r3, r3, #16
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d06a      	beq.n	800cfca <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cef4:	4b90      	ldr	r3, [pc, #576]	@ (800d138 <HAL_RCC_OscConfig+0x4a4>)
 800cef6:	691b      	ldr	r3, [r3, #16]
 800cef8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cefc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800cefe:	4b8e      	ldr	r3, [pc, #568]	@ (800d138 <HAL_RCC_OscConfig+0x4a4>)
 800cf00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf02:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800cf04:	69bb      	ldr	r3, [r7, #24]
 800cf06:	2b08      	cmp	r3, #8
 800cf08:	d007      	beq.n	800cf1a <HAL_RCC_OscConfig+0x286>
 800cf0a:	69bb      	ldr	r3, [r7, #24]
 800cf0c:	2b18      	cmp	r3, #24
 800cf0e:	d11b      	bne.n	800cf48 <HAL_RCC_OscConfig+0x2b4>
 800cf10:	697b      	ldr	r3, [r7, #20]
 800cf12:	f003 0303 	and.w	r3, r3, #3
 800cf16:	2b01      	cmp	r3, #1
 800cf18:	d116      	bne.n	800cf48 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800cf1a:	4b87      	ldr	r3, [pc, #540]	@ (800d138 <HAL_RCC_OscConfig+0x4a4>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d005      	beq.n	800cf32 <HAL_RCC_OscConfig+0x29e>
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	69db      	ldr	r3, [r3, #28]
 800cf2a:	2b80      	cmp	r3, #128	@ 0x80
 800cf2c:	d001      	beq.n	800cf32 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800cf2e:	2301      	movs	r3, #1
 800cf30:	e282      	b.n	800d438 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800cf32:	4b81      	ldr	r3, [pc, #516]	@ (800d138 <HAL_RCC_OscConfig+0x4a4>)
 800cf34:	68db      	ldr	r3, [r3, #12]
 800cf36:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	6a1b      	ldr	r3, [r3, #32]
 800cf3e:	061b      	lsls	r3, r3, #24
 800cf40:	497d      	ldr	r1, [pc, #500]	@ (800d138 <HAL_RCC_OscConfig+0x4a4>)
 800cf42:	4313      	orrs	r3, r2
 800cf44:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800cf46:	e040      	b.n	800cfca <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	69db      	ldr	r3, [r3, #28]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d023      	beq.n	800cf98 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800cf50:	4b79      	ldr	r3, [pc, #484]	@ (800d138 <HAL_RCC_OscConfig+0x4a4>)
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	4a78      	ldr	r2, [pc, #480]	@ (800d138 <HAL_RCC_OscConfig+0x4a4>)
 800cf56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cf5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cf5c:	f7f9 fe24 	bl	8006ba8 <HAL_GetTick>
 800cf60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800cf62:	e008      	b.n	800cf76 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800cf64:	f7f9 fe20 	bl	8006ba8 <HAL_GetTick>
 800cf68:	4602      	mov	r2, r0
 800cf6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf6c:	1ad3      	subs	r3, r2, r3
 800cf6e:	2b02      	cmp	r3, #2
 800cf70:	d901      	bls.n	800cf76 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800cf72:	2303      	movs	r3, #3
 800cf74:	e260      	b.n	800d438 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800cf76:	4b70      	ldr	r3, [pc, #448]	@ (800d138 <HAL_RCC_OscConfig+0x4a4>)
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d0f0      	beq.n	800cf64 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800cf82:	4b6d      	ldr	r3, [pc, #436]	@ (800d138 <HAL_RCC_OscConfig+0x4a4>)
 800cf84:	68db      	ldr	r3, [r3, #12]
 800cf86:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	6a1b      	ldr	r3, [r3, #32]
 800cf8e:	061b      	lsls	r3, r3, #24
 800cf90:	4969      	ldr	r1, [pc, #420]	@ (800d138 <HAL_RCC_OscConfig+0x4a4>)
 800cf92:	4313      	orrs	r3, r2
 800cf94:	60cb      	str	r3, [r1, #12]
 800cf96:	e018      	b.n	800cfca <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800cf98:	4b67      	ldr	r3, [pc, #412]	@ (800d138 <HAL_RCC_OscConfig+0x4a4>)
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	4a66      	ldr	r2, [pc, #408]	@ (800d138 <HAL_RCC_OscConfig+0x4a4>)
 800cf9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cfa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cfa4:	f7f9 fe00 	bl	8006ba8 <HAL_GetTick>
 800cfa8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800cfaa:	e008      	b.n	800cfbe <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800cfac:	f7f9 fdfc 	bl	8006ba8 <HAL_GetTick>
 800cfb0:	4602      	mov	r2, r0
 800cfb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfb4:	1ad3      	subs	r3, r2, r3
 800cfb6:	2b02      	cmp	r3, #2
 800cfb8:	d901      	bls.n	800cfbe <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800cfba:	2303      	movs	r3, #3
 800cfbc:	e23c      	b.n	800d438 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800cfbe:	4b5e      	ldr	r3, [pc, #376]	@ (800d138 <HAL_RCC_OscConfig+0x4a4>)
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d1f0      	bne.n	800cfac <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	f003 0308 	and.w	r3, r3, #8
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d036      	beq.n	800d044 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	695b      	ldr	r3, [r3, #20]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d019      	beq.n	800d012 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cfde:	4b56      	ldr	r3, [pc, #344]	@ (800d138 <HAL_RCC_OscConfig+0x4a4>)
 800cfe0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cfe2:	4a55      	ldr	r2, [pc, #340]	@ (800d138 <HAL_RCC_OscConfig+0x4a4>)
 800cfe4:	f043 0301 	orr.w	r3, r3, #1
 800cfe8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cfea:	f7f9 fddd 	bl	8006ba8 <HAL_GetTick>
 800cfee:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800cff0:	e008      	b.n	800d004 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cff2:	f7f9 fdd9 	bl	8006ba8 <HAL_GetTick>
 800cff6:	4602      	mov	r2, r0
 800cff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cffa:	1ad3      	subs	r3, r2, r3
 800cffc:	2b02      	cmp	r3, #2
 800cffe:	d901      	bls.n	800d004 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800d000:	2303      	movs	r3, #3
 800d002:	e219      	b.n	800d438 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800d004:	4b4c      	ldr	r3, [pc, #304]	@ (800d138 <HAL_RCC_OscConfig+0x4a4>)
 800d006:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d008:	f003 0302 	and.w	r3, r3, #2
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d0f0      	beq.n	800cff2 <HAL_RCC_OscConfig+0x35e>
 800d010:	e018      	b.n	800d044 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d012:	4b49      	ldr	r3, [pc, #292]	@ (800d138 <HAL_RCC_OscConfig+0x4a4>)
 800d014:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d016:	4a48      	ldr	r2, [pc, #288]	@ (800d138 <HAL_RCC_OscConfig+0x4a4>)
 800d018:	f023 0301 	bic.w	r3, r3, #1
 800d01c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d01e:	f7f9 fdc3 	bl	8006ba8 <HAL_GetTick>
 800d022:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800d024:	e008      	b.n	800d038 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d026:	f7f9 fdbf 	bl	8006ba8 <HAL_GetTick>
 800d02a:	4602      	mov	r2, r0
 800d02c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d02e:	1ad3      	subs	r3, r2, r3
 800d030:	2b02      	cmp	r3, #2
 800d032:	d901      	bls.n	800d038 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800d034:	2303      	movs	r3, #3
 800d036:	e1ff      	b.n	800d438 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800d038:	4b3f      	ldr	r3, [pc, #252]	@ (800d138 <HAL_RCC_OscConfig+0x4a4>)
 800d03a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d03c:	f003 0302 	and.w	r3, r3, #2
 800d040:	2b00      	cmp	r3, #0
 800d042:	d1f0      	bne.n	800d026 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	f003 0320 	and.w	r3, r3, #32
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d036      	beq.n	800d0be <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	699b      	ldr	r3, [r3, #24]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d019      	beq.n	800d08c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800d058:	4b37      	ldr	r3, [pc, #220]	@ (800d138 <HAL_RCC_OscConfig+0x4a4>)
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	4a36      	ldr	r2, [pc, #216]	@ (800d138 <HAL_RCC_OscConfig+0x4a4>)
 800d05e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800d062:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800d064:	f7f9 fda0 	bl	8006ba8 <HAL_GetTick>
 800d068:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800d06a:	e008      	b.n	800d07e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d06c:	f7f9 fd9c 	bl	8006ba8 <HAL_GetTick>
 800d070:	4602      	mov	r2, r0
 800d072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d074:	1ad3      	subs	r3, r2, r3
 800d076:	2b02      	cmp	r3, #2
 800d078:	d901      	bls.n	800d07e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800d07a:	2303      	movs	r3, #3
 800d07c:	e1dc      	b.n	800d438 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800d07e:	4b2e      	ldr	r3, [pc, #184]	@ (800d138 <HAL_RCC_OscConfig+0x4a4>)
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d086:	2b00      	cmp	r3, #0
 800d088:	d0f0      	beq.n	800d06c <HAL_RCC_OscConfig+0x3d8>
 800d08a:	e018      	b.n	800d0be <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800d08c:	4b2a      	ldr	r3, [pc, #168]	@ (800d138 <HAL_RCC_OscConfig+0x4a4>)
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	4a29      	ldr	r2, [pc, #164]	@ (800d138 <HAL_RCC_OscConfig+0x4a4>)
 800d092:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d096:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800d098:	f7f9 fd86 	bl	8006ba8 <HAL_GetTick>
 800d09c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800d09e:	e008      	b.n	800d0b2 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d0a0:	f7f9 fd82 	bl	8006ba8 <HAL_GetTick>
 800d0a4:	4602      	mov	r2, r0
 800d0a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0a8:	1ad3      	subs	r3, r2, r3
 800d0aa:	2b02      	cmp	r3, #2
 800d0ac:	d901      	bls.n	800d0b2 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800d0ae:	2303      	movs	r3, #3
 800d0b0:	e1c2      	b.n	800d438 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800d0b2:	4b21      	ldr	r3, [pc, #132]	@ (800d138 <HAL_RCC_OscConfig+0x4a4>)
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d1f0      	bne.n	800d0a0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	f003 0304 	and.w	r3, r3, #4
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	f000 8086 	beq.w	800d1d8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800d0cc:	4b1b      	ldr	r3, [pc, #108]	@ (800d13c <HAL_RCC_OscConfig+0x4a8>)
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	4a1a      	ldr	r2, [pc, #104]	@ (800d13c <HAL_RCC_OscConfig+0x4a8>)
 800d0d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d0d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d0d8:	f7f9 fd66 	bl	8006ba8 <HAL_GetTick>
 800d0dc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d0de:	e008      	b.n	800d0f2 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d0e0:	f7f9 fd62 	bl	8006ba8 <HAL_GetTick>
 800d0e4:	4602      	mov	r2, r0
 800d0e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0e8:	1ad3      	subs	r3, r2, r3
 800d0ea:	2b64      	cmp	r3, #100	@ 0x64
 800d0ec:	d901      	bls.n	800d0f2 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800d0ee:	2303      	movs	r3, #3
 800d0f0:	e1a2      	b.n	800d438 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d0f2:	4b12      	ldr	r3, [pc, #72]	@ (800d13c <HAL_RCC_OscConfig+0x4a8>)
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d0f0      	beq.n	800d0e0 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	689b      	ldr	r3, [r3, #8]
 800d102:	2b01      	cmp	r3, #1
 800d104:	d106      	bne.n	800d114 <HAL_RCC_OscConfig+0x480>
 800d106:	4b0c      	ldr	r3, [pc, #48]	@ (800d138 <HAL_RCC_OscConfig+0x4a4>)
 800d108:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d10a:	4a0b      	ldr	r2, [pc, #44]	@ (800d138 <HAL_RCC_OscConfig+0x4a4>)
 800d10c:	f043 0301 	orr.w	r3, r3, #1
 800d110:	6713      	str	r3, [r2, #112]	@ 0x70
 800d112:	e032      	b.n	800d17a <HAL_RCC_OscConfig+0x4e6>
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	689b      	ldr	r3, [r3, #8]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d111      	bne.n	800d140 <HAL_RCC_OscConfig+0x4ac>
 800d11c:	4b06      	ldr	r3, [pc, #24]	@ (800d138 <HAL_RCC_OscConfig+0x4a4>)
 800d11e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d120:	4a05      	ldr	r2, [pc, #20]	@ (800d138 <HAL_RCC_OscConfig+0x4a4>)
 800d122:	f023 0301 	bic.w	r3, r3, #1
 800d126:	6713      	str	r3, [r2, #112]	@ 0x70
 800d128:	4b03      	ldr	r3, [pc, #12]	@ (800d138 <HAL_RCC_OscConfig+0x4a4>)
 800d12a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d12c:	4a02      	ldr	r2, [pc, #8]	@ (800d138 <HAL_RCC_OscConfig+0x4a4>)
 800d12e:	f023 0304 	bic.w	r3, r3, #4
 800d132:	6713      	str	r3, [r2, #112]	@ 0x70
 800d134:	e021      	b.n	800d17a <HAL_RCC_OscConfig+0x4e6>
 800d136:	bf00      	nop
 800d138:	58024400 	.word	0x58024400
 800d13c:	58024800 	.word	0x58024800
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	689b      	ldr	r3, [r3, #8]
 800d144:	2b05      	cmp	r3, #5
 800d146:	d10c      	bne.n	800d162 <HAL_RCC_OscConfig+0x4ce>
 800d148:	4b83      	ldr	r3, [pc, #524]	@ (800d358 <HAL_RCC_OscConfig+0x6c4>)
 800d14a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d14c:	4a82      	ldr	r2, [pc, #520]	@ (800d358 <HAL_RCC_OscConfig+0x6c4>)
 800d14e:	f043 0304 	orr.w	r3, r3, #4
 800d152:	6713      	str	r3, [r2, #112]	@ 0x70
 800d154:	4b80      	ldr	r3, [pc, #512]	@ (800d358 <HAL_RCC_OscConfig+0x6c4>)
 800d156:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d158:	4a7f      	ldr	r2, [pc, #508]	@ (800d358 <HAL_RCC_OscConfig+0x6c4>)
 800d15a:	f043 0301 	orr.w	r3, r3, #1
 800d15e:	6713      	str	r3, [r2, #112]	@ 0x70
 800d160:	e00b      	b.n	800d17a <HAL_RCC_OscConfig+0x4e6>
 800d162:	4b7d      	ldr	r3, [pc, #500]	@ (800d358 <HAL_RCC_OscConfig+0x6c4>)
 800d164:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d166:	4a7c      	ldr	r2, [pc, #496]	@ (800d358 <HAL_RCC_OscConfig+0x6c4>)
 800d168:	f023 0301 	bic.w	r3, r3, #1
 800d16c:	6713      	str	r3, [r2, #112]	@ 0x70
 800d16e:	4b7a      	ldr	r3, [pc, #488]	@ (800d358 <HAL_RCC_OscConfig+0x6c4>)
 800d170:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d172:	4a79      	ldr	r2, [pc, #484]	@ (800d358 <HAL_RCC_OscConfig+0x6c4>)
 800d174:	f023 0304 	bic.w	r3, r3, #4
 800d178:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	689b      	ldr	r3, [r3, #8]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d015      	beq.n	800d1ae <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d182:	f7f9 fd11 	bl	8006ba8 <HAL_GetTick>
 800d186:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d188:	e00a      	b.n	800d1a0 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d18a:	f7f9 fd0d 	bl	8006ba8 <HAL_GetTick>
 800d18e:	4602      	mov	r2, r0
 800d190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d192:	1ad3      	subs	r3, r2, r3
 800d194:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d198:	4293      	cmp	r3, r2
 800d19a:	d901      	bls.n	800d1a0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800d19c:	2303      	movs	r3, #3
 800d19e:	e14b      	b.n	800d438 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d1a0:	4b6d      	ldr	r3, [pc, #436]	@ (800d358 <HAL_RCC_OscConfig+0x6c4>)
 800d1a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d1a4:	f003 0302 	and.w	r3, r3, #2
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d0ee      	beq.n	800d18a <HAL_RCC_OscConfig+0x4f6>
 800d1ac:	e014      	b.n	800d1d8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d1ae:	f7f9 fcfb 	bl	8006ba8 <HAL_GetTick>
 800d1b2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800d1b4:	e00a      	b.n	800d1cc <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d1b6:	f7f9 fcf7 	bl	8006ba8 <HAL_GetTick>
 800d1ba:	4602      	mov	r2, r0
 800d1bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1be:	1ad3      	subs	r3, r2, r3
 800d1c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d1c4:	4293      	cmp	r3, r2
 800d1c6:	d901      	bls.n	800d1cc <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800d1c8:	2303      	movs	r3, #3
 800d1ca:	e135      	b.n	800d438 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800d1cc:	4b62      	ldr	r3, [pc, #392]	@ (800d358 <HAL_RCC_OscConfig+0x6c4>)
 800d1ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d1d0:	f003 0302 	and.w	r3, r3, #2
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d1ee      	bne.n	800d1b6 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	f000 812a 	beq.w	800d436 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800d1e2:	4b5d      	ldr	r3, [pc, #372]	@ (800d358 <HAL_RCC_OscConfig+0x6c4>)
 800d1e4:	691b      	ldr	r3, [r3, #16]
 800d1e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d1ea:	2b18      	cmp	r3, #24
 800d1ec:	f000 80ba 	beq.w	800d364 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1f4:	2b02      	cmp	r3, #2
 800d1f6:	f040 8095 	bne.w	800d324 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d1fa:	4b57      	ldr	r3, [pc, #348]	@ (800d358 <HAL_RCC_OscConfig+0x6c4>)
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	4a56      	ldr	r2, [pc, #344]	@ (800d358 <HAL_RCC_OscConfig+0x6c4>)
 800d200:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d204:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d206:	f7f9 fccf 	bl	8006ba8 <HAL_GetTick>
 800d20a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d20c:	e008      	b.n	800d220 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d20e:	f7f9 fccb 	bl	8006ba8 <HAL_GetTick>
 800d212:	4602      	mov	r2, r0
 800d214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d216:	1ad3      	subs	r3, r2, r3
 800d218:	2b02      	cmp	r3, #2
 800d21a:	d901      	bls.n	800d220 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800d21c:	2303      	movs	r3, #3
 800d21e:	e10b      	b.n	800d438 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d220:	4b4d      	ldr	r3, [pc, #308]	@ (800d358 <HAL_RCC_OscConfig+0x6c4>)
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d1f0      	bne.n	800d20e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d22c:	4b4a      	ldr	r3, [pc, #296]	@ (800d358 <HAL_RCC_OscConfig+0x6c4>)
 800d22e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d230:	4b4a      	ldr	r3, [pc, #296]	@ (800d35c <HAL_RCC_OscConfig+0x6c8>)
 800d232:	4013      	ands	r3, r2
 800d234:	687a      	ldr	r2, [r7, #4]
 800d236:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800d238:	687a      	ldr	r2, [r7, #4]
 800d23a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800d23c:	0112      	lsls	r2, r2, #4
 800d23e:	430a      	orrs	r2, r1
 800d240:	4945      	ldr	r1, [pc, #276]	@ (800d358 <HAL_RCC_OscConfig+0x6c4>)
 800d242:	4313      	orrs	r3, r2
 800d244:	628b      	str	r3, [r1, #40]	@ 0x28
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d24a:	3b01      	subs	r3, #1
 800d24c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d254:	3b01      	subs	r3, #1
 800d256:	025b      	lsls	r3, r3, #9
 800d258:	b29b      	uxth	r3, r3
 800d25a:	431a      	orrs	r2, r3
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d260:	3b01      	subs	r3, #1
 800d262:	041b      	lsls	r3, r3, #16
 800d264:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800d268:	431a      	orrs	r2, r3
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d26e:	3b01      	subs	r3, #1
 800d270:	061b      	lsls	r3, r3, #24
 800d272:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800d276:	4938      	ldr	r1, [pc, #224]	@ (800d358 <HAL_RCC_OscConfig+0x6c4>)
 800d278:	4313      	orrs	r3, r2
 800d27a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800d27c:	4b36      	ldr	r3, [pc, #216]	@ (800d358 <HAL_RCC_OscConfig+0x6c4>)
 800d27e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d280:	4a35      	ldr	r2, [pc, #212]	@ (800d358 <HAL_RCC_OscConfig+0x6c4>)
 800d282:	f023 0301 	bic.w	r3, r3, #1
 800d286:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800d288:	4b33      	ldr	r3, [pc, #204]	@ (800d358 <HAL_RCC_OscConfig+0x6c4>)
 800d28a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d28c:	4b34      	ldr	r3, [pc, #208]	@ (800d360 <HAL_RCC_OscConfig+0x6cc>)
 800d28e:	4013      	ands	r3, r2
 800d290:	687a      	ldr	r2, [r7, #4]
 800d292:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800d294:	00d2      	lsls	r2, r2, #3
 800d296:	4930      	ldr	r1, [pc, #192]	@ (800d358 <HAL_RCC_OscConfig+0x6c4>)
 800d298:	4313      	orrs	r3, r2
 800d29a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800d29c:	4b2e      	ldr	r3, [pc, #184]	@ (800d358 <HAL_RCC_OscConfig+0x6c4>)
 800d29e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2a0:	f023 020c 	bic.w	r2, r3, #12
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d2a8:	492b      	ldr	r1, [pc, #172]	@ (800d358 <HAL_RCC_OscConfig+0x6c4>)
 800d2aa:	4313      	orrs	r3, r2
 800d2ac:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800d2ae:	4b2a      	ldr	r3, [pc, #168]	@ (800d358 <HAL_RCC_OscConfig+0x6c4>)
 800d2b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2b2:	f023 0202 	bic.w	r2, r3, #2
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d2ba:	4927      	ldr	r1, [pc, #156]	@ (800d358 <HAL_RCC_OscConfig+0x6c4>)
 800d2bc:	4313      	orrs	r3, r2
 800d2be:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800d2c0:	4b25      	ldr	r3, [pc, #148]	@ (800d358 <HAL_RCC_OscConfig+0x6c4>)
 800d2c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2c4:	4a24      	ldr	r2, [pc, #144]	@ (800d358 <HAL_RCC_OscConfig+0x6c4>)
 800d2c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d2ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d2cc:	4b22      	ldr	r3, [pc, #136]	@ (800d358 <HAL_RCC_OscConfig+0x6c4>)
 800d2ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2d0:	4a21      	ldr	r2, [pc, #132]	@ (800d358 <HAL_RCC_OscConfig+0x6c4>)
 800d2d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d2d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800d2d8:	4b1f      	ldr	r3, [pc, #124]	@ (800d358 <HAL_RCC_OscConfig+0x6c4>)
 800d2da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2dc:	4a1e      	ldr	r2, [pc, #120]	@ (800d358 <HAL_RCC_OscConfig+0x6c4>)
 800d2de:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d2e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800d2e4:	4b1c      	ldr	r3, [pc, #112]	@ (800d358 <HAL_RCC_OscConfig+0x6c4>)
 800d2e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2e8:	4a1b      	ldr	r2, [pc, #108]	@ (800d358 <HAL_RCC_OscConfig+0x6c4>)
 800d2ea:	f043 0301 	orr.w	r3, r3, #1
 800d2ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d2f0:	4b19      	ldr	r3, [pc, #100]	@ (800d358 <HAL_RCC_OscConfig+0x6c4>)
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	4a18      	ldr	r2, [pc, #96]	@ (800d358 <HAL_RCC_OscConfig+0x6c4>)
 800d2f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d2fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d2fc:	f7f9 fc54 	bl	8006ba8 <HAL_GetTick>
 800d300:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d302:	e008      	b.n	800d316 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d304:	f7f9 fc50 	bl	8006ba8 <HAL_GetTick>
 800d308:	4602      	mov	r2, r0
 800d30a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d30c:	1ad3      	subs	r3, r2, r3
 800d30e:	2b02      	cmp	r3, #2
 800d310:	d901      	bls.n	800d316 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800d312:	2303      	movs	r3, #3
 800d314:	e090      	b.n	800d438 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d316:	4b10      	ldr	r3, [pc, #64]	@ (800d358 <HAL_RCC_OscConfig+0x6c4>)
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d0f0      	beq.n	800d304 <HAL_RCC_OscConfig+0x670>
 800d322:	e088      	b.n	800d436 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d324:	4b0c      	ldr	r3, [pc, #48]	@ (800d358 <HAL_RCC_OscConfig+0x6c4>)
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	4a0b      	ldr	r2, [pc, #44]	@ (800d358 <HAL_RCC_OscConfig+0x6c4>)
 800d32a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d32e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d330:	f7f9 fc3a 	bl	8006ba8 <HAL_GetTick>
 800d334:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d336:	e008      	b.n	800d34a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d338:	f7f9 fc36 	bl	8006ba8 <HAL_GetTick>
 800d33c:	4602      	mov	r2, r0
 800d33e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d340:	1ad3      	subs	r3, r2, r3
 800d342:	2b02      	cmp	r3, #2
 800d344:	d901      	bls.n	800d34a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800d346:	2303      	movs	r3, #3
 800d348:	e076      	b.n	800d438 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d34a:	4b03      	ldr	r3, [pc, #12]	@ (800d358 <HAL_RCC_OscConfig+0x6c4>)
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d352:	2b00      	cmp	r3, #0
 800d354:	d1f0      	bne.n	800d338 <HAL_RCC_OscConfig+0x6a4>
 800d356:	e06e      	b.n	800d436 <HAL_RCC_OscConfig+0x7a2>
 800d358:	58024400 	.word	0x58024400
 800d35c:	fffffc0c 	.word	0xfffffc0c
 800d360:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800d364:	4b36      	ldr	r3, [pc, #216]	@ (800d440 <HAL_RCC_OscConfig+0x7ac>)
 800d366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d368:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800d36a:	4b35      	ldr	r3, [pc, #212]	@ (800d440 <HAL_RCC_OscConfig+0x7ac>)
 800d36c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d36e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d374:	2b01      	cmp	r3, #1
 800d376:	d031      	beq.n	800d3dc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d378:	693b      	ldr	r3, [r7, #16]
 800d37a:	f003 0203 	and.w	r2, r3, #3
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d382:	429a      	cmp	r2, r3
 800d384:	d12a      	bne.n	800d3dc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d386:	693b      	ldr	r3, [r7, #16]
 800d388:	091b      	lsrs	r3, r3, #4
 800d38a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d392:	429a      	cmp	r2, r3
 800d394:	d122      	bne.n	800d3dc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d3a0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d3a2:	429a      	cmp	r2, r3
 800d3a4:	d11a      	bne.n	800d3dc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	0a5b      	lsrs	r3, r3, #9
 800d3aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d3b2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d3b4:	429a      	cmp	r2, r3
 800d3b6:	d111      	bne.n	800d3dc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	0c1b      	lsrs	r3, r3, #16
 800d3bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d3c4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d3c6:	429a      	cmp	r2, r3
 800d3c8:	d108      	bne.n	800d3dc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	0e1b      	lsrs	r3, r3, #24
 800d3ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d3d6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d3d8:	429a      	cmp	r2, r3
 800d3da:	d001      	beq.n	800d3e0 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800d3dc:	2301      	movs	r3, #1
 800d3de:	e02b      	b.n	800d438 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800d3e0:	4b17      	ldr	r3, [pc, #92]	@ (800d440 <HAL_RCC_OscConfig+0x7ac>)
 800d3e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d3e4:	08db      	lsrs	r3, r3, #3
 800d3e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d3ea:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d3f0:	693a      	ldr	r2, [r7, #16]
 800d3f2:	429a      	cmp	r2, r3
 800d3f4:	d01f      	beq.n	800d436 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800d3f6:	4b12      	ldr	r3, [pc, #72]	@ (800d440 <HAL_RCC_OscConfig+0x7ac>)
 800d3f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3fa:	4a11      	ldr	r2, [pc, #68]	@ (800d440 <HAL_RCC_OscConfig+0x7ac>)
 800d3fc:	f023 0301 	bic.w	r3, r3, #1
 800d400:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800d402:	f7f9 fbd1 	bl	8006ba8 <HAL_GetTick>
 800d406:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800d408:	bf00      	nop
 800d40a:	f7f9 fbcd 	bl	8006ba8 <HAL_GetTick>
 800d40e:	4602      	mov	r2, r0
 800d410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d412:	4293      	cmp	r3, r2
 800d414:	d0f9      	beq.n	800d40a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800d416:	4b0a      	ldr	r3, [pc, #40]	@ (800d440 <HAL_RCC_OscConfig+0x7ac>)
 800d418:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d41a:	4b0a      	ldr	r3, [pc, #40]	@ (800d444 <HAL_RCC_OscConfig+0x7b0>)
 800d41c:	4013      	ands	r3, r2
 800d41e:	687a      	ldr	r2, [r7, #4]
 800d420:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800d422:	00d2      	lsls	r2, r2, #3
 800d424:	4906      	ldr	r1, [pc, #24]	@ (800d440 <HAL_RCC_OscConfig+0x7ac>)
 800d426:	4313      	orrs	r3, r2
 800d428:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800d42a:	4b05      	ldr	r3, [pc, #20]	@ (800d440 <HAL_RCC_OscConfig+0x7ac>)
 800d42c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d42e:	4a04      	ldr	r2, [pc, #16]	@ (800d440 <HAL_RCC_OscConfig+0x7ac>)
 800d430:	f043 0301 	orr.w	r3, r3, #1
 800d434:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800d436:	2300      	movs	r3, #0
}
 800d438:	4618      	mov	r0, r3
 800d43a:	3730      	adds	r7, #48	@ 0x30
 800d43c:	46bd      	mov	sp, r7
 800d43e:	bd80      	pop	{r7, pc}
 800d440:	58024400 	.word	0x58024400
 800d444:	ffff0007 	.word	0xffff0007

0800d448 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b086      	sub	sp, #24
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
 800d450:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d101      	bne.n	800d45c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d458:	2301      	movs	r3, #1
 800d45a:	e19c      	b.n	800d796 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d45c:	4b8a      	ldr	r3, [pc, #552]	@ (800d688 <HAL_RCC_ClockConfig+0x240>)
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	f003 030f 	and.w	r3, r3, #15
 800d464:	683a      	ldr	r2, [r7, #0]
 800d466:	429a      	cmp	r2, r3
 800d468:	d910      	bls.n	800d48c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d46a:	4b87      	ldr	r3, [pc, #540]	@ (800d688 <HAL_RCC_ClockConfig+0x240>)
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	f023 020f 	bic.w	r2, r3, #15
 800d472:	4985      	ldr	r1, [pc, #532]	@ (800d688 <HAL_RCC_ClockConfig+0x240>)
 800d474:	683b      	ldr	r3, [r7, #0]
 800d476:	4313      	orrs	r3, r2
 800d478:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d47a:	4b83      	ldr	r3, [pc, #524]	@ (800d688 <HAL_RCC_ClockConfig+0x240>)
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	f003 030f 	and.w	r3, r3, #15
 800d482:	683a      	ldr	r2, [r7, #0]
 800d484:	429a      	cmp	r2, r3
 800d486:	d001      	beq.n	800d48c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800d488:	2301      	movs	r3, #1
 800d48a:	e184      	b.n	800d796 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	f003 0304 	and.w	r3, r3, #4
 800d494:	2b00      	cmp	r3, #0
 800d496:	d010      	beq.n	800d4ba <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	691a      	ldr	r2, [r3, #16]
 800d49c:	4b7b      	ldr	r3, [pc, #492]	@ (800d68c <HAL_RCC_ClockConfig+0x244>)
 800d49e:	699b      	ldr	r3, [r3, #24]
 800d4a0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d4a4:	429a      	cmp	r2, r3
 800d4a6:	d908      	bls.n	800d4ba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800d4a8:	4b78      	ldr	r3, [pc, #480]	@ (800d68c <HAL_RCC_ClockConfig+0x244>)
 800d4aa:	699b      	ldr	r3, [r3, #24]
 800d4ac:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	691b      	ldr	r3, [r3, #16]
 800d4b4:	4975      	ldr	r1, [pc, #468]	@ (800d68c <HAL_RCC_ClockConfig+0x244>)
 800d4b6:	4313      	orrs	r3, r2
 800d4b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	f003 0308 	and.w	r3, r3, #8
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d010      	beq.n	800d4e8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	695a      	ldr	r2, [r3, #20]
 800d4ca:	4b70      	ldr	r3, [pc, #448]	@ (800d68c <HAL_RCC_ClockConfig+0x244>)
 800d4cc:	69db      	ldr	r3, [r3, #28]
 800d4ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d4d2:	429a      	cmp	r2, r3
 800d4d4:	d908      	bls.n	800d4e8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800d4d6:	4b6d      	ldr	r3, [pc, #436]	@ (800d68c <HAL_RCC_ClockConfig+0x244>)
 800d4d8:	69db      	ldr	r3, [r3, #28]
 800d4da:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	695b      	ldr	r3, [r3, #20]
 800d4e2:	496a      	ldr	r1, [pc, #424]	@ (800d68c <HAL_RCC_ClockConfig+0x244>)
 800d4e4:	4313      	orrs	r3, r2
 800d4e6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	f003 0310 	and.w	r3, r3, #16
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d010      	beq.n	800d516 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	699a      	ldr	r2, [r3, #24]
 800d4f8:	4b64      	ldr	r3, [pc, #400]	@ (800d68c <HAL_RCC_ClockConfig+0x244>)
 800d4fa:	69db      	ldr	r3, [r3, #28]
 800d4fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d500:	429a      	cmp	r2, r3
 800d502:	d908      	bls.n	800d516 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800d504:	4b61      	ldr	r3, [pc, #388]	@ (800d68c <HAL_RCC_ClockConfig+0x244>)
 800d506:	69db      	ldr	r3, [r3, #28]
 800d508:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	699b      	ldr	r3, [r3, #24]
 800d510:	495e      	ldr	r1, [pc, #376]	@ (800d68c <HAL_RCC_ClockConfig+0x244>)
 800d512:	4313      	orrs	r3, r2
 800d514:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	f003 0320 	and.w	r3, r3, #32
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d010      	beq.n	800d544 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	69da      	ldr	r2, [r3, #28]
 800d526:	4b59      	ldr	r3, [pc, #356]	@ (800d68c <HAL_RCC_ClockConfig+0x244>)
 800d528:	6a1b      	ldr	r3, [r3, #32]
 800d52a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d52e:	429a      	cmp	r2, r3
 800d530:	d908      	bls.n	800d544 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800d532:	4b56      	ldr	r3, [pc, #344]	@ (800d68c <HAL_RCC_ClockConfig+0x244>)
 800d534:	6a1b      	ldr	r3, [r3, #32]
 800d536:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	69db      	ldr	r3, [r3, #28]
 800d53e:	4953      	ldr	r1, [pc, #332]	@ (800d68c <HAL_RCC_ClockConfig+0x244>)
 800d540:	4313      	orrs	r3, r2
 800d542:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	f003 0302 	and.w	r3, r3, #2
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d010      	beq.n	800d572 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	68da      	ldr	r2, [r3, #12]
 800d554:	4b4d      	ldr	r3, [pc, #308]	@ (800d68c <HAL_RCC_ClockConfig+0x244>)
 800d556:	699b      	ldr	r3, [r3, #24]
 800d558:	f003 030f 	and.w	r3, r3, #15
 800d55c:	429a      	cmp	r2, r3
 800d55e:	d908      	bls.n	800d572 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d560:	4b4a      	ldr	r3, [pc, #296]	@ (800d68c <HAL_RCC_ClockConfig+0x244>)
 800d562:	699b      	ldr	r3, [r3, #24]
 800d564:	f023 020f 	bic.w	r2, r3, #15
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	68db      	ldr	r3, [r3, #12]
 800d56c:	4947      	ldr	r1, [pc, #284]	@ (800d68c <HAL_RCC_ClockConfig+0x244>)
 800d56e:	4313      	orrs	r3, r2
 800d570:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	f003 0301 	and.w	r3, r3, #1
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d055      	beq.n	800d62a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800d57e:	4b43      	ldr	r3, [pc, #268]	@ (800d68c <HAL_RCC_ClockConfig+0x244>)
 800d580:	699b      	ldr	r3, [r3, #24]
 800d582:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	689b      	ldr	r3, [r3, #8]
 800d58a:	4940      	ldr	r1, [pc, #256]	@ (800d68c <HAL_RCC_ClockConfig+0x244>)
 800d58c:	4313      	orrs	r3, r2
 800d58e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	685b      	ldr	r3, [r3, #4]
 800d594:	2b02      	cmp	r3, #2
 800d596:	d107      	bne.n	800d5a8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d598:	4b3c      	ldr	r3, [pc, #240]	@ (800d68c <HAL_RCC_ClockConfig+0x244>)
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d121      	bne.n	800d5e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d5a4:	2301      	movs	r3, #1
 800d5a6:	e0f6      	b.n	800d796 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	685b      	ldr	r3, [r3, #4]
 800d5ac:	2b03      	cmp	r3, #3
 800d5ae:	d107      	bne.n	800d5c0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d5b0:	4b36      	ldr	r3, [pc, #216]	@ (800d68c <HAL_RCC_ClockConfig+0x244>)
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d115      	bne.n	800d5e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d5bc:	2301      	movs	r3, #1
 800d5be:	e0ea      	b.n	800d796 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	685b      	ldr	r3, [r3, #4]
 800d5c4:	2b01      	cmp	r3, #1
 800d5c6:	d107      	bne.n	800d5d8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d5c8:	4b30      	ldr	r3, [pc, #192]	@ (800d68c <HAL_RCC_ClockConfig+0x244>)
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d109      	bne.n	800d5e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d5d4:	2301      	movs	r3, #1
 800d5d6:	e0de      	b.n	800d796 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d5d8:	4b2c      	ldr	r3, [pc, #176]	@ (800d68c <HAL_RCC_ClockConfig+0x244>)
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	f003 0304 	and.w	r3, r3, #4
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d101      	bne.n	800d5e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d5e4:	2301      	movs	r3, #1
 800d5e6:	e0d6      	b.n	800d796 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d5e8:	4b28      	ldr	r3, [pc, #160]	@ (800d68c <HAL_RCC_ClockConfig+0x244>)
 800d5ea:	691b      	ldr	r3, [r3, #16]
 800d5ec:	f023 0207 	bic.w	r2, r3, #7
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	685b      	ldr	r3, [r3, #4]
 800d5f4:	4925      	ldr	r1, [pc, #148]	@ (800d68c <HAL_RCC_ClockConfig+0x244>)
 800d5f6:	4313      	orrs	r3, r2
 800d5f8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d5fa:	f7f9 fad5 	bl	8006ba8 <HAL_GetTick>
 800d5fe:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d600:	e00a      	b.n	800d618 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d602:	f7f9 fad1 	bl	8006ba8 <HAL_GetTick>
 800d606:	4602      	mov	r2, r0
 800d608:	697b      	ldr	r3, [r7, #20]
 800d60a:	1ad3      	subs	r3, r2, r3
 800d60c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d610:	4293      	cmp	r3, r2
 800d612:	d901      	bls.n	800d618 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800d614:	2303      	movs	r3, #3
 800d616:	e0be      	b.n	800d796 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d618:	4b1c      	ldr	r3, [pc, #112]	@ (800d68c <HAL_RCC_ClockConfig+0x244>)
 800d61a:	691b      	ldr	r3, [r3, #16]
 800d61c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	685b      	ldr	r3, [r3, #4]
 800d624:	00db      	lsls	r3, r3, #3
 800d626:	429a      	cmp	r2, r3
 800d628:	d1eb      	bne.n	800d602 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	f003 0302 	and.w	r3, r3, #2
 800d632:	2b00      	cmp	r3, #0
 800d634:	d010      	beq.n	800d658 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	68da      	ldr	r2, [r3, #12]
 800d63a:	4b14      	ldr	r3, [pc, #80]	@ (800d68c <HAL_RCC_ClockConfig+0x244>)
 800d63c:	699b      	ldr	r3, [r3, #24]
 800d63e:	f003 030f 	and.w	r3, r3, #15
 800d642:	429a      	cmp	r2, r3
 800d644:	d208      	bcs.n	800d658 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d646:	4b11      	ldr	r3, [pc, #68]	@ (800d68c <HAL_RCC_ClockConfig+0x244>)
 800d648:	699b      	ldr	r3, [r3, #24]
 800d64a:	f023 020f 	bic.w	r2, r3, #15
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	68db      	ldr	r3, [r3, #12]
 800d652:	490e      	ldr	r1, [pc, #56]	@ (800d68c <HAL_RCC_ClockConfig+0x244>)
 800d654:	4313      	orrs	r3, r2
 800d656:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d658:	4b0b      	ldr	r3, [pc, #44]	@ (800d688 <HAL_RCC_ClockConfig+0x240>)
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	f003 030f 	and.w	r3, r3, #15
 800d660:	683a      	ldr	r2, [r7, #0]
 800d662:	429a      	cmp	r2, r3
 800d664:	d214      	bcs.n	800d690 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d666:	4b08      	ldr	r3, [pc, #32]	@ (800d688 <HAL_RCC_ClockConfig+0x240>)
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	f023 020f 	bic.w	r2, r3, #15
 800d66e:	4906      	ldr	r1, [pc, #24]	@ (800d688 <HAL_RCC_ClockConfig+0x240>)
 800d670:	683b      	ldr	r3, [r7, #0]
 800d672:	4313      	orrs	r3, r2
 800d674:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d676:	4b04      	ldr	r3, [pc, #16]	@ (800d688 <HAL_RCC_ClockConfig+0x240>)
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	f003 030f 	and.w	r3, r3, #15
 800d67e:	683a      	ldr	r2, [r7, #0]
 800d680:	429a      	cmp	r2, r3
 800d682:	d005      	beq.n	800d690 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800d684:	2301      	movs	r3, #1
 800d686:	e086      	b.n	800d796 <HAL_RCC_ClockConfig+0x34e>
 800d688:	52002000 	.word	0x52002000
 800d68c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	f003 0304 	and.w	r3, r3, #4
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d010      	beq.n	800d6be <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	691a      	ldr	r2, [r3, #16]
 800d6a0:	4b3f      	ldr	r3, [pc, #252]	@ (800d7a0 <HAL_RCC_ClockConfig+0x358>)
 800d6a2:	699b      	ldr	r3, [r3, #24]
 800d6a4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d6a8:	429a      	cmp	r2, r3
 800d6aa:	d208      	bcs.n	800d6be <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800d6ac:	4b3c      	ldr	r3, [pc, #240]	@ (800d7a0 <HAL_RCC_ClockConfig+0x358>)
 800d6ae:	699b      	ldr	r3, [r3, #24]
 800d6b0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	691b      	ldr	r3, [r3, #16]
 800d6b8:	4939      	ldr	r1, [pc, #228]	@ (800d7a0 <HAL_RCC_ClockConfig+0x358>)
 800d6ba:	4313      	orrs	r3, r2
 800d6bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	f003 0308 	and.w	r3, r3, #8
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d010      	beq.n	800d6ec <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	695a      	ldr	r2, [r3, #20]
 800d6ce:	4b34      	ldr	r3, [pc, #208]	@ (800d7a0 <HAL_RCC_ClockConfig+0x358>)
 800d6d0:	69db      	ldr	r3, [r3, #28]
 800d6d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d6d6:	429a      	cmp	r2, r3
 800d6d8:	d208      	bcs.n	800d6ec <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800d6da:	4b31      	ldr	r3, [pc, #196]	@ (800d7a0 <HAL_RCC_ClockConfig+0x358>)
 800d6dc:	69db      	ldr	r3, [r3, #28]
 800d6de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	695b      	ldr	r3, [r3, #20]
 800d6e6:	492e      	ldr	r1, [pc, #184]	@ (800d7a0 <HAL_RCC_ClockConfig+0x358>)
 800d6e8:	4313      	orrs	r3, r2
 800d6ea:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	f003 0310 	and.w	r3, r3, #16
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d010      	beq.n	800d71a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	699a      	ldr	r2, [r3, #24]
 800d6fc:	4b28      	ldr	r3, [pc, #160]	@ (800d7a0 <HAL_RCC_ClockConfig+0x358>)
 800d6fe:	69db      	ldr	r3, [r3, #28]
 800d700:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d704:	429a      	cmp	r2, r3
 800d706:	d208      	bcs.n	800d71a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800d708:	4b25      	ldr	r3, [pc, #148]	@ (800d7a0 <HAL_RCC_ClockConfig+0x358>)
 800d70a:	69db      	ldr	r3, [r3, #28]
 800d70c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	699b      	ldr	r3, [r3, #24]
 800d714:	4922      	ldr	r1, [pc, #136]	@ (800d7a0 <HAL_RCC_ClockConfig+0x358>)
 800d716:	4313      	orrs	r3, r2
 800d718:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	f003 0320 	and.w	r3, r3, #32
 800d722:	2b00      	cmp	r3, #0
 800d724:	d010      	beq.n	800d748 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	69da      	ldr	r2, [r3, #28]
 800d72a:	4b1d      	ldr	r3, [pc, #116]	@ (800d7a0 <HAL_RCC_ClockConfig+0x358>)
 800d72c:	6a1b      	ldr	r3, [r3, #32]
 800d72e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d732:	429a      	cmp	r2, r3
 800d734:	d208      	bcs.n	800d748 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800d736:	4b1a      	ldr	r3, [pc, #104]	@ (800d7a0 <HAL_RCC_ClockConfig+0x358>)
 800d738:	6a1b      	ldr	r3, [r3, #32]
 800d73a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	69db      	ldr	r3, [r3, #28]
 800d742:	4917      	ldr	r1, [pc, #92]	@ (800d7a0 <HAL_RCC_ClockConfig+0x358>)
 800d744:	4313      	orrs	r3, r2
 800d746:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800d748:	f000 f834 	bl	800d7b4 <HAL_RCC_GetSysClockFreq>
 800d74c:	4602      	mov	r2, r0
 800d74e:	4b14      	ldr	r3, [pc, #80]	@ (800d7a0 <HAL_RCC_ClockConfig+0x358>)
 800d750:	699b      	ldr	r3, [r3, #24]
 800d752:	0a1b      	lsrs	r3, r3, #8
 800d754:	f003 030f 	and.w	r3, r3, #15
 800d758:	4912      	ldr	r1, [pc, #72]	@ (800d7a4 <HAL_RCC_ClockConfig+0x35c>)
 800d75a:	5ccb      	ldrb	r3, [r1, r3]
 800d75c:	f003 031f 	and.w	r3, r3, #31
 800d760:	fa22 f303 	lsr.w	r3, r2, r3
 800d764:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d766:	4b0e      	ldr	r3, [pc, #56]	@ (800d7a0 <HAL_RCC_ClockConfig+0x358>)
 800d768:	699b      	ldr	r3, [r3, #24]
 800d76a:	f003 030f 	and.w	r3, r3, #15
 800d76e:	4a0d      	ldr	r2, [pc, #52]	@ (800d7a4 <HAL_RCC_ClockConfig+0x35c>)
 800d770:	5cd3      	ldrb	r3, [r2, r3]
 800d772:	f003 031f 	and.w	r3, r3, #31
 800d776:	693a      	ldr	r2, [r7, #16]
 800d778:	fa22 f303 	lsr.w	r3, r2, r3
 800d77c:	4a0a      	ldr	r2, [pc, #40]	@ (800d7a8 <HAL_RCC_ClockConfig+0x360>)
 800d77e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800d780:	4a0a      	ldr	r2, [pc, #40]	@ (800d7ac <HAL_RCC_ClockConfig+0x364>)
 800d782:	693b      	ldr	r3, [r7, #16]
 800d784:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800d786:	4b0a      	ldr	r3, [pc, #40]	@ (800d7b0 <HAL_RCC_ClockConfig+0x368>)
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	4618      	mov	r0, r3
 800d78c:	f7f7 fdb2 	bl	80052f4 <HAL_InitTick>
 800d790:	4603      	mov	r3, r0
 800d792:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800d794:	7bfb      	ldrb	r3, [r7, #15]
}
 800d796:	4618      	mov	r0, r3
 800d798:	3718      	adds	r7, #24
 800d79a:	46bd      	mov	sp, r7
 800d79c:	bd80      	pop	{r7, pc}
 800d79e:	bf00      	nop
 800d7a0:	58024400 	.word	0x58024400
 800d7a4:	0801f97c 	.word	0x0801f97c
 800d7a8:	2400001c 	.word	0x2400001c
 800d7ac:	24000018 	.word	0x24000018
 800d7b0:	24000020 	.word	0x24000020

0800d7b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d7b4:	b480      	push	{r7}
 800d7b6:	b089      	sub	sp, #36	@ 0x24
 800d7b8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d7ba:	4bb3      	ldr	r3, [pc, #716]	@ (800da88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d7bc:	691b      	ldr	r3, [r3, #16]
 800d7be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d7c2:	2b18      	cmp	r3, #24
 800d7c4:	f200 8155 	bhi.w	800da72 <HAL_RCC_GetSysClockFreq+0x2be>
 800d7c8:	a201      	add	r2, pc, #4	@ (adr r2, 800d7d0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800d7ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7ce:	bf00      	nop
 800d7d0:	0800d835 	.word	0x0800d835
 800d7d4:	0800da73 	.word	0x0800da73
 800d7d8:	0800da73 	.word	0x0800da73
 800d7dc:	0800da73 	.word	0x0800da73
 800d7e0:	0800da73 	.word	0x0800da73
 800d7e4:	0800da73 	.word	0x0800da73
 800d7e8:	0800da73 	.word	0x0800da73
 800d7ec:	0800da73 	.word	0x0800da73
 800d7f0:	0800d85b 	.word	0x0800d85b
 800d7f4:	0800da73 	.word	0x0800da73
 800d7f8:	0800da73 	.word	0x0800da73
 800d7fc:	0800da73 	.word	0x0800da73
 800d800:	0800da73 	.word	0x0800da73
 800d804:	0800da73 	.word	0x0800da73
 800d808:	0800da73 	.word	0x0800da73
 800d80c:	0800da73 	.word	0x0800da73
 800d810:	0800d861 	.word	0x0800d861
 800d814:	0800da73 	.word	0x0800da73
 800d818:	0800da73 	.word	0x0800da73
 800d81c:	0800da73 	.word	0x0800da73
 800d820:	0800da73 	.word	0x0800da73
 800d824:	0800da73 	.word	0x0800da73
 800d828:	0800da73 	.word	0x0800da73
 800d82c:	0800da73 	.word	0x0800da73
 800d830:	0800d867 	.word	0x0800d867
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d834:	4b94      	ldr	r3, [pc, #592]	@ (800da88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	f003 0320 	and.w	r3, r3, #32
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d009      	beq.n	800d854 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d840:	4b91      	ldr	r3, [pc, #580]	@ (800da88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	08db      	lsrs	r3, r3, #3
 800d846:	f003 0303 	and.w	r3, r3, #3
 800d84a:	4a90      	ldr	r2, [pc, #576]	@ (800da8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d84c:	fa22 f303 	lsr.w	r3, r2, r3
 800d850:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800d852:	e111      	b.n	800da78 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800d854:	4b8d      	ldr	r3, [pc, #564]	@ (800da8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d856:	61bb      	str	r3, [r7, #24]
      break;
 800d858:	e10e      	b.n	800da78 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800d85a:	4b8d      	ldr	r3, [pc, #564]	@ (800da90 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800d85c:	61bb      	str	r3, [r7, #24]
      break;
 800d85e:	e10b      	b.n	800da78 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800d860:	4b8c      	ldr	r3, [pc, #560]	@ (800da94 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800d862:	61bb      	str	r3, [r7, #24]
      break;
 800d864:	e108      	b.n	800da78 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d866:	4b88      	ldr	r3, [pc, #544]	@ (800da88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d86a:	f003 0303 	and.w	r3, r3, #3
 800d86e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800d870:	4b85      	ldr	r3, [pc, #532]	@ (800da88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d874:	091b      	lsrs	r3, r3, #4
 800d876:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d87a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800d87c:	4b82      	ldr	r3, [pc, #520]	@ (800da88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d87e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d880:	f003 0301 	and.w	r3, r3, #1
 800d884:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d886:	4b80      	ldr	r3, [pc, #512]	@ (800da88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d888:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d88a:	08db      	lsrs	r3, r3, #3
 800d88c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d890:	68fa      	ldr	r2, [r7, #12]
 800d892:	fb02 f303 	mul.w	r3, r2, r3
 800d896:	ee07 3a90 	vmov	s15, r3
 800d89a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d89e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800d8a2:	693b      	ldr	r3, [r7, #16]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	f000 80e1 	beq.w	800da6c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800d8aa:	697b      	ldr	r3, [r7, #20]
 800d8ac:	2b02      	cmp	r3, #2
 800d8ae:	f000 8083 	beq.w	800d9b8 <HAL_RCC_GetSysClockFreq+0x204>
 800d8b2:	697b      	ldr	r3, [r7, #20]
 800d8b4:	2b02      	cmp	r3, #2
 800d8b6:	f200 80a1 	bhi.w	800d9fc <HAL_RCC_GetSysClockFreq+0x248>
 800d8ba:	697b      	ldr	r3, [r7, #20]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d003      	beq.n	800d8c8 <HAL_RCC_GetSysClockFreq+0x114>
 800d8c0:	697b      	ldr	r3, [r7, #20]
 800d8c2:	2b01      	cmp	r3, #1
 800d8c4:	d056      	beq.n	800d974 <HAL_RCC_GetSysClockFreq+0x1c0>
 800d8c6:	e099      	b.n	800d9fc <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d8c8:	4b6f      	ldr	r3, [pc, #444]	@ (800da88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	f003 0320 	and.w	r3, r3, #32
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d02d      	beq.n	800d930 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d8d4:	4b6c      	ldr	r3, [pc, #432]	@ (800da88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	08db      	lsrs	r3, r3, #3
 800d8da:	f003 0303 	and.w	r3, r3, #3
 800d8de:	4a6b      	ldr	r2, [pc, #428]	@ (800da8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d8e0:	fa22 f303 	lsr.w	r3, r2, r3
 800d8e4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	ee07 3a90 	vmov	s15, r3
 800d8ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d8f0:	693b      	ldr	r3, [r7, #16]
 800d8f2:	ee07 3a90 	vmov	s15, r3
 800d8f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d8fe:	4b62      	ldr	r3, [pc, #392]	@ (800da88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d906:	ee07 3a90 	vmov	s15, r3
 800d90a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d90e:	ed97 6a02 	vldr	s12, [r7, #8]
 800d912:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800da98 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d916:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d91a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d91e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d922:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d92a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800d92e:	e087      	b.n	800da40 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d930:	693b      	ldr	r3, [r7, #16]
 800d932:	ee07 3a90 	vmov	s15, r3
 800d936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d93a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800da9c <HAL_RCC_GetSysClockFreq+0x2e8>
 800d93e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d942:	4b51      	ldr	r3, [pc, #324]	@ (800da88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d94a:	ee07 3a90 	vmov	s15, r3
 800d94e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d952:	ed97 6a02 	vldr	s12, [r7, #8]
 800d956:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800da98 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d95a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d95e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d962:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d966:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d96a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d96e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d972:	e065      	b.n	800da40 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d974:	693b      	ldr	r3, [r7, #16]
 800d976:	ee07 3a90 	vmov	s15, r3
 800d97a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d97e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800daa0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800d982:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d986:	4b40      	ldr	r3, [pc, #256]	@ (800da88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d98a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d98e:	ee07 3a90 	vmov	s15, r3
 800d992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d996:	ed97 6a02 	vldr	s12, [r7, #8]
 800d99a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800da98 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d99e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d9a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d9a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d9aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d9ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d9b6:	e043      	b.n	800da40 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d9b8:	693b      	ldr	r3, [r7, #16]
 800d9ba:	ee07 3a90 	vmov	s15, r3
 800d9be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9c2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800daa4 <HAL_RCC_GetSysClockFreq+0x2f0>
 800d9c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d9ca:	4b2f      	ldr	r3, [pc, #188]	@ (800da88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d9cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d9ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9d2:	ee07 3a90 	vmov	s15, r3
 800d9d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d9da:	ed97 6a02 	vldr	s12, [r7, #8]
 800d9de:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800da98 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d9e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d9e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d9ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d9ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d9f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d9fa:	e021      	b.n	800da40 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d9fc:	693b      	ldr	r3, [r7, #16]
 800d9fe:	ee07 3a90 	vmov	s15, r3
 800da02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da06:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800daa0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800da0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da0e:	4b1e      	ldr	r3, [pc, #120]	@ (800da88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800da10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800da12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da16:	ee07 3a90 	vmov	s15, r3
 800da1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da1e:	ed97 6a02 	vldr	s12, [r7, #8]
 800da22:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800da98 <HAL_RCC_GetSysClockFreq+0x2e4>
 800da26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800da32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da3a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800da3e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800da40:	4b11      	ldr	r3, [pc, #68]	@ (800da88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800da42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800da44:	0a5b      	lsrs	r3, r3, #9
 800da46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800da4a:	3301      	adds	r3, #1
 800da4c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800da4e:	683b      	ldr	r3, [r7, #0]
 800da50:	ee07 3a90 	vmov	s15, r3
 800da54:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800da58:	edd7 6a07 	vldr	s13, [r7, #28]
 800da5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800da60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da64:	ee17 3a90 	vmov	r3, s15
 800da68:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800da6a:	e005      	b.n	800da78 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800da6c:	2300      	movs	r3, #0
 800da6e:	61bb      	str	r3, [r7, #24]
      break;
 800da70:	e002      	b.n	800da78 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800da72:	4b07      	ldr	r3, [pc, #28]	@ (800da90 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800da74:	61bb      	str	r3, [r7, #24]
      break;
 800da76:	bf00      	nop
  }

  return sysclockfreq;
 800da78:	69bb      	ldr	r3, [r7, #24]
}
 800da7a:	4618      	mov	r0, r3
 800da7c:	3724      	adds	r7, #36	@ 0x24
 800da7e:	46bd      	mov	sp, r7
 800da80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da84:	4770      	bx	lr
 800da86:	bf00      	nop
 800da88:	58024400 	.word	0x58024400
 800da8c:	03d09000 	.word	0x03d09000
 800da90:	003d0900 	.word	0x003d0900
 800da94:	017d7840 	.word	0x017d7840
 800da98:	46000000 	.word	0x46000000
 800da9c:	4c742400 	.word	0x4c742400
 800daa0:	4a742400 	.word	0x4a742400
 800daa4:	4bbebc20 	.word	0x4bbebc20

0800daa8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b082      	sub	sp, #8
 800daac:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800daae:	f7ff fe81 	bl	800d7b4 <HAL_RCC_GetSysClockFreq>
 800dab2:	4602      	mov	r2, r0
 800dab4:	4b10      	ldr	r3, [pc, #64]	@ (800daf8 <HAL_RCC_GetHCLKFreq+0x50>)
 800dab6:	699b      	ldr	r3, [r3, #24]
 800dab8:	0a1b      	lsrs	r3, r3, #8
 800daba:	f003 030f 	and.w	r3, r3, #15
 800dabe:	490f      	ldr	r1, [pc, #60]	@ (800dafc <HAL_RCC_GetHCLKFreq+0x54>)
 800dac0:	5ccb      	ldrb	r3, [r1, r3]
 800dac2:	f003 031f 	and.w	r3, r3, #31
 800dac6:	fa22 f303 	lsr.w	r3, r2, r3
 800daca:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800dacc:	4b0a      	ldr	r3, [pc, #40]	@ (800daf8 <HAL_RCC_GetHCLKFreq+0x50>)
 800dace:	699b      	ldr	r3, [r3, #24]
 800dad0:	f003 030f 	and.w	r3, r3, #15
 800dad4:	4a09      	ldr	r2, [pc, #36]	@ (800dafc <HAL_RCC_GetHCLKFreq+0x54>)
 800dad6:	5cd3      	ldrb	r3, [r2, r3]
 800dad8:	f003 031f 	and.w	r3, r3, #31
 800dadc:	687a      	ldr	r2, [r7, #4]
 800dade:	fa22 f303 	lsr.w	r3, r2, r3
 800dae2:	4a07      	ldr	r2, [pc, #28]	@ (800db00 <HAL_RCC_GetHCLKFreq+0x58>)
 800dae4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800dae6:	4a07      	ldr	r2, [pc, #28]	@ (800db04 <HAL_RCC_GetHCLKFreq+0x5c>)
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800daec:	4b04      	ldr	r3, [pc, #16]	@ (800db00 <HAL_RCC_GetHCLKFreq+0x58>)
 800daee:	681b      	ldr	r3, [r3, #0]
}
 800daf0:	4618      	mov	r0, r3
 800daf2:	3708      	adds	r7, #8
 800daf4:	46bd      	mov	sp, r7
 800daf6:	bd80      	pop	{r7, pc}
 800daf8:	58024400 	.word	0x58024400
 800dafc:	0801f97c 	.word	0x0801f97c
 800db00:	2400001c 	.word	0x2400001c
 800db04:	24000018 	.word	0x24000018

0800db08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800db0c:	f7ff ffcc 	bl	800daa8 <HAL_RCC_GetHCLKFreq>
 800db10:	4602      	mov	r2, r0
 800db12:	4b06      	ldr	r3, [pc, #24]	@ (800db2c <HAL_RCC_GetPCLK1Freq+0x24>)
 800db14:	69db      	ldr	r3, [r3, #28]
 800db16:	091b      	lsrs	r3, r3, #4
 800db18:	f003 0307 	and.w	r3, r3, #7
 800db1c:	4904      	ldr	r1, [pc, #16]	@ (800db30 <HAL_RCC_GetPCLK1Freq+0x28>)
 800db1e:	5ccb      	ldrb	r3, [r1, r3]
 800db20:	f003 031f 	and.w	r3, r3, #31
 800db24:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800db28:	4618      	mov	r0, r3
 800db2a:	bd80      	pop	{r7, pc}
 800db2c:	58024400 	.word	0x58024400
 800db30:	0801f97c 	.word	0x0801f97c

0800db34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800db34:	b580      	push	{r7, lr}
 800db36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800db38:	f7ff ffb6 	bl	800daa8 <HAL_RCC_GetHCLKFreq>
 800db3c:	4602      	mov	r2, r0
 800db3e:	4b06      	ldr	r3, [pc, #24]	@ (800db58 <HAL_RCC_GetPCLK2Freq+0x24>)
 800db40:	69db      	ldr	r3, [r3, #28]
 800db42:	0a1b      	lsrs	r3, r3, #8
 800db44:	f003 0307 	and.w	r3, r3, #7
 800db48:	4904      	ldr	r1, [pc, #16]	@ (800db5c <HAL_RCC_GetPCLK2Freq+0x28>)
 800db4a:	5ccb      	ldrb	r3, [r1, r3]
 800db4c:	f003 031f 	and.w	r3, r3, #31
 800db50:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800db54:	4618      	mov	r0, r3
 800db56:	bd80      	pop	{r7, pc}
 800db58:	58024400 	.word	0x58024400
 800db5c:	0801f97c 	.word	0x0801f97c

0800db60 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800db60:	b480      	push	{r7}
 800db62:	b083      	sub	sp, #12
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
 800db68:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	223f      	movs	r2, #63	@ 0x3f
 800db6e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800db70:	4b1a      	ldr	r3, [pc, #104]	@ (800dbdc <HAL_RCC_GetClockConfig+0x7c>)
 800db72:	691b      	ldr	r3, [r3, #16]
 800db74:	f003 0207 	and.w	r2, r3, #7
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800db7c:	4b17      	ldr	r3, [pc, #92]	@ (800dbdc <HAL_RCC_GetClockConfig+0x7c>)
 800db7e:	699b      	ldr	r3, [r3, #24]
 800db80:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800db88:	4b14      	ldr	r3, [pc, #80]	@ (800dbdc <HAL_RCC_GetClockConfig+0x7c>)
 800db8a:	699b      	ldr	r3, [r3, #24]
 800db8c:	f003 020f 	and.w	r2, r3, #15
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800db94:	4b11      	ldr	r3, [pc, #68]	@ (800dbdc <HAL_RCC_GetClockConfig+0x7c>)
 800db96:	699b      	ldr	r3, [r3, #24]
 800db98:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800dba0:	4b0e      	ldr	r3, [pc, #56]	@ (800dbdc <HAL_RCC_GetClockConfig+0x7c>)
 800dba2:	69db      	ldr	r3, [r3, #28]
 800dba4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800dbac:	4b0b      	ldr	r3, [pc, #44]	@ (800dbdc <HAL_RCC_GetClockConfig+0x7c>)
 800dbae:	69db      	ldr	r3, [r3, #28]
 800dbb0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800dbb8:	4b08      	ldr	r3, [pc, #32]	@ (800dbdc <HAL_RCC_GetClockConfig+0x7c>)
 800dbba:	6a1b      	ldr	r3, [r3, #32]
 800dbbc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800dbc4:	4b06      	ldr	r3, [pc, #24]	@ (800dbe0 <HAL_RCC_GetClockConfig+0x80>)
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	f003 020f 	and.w	r2, r3, #15
 800dbcc:	683b      	ldr	r3, [r7, #0]
 800dbce:	601a      	str	r2, [r3, #0]
}
 800dbd0:	bf00      	nop
 800dbd2:	370c      	adds	r7, #12
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbda:	4770      	bx	lr
 800dbdc:	58024400 	.word	0x58024400
 800dbe0:	52002000 	.word	0x52002000

0800dbe4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800dbe4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dbe8:	b0c6      	sub	sp, #280	@ 0x118
 800dbea:	af00      	add	r7, sp, #0
 800dbec:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800dbfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc04:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800dc08:	2500      	movs	r5, #0
 800dc0a:	ea54 0305 	orrs.w	r3, r4, r5
 800dc0e:	d049      	beq.n	800dca4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800dc10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dc16:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800dc1a:	d02f      	beq.n	800dc7c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800dc1c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800dc20:	d828      	bhi.n	800dc74 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800dc22:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800dc26:	d01a      	beq.n	800dc5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800dc28:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800dc2c:	d822      	bhi.n	800dc74 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d003      	beq.n	800dc3a <HAL_RCCEx_PeriphCLKConfig+0x56>
 800dc32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dc36:	d007      	beq.n	800dc48 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800dc38:	e01c      	b.n	800dc74 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dc3a:	4bab      	ldr	r3, [pc, #684]	@ (800dee8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800dc3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc3e:	4aaa      	ldr	r2, [pc, #680]	@ (800dee8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800dc40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dc44:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800dc46:	e01a      	b.n	800dc7e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800dc48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc4c:	3308      	adds	r3, #8
 800dc4e:	2102      	movs	r1, #2
 800dc50:	4618      	mov	r0, r3
 800dc52:	f001 fc25 	bl	800f4a0 <RCCEx_PLL2_Config>
 800dc56:	4603      	mov	r3, r0
 800dc58:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800dc5c:	e00f      	b.n	800dc7e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800dc5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc62:	3328      	adds	r3, #40	@ 0x28
 800dc64:	2102      	movs	r1, #2
 800dc66:	4618      	mov	r0, r3
 800dc68:	f001 fccc 	bl	800f604 <RCCEx_PLL3_Config>
 800dc6c:	4603      	mov	r3, r0
 800dc6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800dc72:	e004      	b.n	800dc7e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dc74:	2301      	movs	r3, #1
 800dc76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800dc7a:	e000      	b.n	800dc7e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800dc7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dc7e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d10a      	bne.n	800dc9c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800dc86:	4b98      	ldr	r3, [pc, #608]	@ (800dee8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800dc88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dc8a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800dc8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dc94:	4a94      	ldr	r2, [pc, #592]	@ (800dee8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800dc96:	430b      	orrs	r3, r1
 800dc98:	6513      	str	r3, [r2, #80]	@ 0x50
 800dc9a:	e003      	b.n	800dca4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dc9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800dca0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800dca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcac:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800dcb0:	f04f 0900 	mov.w	r9, #0
 800dcb4:	ea58 0309 	orrs.w	r3, r8, r9
 800dcb8:	d047      	beq.n	800dd4a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800dcba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dcbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dcc0:	2b04      	cmp	r3, #4
 800dcc2:	d82a      	bhi.n	800dd1a <HAL_RCCEx_PeriphCLKConfig+0x136>
 800dcc4:	a201      	add	r2, pc, #4	@ (adr r2, 800dccc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800dcc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcca:	bf00      	nop
 800dccc:	0800dce1 	.word	0x0800dce1
 800dcd0:	0800dcef 	.word	0x0800dcef
 800dcd4:	0800dd05 	.word	0x0800dd05
 800dcd8:	0800dd23 	.word	0x0800dd23
 800dcdc:	0800dd23 	.word	0x0800dd23
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dce0:	4b81      	ldr	r3, [pc, #516]	@ (800dee8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800dce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dce4:	4a80      	ldr	r2, [pc, #512]	@ (800dee8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800dce6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dcea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800dcec:	e01a      	b.n	800dd24 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800dcee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dcf2:	3308      	adds	r3, #8
 800dcf4:	2100      	movs	r1, #0
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	f001 fbd2 	bl	800f4a0 <RCCEx_PLL2_Config>
 800dcfc:	4603      	mov	r3, r0
 800dcfe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800dd02:	e00f      	b.n	800dd24 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800dd04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd08:	3328      	adds	r3, #40	@ 0x28
 800dd0a:	2100      	movs	r1, #0
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	f001 fc79 	bl	800f604 <RCCEx_PLL3_Config>
 800dd12:	4603      	mov	r3, r0
 800dd14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800dd18:	e004      	b.n	800dd24 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dd1a:	2301      	movs	r3, #1
 800dd1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800dd20:	e000      	b.n	800dd24 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800dd22:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dd24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d10a      	bne.n	800dd42 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800dd2c:	4b6e      	ldr	r3, [pc, #440]	@ (800dee8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800dd2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dd30:	f023 0107 	bic.w	r1, r3, #7
 800dd34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dd3a:	4a6b      	ldr	r2, [pc, #428]	@ (800dee8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800dd3c:	430b      	orrs	r3, r1
 800dd3e:	6513      	str	r3, [r2, #80]	@ 0x50
 800dd40:	e003      	b.n	800dd4a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dd42:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800dd46:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800dd4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd52:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800dd56:	f04f 0b00 	mov.w	fp, #0
 800dd5a:	ea5a 030b 	orrs.w	r3, sl, fp
 800dd5e:	d05b      	beq.n	800de18 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800dd60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd64:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800dd68:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800dd6c:	d03b      	beq.n	800dde6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800dd6e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800dd72:	d834      	bhi.n	800ddde <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800dd74:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800dd78:	d037      	beq.n	800ddea <HAL_RCCEx_PeriphCLKConfig+0x206>
 800dd7a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800dd7e:	d82e      	bhi.n	800ddde <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800dd80:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800dd84:	d033      	beq.n	800ddee <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800dd86:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800dd8a:	d828      	bhi.n	800ddde <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800dd8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800dd90:	d01a      	beq.n	800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800dd92:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800dd96:	d822      	bhi.n	800ddde <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d003      	beq.n	800dda4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800dd9c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800dda0:	d007      	beq.n	800ddb2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800dda2:	e01c      	b.n	800ddde <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dda4:	4b50      	ldr	r3, [pc, #320]	@ (800dee8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800dda6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dda8:	4a4f      	ldr	r2, [pc, #316]	@ (800dee8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ddaa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ddae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ddb0:	e01e      	b.n	800ddf0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ddb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ddb6:	3308      	adds	r3, #8
 800ddb8:	2100      	movs	r1, #0
 800ddba:	4618      	mov	r0, r3
 800ddbc:	f001 fb70 	bl	800f4a0 <RCCEx_PLL2_Config>
 800ddc0:	4603      	mov	r3, r0
 800ddc2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ddc6:	e013      	b.n	800ddf0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ddc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ddcc:	3328      	adds	r3, #40	@ 0x28
 800ddce:	2100      	movs	r1, #0
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	f001 fc17 	bl	800f604 <RCCEx_PLL3_Config>
 800ddd6:	4603      	mov	r3, r0
 800ddd8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800dddc:	e008      	b.n	800ddf0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ddde:	2301      	movs	r3, #1
 800dde0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800dde4:	e004      	b.n	800ddf0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800dde6:	bf00      	nop
 800dde8:	e002      	b.n	800ddf0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800ddea:	bf00      	nop
 800ddec:	e000      	b.n	800ddf0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800ddee:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ddf0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d10b      	bne.n	800de10 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800ddf8:	4b3b      	ldr	r3, [pc, #236]	@ (800dee8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ddfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ddfc:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800de00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de04:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800de08:	4a37      	ldr	r2, [pc, #220]	@ (800dee8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800de0a:	430b      	orrs	r3, r1
 800de0c:	6593      	str	r3, [r2, #88]	@ 0x58
 800de0e:	e003      	b.n	800de18 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800de10:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800de14:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800de18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de20:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800de24:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800de28:	2300      	movs	r3, #0
 800de2a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800de2e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800de32:	460b      	mov	r3, r1
 800de34:	4313      	orrs	r3, r2
 800de36:	d05d      	beq.n	800def4 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800de38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de3c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800de40:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800de44:	d03b      	beq.n	800debe <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800de46:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800de4a:	d834      	bhi.n	800deb6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800de4c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800de50:	d037      	beq.n	800dec2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800de52:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800de56:	d82e      	bhi.n	800deb6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800de58:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800de5c:	d033      	beq.n	800dec6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800de5e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800de62:	d828      	bhi.n	800deb6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800de64:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800de68:	d01a      	beq.n	800dea0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800de6a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800de6e:	d822      	bhi.n	800deb6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800de70:	2b00      	cmp	r3, #0
 800de72:	d003      	beq.n	800de7c <HAL_RCCEx_PeriphCLKConfig+0x298>
 800de74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800de78:	d007      	beq.n	800de8a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800de7a:	e01c      	b.n	800deb6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800de7c:	4b1a      	ldr	r3, [pc, #104]	@ (800dee8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800de7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de80:	4a19      	ldr	r2, [pc, #100]	@ (800dee8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800de82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800de86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800de88:	e01e      	b.n	800dec8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800de8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de8e:	3308      	adds	r3, #8
 800de90:	2100      	movs	r1, #0
 800de92:	4618      	mov	r0, r3
 800de94:	f001 fb04 	bl	800f4a0 <RCCEx_PLL2_Config>
 800de98:	4603      	mov	r3, r0
 800de9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800de9e:	e013      	b.n	800dec8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800dea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dea4:	3328      	adds	r3, #40	@ 0x28
 800dea6:	2100      	movs	r1, #0
 800dea8:	4618      	mov	r0, r3
 800deaa:	f001 fbab 	bl	800f604 <RCCEx_PLL3_Config>
 800deae:	4603      	mov	r3, r0
 800deb0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800deb4:	e008      	b.n	800dec8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800deb6:	2301      	movs	r3, #1
 800deb8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800debc:	e004      	b.n	800dec8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800debe:	bf00      	nop
 800dec0:	e002      	b.n	800dec8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800dec2:	bf00      	nop
 800dec4:	e000      	b.n	800dec8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800dec6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dec8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800decc:	2b00      	cmp	r3, #0
 800dece:	d10d      	bne.n	800deec <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800ded0:	4b05      	ldr	r3, [pc, #20]	@ (800dee8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ded2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ded4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800ded8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dedc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800dee0:	4a01      	ldr	r2, [pc, #4]	@ (800dee8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800dee2:	430b      	orrs	r3, r1
 800dee4:	6593      	str	r3, [r2, #88]	@ 0x58
 800dee6:	e005      	b.n	800def4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800dee8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800deec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800def0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800def4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800def8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800defc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800df00:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800df04:	2300      	movs	r3, #0
 800df06:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800df0a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800df0e:	460b      	mov	r3, r1
 800df10:	4313      	orrs	r3, r2
 800df12:	d03a      	beq.n	800df8a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800df14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800df1a:	2b30      	cmp	r3, #48	@ 0x30
 800df1c:	d01f      	beq.n	800df5e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800df1e:	2b30      	cmp	r3, #48	@ 0x30
 800df20:	d819      	bhi.n	800df56 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800df22:	2b20      	cmp	r3, #32
 800df24:	d00c      	beq.n	800df40 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800df26:	2b20      	cmp	r3, #32
 800df28:	d815      	bhi.n	800df56 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d019      	beq.n	800df62 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800df2e:	2b10      	cmp	r3, #16
 800df30:	d111      	bne.n	800df56 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800df32:	4baa      	ldr	r3, [pc, #680]	@ (800e1dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800df34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df36:	4aa9      	ldr	r2, [pc, #676]	@ (800e1dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800df38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800df3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800df3e:	e011      	b.n	800df64 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800df40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df44:	3308      	adds	r3, #8
 800df46:	2102      	movs	r1, #2
 800df48:	4618      	mov	r0, r3
 800df4a:	f001 faa9 	bl	800f4a0 <RCCEx_PLL2_Config>
 800df4e:	4603      	mov	r3, r0
 800df50:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800df54:	e006      	b.n	800df64 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800df56:	2301      	movs	r3, #1
 800df58:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800df5c:	e002      	b.n	800df64 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800df5e:	bf00      	nop
 800df60:	e000      	b.n	800df64 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800df62:	bf00      	nop
    }

    if (ret == HAL_OK)
 800df64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d10a      	bne.n	800df82 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800df6c:	4b9b      	ldr	r3, [pc, #620]	@ (800e1dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800df6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800df70:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800df74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800df7a:	4a98      	ldr	r2, [pc, #608]	@ (800e1dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800df7c:	430b      	orrs	r3, r1
 800df7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800df80:	e003      	b.n	800df8a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800df82:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800df86:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800df8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df92:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800df96:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800df9a:	2300      	movs	r3, #0
 800df9c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800dfa0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800dfa4:	460b      	mov	r3, r1
 800dfa6:	4313      	orrs	r3, r2
 800dfa8:	d051      	beq.n	800e04e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800dfaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dfae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dfb0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800dfb4:	d035      	beq.n	800e022 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800dfb6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800dfba:	d82e      	bhi.n	800e01a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800dfbc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800dfc0:	d031      	beq.n	800e026 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800dfc2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800dfc6:	d828      	bhi.n	800e01a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800dfc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dfcc:	d01a      	beq.n	800e004 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800dfce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dfd2:	d822      	bhi.n	800e01a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d003      	beq.n	800dfe0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800dfd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dfdc:	d007      	beq.n	800dfee <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800dfde:	e01c      	b.n	800e01a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dfe0:	4b7e      	ldr	r3, [pc, #504]	@ (800e1dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800dfe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfe4:	4a7d      	ldr	r2, [pc, #500]	@ (800e1dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800dfe6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dfea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800dfec:	e01c      	b.n	800e028 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800dfee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dff2:	3308      	adds	r3, #8
 800dff4:	2100      	movs	r1, #0
 800dff6:	4618      	mov	r0, r3
 800dff8:	f001 fa52 	bl	800f4a0 <RCCEx_PLL2_Config>
 800dffc:	4603      	mov	r3, r0
 800dffe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800e002:	e011      	b.n	800e028 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e004:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e008:	3328      	adds	r3, #40	@ 0x28
 800e00a:	2100      	movs	r1, #0
 800e00c:	4618      	mov	r0, r3
 800e00e:	f001 faf9 	bl	800f604 <RCCEx_PLL3_Config>
 800e012:	4603      	mov	r3, r0
 800e014:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800e018:	e006      	b.n	800e028 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e01a:	2301      	movs	r3, #1
 800e01c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e020:	e002      	b.n	800e028 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800e022:	bf00      	nop
 800e024:	e000      	b.n	800e028 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800e026:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e028:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d10a      	bne.n	800e046 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800e030:	4b6a      	ldr	r3, [pc, #424]	@ (800e1dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e032:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e034:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800e038:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e03c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e03e:	4a67      	ldr	r2, [pc, #412]	@ (800e1dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e040:	430b      	orrs	r3, r1
 800e042:	6513      	str	r3, [r2, #80]	@ 0x50
 800e044:	e003      	b.n	800e04e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e046:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e04a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800e04e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e052:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e056:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800e05a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e05e:	2300      	movs	r3, #0
 800e060:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800e064:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800e068:	460b      	mov	r3, r1
 800e06a:	4313      	orrs	r3, r2
 800e06c:	d053      	beq.n	800e116 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800e06e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e072:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e074:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e078:	d033      	beq.n	800e0e2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800e07a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e07e:	d82c      	bhi.n	800e0da <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800e080:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800e084:	d02f      	beq.n	800e0e6 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800e086:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800e08a:	d826      	bhi.n	800e0da <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800e08c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800e090:	d02b      	beq.n	800e0ea <HAL_RCCEx_PeriphCLKConfig+0x506>
 800e092:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800e096:	d820      	bhi.n	800e0da <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800e098:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e09c:	d012      	beq.n	800e0c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800e09e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e0a2:	d81a      	bhi.n	800e0da <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d022      	beq.n	800e0ee <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800e0a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e0ac:	d115      	bne.n	800e0da <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e0ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e0b2:	3308      	adds	r3, #8
 800e0b4:	2101      	movs	r1, #1
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	f001 f9f2 	bl	800f4a0 <RCCEx_PLL2_Config>
 800e0bc:	4603      	mov	r3, r0
 800e0be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800e0c2:	e015      	b.n	800e0f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e0c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e0c8:	3328      	adds	r3, #40	@ 0x28
 800e0ca:	2101      	movs	r1, #1
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	f001 fa99 	bl	800f604 <RCCEx_PLL3_Config>
 800e0d2:	4603      	mov	r3, r0
 800e0d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800e0d8:	e00a      	b.n	800e0f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e0da:	2301      	movs	r3, #1
 800e0dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e0e0:	e006      	b.n	800e0f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800e0e2:	bf00      	nop
 800e0e4:	e004      	b.n	800e0f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800e0e6:	bf00      	nop
 800e0e8:	e002      	b.n	800e0f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800e0ea:	bf00      	nop
 800e0ec:	e000      	b.n	800e0f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800e0ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e0f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d10a      	bne.n	800e10e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800e0f8:	4b38      	ldr	r3, [pc, #224]	@ (800e1dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e0fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e0fc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800e100:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e104:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e106:	4a35      	ldr	r2, [pc, #212]	@ (800e1dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e108:	430b      	orrs	r3, r1
 800e10a:	6513      	str	r3, [r2, #80]	@ 0x50
 800e10c:	e003      	b.n	800e116 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e10e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e112:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800e116:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e11a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e11e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800e122:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e126:	2300      	movs	r3, #0
 800e128:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800e12c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800e130:	460b      	mov	r3, r1
 800e132:	4313      	orrs	r3, r2
 800e134:	d058      	beq.n	800e1e8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800e136:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e13a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800e13e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e142:	d033      	beq.n	800e1ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800e144:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e148:	d82c      	bhi.n	800e1a4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800e14a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e14e:	d02f      	beq.n	800e1b0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800e150:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e154:	d826      	bhi.n	800e1a4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800e156:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e15a:	d02b      	beq.n	800e1b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800e15c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e160:	d820      	bhi.n	800e1a4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800e162:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e166:	d012      	beq.n	800e18e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800e168:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e16c:	d81a      	bhi.n	800e1a4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d022      	beq.n	800e1b8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800e172:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e176:	d115      	bne.n	800e1a4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e178:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e17c:	3308      	adds	r3, #8
 800e17e:	2101      	movs	r1, #1
 800e180:	4618      	mov	r0, r3
 800e182:	f001 f98d 	bl	800f4a0 <RCCEx_PLL2_Config>
 800e186:	4603      	mov	r3, r0
 800e188:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800e18c:	e015      	b.n	800e1ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e18e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e192:	3328      	adds	r3, #40	@ 0x28
 800e194:	2101      	movs	r1, #1
 800e196:	4618      	mov	r0, r3
 800e198:	f001 fa34 	bl	800f604 <RCCEx_PLL3_Config>
 800e19c:	4603      	mov	r3, r0
 800e19e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800e1a2:	e00a      	b.n	800e1ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800e1a4:	2301      	movs	r3, #1
 800e1a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e1aa:	e006      	b.n	800e1ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800e1ac:	bf00      	nop
 800e1ae:	e004      	b.n	800e1ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800e1b0:	bf00      	nop
 800e1b2:	e002      	b.n	800e1ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800e1b4:	bf00      	nop
 800e1b6:	e000      	b.n	800e1ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800e1b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e1ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d10e      	bne.n	800e1e0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800e1c2:	4b06      	ldr	r3, [pc, #24]	@ (800e1dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e1c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e1c6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800e1ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e1ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800e1d2:	4a02      	ldr	r2, [pc, #8]	@ (800e1dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e1d4:	430b      	orrs	r3, r1
 800e1d6:	6593      	str	r3, [r2, #88]	@ 0x58
 800e1d8:	e006      	b.n	800e1e8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800e1da:	bf00      	nop
 800e1dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e1e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e1e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800e1e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1f0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800e1f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800e1fe:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800e202:	460b      	mov	r3, r1
 800e204:	4313      	orrs	r3, r2
 800e206:	d037      	beq.n	800e278 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800e208:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e20c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e20e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e212:	d00e      	beq.n	800e232 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800e214:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e218:	d816      	bhi.n	800e248 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d018      	beq.n	800e250 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800e21e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e222:	d111      	bne.n	800e248 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e224:	4bc4      	ldr	r3, [pc, #784]	@ (800e538 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e228:	4ac3      	ldr	r2, [pc, #780]	@ (800e538 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e22a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e22e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800e230:	e00f      	b.n	800e252 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e232:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e236:	3308      	adds	r3, #8
 800e238:	2101      	movs	r1, #1
 800e23a:	4618      	mov	r0, r3
 800e23c:	f001 f930 	bl	800f4a0 <RCCEx_PLL2_Config>
 800e240:	4603      	mov	r3, r0
 800e242:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800e246:	e004      	b.n	800e252 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e248:	2301      	movs	r3, #1
 800e24a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e24e:	e000      	b.n	800e252 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800e250:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e252:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e256:	2b00      	cmp	r3, #0
 800e258:	d10a      	bne.n	800e270 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800e25a:	4bb7      	ldr	r3, [pc, #732]	@ (800e538 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e25c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e25e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800e262:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e266:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e268:	4ab3      	ldr	r2, [pc, #716]	@ (800e538 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e26a:	430b      	orrs	r3, r1
 800e26c:	6513      	str	r3, [r2, #80]	@ 0x50
 800e26e:	e003      	b.n	800e278 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e270:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e274:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800e278:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e280:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800e284:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e288:	2300      	movs	r3, #0
 800e28a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800e28e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800e292:	460b      	mov	r3, r1
 800e294:	4313      	orrs	r3, r2
 800e296:	d039      	beq.n	800e30c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800e298:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e29c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e29e:	2b03      	cmp	r3, #3
 800e2a0:	d81c      	bhi.n	800e2dc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800e2a2:	a201      	add	r2, pc, #4	@ (adr r2, 800e2a8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800e2a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2a8:	0800e2e5 	.word	0x0800e2e5
 800e2ac:	0800e2b9 	.word	0x0800e2b9
 800e2b0:	0800e2c7 	.word	0x0800e2c7
 800e2b4:	0800e2e5 	.word	0x0800e2e5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e2b8:	4b9f      	ldr	r3, [pc, #636]	@ (800e538 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e2ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2bc:	4a9e      	ldr	r2, [pc, #632]	@ (800e538 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e2be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e2c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800e2c4:	e00f      	b.n	800e2e6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e2c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e2ca:	3308      	adds	r3, #8
 800e2cc:	2102      	movs	r1, #2
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	f001 f8e6 	bl	800f4a0 <RCCEx_PLL2_Config>
 800e2d4:	4603      	mov	r3, r0
 800e2d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800e2da:	e004      	b.n	800e2e6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800e2dc:	2301      	movs	r3, #1
 800e2de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e2e2:	e000      	b.n	800e2e6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800e2e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e2e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d10a      	bne.n	800e304 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800e2ee:	4b92      	ldr	r3, [pc, #584]	@ (800e538 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e2f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e2f2:	f023 0103 	bic.w	r1, r3, #3
 800e2f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e2fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e2fc:	4a8e      	ldr	r2, [pc, #568]	@ (800e538 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e2fe:	430b      	orrs	r3, r1
 800e300:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e302:	e003      	b.n	800e30c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e304:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e308:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e30c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e310:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e314:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800e318:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e31c:	2300      	movs	r3, #0
 800e31e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e322:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800e326:	460b      	mov	r3, r1
 800e328:	4313      	orrs	r3, r2
 800e32a:	f000 8099 	beq.w	800e460 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e32e:	4b83      	ldr	r3, [pc, #524]	@ (800e53c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	4a82      	ldr	r2, [pc, #520]	@ (800e53c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800e334:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e338:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e33a:	f7f8 fc35 	bl	8006ba8 <HAL_GetTick>
 800e33e:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e342:	e00b      	b.n	800e35c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e344:	f7f8 fc30 	bl	8006ba8 <HAL_GetTick>
 800e348:	4602      	mov	r2, r0
 800e34a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800e34e:	1ad3      	subs	r3, r2, r3
 800e350:	2b64      	cmp	r3, #100	@ 0x64
 800e352:	d903      	bls.n	800e35c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800e354:	2303      	movs	r3, #3
 800e356:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e35a:	e005      	b.n	800e368 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e35c:	4b77      	ldr	r3, [pc, #476]	@ (800e53c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e364:	2b00      	cmp	r3, #0
 800e366:	d0ed      	beq.n	800e344 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800e368:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d173      	bne.n	800e458 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800e370:	4b71      	ldr	r3, [pc, #452]	@ (800e538 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e372:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800e374:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e378:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e37c:	4053      	eors	r3, r2
 800e37e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e382:	2b00      	cmp	r3, #0
 800e384:	d015      	beq.n	800e3b2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e386:	4b6c      	ldr	r3, [pc, #432]	@ (800e538 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e388:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e38a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e38e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800e392:	4b69      	ldr	r3, [pc, #420]	@ (800e538 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e394:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e396:	4a68      	ldr	r2, [pc, #416]	@ (800e538 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e398:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e39c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800e39e:	4b66      	ldr	r3, [pc, #408]	@ (800e538 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e3a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e3a2:	4a65      	ldr	r2, [pc, #404]	@ (800e538 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e3a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e3a8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800e3aa:	4a63      	ldr	r2, [pc, #396]	@ (800e538 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e3ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e3b0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800e3b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e3b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e3ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e3be:	d118      	bne.n	800e3f2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e3c0:	f7f8 fbf2 	bl	8006ba8 <HAL_GetTick>
 800e3c4:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e3c8:	e00d      	b.n	800e3e6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e3ca:	f7f8 fbed 	bl	8006ba8 <HAL_GetTick>
 800e3ce:	4602      	mov	r2, r0
 800e3d0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800e3d4:	1ad2      	subs	r2, r2, r3
 800e3d6:	f241 3388 	movw	r3, #5000	@ 0x1388
 800e3da:	429a      	cmp	r2, r3
 800e3dc:	d903      	bls.n	800e3e6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800e3de:	2303      	movs	r3, #3
 800e3e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800e3e4:	e005      	b.n	800e3f2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e3e6:	4b54      	ldr	r3, [pc, #336]	@ (800e538 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e3e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e3ea:	f003 0302 	and.w	r3, r3, #2
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d0eb      	beq.n	800e3ca <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800e3f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d129      	bne.n	800e44e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e3fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e3fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e402:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e406:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e40a:	d10e      	bne.n	800e42a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800e40c:	4b4a      	ldr	r3, [pc, #296]	@ (800e538 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e40e:	691b      	ldr	r3, [r3, #16]
 800e410:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800e414:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e418:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e41c:	091a      	lsrs	r2, r3, #4
 800e41e:	4b48      	ldr	r3, [pc, #288]	@ (800e540 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800e420:	4013      	ands	r3, r2
 800e422:	4a45      	ldr	r2, [pc, #276]	@ (800e538 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e424:	430b      	orrs	r3, r1
 800e426:	6113      	str	r3, [r2, #16]
 800e428:	e005      	b.n	800e436 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800e42a:	4b43      	ldr	r3, [pc, #268]	@ (800e538 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e42c:	691b      	ldr	r3, [r3, #16]
 800e42e:	4a42      	ldr	r2, [pc, #264]	@ (800e538 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e430:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800e434:	6113      	str	r3, [r2, #16]
 800e436:	4b40      	ldr	r3, [pc, #256]	@ (800e538 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e438:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800e43a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e43e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e442:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e446:	4a3c      	ldr	r2, [pc, #240]	@ (800e538 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e448:	430b      	orrs	r3, r1
 800e44a:	6713      	str	r3, [r2, #112]	@ 0x70
 800e44c:	e008      	b.n	800e460 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800e44e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e452:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800e456:	e003      	b.n	800e460 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e458:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e45c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800e460:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e464:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e468:	f002 0301 	and.w	r3, r2, #1
 800e46c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e470:	2300      	movs	r3, #0
 800e472:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800e476:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800e47a:	460b      	mov	r3, r1
 800e47c:	4313      	orrs	r3, r2
 800e47e:	f000 808f 	beq.w	800e5a0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800e482:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e486:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e488:	2b28      	cmp	r3, #40	@ 0x28
 800e48a:	d871      	bhi.n	800e570 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800e48c:	a201      	add	r2, pc, #4	@ (adr r2, 800e494 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800e48e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e492:	bf00      	nop
 800e494:	0800e579 	.word	0x0800e579
 800e498:	0800e571 	.word	0x0800e571
 800e49c:	0800e571 	.word	0x0800e571
 800e4a0:	0800e571 	.word	0x0800e571
 800e4a4:	0800e571 	.word	0x0800e571
 800e4a8:	0800e571 	.word	0x0800e571
 800e4ac:	0800e571 	.word	0x0800e571
 800e4b0:	0800e571 	.word	0x0800e571
 800e4b4:	0800e545 	.word	0x0800e545
 800e4b8:	0800e571 	.word	0x0800e571
 800e4bc:	0800e571 	.word	0x0800e571
 800e4c0:	0800e571 	.word	0x0800e571
 800e4c4:	0800e571 	.word	0x0800e571
 800e4c8:	0800e571 	.word	0x0800e571
 800e4cc:	0800e571 	.word	0x0800e571
 800e4d0:	0800e571 	.word	0x0800e571
 800e4d4:	0800e55b 	.word	0x0800e55b
 800e4d8:	0800e571 	.word	0x0800e571
 800e4dc:	0800e571 	.word	0x0800e571
 800e4e0:	0800e571 	.word	0x0800e571
 800e4e4:	0800e571 	.word	0x0800e571
 800e4e8:	0800e571 	.word	0x0800e571
 800e4ec:	0800e571 	.word	0x0800e571
 800e4f0:	0800e571 	.word	0x0800e571
 800e4f4:	0800e579 	.word	0x0800e579
 800e4f8:	0800e571 	.word	0x0800e571
 800e4fc:	0800e571 	.word	0x0800e571
 800e500:	0800e571 	.word	0x0800e571
 800e504:	0800e571 	.word	0x0800e571
 800e508:	0800e571 	.word	0x0800e571
 800e50c:	0800e571 	.word	0x0800e571
 800e510:	0800e571 	.word	0x0800e571
 800e514:	0800e579 	.word	0x0800e579
 800e518:	0800e571 	.word	0x0800e571
 800e51c:	0800e571 	.word	0x0800e571
 800e520:	0800e571 	.word	0x0800e571
 800e524:	0800e571 	.word	0x0800e571
 800e528:	0800e571 	.word	0x0800e571
 800e52c:	0800e571 	.word	0x0800e571
 800e530:	0800e571 	.word	0x0800e571
 800e534:	0800e579 	.word	0x0800e579
 800e538:	58024400 	.word	0x58024400
 800e53c:	58024800 	.word	0x58024800
 800e540:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e544:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e548:	3308      	adds	r3, #8
 800e54a:	2101      	movs	r1, #1
 800e54c:	4618      	mov	r0, r3
 800e54e:	f000 ffa7 	bl	800f4a0 <RCCEx_PLL2_Config>
 800e552:	4603      	mov	r3, r0
 800e554:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800e558:	e00f      	b.n	800e57a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e55a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e55e:	3328      	adds	r3, #40	@ 0x28
 800e560:	2101      	movs	r1, #1
 800e562:	4618      	mov	r0, r3
 800e564:	f001 f84e 	bl	800f604 <RCCEx_PLL3_Config>
 800e568:	4603      	mov	r3, r0
 800e56a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800e56e:	e004      	b.n	800e57a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e570:	2301      	movs	r3, #1
 800e572:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e576:	e000      	b.n	800e57a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800e578:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e57a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d10a      	bne.n	800e598 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800e582:	4bbf      	ldr	r3, [pc, #764]	@ (800e880 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e584:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e586:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800e58a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e58e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e590:	4abb      	ldr	r2, [pc, #748]	@ (800e880 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e592:	430b      	orrs	r3, r1
 800e594:	6553      	str	r3, [r2, #84]	@ 0x54
 800e596:	e003      	b.n	800e5a0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e598:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e59c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800e5a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e5a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5a8:	f002 0302 	and.w	r3, r2, #2
 800e5ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e5b6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800e5ba:	460b      	mov	r3, r1
 800e5bc:	4313      	orrs	r3, r2
 800e5be:	d041      	beq.n	800e644 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800e5c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e5c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e5c6:	2b05      	cmp	r3, #5
 800e5c8:	d824      	bhi.n	800e614 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800e5ca:	a201      	add	r2, pc, #4	@ (adr r2, 800e5d0 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800e5cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5d0:	0800e61d 	.word	0x0800e61d
 800e5d4:	0800e5e9 	.word	0x0800e5e9
 800e5d8:	0800e5ff 	.word	0x0800e5ff
 800e5dc:	0800e61d 	.word	0x0800e61d
 800e5e0:	0800e61d 	.word	0x0800e61d
 800e5e4:	0800e61d 	.word	0x0800e61d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e5e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e5ec:	3308      	adds	r3, #8
 800e5ee:	2101      	movs	r1, #1
 800e5f0:	4618      	mov	r0, r3
 800e5f2:	f000 ff55 	bl	800f4a0 <RCCEx_PLL2_Config>
 800e5f6:	4603      	mov	r3, r0
 800e5f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800e5fc:	e00f      	b.n	800e61e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e5fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e602:	3328      	adds	r3, #40	@ 0x28
 800e604:	2101      	movs	r1, #1
 800e606:	4618      	mov	r0, r3
 800e608:	f000 fffc 	bl	800f604 <RCCEx_PLL3_Config>
 800e60c:	4603      	mov	r3, r0
 800e60e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800e612:	e004      	b.n	800e61e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e614:	2301      	movs	r3, #1
 800e616:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e61a:	e000      	b.n	800e61e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800e61c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e61e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e622:	2b00      	cmp	r3, #0
 800e624:	d10a      	bne.n	800e63c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800e626:	4b96      	ldr	r3, [pc, #600]	@ (800e880 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e628:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e62a:	f023 0107 	bic.w	r1, r3, #7
 800e62e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e632:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e634:	4a92      	ldr	r2, [pc, #584]	@ (800e880 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e636:	430b      	orrs	r3, r1
 800e638:	6553      	str	r3, [r2, #84]	@ 0x54
 800e63a:	e003      	b.n	800e644 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e63c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e640:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800e644:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e64c:	f002 0304 	and.w	r3, r2, #4
 800e650:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800e654:	2300      	movs	r3, #0
 800e656:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e65a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800e65e:	460b      	mov	r3, r1
 800e660:	4313      	orrs	r3, r2
 800e662:	d044      	beq.n	800e6ee <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800e664:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e668:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e66c:	2b05      	cmp	r3, #5
 800e66e:	d825      	bhi.n	800e6bc <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800e670:	a201      	add	r2, pc, #4	@ (adr r2, 800e678 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800e672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e676:	bf00      	nop
 800e678:	0800e6c5 	.word	0x0800e6c5
 800e67c:	0800e691 	.word	0x0800e691
 800e680:	0800e6a7 	.word	0x0800e6a7
 800e684:	0800e6c5 	.word	0x0800e6c5
 800e688:	0800e6c5 	.word	0x0800e6c5
 800e68c:	0800e6c5 	.word	0x0800e6c5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e690:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e694:	3308      	adds	r3, #8
 800e696:	2101      	movs	r1, #1
 800e698:	4618      	mov	r0, r3
 800e69a:	f000 ff01 	bl	800f4a0 <RCCEx_PLL2_Config>
 800e69e:	4603      	mov	r3, r0
 800e6a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800e6a4:	e00f      	b.n	800e6c6 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e6a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e6aa:	3328      	adds	r3, #40	@ 0x28
 800e6ac:	2101      	movs	r1, #1
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	f000 ffa8 	bl	800f604 <RCCEx_PLL3_Config>
 800e6b4:	4603      	mov	r3, r0
 800e6b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800e6ba:	e004      	b.n	800e6c6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e6bc:	2301      	movs	r3, #1
 800e6be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e6c2:	e000      	b.n	800e6c6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800e6c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e6c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d10b      	bne.n	800e6e6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800e6ce:	4b6c      	ldr	r3, [pc, #432]	@ (800e880 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e6d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e6d2:	f023 0107 	bic.w	r1, r3, #7
 800e6d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e6da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e6de:	4a68      	ldr	r2, [pc, #416]	@ (800e880 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e6e0:	430b      	orrs	r3, r1
 800e6e2:	6593      	str	r3, [r2, #88]	@ 0x58
 800e6e4:	e003      	b.n	800e6ee <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e6e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e6ea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800e6ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6f6:	f002 0320 	and.w	r3, r2, #32
 800e6fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800e6fe:	2300      	movs	r3, #0
 800e700:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800e704:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800e708:	460b      	mov	r3, r1
 800e70a:	4313      	orrs	r3, r2
 800e70c:	d055      	beq.n	800e7ba <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800e70e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e712:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e716:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e71a:	d033      	beq.n	800e784 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800e71c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e720:	d82c      	bhi.n	800e77c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800e722:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e726:	d02f      	beq.n	800e788 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800e728:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e72c:	d826      	bhi.n	800e77c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800e72e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e732:	d02b      	beq.n	800e78c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800e734:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e738:	d820      	bhi.n	800e77c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800e73a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e73e:	d012      	beq.n	800e766 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800e740:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e744:	d81a      	bhi.n	800e77c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800e746:	2b00      	cmp	r3, #0
 800e748:	d022      	beq.n	800e790 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800e74a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e74e:	d115      	bne.n	800e77c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e750:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e754:	3308      	adds	r3, #8
 800e756:	2100      	movs	r1, #0
 800e758:	4618      	mov	r0, r3
 800e75a:	f000 fea1 	bl	800f4a0 <RCCEx_PLL2_Config>
 800e75e:	4603      	mov	r3, r0
 800e760:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800e764:	e015      	b.n	800e792 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e766:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e76a:	3328      	adds	r3, #40	@ 0x28
 800e76c:	2102      	movs	r1, #2
 800e76e:	4618      	mov	r0, r3
 800e770:	f000 ff48 	bl	800f604 <RCCEx_PLL3_Config>
 800e774:	4603      	mov	r3, r0
 800e776:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800e77a:	e00a      	b.n	800e792 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e77c:	2301      	movs	r3, #1
 800e77e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e782:	e006      	b.n	800e792 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800e784:	bf00      	nop
 800e786:	e004      	b.n	800e792 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800e788:	bf00      	nop
 800e78a:	e002      	b.n	800e792 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800e78c:	bf00      	nop
 800e78e:	e000      	b.n	800e792 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800e790:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e792:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e796:	2b00      	cmp	r3, #0
 800e798:	d10b      	bne.n	800e7b2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e79a:	4b39      	ldr	r3, [pc, #228]	@ (800e880 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e79c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e79e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800e7a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e7a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e7aa:	4a35      	ldr	r2, [pc, #212]	@ (800e880 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e7ac:	430b      	orrs	r3, r1
 800e7ae:	6553      	str	r3, [r2, #84]	@ 0x54
 800e7b0:	e003      	b.n	800e7ba <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e7b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e7b6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800e7ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e7be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7c2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800e7c6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e7ca:	2300      	movs	r3, #0
 800e7cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e7d0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800e7d4:	460b      	mov	r3, r1
 800e7d6:	4313      	orrs	r3, r2
 800e7d8:	d058      	beq.n	800e88c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800e7da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e7de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e7e2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800e7e6:	d033      	beq.n	800e850 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800e7e8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800e7ec:	d82c      	bhi.n	800e848 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800e7ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e7f2:	d02f      	beq.n	800e854 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800e7f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e7f8:	d826      	bhi.n	800e848 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800e7fa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e7fe:	d02b      	beq.n	800e858 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800e800:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e804:	d820      	bhi.n	800e848 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800e806:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e80a:	d012      	beq.n	800e832 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800e80c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e810:	d81a      	bhi.n	800e848 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800e812:	2b00      	cmp	r3, #0
 800e814:	d022      	beq.n	800e85c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800e816:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e81a:	d115      	bne.n	800e848 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e81c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e820:	3308      	adds	r3, #8
 800e822:	2100      	movs	r1, #0
 800e824:	4618      	mov	r0, r3
 800e826:	f000 fe3b 	bl	800f4a0 <RCCEx_PLL2_Config>
 800e82a:	4603      	mov	r3, r0
 800e82c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800e830:	e015      	b.n	800e85e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e832:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e836:	3328      	adds	r3, #40	@ 0x28
 800e838:	2102      	movs	r1, #2
 800e83a:	4618      	mov	r0, r3
 800e83c:	f000 fee2 	bl	800f604 <RCCEx_PLL3_Config>
 800e840:	4603      	mov	r3, r0
 800e842:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800e846:	e00a      	b.n	800e85e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e848:	2301      	movs	r3, #1
 800e84a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e84e:	e006      	b.n	800e85e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800e850:	bf00      	nop
 800e852:	e004      	b.n	800e85e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800e854:	bf00      	nop
 800e856:	e002      	b.n	800e85e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800e858:	bf00      	nop
 800e85a:	e000      	b.n	800e85e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800e85c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e85e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e862:	2b00      	cmp	r3, #0
 800e864:	d10e      	bne.n	800e884 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800e866:	4b06      	ldr	r3, [pc, #24]	@ (800e880 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e86a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800e86e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e872:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e876:	4a02      	ldr	r2, [pc, #8]	@ (800e880 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e878:	430b      	orrs	r3, r1
 800e87a:	6593      	str	r3, [r2, #88]	@ 0x58
 800e87c:	e006      	b.n	800e88c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800e87e:	bf00      	nop
 800e880:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e884:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e888:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800e88c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e890:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e894:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800e898:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e89c:	2300      	movs	r3, #0
 800e89e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e8a2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800e8a6:	460b      	mov	r3, r1
 800e8a8:	4313      	orrs	r3, r2
 800e8aa:	d055      	beq.n	800e958 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800e8ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e8b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e8b4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800e8b8:	d033      	beq.n	800e922 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800e8ba:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800e8be:	d82c      	bhi.n	800e91a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800e8c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e8c4:	d02f      	beq.n	800e926 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800e8c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e8ca:	d826      	bhi.n	800e91a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800e8cc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800e8d0:	d02b      	beq.n	800e92a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800e8d2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800e8d6:	d820      	bhi.n	800e91a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800e8d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e8dc:	d012      	beq.n	800e904 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800e8de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e8e2:	d81a      	bhi.n	800e91a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d022      	beq.n	800e92e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800e8e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e8ec:	d115      	bne.n	800e91a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e8ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e8f2:	3308      	adds	r3, #8
 800e8f4:	2100      	movs	r1, #0
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	f000 fdd2 	bl	800f4a0 <RCCEx_PLL2_Config>
 800e8fc:	4603      	mov	r3, r0
 800e8fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800e902:	e015      	b.n	800e930 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e904:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e908:	3328      	adds	r3, #40	@ 0x28
 800e90a:	2102      	movs	r1, #2
 800e90c:	4618      	mov	r0, r3
 800e90e:	f000 fe79 	bl	800f604 <RCCEx_PLL3_Config>
 800e912:	4603      	mov	r3, r0
 800e914:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800e918:	e00a      	b.n	800e930 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e91a:	2301      	movs	r3, #1
 800e91c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e920:	e006      	b.n	800e930 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800e922:	bf00      	nop
 800e924:	e004      	b.n	800e930 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800e926:	bf00      	nop
 800e928:	e002      	b.n	800e930 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800e92a:	bf00      	nop
 800e92c:	e000      	b.n	800e930 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800e92e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e930:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e934:	2b00      	cmp	r3, #0
 800e936:	d10b      	bne.n	800e950 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800e938:	4ba0      	ldr	r3, [pc, #640]	@ (800ebbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e93a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e93c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800e940:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e944:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e948:	4a9c      	ldr	r2, [pc, #624]	@ (800ebbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e94a:	430b      	orrs	r3, r1
 800e94c:	6593      	str	r3, [r2, #88]	@ 0x58
 800e94e:	e003      	b.n	800e958 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e950:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e954:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800e958:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e95c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e960:	f002 0308 	and.w	r3, r2, #8
 800e964:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e968:	2300      	movs	r3, #0
 800e96a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800e96e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800e972:	460b      	mov	r3, r1
 800e974:	4313      	orrs	r3, r2
 800e976:	d01e      	beq.n	800e9b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800e978:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e97c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e980:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e984:	d10c      	bne.n	800e9a0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e986:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e98a:	3328      	adds	r3, #40	@ 0x28
 800e98c:	2102      	movs	r1, #2
 800e98e:	4618      	mov	r0, r3
 800e990:	f000 fe38 	bl	800f604 <RCCEx_PLL3_Config>
 800e994:	4603      	mov	r3, r0
 800e996:	2b00      	cmp	r3, #0
 800e998:	d002      	beq.n	800e9a0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800e99a:	2301      	movs	r3, #1
 800e99c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800e9a0:	4b86      	ldr	r3, [pc, #536]	@ (800ebbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e9a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e9a4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800e9a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e9ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e9b0:	4a82      	ldr	r2, [pc, #520]	@ (800ebbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e9b2:	430b      	orrs	r3, r1
 800e9b4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800e9b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9be:	f002 0310 	and.w	r3, r2, #16
 800e9c2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e9cc:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800e9d0:	460b      	mov	r3, r1
 800e9d2:	4313      	orrs	r3, r2
 800e9d4:	d01e      	beq.n	800ea14 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800e9d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e9da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e9de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e9e2:	d10c      	bne.n	800e9fe <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e9e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e9e8:	3328      	adds	r3, #40	@ 0x28
 800e9ea:	2102      	movs	r1, #2
 800e9ec:	4618      	mov	r0, r3
 800e9ee:	f000 fe09 	bl	800f604 <RCCEx_PLL3_Config>
 800e9f2:	4603      	mov	r3, r0
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d002      	beq.n	800e9fe <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800e9f8:	2301      	movs	r3, #1
 800e9fa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800e9fe:	4b6f      	ldr	r3, [pc, #444]	@ (800ebbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ea00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ea02:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800ea06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ea0e:	4a6b      	ldr	r2, [pc, #428]	@ (800ebbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ea10:	430b      	orrs	r3, r1
 800ea12:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ea14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea1c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800ea20:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ea22:	2300      	movs	r3, #0
 800ea24:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ea26:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800ea2a:	460b      	mov	r3, r1
 800ea2c:	4313      	orrs	r3, r2
 800ea2e:	d03e      	beq.n	800eaae <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800ea30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea34:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ea38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ea3c:	d022      	beq.n	800ea84 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800ea3e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ea42:	d81b      	bhi.n	800ea7c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d003      	beq.n	800ea50 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800ea48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ea4c:	d00b      	beq.n	800ea66 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800ea4e:	e015      	b.n	800ea7c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ea50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea54:	3308      	adds	r3, #8
 800ea56:	2100      	movs	r1, #0
 800ea58:	4618      	mov	r0, r3
 800ea5a:	f000 fd21 	bl	800f4a0 <RCCEx_PLL2_Config>
 800ea5e:	4603      	mov	r3, r0
 800ea60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ea64:	e00f      	b.n	800ea86 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ea66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea6a:	3328      	adds	r3, #40	@ 0x28
 800ea6c:	2102      	movs	r1, #2
 800ea6e:	4618      	mov	r0, r3
 800ea70:	f000 fdc8 	bl	800f604 <RCCEx_PLL3_Config>
 800ea74:	4603      	mov	r3, r0
 800ea76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ea7a:	e004      	b.n	800ea86 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ea7c:	2301      	movs	r3, #1
 800ea7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ea82:	e000      	b.n	800ea86 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800ea84:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ea86:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d10b      	bne.n	800eaa6 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ea8e:	4b4b      	ldr	r3, [pc, #300]	@ (800ebbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ea90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ea92:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800ea96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea9a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ea9e:	4a47      	ldr	r2, [pc, #284]	@ (800ebbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800eaa0:	430b      	orrs	r3, r1
 800eaa2:	6593      	str	r3, [r2, #88]	@ 0x58
 800eaa4:	e003      	b.n	800eaae <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eaa6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800eaaa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800eaae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eab6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800eaba:	673b      	str	r3, [r7, #112]	@ 0x70
 800eabc:	2300      	movs	r3, #0
 800eabe:	677b      	str	r3, [r7, #116]	@ 0x74
 800eac0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800eac4:	460b      	mov	r3, r1
 800eac6:	4313      	orrs	r3, r2
 800eac8:	d03b      	beq.n	800eb42 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800eaca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eace:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ead2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ead6:	d01f      	beq.n	800eb18 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800ead8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800eadc:	d818      	bhi.n	800eb10 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800eade:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800eae2:	d003      	beq.n	800eaec <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800eae4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800eae8:	d007      	beq.n	800eafa <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800eaea:	e011      	b.n	800eb10 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800eaec:	4b33      	ldr	r3, [pc, #204]	@ (800ebbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800eaee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eaf0:	4a32      	ldr	r2, [pc, #200]	@ (800ebbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800eaf2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800eaf6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800eaf8:	e00f      	b.n	800eb1a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800eafa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eafe:	3328      	adds	r3, #40	@ 0x28
 800eb00:	2101      	movs	r1, #1
 800eb02:	4618      	mov	r0, r3
 800eb04:	f000 fd7e 	bl	800f604 <RCCEx_PLL3_Config>
 800eb08:	4603      	mov	r3, r0
 800eb0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800eb0e:	e004      	b.n	800eb1a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800eb10:	2301      	movs	r3, #1
 800eb12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800eb16:	e000      	b.n	800eb1a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800eb18:	bf00      	nop
    }

    if (ret == HAL_OK)
 800eb1a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d10b      	bne.n	800eb3a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800eb22:	4b26      	ldr	r3, [pc, #152]	@ (800ebbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800eb24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eb26:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800eb2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800eb32:	4a22      	ldr	r2, [pc, #136]	@ (800ebbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800eb34:	430b      	orrs	r3, r1
 800eb36:	6553      	str	r3, [r2, #84]	@ 0x54
 800eb38:	e003      	b.n	800eb42 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eb3a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800eb3e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800eb42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb4a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800eb4e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800eb50:	2300      	movs	r3, #0
 800eb52:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800eb54:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800eb58:	460b      	mov	r3, r1
 800eb5a:	4313      	orrs	r3, r2
 800eb5c:	d034      	beq.n	800ebc8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800eb5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d003      	beq.n	800eb70 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800eb68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800eb6c:	d007      	beq.n	800eb7e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800eb6e:	e011      	b.n	800eb94 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800eb70:	4b12      	ldr	r3, [pc, #72]	@ (800ebbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800eb72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb74:	4a11      	ldr	r2, [pc, #68]	@ (800ebbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800eb76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800eb7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800eb7c:	e00e      	b.n	800eb9c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800eb7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb82:	3308      	adds	r3, #8
 800eb84:	2102      	movs	r1, #2
 800eb86:	4618      	mov	r0, r3
 800eb88:	f000 fc8a 	bl	800f4a0 <RCCEx_PLL2_Config>
 800eb8c:	4603      	mov	r3, r0
 800eb8e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800eb92:	e003      	b.n	800eb9c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800eb94:	2301      	movs	r3, #1
 800eb96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800eb9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800eb9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d10d      	bne.n	800ebc0 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800eba4:	4b05      	ldr	r3, [pc, #20]	@ (800ebbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800eba6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eba8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ebac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ebb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ebb2:	4a02      	ldr	r2, [pc, #8]	@ (800ebbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ebb4:	430b      	orrs	r3, r1
 800ebb6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ebb8:	e006      	b.n	800ebc8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800ebba:	bf00      	nop
 800ebbc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ebc0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ebc4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ebc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ebcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebd0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800ebd4:	663b      	str	r3, [r7, #96]	@ 0x60
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	667b      	str	r3, [r7, #100]	@ 0x64
 800ebda:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800ebde:	460b      	mov	r3, r1
 800ebe0:	4313      	orrs	r3, r2
 800ebe2:	d00c      	beq.n	800ebfe <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ebe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ebe8:	3328      	adds	r3, #40	@ 0x28
 800ebea:	2102      	movs	r1, #2
 800ebec:	4618      	mov	r0, r3
 800ebee:	f000 fd09 	bl	800f604 <RCCEx_PLL3_Config>
 800ebf2:	4603      	mov	r3, r0
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d002      	beq.n	800ebfe <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800ebf8:	2301      	movs	r3, #1
 800ebfa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ebfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ec02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec06:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800ec0a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ec0c:	2300      	movs	r3, #0
 800ec0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ec10:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800ec14:	460b      	mov	r3, r1
 800ec16:	4313      	orrs	r3, r2
 800ec18:	d036      	beq.n	800ec88 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800ec1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ec1e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ec20:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ec24:	d018      	beq.n	800ec58 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800ec26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ec2a:	d811      	bhi.n	800ec50 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800ec2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ec30:	d014      	beq.n	800ec5c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800ec32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ec36:	d80b      	bhi.n	800ec50 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d011      	beq.n	800ec60 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800ec3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ec40:	d106      	bne.n	800ec50 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ec42:	4bb7      	ldr	r3, [pc, #732]	@ (800ef20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ec44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec46:	4ab6      	ldr	r2, [pc, #728]	@ (800ef20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ec48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ec4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800ec4e:	e008      	b.n	800ec62 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ec50:	2301      	movs	r3, #1
 800ec52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ec56:	e004      	b.n	800ec62 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800ec58:	bf00      	nop
 800ec5a:	e002      	b.n	800ec62 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800ec5c:	bf00      	nop
 800ec5e:	e000      	b.n	800ec62 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800ec60:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ec62:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d10a      	bne.n	800ec80 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ec6a:	4bad      	ldr	r3, [pc, #692]	@ (800ef20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ec6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ec6e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800ec72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ec76:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ec78:	4aa9      	ldr	r2, [pc, #676]	@ (800ef20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ec7a:	430b      	orrs	r3, r1
 800ec7c:	6553      	str	r3, [r2, #84]	@ 0x54
 800ec7e:	e003      	b.n	800ec88 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ec80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ec84:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ec88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ec8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec90:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800ec94:	653b      	str	r3, [r7, #80]	@ 0x50
 800ec96:	2300      	movs	r3, #0
 800ec98:	657b      	str	r3, [r7, #84]	@ 0x54
 800ec9a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800ec9e:	460b      	mov	r3, r1
 800eca0:	4313      	orrs	r3, r2
 800eca2:	d009      	beq.n	800ecb8 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800eca4:	4b9e      	ldr	r3, [pc, #632]	@ (800ef20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800eca6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eca8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800ecac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ecb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ecb2:	4a9b      	ldr	r2, [pc, #620]	@ (800ef20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ecb4:	430b      	orrs	r3, r1
 800ecb6:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ecb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ecbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecc0:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800ecc4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ecc6:	2300      	movs	r3, #0
 800ecc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ecca:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800ecce:	460b      	mov	r3, r1
 800ecd0:	4313      	orrs	r3, r2
 800ecd2:	d009      	beq.n	800ece8 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ecd4:	4b92      	ldr	r3, [pc, #584]	@ (800ef20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ecd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ecd8:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800ecdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ece0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ece2:	4a8f      	ldr	r2, [pc, #572]	@ (800ef20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ece4:	430b      	orrs	r3, r1
 800ece6:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ece8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ecec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecf0:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800ecf4:	643b      	str	r3, [r7, #64]	@ 0x40
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	647b      	str	r3, [r7, #68]	@ 0x44
 800ecfa:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800ecfe:	460b      	mov	r3, r1
 800ed00:	4313      	orrs	r3, r2
 800ed02:	d00e      	beq.n	800ed22 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ed04:	4b86      	ldr	r3, [pc, #536]	@ (800ef20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ed06:	691b      	ldr	r3, [r3, #16]
 800ed08:	4a85      	ldr	r2, [pc, #532]	@ (800ef20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ed0a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ed0e:	6113      	str	r3, [r2, #16]
 800ed10:	4b83      	ldr	r3, [pc, #524]	@ (800ef20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ed12:	6919      	ldr	r1, [r3, #16]
 800ed14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ed18:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ed1c:	4a80      	ldr	r2, [pc, #512]	@ (800ef20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ed1e:	430b      	orrs	r3, r1
 800ed20:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ed22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ed26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed2a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800ed2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ed30:	2300      	movs	r3, #0
 800ed32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ed34:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800ed38:	460b      	mov	r3, r1
 800ed3a:	4313      	orrs	r3, r2
 800ed3c:	d009      	beq.n	800ed52 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ed3e:	4b78      	ldr	r3, [pc, #480]	@ (800ef20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ed40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ed42:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800ed46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ed4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ed4c:	4a74      	ldr	r2, [pc, #464]	@ (800ef20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ed4e:	430b      	orrs	r3, r1
 800ed50:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ed52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ed56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed5a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800ed5e:	633b      	str	r3, [r7, #48]	@ 0x30
 800ed60:	2300      	movs	r3, #0
 800ed62:	637b      	str	r3, [r7, #52]	@ 0x34
 800ed64:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800ed68:	460b      	mov	r3, r1
 800ed6a:	4313      	orrs	r3, r2
 800ed6c:	d00a      	beq.n	800ed84 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ed6e:	4b6c      	ldr	r3, [pc, #432]	@ (800ef20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ed70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ed72:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800ed76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ed7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ed7e:	4a68      	ldr	r2, [pc, #416]	@ (800ef20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ed80:	430b      	orrs	r3, r1
 800ed82:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800ed84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ed88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed8c:	2100      	movs	r1, #0
 800ed8e:	62b9      	str	r1, [r7, #40]	@ 0x28
 800ed90:	f003 0301 	and.w	r3, r3, #1
 800ed94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ed96:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800ed9a:	460b      	mov	r3, r1
 800ed9c:	4313      	orrs	r3, r2
 800ed9e:	d011      	beq.n	800edc4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800eda0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eda4:	3308      	adds	r3, #8
 800eda6:	2100      	movs	r1, #0
 800eda8:	4618      	mov	r0, r3
 800edaa:	f000 fb79 	bl	800f4a0 <RCCEx_PLL2_Config>
 800edae:	4603      	mov	r3, r0
 800edb0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800edb4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d003      	beq.n	800edc4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800edbc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800edc0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800edc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800edc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edcc:	2100      	movs	r1, #0
 800edce:	6239      	str	r1, [r7, #32]
 800edd0:	f003 0302 	and.w	r3, r3, #2
 800edd4:	627b      	str	r3, [r7, #36]	@ 0x24
 800edd6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800edda:	460b      	mov	r3, r1
 800eddc:	4313      	orrs	r3, r2
 800edde:	d011      	beq.n	800ee04 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ede0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ede4:	3308      	adds	r3, #8
 800ede6:	2101      	movs	r1, #1
 800ede8:	4618      	mov	r0, r3
 800edea:	f000 fb59 	bl	800f4a0 <RCCEx_PLL2_Config>
 800edee:	4603      	mov	r3, r0
 800edf0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800edf4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d003      	beq.n	800ee04 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800edfc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ee00:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800ee04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ee08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee0c:	2100      	movs	r1, #0
 800ee0e:	61b9      	str	r1, [r7, #24]
 800ee10:	f003 0304 	and.w	r3, r3, #4
 800ee14:	61fb      	str	r3, [r7, #28]
 800ee16:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800ee1a:	460b      	mov	r3, r1
 800ee1c:	4313      	orrs	r3, r2
 800ee1e:	d011      	beq.n	800ee44 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ee20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ee24:	3308      	adds	r3, #8
 800ee26:	2102      	movs	r1, #2
 800ee28:	4618      	mov	r0, r3
 800ee2a:	f000 fb39 	bl	800f4a0 <RCCEx_PLL2_Config>
 800ee2e:	4603      	mov	r3, r0
 800ee30:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800ee34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d003      	beq.n	800ee44 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ee3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ee40:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800ee44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ee48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee4c:	2100      	movs	r1, #0
 800ee4e:	6139      	str	r1, [r7, #16]
 800ee50:	f003 0308 	and.w	r3, r3, #8
 800ee54:	617b      	str	r3, [r7, #20]
 800ee56:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800ee5a:	460b      	mov	r3, r1
 800ee5c:	4313      	orrs	r3, r2
 800ee5e:	d011      	beq.n	800ee84 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ee60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ee64:	3328      	adds	r3, #40	@ 0x28
 800ee66:	2100      	movs	r1, #0
 800ee68:	4618      	mov	r0, r3
 800ee6a:	f000 fbcb 	bl	800f604 <RCCEx_PLL3_Config>
 800ee6e:	4603      	mov	r3, r0
 800ee70:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800ee74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d003      	beq.n	800ee84 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ee7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ee80:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800ee84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ee88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee8c:	2100      	movs	r1, #0
 800ee8e:	60b9      	str	r1, [r7, #8]
 800ee90:	f003 0310 	and.w	r3, r3, #16
 800ee94:	60fb      	str	r3, [r7, #12]
 800ee96:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ee9a:	460b      	mov	r3, r1
 800ee9c:	4313      	orrs	r3, r2
 800ee9e:	d011      	beq.n	800eec4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800eea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eea4:	3328      	adds	r3, #40	@ 0x28
 800eea6:	2101      	movs	r1, #1
 800eea8:	4618      	mov	r0, r3
 800eeaa:	f000 fbab 	bl	800f604 <RCCEx_PLL3_Config>
 800eeae:	4603      	mov	r3, r0
 800eeb0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800eeb4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d003      	beq.n	800eec4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eebc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800eec0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800eec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eecc:	2100      	movs	r1, #0
 800eece:	6039      	str	r1, [r7, #0]
 800eed0:	f003 0320 	and.w	r3, r3, #32
 800eed4:	607b      	str	r3, [r7, #4]
 800eed6:	e9d7 1200 	ldrd	r1, r2, [r7]
 800eeda:	460b      	mov	r3, r1
 800eedc:	4313      	orrs	r3, r2
 800eede:	d011      	beq.n	800ef04 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800eee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eee4:	3328      	adds	r3, #40	@ 0x28
 800eee6:	2102      	movs	r1, #2
 800eee8:	4618      	mov	r0, r3
 800eeea:	f000 fb8b 	bl	800f604 <RCCEx_PLL3_Config>
 800eeee:	4603      	mov	r3, r0
 800eef0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800eef4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d003      	beq.n	800ef04 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eefc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ef00:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800ef04:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d101      	bne.n	800ef10 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	e000      	b.n	800ef12 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800ef10:	2301      	movs	r3, #1
}
 800ef12:	4618      	mov	r0, r3
 800ef14:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800ef18:	46bd      	mov	sp, r7
 800ef1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ef1e:	bf00      	nop
 800ef20:	58024400 	.word	0x58024400

0800ef24 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ef24:	b580      	push	{r7, lr}
 800ef26:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ef28:	f7fe fdbe 	bl	800daa8 <HAL_RCC_GetHCLKFreq>
 800ef2c:	4602      	mov	r2, r0
 800ef2e:	4b06      	ldr	r3, [pc, #24]	@ (800ef48 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ef30:	6a1b      	ldr	r3, [r3, #32]
 800ef32:	091b      	lsrs	r3, r3, #4
 800ef34:	f003 0307 	and.w	r3, r3, #7
 800ef38:	4904      	ldr	r1, [pc, #16]	@ (800ef4c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800ef3a:	5ccb      	ldrb	r3, [r1, r3]
 800ef3c:	f003 031f 	and.w	r3, r3, #31
 800ef40:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800ef44:	4618      	mov	r0, r3
 800ef46:	bd80      	pop	{r7, pc}
 800ef48:	58024400 	.word	0x58024400
 800ef4c:	0801f97c 	.word	0x0801f97c

0800ef50 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800ef50:	b480      	push	{r7}
 800ef52:	b089      	sub	sp, #36	@ 0x24
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ef58:	4ba1      	ldr	r3, [pc, #644]	@ (800f1e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ef5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef5c:	f003 0303 	and.w	r3, r3, #3
 800ef60:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800ef62:	4b9f      	ldr	r3, [pc, #636]	@ (800f1e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ef64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef66:	0b1b      	lsrs	r3, r3, #12
 800ef68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ef6c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ef6e:	4b9c      	ldr	r3, [pc, #624]	@ (800f1e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ef70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef72:	091b      	lsrs	r3, r3, #4
 800ef74:	f003 0301 	and.w	r3, r3, #1
 800ef78:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800ef7a:	4b99      	ldr	r3, [pc, #612]	@ (800f1e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ef7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ef7e:	08db      	lsrs	r3, r3, #3
 800ef80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ef84:	693a      	ldr	r2, [r7, #16]
 800ef86:	fb02 f303 	mul.w	r3, r2, r3
 800ef8a:	ee07 3a90 	vmov	s15, r3
 800ef8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ef92:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ef96:	697b      	ldr	r3, [r7, #20]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	f000 8111 	beq.w	800f1c0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ef9e:	69bb      	ldr	r3, [r7, #24]
 800efa0:	2b02      	cmp	r3, #2
 800efa2:	f000 8083 	beq.w	800f0ac <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800efa6:	69bb      	ldr	r3, [r7, #24]
 800efa8:	2b02      	cmp	r3, #2
 800efaa:	f200 80a1 	bhi.w	800f0f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800efae:	69bb      	ldr	r3, [r7, #24]
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d003      	beq.n	800efbc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800efb4:	69bb      	ldr	r3, [r7, #24]
 800efb6:	2b01      	cmp	r3, #1
 800efb8:	d056      	beq.n	800f068 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800efba:	e099      	b.n	800f0f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800efbc:	4b88      	ldr	r3, [pc, #544]	@ (800f1e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	f003 0320 	and.w	r3, r3, #32
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d02d      	beq.n	800f024 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800efc8:	4b85      	ldr	r3, [pc, #532]	@ (800f1e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	08db      	lsrs	r3, r3, #3
 800efce:	f003 0303 	and.w	r3, r3, #3
 800efd2:	4a84      	ldr	r2, [pc, #528]	@ (800f1e4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800efd4:	fa22 f303 	lsr.w	r3, r2, r3
 800efd8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800efda:	68bb      	ldr	r3, [r7, #8]
 800efdc:	ee07 3a90 	vmov	s15, r3
 800efe0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800efe4:	697b      	ldr	r3, [r7, #20]
 800efe6:	ee07 3a90 	vmov	s15, r3
 800efea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800efee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800eff2:	4b7b      	ldr	r3, [pc, #492]	@ (800f1e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800eff4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800effa:	ee07 3a90 	vmov	s15, r3
 800effe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f002:	ed97 6a03 	vldr	s12, [r7, #12]
 800f006:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800f1e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f00a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f00e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f012:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f016:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f01a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f01e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800f022:	e087      	b.n	800f134 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f024:	697b      	ldr	r3, [r7, #20]
 800f026:	ee07 3a90 	vmov	s15, r3
 800f02a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f02e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800f1ec <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800f032:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f036:	4b6a      	ldr	r3, [pc, #424]	@ (800f1e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f038:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f03a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f03e:	ee07 3a90 	vmov	s15, r3
 800f042:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f046:	ed97 6a03 	vldr	s12, [r7, #12]
 800f04a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800f1e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f04e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f052:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f056:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f05a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f05e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f062:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f066:	e065      	b.n	800f134 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f068:	697b      	ldr	r3, [r7, #20]
 800f06a:	ee07 3a90 	vmov	s15, r3
 800f06e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f072:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800f1f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800f076:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f07a:	4b59      	ldr	r3, [pc, #356]	@ (800f1e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f07c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f07e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f082:	ee07 3a90 	vmov	s15, r3
 800f086:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f08a:	ed97 6a03 	vldr	s12, [r7, #12]
 800f08e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800f1e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f092:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f096:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f09a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f09e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f0a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f0a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f0aa:	e043      	b.n	800f134 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f0ac:	697b      	ldr	r3, [r7, #20]
 800f0ae:	ee07 3a90 	vmov	s15, r3
 800f0b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f0b6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800f1f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800f0ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f0be:	4b48      	ldr	r3, [pc, #288]	@ (800f1e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f0c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f0c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f0c6:	ee07 3a90 	vmov	s15, r3
 800f0ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f0ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800f0d2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800f1e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f0d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f0da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f0de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f0e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f0e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f0ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f0ee:	e021      	b.n	800f134 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f0f0:	697b      	ldr	r3, [r7, #20]
 800f0f2:	ee07 3a90 	vmov	s15, r3
 800f0f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f0fa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800f1f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800f0fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f102:	4b37      	ldr	r3, [pc, #220]	@ (800f1e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f104:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f10a:	ee07 3a90 	vmov	s15, r3
 800f10e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f112:	ed97 6a03 	vldr	s12, [r7, #12]
 800f116:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800f1e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f11a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f11e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f122:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f126:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f12a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f12e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f132:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800f134:	4b2a      	ldr	r3, [pc, #168]	@ (800f1e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f138:	0a5b      	lsrs	r3, r3, #9
 800f13a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f13e:	ee07 3a90 	vmov	s15, r3
 800f142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f146:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f14a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f14e:	edd7 6a07 	vldr	s13, [r7, #28]
 800f152:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f156:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f15a:	ee17 2a90 	vmov	r2, s15
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800f162:	4b1f      	ldr	r3, [pc, #124]	@ (800f1e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f164:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f166:	0c1b      	lsrs	r3, r3, #16
 800f168:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f16c:	ee07 3a90 	vmov	s15, r3
 800f170:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f174:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f178:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f17c:	edd7 6a07 	vldr	s13, [r7, #28]
 800f180:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f184:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f188:	ee17 2a90 	vmov	r2, s15
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800f190:	4b13      	ldr	r3, [pc, #76]	@ (800f1e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f194:	0e1b      	lsrs	r3, r3, #24
 800f196:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f19a:	ee07 3a90 	vmov	s15, r3
 800f19e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f1a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f1a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f1aa:	edd7 6a07 	vldr	s13, [r7, #28]
 800f1ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f1b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f1b6:	ee17 2a90 	vmov	r2, s15
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800f1be:	e008      	b.n	800f1d2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	2200      	movs	r2, #0
 800f1c4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	2200      	movs	r2, #0
 800f1ca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	2200      	movs	r2, #0
 800f1d0:	609a      	str	r2, [r3, #8]
}
 800f1d2:	bf00      	nop
 800f1d4:	3724      	adds	r7, #36	@ 0x24
 800f1d6:	46bd      	mov	sp, r7
 800f1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1dc:	4770      	bx	lr
 800f1de:	bf00      	nop
 800f1e0:	58024400 	.word	0x58024400
 800f1e4:	03d09000 	.word	0x03d09000
 800f1e8:	46000000 	.word	0x46000000
 800f1ec:	4c742400 	.word	0x4c742400
 800f1f0:	4a742400 	.word	0x4a742400
 800f1f4:	4bbebc20 	.word	0x4bbebc20

0800f1f8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800f1f8:	b480      	push	{r7}
 800f1fa:	b089      	sub	sp, #36	@ 0x24
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f200:	4ba1      	ldr	r3, [pc, #644]	@ (800f488 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f204:	f003 0303 	and.w	r3, r3, #3
 800f208:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800f20a:	4b9f      	ldr	r3, [pc, #636]	@ (800f488 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f20c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f20e:	0d1b      	lsrs	r3, r3, #20
 800f210:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f214:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800f216:	4b9c      	ldr	r3, [pc, #624]	@ (800f488 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f21a:	0a1b      	lsrs	r3, r3, #8
 800f21c:	f003 0301 	and.w	r3, r3, #1
 800f220:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800f222:	4b99      	ldr	r3, [pc, #612]	@ (800f488 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f226:	08db      	lsrs	r3, r3, #3
 800f228:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f22c:	693a      	ldr	r2, [r7, #16]
 800f22e:	fb02 f303 	mul.w	r3, r2, r3
 800f232:	ee07 3a90 	vmov	s15, r3
 800f236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f23a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800f23e:	697b      	ldr	r3, [r7, #20]
 800f240:	2b00      	cmp	r3, #0
 800f242:	f000 8111 	beq.w	800f468 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800f246:	69bb      	ldr	r3, [r7, #24]
 800f248:	2b02      	cmp	r3, #2
 800f24a:	f000 8083 	beq.w	800f354 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800f24e:	69bb      	ldr	r3, [r7, #24]
 800f250:	2b02      	cmp	r3, #2
 800f252:	f200 80a1 	bhi.w	800f398 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800f256:	69bb      	ldr	r3, [r7, #24]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d003      	beq.n	800f264 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800f25c:	69bb      	ldr	r3, [r7, #24]
 800f25e:	2b01      	cmp	r3, #1
 800f260:	d056      	beq.n	800f310 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800f262:	e099      	b.n	800f398 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f264:	4b88      	ldr	r3, [pc, #544]	@ (800f488 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	f003 0320 	and.w	r3, r3, #32
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d02d      	beq.n	800f2cc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f270:	4b85      	ldr	r3, [pc, #532]	@ (800f488 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	08db      	lsrs	r3, r3, #3
 800f276:	f003 0303 	and.w	r3, r3, #3
 800f27a:	4a84      	ldr	r2, [pc, #528]	@ (800f48c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800f27c:	fa22 f303 	lsr.w	r3, r2, r3
 800f280:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f282:	68bb      	ldr	r3, [r7, #8]
 800f284:	ee07 3a90 	vmov	s15, r3
 800f288:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f28c:	697b      	ldr	r3, [r7, #20]
 800f28e:	ee07 3a90 	vmov	s15, r3
 800f292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f296:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f29a:	4b7b      	ldr	r3, [pc, #492]	@ (800f488 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f29c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f29e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f2a2:	ee07 3a90 	vmov	s15, r3
 800f2a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f2aa:	ed97 6a03 	vldr	s12, [r7, #12]
 800f2ae:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800f490 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f2b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f2b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f2ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f2be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f2c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f2c6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800f2ca:	e087      	b.n	800f3dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f2cc:	697b      	ldr	r3, [r7, #20]
 800f2ce:	ee07 3a90 	vmov	s15, r3
 800f2d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f2d6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800f494 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800f2da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f2de:	4b6a      	ldr	r3, [pc, #424]	@ (800f488 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f2e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f2e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f2e6:	ee07 3a90 	vmov	s15, r3
 800f2ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f2ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800f2f2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800f490 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f2f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f2fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f2fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f302:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f306:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f30a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f30e:	e065      	b.n	800f3dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f310:	697b      	ldr	r3, [r7, #20]
 800f312:	ee07 3a90 	vmov	s15, r3
 800f316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f31a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800f498 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800f31e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f322:	4b59      	ldr	r3, [pc, #356]	@ (800f488 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f326:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f32a:	ee07 3a90 	vmov	s15, r3
 800f32e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f332:	ed97 6a03 	vldr	s12, [r7, #12]
 800f336:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800f490 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f33a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f33e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f342:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f346:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f34a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f34e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f352:	e043      	b.n	800f3dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f354:	697b      	ldr	r3, [r7, #20]
 800f356:	ee07 3a90 	vmov	s15, r3
 800f35a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f35e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800f49c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800f362:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f366:	4b48      	ldr	r3, [pc, #288]	@ (800f488 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f36a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f36e:	ee07 3a90 	vmov	s15, r3
 800f372:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f376:	ed97 6a03 	vldr	s12, [r7, #12]
 800f37a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800f490 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f37e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f382:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f386:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f38a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f38e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f392:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f396:	e021      	b.n	800f3dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f398:	697b      	ldr	r3, [r7, #20]
 800f39a:	ee07 3a90 	vmov	s15, r3
 800f39e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f3a2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800f498 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800f3a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f3aa:	4b37      	ldr	r3, [pc, #220]	@ (800f488 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f3ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f3ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f3b2:	ee07 3a90 	vmov	s15, r3
 800f3b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f3ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800f3be:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800f490 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f3c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f3c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f3ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f3ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f3d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f3d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f3da:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800f3dc:	4b2a      	ldr	r3, [pc, #168]	@ (800f488 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f3de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f3e0:	0a5b      	lsrs	r3, r3, #9
 800f3e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f3e6:	ee07 3a90 	vmov	s15, r3
 800f3ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f3ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f3f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f3f6:	edd7 6a07 	vldr	s13, [r7, #28]
 800f3fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f3fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f402:	ee17 2a90 	vmov	r2, s15
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800f40a:	4b1f      	ldr	r3, [pc, #124]	@ (800f488 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f40c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f40e:	0c1b      	lsrs	r3, r3, #16
 800f410:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f414:	ee07 3a90 	vmov	s15, r3
 800f418:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f41c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f420:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f424:	edd7 6a07 	vldr	s13, [r7, #28]
 800f428:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f42c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f430:	ee17 2a90 	vmov	r2, s15
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800f438:	4b13      	ldr	r3, [pc, #76]	@ (800f488 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f43a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f43c:	0e1b      	lsrs	r3, r3, #24
 800f43e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f442:	ee07 3a90 	vmov	s15, r3
 800f446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f44a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f44e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f452:	edd7 6a07 	vldr	s13, [r7, #28]
 800f456:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f45a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f45e:	ee17 2a90 	vmov	r2, s15
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800f466:	e008      	b.n	800f47a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	2200      	movs	r2, #0
 800f46c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	2200      	movs	r2, #0
 800f472:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	2200      	movs	r2, #0
 800f478:	609a      	str	r2, [r3, #8]
}
 800f47a:	bf00      	nop
 800f47c:	3724      	adds	r7, #36	@ 0x24
 800f47e:	46bd      	mov	sp, r7
 800f480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f484:	4770      	bx	lr
 800f486:	bf00      	nop
 800f488:	58024400 	.word	0x58024400
 800f48c:	03d09000 	.word	0x03d09000
 800f490:	46000000 	.word	0x46000000
 800f494:	4c742400 	.word	0x4c742400
 800f498:	4a742400 	.word	0x4a742400
 800f49c:	4bbebc20 	.word	0x4bbebc20

0800f4a0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800f4a0:	b580      	push	{r7, lr}
 800f4a2:	b084      	sub	sp, #16
 800f4a4:	af00      	add	r7, sp, #0
 800f4a6:	6078      	str	r0, [r7, #4]
 800f4a8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f4aa:	2300      	movs	r3, #0
 800f4ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800f4ae:	4b53      	ldr	r3, [pc, #332]	@ (800f5fc <RCCEx_PLL2_Config+0x15c>)
 800f4b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f4b2:	f003 0303 	and.w	r3, r3, #3
 800f4b6:	2b03      	cmp	r3, #3
 800f4b8:	d101      	bne.n	800f4be <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800f4ba:	2301      	movs	r3, #1
 800f4bc:	e099      	b.n	800f5f2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800f4be:	4b4f      	ldr	r3, [pc, #316]	@ (800f5fc <RCCEx_PLL2_Config+0x15c>)
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	4a4e      	ldr	r2, [pc, #312]	@ (800f5fc <RCCEx_PLL2_Config+0x15c>)
 800f4c4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800f4c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f4ca:	f7f7 fb6d 	bl	8006ba8 <HAL_GetTick>
 800f4ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800f4d0:	e008      	b.n	800f4e4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800f4d2:	f7f7 fb69 	bl	8006ba8 <HAL_GetTick>
 800f4d6:	4602      	mov	r2, r0
 800f4d8:	68bb      	ldr	r3, [r7, #8]
 800f4da:	1ad3      	subs	r3, r2, r3
 800f4dc:	2b02      	cmp	r3, #2
 800f4de:	d901      	bls.n	800f4e4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800f4e0:	2303      	movs	r3, #3
 800f4e2:	e086      	b.n	800f5f2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800f4e4:	4b45      	ldr	r3, [pc, #276]	@ (800f5fc <RCCEx_PLL2_Config+0x15c>)
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d1f0      	bne.n	800f4d2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800f4f0:	4b42      	ldr	r3, [pc, #264]	@ (800f5fc <RCCEx_PLL2_Config+0x15c>)
 800f4f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f4f4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	031b      	lsls	r3, r3, #12
 800f4fe:	493f      	ldr	r1, [pc, #252]	@ (800f5fc <RCCEx_PLL2_Config+0x15c>)
 800f500:	4313      	orrs	r3, r2
 800f502:	628b      	str	r3, [r1, #40]	@ 0x28
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	685b      	ldr	r3, [r3, #4]
 800f508:	3b01      	subs	r3, #1
 800f50a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	689b      	ldr	r3, [r3, #8]
 800f512:	3b01      	subs	r3, #1
 800f514:	025b      	lsls	r3, r3, #9
 800f516:	b29b      	uxth	r3, r3
 800f518:	431a      	orrs	r2, r3
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	68db      	ldr	r3, [r3, #12]
 800f51e:	3b01      	subs	r3, #1
 800f520:	041b      	lsls	r3, r3, #16
 800f522:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800f526:	431a      	orrs	r2, r3
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	691b      	ldr	r3, [r3, #16]
 800f52c:	3b01      	subs	r3, #1
 800f52e:	061b      	lsls	r3, r3, #24
 800f530:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800f534:	4931      	ldr	r1, [pc, #196]	@ (800f5fc <RCCEx_PLL2_Config+0x15c>)
 800f536:	4313      	orrs	r3, r2
 800f538:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800f53a:	4b30      	ldr	r3, [pc, #192]	@ (800f5fc <RCCEx_PLL2_Config+0x15c>)
 800f53c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f53e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	695b      	ldr	r3, [r3, #20]
 800f546:	492d      	ldr	r1, [pc, #180]	@ (800f5fc <RCCEx_PLL2_Config+0x15c>)
 800f548:	4313      	orrs	r3, r2
 800f54a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800f54c:	4b2b      	ldr	r3, [pc, #172]	@ (800f5fc <RCCEx_PLL2_Config+0x15c>)
 800f54e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f550:	f023 0220 	bic.w	r2, r3, #32
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	699b      	ldr	r3, [r3, #24]
 800f558:	4928      	ldr	r1, [pc, #160]	@ (800f5fc <RCCEx_PLL2_Config+0x15c>)
 800f55a:	4313      	orrs	r3, r2
 800f55c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800f55e:	4b27      	ldr	r3, [pc, #156]	@ (800f5fc <RCCEx_PLL2_Config+0x15c>)
 800f560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f562:	4a26      	ldr	r2, [pc, #152]	@ (800f5fc <RCCEx_PLL2_Config+0x15c>)
 800f564:	f023 0310 	bic.w	r3, r3, #16
 800f568:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800f56a:	4b24      	ldr	r3, [pc, #144]	@ (800f5fc <RCCEx_PLL2_Config+0x15c>)
 800f56c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f56e:	4b24      	ldr	r3, [pc, #144]	@ (800f600 <RCCEx_PLL2_Config+0x160>)
 800f570:	4013      	ands	r3, r2
 800f572:	687a      	ldr	r2, [r7, #4]
 800f574:	69d2      	ldr	r2, [r2, #28]
 800f576:	00d2      	lsls	r2, r2, #3
 800f578:	4920      	ldr	r1, [pc, #128]	@ (800f5fc <RCCEx_PLL2_Config+0x15c>)
 800f57a:	4313      	orrs	r3, r2
 800f57c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800f57e:	4b1f      	ldr	r3, [pc, #124]	@ (800f5fc <RCCEx_PLL2_Config+0x15c>)
 800f580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f582:	4a1e      	ldr	r2, [pc, #120]	@ (800f5fc <RCCEx_PLL2_Config+0x15c>)
 800f584:	f043 0310 	orr.w	r3, r3, #16
 800f588:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800f58a:	683b      	ldr	r3, [r7, #0]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d106      	bne.n	800f59e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800f590:	4b1a      	ldr	r3, [pc, #104]	@ (800f5fc <RCCEx_PLL2_Config+0x15c>)
 800f592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f594:	4a19      	ldr	r2, [pc, #100]	@ (800f5fc <RCCEx_PLL2_Config+0x15c>)
 800f596:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f59a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800f59c:	e00f      	b.n	800f5be <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800f59e:	683b      	ldr	r3, [r7, #0]
 800f5a0:	2b01      	cmp	r3, #1
 800f5a2:	d106      	bne.n	800f5b2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800f5a4:	4b15      	ldr	r3, [pc, #84]	@ (800f5fc <RCCEx_PLL2_Config+0x15c>)
 800f5a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f5a8:	4a14      	ldr	r2, [pc, #80]	@ (800f5fc <RCCEx_PLL2_Config+0x15c>)
 800f5aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f5ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800f5b0:	e005      	b.n	800f5be <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800f5b2:	4b12      	ldr	r3, [pc, #72]	@ (800f5fc <RCCEx_PLL2_Config+0x15c>)
 800f5b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f5b6:	4a11      	ldr	r2, [pc, #68]	@ (800f5fc <RCCEx_PLL2_Config+0x15c>)
 800f5b8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800f5bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800f5be:	4b0f      	ldr	r3, [pc, #60]	@ (800f5fc <RCCEx_PLL2_Config+0x15c>)
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	4a0e      	ldr	r2, [pc, #56]	@ (800f5fc <RCCEx_PLL2_Config+0x15c>)
 800f5c4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800f5c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f5ca:	f7f7 faed 	bl	8006ba8 <HAL_GetTick>
 800f5ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800f5d0:	e008      	b.n	800f5e4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800f5d2:	f7f7 fae9 	bl	8006ba8 <HAL_GetTick>
 800f5d6:	4602      	mov	r2, r0
 800f5d8:	68bb      	ldr	r3, [r7, #8]
 800f5da:	1ad3      	subs	r3, r2, r3
 800f5dc:	2b02      	cmp	r3, #2
 800f5de:	d901      	bls.n	800f5e4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800f5e0:	2303      	movs	r3, #3
 800f5e2:	e006      	b.n	800f5f2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800f5e4:	4b05      	ldr	r3, [pc, #20]	@ (800f5fc <RCCEx_PLL2_Config+0x15c>)
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d0f0      	beq.n	800f5d2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800f5f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5f2:	4618      	mov	r0, r3
 800f5f4:	3710      	adds	r7, #16
 800f5f6:	46bd      	mov	sp, r7
 800f5f8:	bd80      	pop	{r7, pc}
 800f5fa:	bf00      	nop
 800f5fc:	58024400 	.word	0x58024400
 800f600:	ffff0007 	.word	0xffff0007

0800f604 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800f604:	b580      	push	{r7, lr}
 800f606:	b084      	sub	sp, #16
 800f608:	af00      	add	r7, sp, #0
 800f60a:	6078      	str	r0, [r7, #4]
 800f60c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f60e:	2300      	movs	r3, #0
 800f610:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800f612:	4b53      	ldr	r3, [pc, #332]	@ (800f760 <RCCEx_PLL3_Config+0x15c>)
 800f614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f616:	f003 0303 	and.w	r3, r3, #3
 800f61a:	2b03      	cmp	r3, #3
 800f61c:	d101      	bne.n	800f622 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800f61e:	2301      	movs	r3, #1
 800f620:	e099      	b.n	800f756 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800f622:	4b4f      	ldr	r3, [pc, #316]	@ (800f760 <RCCEx_PLL3_Config+0x15c>)
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	4a4e      	ldr	r2, [pc, #312]	@ (800f760 <RCCEx_PLL3_Config+0x15c>)
 800f628:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f62c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f62e:	f7f7 fabb 	bl	8006ba8 <HAL_GetTick>
 800f632:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800f634:	e008      	b.n	800f648 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800f636:	f7f7 fab7 	bl	8006ba8 <HAL_GetTick>
 800f63a:	4602      	mov	r2, r0
 800f63c:	68bb      	ldr	r3, [r7, #8]
 800f63e:	1ad3      	subs	r3, r2, r3
 800f640:	2b02      	cmp	r3, #2
 800f642:	d901      	bls.n	800f648 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800f644:	2303      	movs	r3, #3
 800f646:	e086      	b.n	800f756 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800f648:	4b45      	ldr	r3, [pc, #276]	@ (800f760 <RCCEx_PLL3_Config+0x15c>)
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f650:	2b00      	cmp	r3, #0
 800f652:	d1f0      	bne.n	800f636 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800f654:	4b42      	ldr	r3, [pc, #264]	@ (800f760 <RCCEx_PLL3_Config+0x15c>)
 800f656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f658:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	051b      	lsls	r3, r3, #20
 800f662:	493f      	ldr	r1, [pc, #252]	@ (800f760 <RCCEx_PLL3_Config+0x15c>)
 800f664:	4313      	orrs	r3, r2
 800f666:	628b      	str	r3, [r1, #40]	@ 0x28
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	685b      	ldr	r3, [r3, #4]
 800f66c:	3b01      	subs	r3, #1
 800f66e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	689b      	ldr	r3, [r3, #8]
 800f676:	3b01      	subs	r3, #1
 800f678:	025b      	lsls	r3, r3, #9
 800f67a:	b29b      	uxth	r3, r3
 800f67c:	431a      	orrs	r2, r3
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	68db      	ldr	r3, [r3, #12]
 800f682:	3b01      	subs	r3, #1
 800f684:	041b      	lsls	r3, r3, #16
 800f686:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800f68a:	431a      	orrs	r2, r3
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	691b      	ldr	r3, [r3, #16]
 800f690:	3b01      	subs	r3, #1
 800f692:	061b      	lsls	r3, r3, #24
 800f694:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800f698:	4931      	ldr	r1, [pc, #196]	@ (800f760 <RCCEx_PLL3_Config+0x15c>)
 800f69a:	4313      	orrs	r3, r2
 800f69c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800f69e:	4b30      	ldr	r3, [pc, #192]	@ (800f760 <RCCEx_PLL3_Config+0x15c>)
 800f6a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f6a2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	695b      	ldr	r3, [r3, #20]
 800f6aa:	492d      	ldr	r1, [pc, #180]	@ (800f760 <RCCEx_PLL3_Config+0x15c>)
 800f6ac:	4313      	orrs	r3, r2
 800f6ae:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800f6b0:	4b2b      	ldr	r3, [pc, #172]	@ (800f760 <RCCEx_PLL3_Config+0x15c>)
 800f6b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f6b4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	699b      	ldr	r3, [r3, #24]
 800f6bc:	4928      	ldr	r1, [pc, #160]	@ (800f760 <RCCEx_PLL3_Config+0x15c>)
 800f6be:	4313      	orrs	r3, r2
 800f6c0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800f6c2:	4b27      	ldr	r3, [pc, #156]	@ (800f760 <RCCEx_PLL3_Config+0x15c>)
 800f6c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f6c6:	4a26      	ldr	r2, [pc, #152]	@ (800f760 <RCCEx_PLL3_Config+0x15c>)
 800f6c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f6cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800f6ce:	4b24      	ldr	r3, [pc, #144]	@ (800f760 <RCCEx_PLL3_Config+0x15c>)
 800f6d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f6d2:	4b24      	ldr	r3, [pc, #144]	@ (800f764 <RCCEx_PLL3_Config+0x160>)
 800f6d4:	4013      	ands	r3, r2
 800f6d6:	687a      	ldr	r2, [r7, #4]
 800f6d8:	69d2      	ldr	r2, [r2, #28]
 800f6da:	00d2      	lsls	r2, r2, #3
 800f6dc:	4920      	ldr	r1, [pc, #128]	@ (800f760 <RCCEx_PLL3_Config+0x15c>)
 800f6de:	4313      	orrs	r3, r2
 800f6e0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800f6e2:	4b1f      	ldr	r3, [pc, #124]	@ (800f760 <RCCEx_PLL3_Config+0x15c>)
 800f6e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f6e6:	4a1e      	ldr	r2, [pc, #120]	@ (800f760 <RCCEx_PLL3_Config+0x15c>)
 800f6e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f6ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800f6ee:	683b      	ldr	r3, [r7, #0]
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d106      	bne.n	800f702 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800f6f4:	4b1a      	ldr	r3, [pc, #104]	@ (800f760 <RCCEx_PLL3_Config+0x15c>)
 800f6f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f6f8:	4a19      	ldr	r2, [pc, #100]	@ (800f760 <RCCEx_PLL3_Config+0x15c>)
 800f6fa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800f6fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800f700:	e00f      	b.n	800f722 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800f702:	683b      	ldr	r3, [r7, #0]
 800f704:	2b01      	cmp	r3, #1
 800f706:	d106      	bne.n	800f716 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800f708:	4b15      	ldr	r3, [pc, #84]	@ (800f760 <RCCEx_PLL3_Config+0x15c>)
 800f70a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f70c:	4a14      	ldr	r2, [pc, #80]	@ (800f760 <RCCEx_PLL3_Config+0x15c>)
 800f70e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800f712:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800f714:	e005      	b.n	800f722 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800f716:	4b12      	ldr	r3, [pc, #72]	@ (800f760 <RCCEx_PLL3_Config+0x15c>)
 800f718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f71a:	4a11      	ldr	r2, [pc, #68]	@ (800f760 <RCCEx_PLL3_Config+0x15c>)
 800f71c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800f720:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800f722:	4b0f      	ldr	r3, [pc, #60]	@ (800f760 <RCCEx_PLL3_Config+0x15c>)
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	4a0e      	ldr	r2, [pc, #56]	@ (800f760 <RCCEx_PLL3_Config+0x15c>)
 800f728:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f72c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f72e:	f7f7 fa3b 	bl	8006ba8 <HAL_GetTick>
 800f732:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800f734:	e008      	b.n	800f748 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800f736:	f7f7 fa37 	bl	8006ba8 <HAL_GetTick>
 800f73a:	4602      	mov	r2, r0
 800f73c:	68bb      	ldr	r3, [r7, #8]
 800f73e:	1ad3      	subs	r3, r2, r3
 800f740:	2b02      	cmp	r3, #2
 800f742:	d901      	bls.n	800f748 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800f744:	2303      	movs	r3, #3
 800f746:	e006      	b.n	800f756 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800f748:	4b05      	ldr	r3, [pc, #20]	@ (800f760 <RCCEx_PLL3_Config+0x15c>)
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f750:	2b00      	cmp	r3, #0
 800f752:	d0f0      	beq.n	800f736 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800f754:	7bfb      	ldrb	r3, [r7, #15]
}
 800f756:	4618      	mov	r0, r3
 800f758:	3710      	adds	r7, #16
 800f75a:	46bd      	mov	sp, r7
 800f75c:	bd80      	pop	{r7, pc}
 800f75e:	bf00      	nop
 800f760:	58024400 	.word	0x58024400
 800f764:	ffff0007 	.word	0xffff0007

0800f768 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f768:	b580      	push	{r7, lr}
 800f76a:	b082      	sub	sp, #8
 800f76c:	af00      	add	r7, sp, #0
 800f76e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	2b00      	cmp	r3, #0
 800f774:	d101      	bne.n	800f77a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f776:	2301      	movs	r3, #1
 800f778:	e049      	b.n	800f80e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f780:	b2db      	uxtb	r3, r3
 800f782:	2b00      	cmp	r3, #0
 800f784:	d106      	bne.n	800f794 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	2200      	movs	r2, #0
 800f78a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f78e:	6878      	ldr	r0, [r7, #4]
 800f790:	f7f6 fc60 	bl	8006054 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	2202      	movs	r2, #2
 800f798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	681a      	ldr	r2, [r3, #0]
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	3304      	adds	r3, #4
 800f7a4:	4619      	mov	r1, r3
 800f7a6:	4610      	mov	r0, r2
 800f7a8:	f001 fa24 	bl	8010bf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	2201      	movs	r2, #1
 800f7b0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	2201      	movs	r2, #1
 800f7b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	2201      	movs	r2, #1
 800f7c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	2201      	movs	r2, #1
 800f7c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	2201      	movs	r2, #1
 800f7d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	2201      	movs	r2, #1
 800f7d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	2201      	movs	r2, #1
 800f7e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	2201      	movs	r2, #1
 800f7e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	2201      	movs	r2, #1
 800f7f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	2201      	movs	r2, #1
 800f7f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	2201      	movs	r2, #1
 800f800:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	2201      	movs	r2, #1
 800f808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f80c:	2300      	movs	r3, #0
}
 800f80e:	4618      	mov	r0, r3
 800f810:	3708      	adds	r7, #8
 800f812:	46bd      	mov	sp, r7
 800f814:	bd80      	pop	{r7, pc}
	...

0800f818 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800f818:	b480      	push	{r7}
 800f81a:	b085      	sub	sp, #20
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f826:	b2db      	uxtb	r3, r3
 800f828:	2b01      	cmp	r3, #1
 800f82a:	d001      	beq.n	800f830 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800f82c:	2301      	movs	r3, #1
 800f82e:	e056      	b.n	800f8de <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	2202      	movs	r2, #2
 800f834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	4a2b      	ldr	r2, [pc, #172]	@ (800f8ec <HAL_TIM_Base_Start+0xd4>)
 800f83e:	4293      	cmp	r3, r2
 800f840:	d02c      	beq.n	800f89c <HAL_TIM_Base_Start+0x84>
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f84a:	d027      	beq.n	800f89c <HAL_TIM_Base_Start+0x84>
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	4a27      	ldr	r2, [pc, #156]	@ (800f8f0 <HAL_TIM_Base_Start+0xd8>)
 800f852:	4293      	cmp	r3, r2
 800f854:	d022      	beq.n	800f89c <HAL_TIM_Base_Start+0x84>
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	4a26      	ldr	r2, [pc, #152]	@ (800f8f4 <HAL_TIM_Base_Start+0xdc>)
 800f85c:	4293      	cmp	r3, r2
 800f85e:	d01d      	beq.n	800f89c <HAL_TIM_Base_Start+0x84>
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	4a24      	ldr	r2, [pc, #144]	@ (800f8f8 <HAL_TIM_Base_Start+0xe0>)
 800f866:	4293      	cmp	r3, r2
 800f868:	d018      	beq.n	800f89c <HAL_TIM_Base_Start+0x84>
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	4a23      	ldr	r2, [pc, #140]	@ (800f8fc <HAL_TIM_Base_Start+0xe4>)
 800f870:	4293      	cmp	r3, r2
 800f872:	d013      	beq.n	800f89c <HAL_TIM_Base_Start+0x84>
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	4a21      	ldr	r2, [pc, #132]	@ (800f900 <HAL_TIM_Base_Start+0xe8>)
 800f87a:	4293      	cmp	r3, r2
 800f87c:	d00e      	beq.n	800f89c <HAL_TIM_Base_Start+0x84>
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	4a20      	ldr	r2, [pc, #128]	@ (800f904 <HAL_TIM_Base_Start+0xec>)
 800f884:	4293      	cmp	r3, r2
 800f886:	d009      	beq.n	800f89c <HAL_TIM_Base_Start+0x84>
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	4a1e      	ldr	r2, [pc, #120]	@ (800f908 <HAL_TIM_Base_Start+0xf0>)
 800f88e:	4293      	cmp	r3, r2
 800f890:	d004      	beq.n	800f89c <HAL_TIM_Base_Start+0x84>
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	4a1d      	ldr	r2, [pc, #116]	@ (800f90c <HAL_TIM_Base_Start+0xf4>)
 800f898:	4293      	cmp	r3, r2
 800f89a:	d115      	bne.n	800f8c8 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	689a      	ldr	r2, [r3, #8]
 800f8a2:	4b1b      	ldr	r3, [pc, #108]	@ (800f910 <HAL_TIM_Base_Start+0xf8>)
 800f8a4:	4013      	ands	r3, r2
 800f8a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	2b06      	cmp	r3, #6
 800f8ac:	d015      	beq.n	800f8da <HAL_TIM_Base_Start+0xc2>
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f8b4:	d011      	beq.n	800f8da <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	681a      	ldr	r2, [r3, #0]
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	f042 0201 	orr.w	r2, r2, #1
 800f8c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f8c6:	e008      	b.n	800f8da <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	681a      	ldr	r2, [r3, #0]
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	f042 0201 	orr.w	r2, r2, #1
 800f8d6:	601a      	str	r2, [r3, #0]
 800f8d8:	e000      	b.n	800f8dc <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f8da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f8dc:	2300      	movs	r3, #0
}
 800f8de:	4618      	mov	r0, r3
 800f8e0:	3714      	adds	r7, #20
 800f8e2:	46bd      	mov	sp, r7
 800f8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e8:	4770      	bx	lr
 800f8ea:	bf00      	nop
 800f8ec:	40010000 	.word	0x40010000
 800f8f0:	40000400 	.word	0x40000400
 800f8f4:	40000800 	.word	0x40000800
 800f8f8:	40000c00 	.word	0x40000c00
 800f8fc:	40010400 	.word	0x40010400
 800f900:	40001800 	.word	0x40001800
 800f904:	40014000 	.word	0x40014000
 800f908:	4000e000 	.word	0x4000e000
 800f90c:	4000e400 	.word	0x4000e400
 800f910:	00010007 	.word	0x00010007

0800f914 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800f914:	b480      	push	{r7}
 800f916:	b083      	sub	sp, #12
 800f918:	af00      	add	r7, sp, #0
 800f91a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	6a1a      	ldr	r2, [r3, #32]
 800f922:	f241 1311 	movw	r3, #4369	@ 0x1111
 800f926:	4013      	ands	r3, r2
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d10f      	bne.n	800f94c <HAL_TIM_Base_Stop+0x38>
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	6a1a      	ldr	r2, [r3, #32]
 800f932:	f240 4344 	movw	r3, #1092	@ 0x444
 800f936:	4013      	ands	r3, r2
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d107      	bne.n	800f94c <HAL_TIM_Base_Stop+0x38>
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	681a      	ldr	r2, [r3, #0]
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	f022 0201 	bic.w	r2, r2, #1
 800f94a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	2201      	movs	r2, #1
 800f950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800f954:	2300      	movs	r3, #0
}
 800f956:	4618      	mov	r0, r3
 800f958:	370c      	adds	r7, #12
 800f95a:	46bd      	mov	sp, r7
 800f95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f960:	4770      	bx	lr
	...

0800f964 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f964:	b480      	push	{r7}
 800f966:	b085      	sub	sp, #20
 800f968:	af00      	add	r7, sp, #0
 800f96a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f972:	b2db      	uxtb	r3, r3
 800f974:	2b01      	cmp	r3, #1
 800f976:	d001      	beq.n	800f97c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800f978:	2301      	movs	r3, #1
 800f97a:	e05e      	b.n	800fa3a <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	2202      	movs	r2, #2
 800f980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	68da      	ldr	r2, [r3, #12]
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	f042 0201 	orr.w	r2, r2, #1
 800f992:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	4a2b      	ldr	r2, [pc, #172]	@ (800fa48 <HAL_TIM_Base_Start_IT+0xe4>)
 800f99a:	4293      	cmp	r3, r2
 800f99c:	d02c      	beq.n	800f9f8 <HAL_TIM_Base_Start_IT+0x94>
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f9a6:	d027      	beq.n	800f9f8 <HAL_TIM_Base_Start_IT+0x94>
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	4a27      	ldr	r2, [pc, #156]	@ (800fa4c <HAL_TIM_Base_Start_IT+0xe8>)
 800f9ae:	4293      	cmp	r3, r2
 800f9b0:	d022      	beq.n	800f9f8 <HAL_TIM_Base_Start_IT+0x94>
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	4a26      	ldr	r2, [pc, #152]	@ (800fa50 <HAL_TIM_Base_Start_IT+0xec>)
 800f9b8:	4293      	cmp	r3, r2
 800f9ba:	d01d      	beq.n	800f9f8 <HAL_TIM_Base_Start_IT+0x94>
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	4a24      	ldr	r2, [pc, #144]	@ (800fa54 <HAL_TIM_Base_Start_IT+0xf0>)
 800f9c2:	4293      	cmp	r3, r2
 800f9c4:	d018      	beq.n	800f9f8 <HAL_TIM_Base_Start_IT+0x94>
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	4a23      	ldr	r2, [pc, #140]	@ (800fa58 <HAL_TIM_Base_Start_IT+0xf4>)
 800f9cc:	4293      	cmp	r3, r2
 800f9ce:	d013      	beq.n	800f9f8 <HAL_TIM_Base_Start_IT+0x94>
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	4a21      	ldr	r2, [pc, #132]	@ (800fa5c <HAL_TIM_Base_Start_IT+0xf8>)
 800f9d6:	4293      	cmp	r3, r2
 800f9d8:	d00e      	beq.n	800f9f8 <HAL_TIM_Base_Start_IT+0x94>
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	4a20      	ldr	r2, [pc, #128]	@ (800fa60 <HAL_TIM_Base_Start_IT+0xfc>)
 800f9e0:	4293      	cmp	r3, r2
 800f9e2:	d009      	beq.n	800f9f8 <HAL_TIM_Base_Start_IT+0x94>
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	4a1e      	ldr	r2, [pc, #120]	@ (800fa64 <HAL_TIM_Base_Start_IT+0x100>)
 800f9ea:	4293      	cmp	r3, r2
 800f9ec:	d004      	beq.n	800f9f8 <HAL_TIM_Base_Start_IT+0x94>
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	4a1d      	ldr	r2, [pc, #116]	@ (800fa68 <HAL_TIM_Base_Start_IT+0x104>)
 800f9f4:	4293      	cmp	r3, r2
 800f9f6:	d115      	bne.n	800fa24 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	689a      	ldr	r2, [r3, #8]
 800f9fe:	4b1b      	ldr	r3, [pc, #108]	@ (800fa6c <HAL_TIM_Base_Start_IT+0x108>)
 800fa00:	4013      	ands	r3, r2
 800fa02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	2b06      	cmp	r3, #6
 800fa08:	d015      	beq.n	800fa36 <HAL_TIM_Base_Start_IT+0xd2>
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fa10:	d011      	beq.n	800fa36 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	681a      	ldr	r2, [r3, #0]
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	f042 0201 	orr.w	r2, r2, #1
 800fa20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fa22:	e008      	b.n	800fa36 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	681a      	ldr	r2, [r3, #0]
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	f042 0201 	orr.w	r2, r2, #1
 800fa32:	601a      	str	r2, [r3, #0]
 800fa34:	e000      	b.n	800fa38 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fa36:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800fa38:	2300      	movs	r3, #0
}
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	3714      	adds	r7, #20
 800fa3e:	46bd      	mov	sp, r7
 800fa40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa44:	4770      	bx	lr
 800fa46:	bf00      	nop
 800fa48:	40010000 	.word	0x40010000
 800fa4c:	40000400 	.word	0x40000400
 800fa50:	40000800 	.word	0x40000800
 800fa54:	40000c00 	.word	0x40000c00
 800fa58:	40010400 	.word	0x40010400
 800fa5c:	40001800 	.word	0x40001800
 800fa60:	40014000 	.word	0x40014000
 800fa64:	4000e000 	.word	0x4000e000
 800fa68:	4000e400 	.word	0x4000e400
 800fa6c:	00010007 	.word	0x00010007

0800fa70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800fa70:	b580      	push	{r7, lr}
 800fa72:	b082      	sub	sp, #8
 800fa74:	af00      	add	r7, sp, #0
 800fa76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d101      	bne.n	800fa82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800fa7e:	2301      	movs	r3, #1
 800fa80:	e049      	b.n	800fb16 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800fa88:	b2db      	uxtb	r3, r3
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d106      	bne.n	800fa9c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	2200      	movs	r2, #0
 800fa92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800fa96:	6878      	ldr	r0, [r7, #4]
 800fa98:	f000 f841 	bl	800fb1e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	2202      	movs	r2, #2
 800faa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	681a      	ldr	r2, [r3, #0]
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	3304      	adds	r3, #4
 800faac:	4619      	mov	r1, r3
 800faae:	4610      	mov	r0, r2
 800fab0:	f001 f8a0 	bl	8010bf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	2201      	movs	r2, #1
 800fab8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	2201      	movs	r2, #1
 800fac0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	2201      	movs	r2, #1
 800fac8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	2201      	movs	r2, #1
 800fad0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	2201      	movs	r2, #1
 800fad8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	2201      	movs	r2, #1
 800fae0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	2201      	movs	r2, #1
 800fae8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	2201      	movs	r2, #1
 800faf0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	2201      	movs	r2, #1
 800faf8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	2201      	movs	r2, #1
 800fb00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	2201      	movs	r2, #1
 800fb08:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	2201      	movs	r2, #1
 800fb10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800fb14:	2300      	movs	r3, #0
}
 800fb16:	4618      	mov	r0, r3
 800fb18:	3708      	adds	r7, #8
 800fb1a:	46bd      	mov	sp, r7
 800fb1c:	bd80      	pop	{r7, pc}

0800fb1e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800fb1e:	b480      	push	{r7}
 800fb20:	b083      	sub	sp, #12
 800fb22:	af00      	add	r7, sp, #0
 800fb24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800fb26:	bf00      	nop
 800fb28:	370c      	adds	r7, #12
 800fb2a:	46bd      	mov	sp, r7
 800fb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb30:	4770      	bx	lr
	...

0800fb34 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800fb34:	b580      	push	{r7, lr}
 800fb36:	b084      	sub	sp, #16
 800fb38:	af00      	add	r7, sp, #0
 800fb3a:	6078      	str	r0, [r7, #4]
 800fb3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800fb3e:	683b      	ldr	r3, [r7, #0]
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d109      	bne.n	800fb58 <HAL_TIM_PWM_Start+0x24>
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800fb4a:	b2db      	uxtb	r3, r3
 800fb4c:	2b01      	cmp	r3, #1
 800fb4e:	bf14      	ite	ne
 800fb50:	2301      	movne	r3, #1
 800fb52:	2300      	moveq	r3, #0
 800fb54:	b2db      	uxtb	r3, r3
 800fb56:	e03c      	b.n	800fbd2 <HAL_TIM_PWM_Start+0x9e>
 800fb58:	683b      	ldr	r3, [r7, #0]
 800fb5a:	2b04      	cmp	r3, #4
 800fb5c:	d109      	bne.n	800fb72 <HAL_TIM_PWM_Start+0x3e>
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800fb64:	b2db      	uxtb	r3, r3
 800fb66:	2b01      	cmp	r3, #1
 800fb68:	bf14      	ite	ne
 800fb6a:	2301      	movne	r3, #1
 800fb6c:	2300      	moveq	r3, #0
 800fb6e:	b2db      	uxtb	r3, r3
 800fb70:	e02f      	b.n	800fbd2 <HAL_TIM_PWM_Start+0x9e>
 800fb72:	683b      	ldr	r3, [r7, #0]
 800fb74:	2b08      	cmp	r3, #8
 800fb76:	d109      	bne.n	800fb8c <HAL_TIM_PWM_Start+0x58>
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800fb7e:	b2db      	uxtb	r3, r3
 800fb80:	2b01      	cmp	r3, #1
 800fb82:	bf14      	ite	ne
 800fb84:	2301      	movne	r3, #1
 800fb86:	2300      	moveq	r3, #0
 800fb88:	b2db      	uxtb	r3, r3
 800fb8a:	e022      	b.n	800fbd2 <HAL_TIM_PWM_Start+0x9e>
 800fb8c:	683b      	ldr	r3, [r7, #0]
 800fb8e:	2b0c      	cmp	r3, #12
 800fb90:	d109      	bne.n	800fba6 <HAL_TIM_PWM_Start+0x72>
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fb98:	b2db      	uxtb	r3, r3
 800fb9a:	2b01      	cmp	r3, #1
 800fb9c:	bf14      	ite	ne
 800fb9e:	2301      	movne	r3, #1
 800fba0:	2300      	moveq	r3, #0
 800fba2:	b2db      	uxtb	r3, r3
 800fba4:	e015      	b.n	800fbd2 <HAL_TIM_PWM_Start+0x9e>
 800fba6:	683b      	ldr	r3, [r7, #0]
 800fba8:	2b10      	cmp	r3, #16
 800fbaa:	d109      	bne.n	800fbc0 <HAL_TIM_PWM_Start+0x8c>
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800fbb2:	b2db      	uxtb	r3, r3
 800fbb4:	2b01      	cmp	r3, #1
 800fbb6:	bf14      	ite	ne
 800fbb8:	2301      	movne	r3, #1
 800fbba:	2300      	moveq	r3, #0
 800fbbc:	b2db      	uxtb	r3, r3
 800fbbe:	e008      	b.n	800fbd2 <HAL_TIM_PWM_Start+0x9e>
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800fbc6:	b2db      	uxtb	r3, r3
 800fbc8:	2b01      	cmp	r3, #1
 800fbca:	bf14      	ite	ne
 800fbcc:	2301      	movne	r3, #1
 800fbce:	2300      	moveq	r3, #0
 800fbd0:	b2db      	uxtb	r3, r3
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d001      	beq.n	800fbda <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800fbd6:	2301      	movs	r3, #1
 800fbd8:	e0ab      	b.n	800fd32 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800fbda:	683b      	ldr	r3, [r7, #0]
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d104      	bne.n	800fbea <HAL_TIM_PWM_Start+0xb6>
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	2202      	movs	r2, #2
 800fbe4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800fbe8:	e023      	b.n	800fc32 <HAL_TIM_PWM_Start+0xfe>
 800fbea:	683b      	ldr	r3, [r7, #0]
 800fbec:	2b04      	cmp	r3, #4
 800fbee:	d104      	bne.n	800fbfa <HAL_TIM_PWM_Start+0xc6>
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	2202      	movs	r2, #2
 800fbf4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800fbf8:	e01b      	b.n	800fc32 <HAL_TIM_PWM_Start+0xfe>
 800fbfa:	683b      	ldr	r3, [r7, #0]
 800fbfc:	2b08      	cmp	r3, #8
 800fbfe:	d104      	bne.n	800fc0a <HAL_TIM_PWM_Start+0xd6>
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	2202      	movs	r2, #2
 800fc04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800fc08:	e013      	b.n	800fc32 <HAL_TIM_PWM_Start+0xfe>
 800fc0a:	683b      	ldr	r3, [r7, #0]
 800fc0c:	2b0c      	cmp	r3, #12
 800fc0e:	d104      	bne.n	800fc1a <HAL_TIM_PWM_Start+0xe6>
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	2202      	movs	r2, #2
 800fc14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800fc18:	e00b      	b.n	800fc32 <HAL_TIM_PWM_Start+0xfe>
 800fc1a:	683b      	ldr	r3, [r7, #0]
 800fc1c:	2b10      	cmp	r3, #16
 800fc1e:	d104      	bne.n	800fc2a <HAL_TIM_PWM_Start+0xf6>
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	2202      	movs	r2, #2
 800fc24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800fc28:	e003      	b.n	800fc32 <HAL_TIM_PWM_Start+0xfe>
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	2202      	movs	r2, #2
 800fc2e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	2201      	movs	r2, #1
 800fc38:	6839      	ldr	r1, [r7, #0]
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	f001 fbfa 	bl	8011434 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	4a3d      	ldr	r2, [pc, #244]	@ (800fd3c <HAL_TIM_PWM_Start+0x208>)
 800fc46:	4293      	cmp	r3, r2
 800fc48:	d013      	beq.n	800fc72 <HAL_TIM_PWM_Start+0x13e>
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	4a3c      	ldr	r2, [pc, #240]	@ (800fd40 <HAL_TIM_PWM_Start+0x20c>)
 800fc50:	4293      	cmp	r3, r2
 800fc52:	d00e      	beq.n	800fc72 <HAL_TIM_PWM_Start+0x13e>
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	4a3a      	ldr	r2, [pc, #232]	@ (800fd44 <HAL_TIM_PWM_Start+0x210>)
 800fc5a:	4293      	cmp	r3, r2
 800fc5c:	d009      	beq.n	800fc72 <HAL_TIM_PWM_Start+0x13e>
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	4a39      	ldr	r2, [pc, #228]	@ (800fd48 <HAL_TIM_PWM_Start+0x214>)
 800fc64:	4293      	cmp	r3, r2
 800fc66:	d004      	beq.n	800fc72 <HAL_TIM_PWM_Start+0x13e>
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	4a37      	ldr	r2, [pc, #220]	@ (800fd4c <HAL_TIM_PWM_Start+0x218>)
 800fc6e:	4293      	cmp	r3, r2
 800fc70:	d101      	bne.n	800fc76 <HAL_TIM_PWM_Start+0x142>
 800fc72:	2301      	movs	r3, #1
 800fc74:	e000      	b.n	800fc78 <HAL_TIM_PWM_Start+0x144>
 800fc76:	2300      	movs	r3, #0
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d007      	beq.n	800fc8c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800fc8a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	4a2a      	ldr	r2, [pc, #168]	@ (800fd3c <HAL_TIM_PWM_Start+0x208>)
 800fc92:	4293      	cmp	r3, r2
 800fc94:	d02c      	beq.n	800fcf0 <HAL_TIM_PWM_Start+0x1bc>
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fc9e:	d027      	beq.n	800fcf0 <HAL_TIM_PWM_Start+0x1bc>
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	4a2a      	ldr	r2, [pc, #168]	@ (800fd50 <HAL_TIM_PWM_Start+0x21c>)
 800fca6:	4293      	cmp	r3, r2
 800fca8:	d022      	beq.n	800fcf0 <HAL_TIM_PWM_Start+0x1bc>
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	4a29      	ldr	r2, [pc, #164]	@ (800fd54 <HAL_TIM_PWM_Start+0x220>)
 800fcb0:	4293      	cmp	r3, r2
 800fcb2:	d01d      	beq.n	800fcf0 <HAL_TIM_PWM_Start+0x1bc>
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	4a27      	ldr	r2, [pc, #156]	@ (800fd58 <HAL_TIM_PWM_Start+0x224>)
 800fcba:	4293      	cmp	r3, r2
 800fcbc:	d018      	beq.n	800fcf0 <HAL_TIM_PWM_Start+0x1bc>
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	4a1f      	ldr	r2, [pc, #124]	@ (800fd40 <HAL_TIM_PWM_Start+0x20c>)
 800fcc4:	4293      	cmp	r3, r2
 800fcc6:	d013      	beq.n	800fcf0 <HAL_TIM_PWM_Start+0x1bc>
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	4a23      	ldr	r2, [pc, #140]	@ (800fd5c <HAL_TIM_PWM_Start+0x228>)
 800fcce:	4293      	cmp	r3, r2
 800fcd0:	d00e      	beq.n	800fcf0 <HAL_TIM_PWM_Start+0x1bc>
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	4a1b      	ldr	r2, [pc, #108]	@ (800fd44 <HAL_TIM_PWM_Start+0x210>)
 800fcd8:	4293      	cmp	r3, r2
 800fcda:	d009      	beq.n	800fcf0 <HAL_TIM_PWM_Start+0x1bc>
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	4a1f      	ldr	r2, [pc, #124]	@ (800fd60 <HAL_TIM_PWM_Start+0x22c>)
 800fce2:	4293      	cmp	r3, r2
 800fce4:	d004      	beq.n	800fcf0 <HAL_TIM_PWM_Start+0x1bc>
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	4a1e      	ldr	r2, [pc, #120]	@ (800fd64 <HAL_TIM_PWM_Start+0x230>)
 800fcec:	4293      	cmp	r3, r2
 800fcee:	d115      	bne.n	800fd1c <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	689a      	ldr	r2, [r3, #8]
 800fcf6:	4b1c      	ldr	r3, [pc, #112]	@ (800fd68 <HAL_TIM_PWM_Start+0x234>)
 800fcf8:	4013      	ands	r3, r2
 800fcfa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	2b06      	cmp	r3, #6
 800fd00:	d015      	beq.n	800fd2e <HAL_TIM_PWM_Start+0x1fa>
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fd08:	d011      	beq.n	800fd2e <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	681a      	ldr	r2, [r3, #0]
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	f042 0201 	orr.w	r2, r2, #1
 800fd18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fd1a:	e008      	b.n	800fd2e <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	681a      	ldr	r2, [r3, #0]
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	f042 0201 	orr.w	r2, r2, #1
 800fd2a:	601a      	str	r2, [r3, #0]
 800fd2c:	e000      	b.n	800fd30 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fd2e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800fd30:	2300      	movs	r3, #0
}
 800fd32:	4618      	mov	r0, r3
 800fd34:	3710      	adds	r7, #16
 800fd36:	46bd      	mov	sp, r7
 800fd38:	bd80      	pop	{r7, pc}
 800fd3a:	bf00      	nop
 800fd3c:	40010000 	.word	0x40010000
 800fd40:	40010400 	.word	0x40010400
 800fd44:	40014000 	.word	0x40014000
 800fd48:	40014400 	.word	0x40014400
 800fd4c:	40014800 	.word	0x40014800
 800fd50:	40000400 	.word	0x40000400
 800fd54:	40000800 	.word	0x40000800
 800fd58:	40000c00 	.word	0x40000c00
 800fd5c:	40001800 	.word	0x40001800
 800fd60:	4000e000 	.word	0x4000e000
 800fd64:	4000e400 	.word	0x4000e400
 800fd68:	00010007 	.word	0x00010007

0800fd6c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800fd6c:	b580      	push	{r7, lr}
 800fd6e:	b086      	sub	sp, #24
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	60f8      	str	r0, [r7, #12]
 800fd74:	60b9      	str	r1, [r7, #8]
 800fd76:	607a      	str	r2, [r7, #4]
 800fd78:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800fd7a:	2300      	movs	r3, #0
 800fd7c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800fd7e:	68bb      	ldr	r3, [r7, #8]
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d109      	bne.n	800fd98 <HAL_TIM_PWM_Start_DMA+0x2c>
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800fd8a:	b2db      	uxtb	r3, r3
 800fd8c:	2b02      	cmp	r3, #2
 800fd8e:	bf0c      	ite	eq
 800fd90:	2301      	moveq	r3, #1
 800fd92:	2300      	movne	r3, #0
 800fd94:	b2db      	uxtb	r3, r3
 800fd96:	e03c      	b.n	800fe12 <HAL_TIM_PWM_Start_DMA+0xa6>
 800fd98:	68bb      	ldr	r3, [r7, #8]
 800fd9a:	2b04      	cmp	r3, #4
 800fd9c:	d109      	bne.n	800fdb2 <HAL_TIM_PWM_Start_DMA+0x46>
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800fda4:	b2db      	uxtb	r3, r3
 800fda6:	2b02      	cmp	r3, #2
 800fda8:	bf0c      	ite	eq
 800fdaa:	2301      	moveq	r3, #1
 800fdac:	2300      	movne	r3, #0
 800fdae:	b2db      	uxtb	r3, r3
 800fdb0:	e02f      	b.n	800fe12 <HAL_TIM_PWM_Start_DMA+0xa6>
 800fdb2:	68bb      	ldr	r3, [r7, #8]
 800fdb4:	2b08      	cmp	r3, #8
 800fdb6:	d109      	bne.n	800fdcc <HAL_TIM_PWM_Start_DMA+0x60>
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800fdbe:	b2db      	uxtb	r3, r3
 800fdc0:	2b02      	cmp	r3, #2
 800fdc2:	bf0c      	ite	eq
 800fdc4:	2301      	moveq	r3, #1
 800fdc6:	2300      	movne	r3, #0
 800fdc8:	b2db      	uxtb	r3, r3
 800fdca:	e022      	b.n	800fe12 <HAL_TIM_PWM_Start_DMA+0xa6>
 800fdcc:	68bb      	ldr	r3, [r7, #8]
 800fdce:	2b0c      	cmp	r3, #12
 800fdd0:	d109      	bne.n	800fde6 <HAL_TIM_PWM_Start_DMA+0x7a>
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fdd8:	b2db      	uxtb	r3, r3
 800fdda:	2b02      	cmp	r3, #2
 800fddc:	bf0c      	ite	eq
 800fdde:	2301      	moveq	r3, #1
 800fde0:	2300      	movne	r3, #0
 800fde2:	b2db      	uxtb	r3, r3
 800fde4:	e015      	b.n	800fe12 <HAL_TIM_PWM_Start_DMA+0xa6>
 800fde6:	68bb      	ldr	r3, [r7, #8]
 800fde8:	2b10      	cmp	r3, #16
 800fdea:	d109      	bne.n	800fe00 <HAL_TIM_PWM_Start_DMA+0x94>
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800fdf2:	b2db      	uxtb	r3, r3
 800fdf4:	2b02      	cmp	r3, #2
 800fdf6:	bf0c      	ite	eq
 800fdf8:	2301      	moveq	r3, #1
 800fdfa:	2300      	movne	r3, #0
 800fdfc:	b2db      	uxtb	r3, r3
 800fdfe:	e008      	b.n	800fe12 <HAL_TIM_PWM_Start_DMA+0xa6>
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800fe06:	b2db      	uxtb	r3, r3
 800fe08:	2b02      	cmp	r3, #2
 800fe0a:	bf0c      	ite	eq
 800fe0c:	2301      	moveq	r3, #1
 800fe0e:	2300      	movne	r3, #0
 800fe10:	b2db      	uxtb	r3, r3
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d001      	beq.n	800fe1a <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800fe16:	2302      	movs	r3, #2
 800fe18:	e1ba      	b.n	8010190 <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800fe1a:	68bb      	ldr	r3, [r7, #8]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d109      	bne.n	800fe34 <HAL_TIM_PWM_Start_DMA+0xc8>
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800fe26:	b2db      	uxtb	r3, r3
 800fe28:	2b01      	cmp	r3, #1
 800fe2a:	bf0c      	ite	eq
 800fe2c:	2301      	moveq	r3, #1
 800fe2e:	2300      	movne	r3, #0
 800fe30:	b2db      	uxtb	r3, r3
 800fe32:	e03c      	b.n	800feae <HAL_TIM_PWM_Start_DMA+0x142>
 800fe34:	68bb      	ldr	r3, [r7, #8]
 800fe36:	2b04      	cmp	r3, #4
 800fe38:	d109      	bne.n	800fe4e <HAL_TIM_PWM_Start_DMA+0xe2>
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800fe40:	b2db      	uxtb	r3, r3
 800fe42:	2b01      	cmp	r3, #1
 800fe44:	bf0c      	ite	eq
 800fe46:	2301      	moveq	r3, #1
 800fe48:	2300      	movne	r3, #0
 800fe4a:	b2db      	uxtb	r3, r3
 800fe4c:	e02f      	b.n	800feae <HAL_TIM_PWM_Start_DMA+0x142>
 800fe4e:	68bb      	ldr	r3, [r7, #8]
 800fe50:	2b08      	cmp	r3, #8
 800fe52:	d109      	bne.n	800fe68 <HAL_TIM_PWM_Start_DMA+0xfc>
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800fe5a:	b2db      	uxtb	r3, r3
 800fe5c:	2b01      	cmp	r3, #1
 800fe5e:	bf0c      	ite	eq
 800fe60:	2301      	moveq	r3, #1
 800fe62:	2300      	movne	r3, #0
 800fe64:	b2db      	uxtb	r3, r3
 800fe66:	e022      	b.n	800feae <HAL_TIM_PWM_Start_DMA+0x142>
 800fe68:	68bb      	ldr	r3, [r7, #8]
 800fe6a:	2b0c      	cmp	r3, #12
 800fe6c:	d109      	bne.n	800fe82 <HAL_TIM_PWM_Start_DMA+0x116>
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fe74:	b2db      	uxtb	r3, r3
 800fe76:	2b01      	cmp	r3, #1
 800fe78:	bf0c      	ite	eq
 800fe7a:	2301      	moveq	r3, #1
 800fe7c:	2300      	movne	r3, #0
 800fe7e:	b2db      	uxtb	r3, r3
 800fe80:	e015      	b.n	800feae <HAL_TIM_PWM_Start_DMA+0x142>
 800fe82:	68bb      	ldr	r3, [r7, #8]
 800fe84:	2b10      	cmp	r3, #16
 800fe86:	d109      	bne.n	800fe9c <HAL_TIM_PWM_Start_DMA+0x130>
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800fe8e:	b2db      	uxtb	r3, r3
 800fe90:	2b01      	cmp	r3, #1
 800fe92:	bf0c      	ite	eq
 800fe94:	2301      	moveq	r3, #1
 800fe96:	2300      	movne	r3, #0
 800fe98:	b2db      	uxtb	r3, r3
 800fe9a:	e008      	b.n	800feae <HAL_TIM_PWM_Start_DMA+0x142>
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800fea2:	b2db      	uxtb	r3, r3
 800fea4:	2b01      	cmp	r3, #1
 800fea6:	bf0c      	ite	eq
 800fea8:	2301      	moveq	r3, #1
 800feaa:	2300      	movne	r3, #0
 800feac:	b2db      	uxtb	r3, r3
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d034      	beq.n	800ff1c <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d002      	beq.n	800febe <HAL_TIM_PWM_Start_DMA+0x152>
 800feb8:	887b      	ldrh	r3, [r7, #2]
 800feba:	2b00      	cmp	r3, #0
 800febc:	d101      	bne.n	800fec2 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800febe:	2301      	movs	r3, #1
 800fec0:	e166      	b.n	8010190 <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800fec2:	68bb      	ldr	r3, [r7, #8]
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d104      	bne.n	800fed2 <HAL_TIM_PWM_Start_DMA+0x166>
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	2202      	movs	r2, #2
 800fecc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800fed0:	e026      	b.n	800ff20 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800fed2:	68bb      	ldr	r3, [r7, #8]
 800fed4:	2b04      	cmp	r3, #4
 800fed6:	d104      	bne.n	800fee2 <HAL_TIM_PWM_Start_DMA+0x176>
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	2202      	movs	r2, #2
 800fedc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800fee0:	e01e      	b.n	800ff20 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800fee2:	68bb      	ldr	r3, [r7, #8]
 800fee4:	2b08      	cmp	r3, #8
 800fee6:	d104      	bne.n	800fef2 <HAL_TIM_PWM_Start_DMA+0x186>
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	2202      	movs	r2, #2
 800feec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800fef0:	e016      	b.n	800ff20 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800fef2:	68bb      	ldr	r3, [r7, #8]
 800fef4:	2b0c      	cmp	r3, #12
 800fef6:	d104      	bne.n	800ff02 <HAL_TIM_PWM_Start_DMA+0x196>
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	2202      	movs	r2, #2
 800fefc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ff00:	e00e      	b.n	800ff20 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800ff02:	68bb      	ldr	r3, [r7, #8]
 800ff04:	2b10      	cmp	r3, #16
 800ff06:	d104      	bne.n	800ff12 <HAL_TIM_PWM_Start_DMA+0x1a6>
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	2202      	movs	r2, #2
 800ff0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ff10:	e006      	b.n	800ff20 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	2202      	movs	r2, #2
 800ff16:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ff1a:	e001      	b.n	800ff20 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800ff1c:	2301      	movs	r3, #1
 800ff1e:	e137      	b.n	8010190 <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 800ff20:	68bb      	ldr	r3, [r7, #8]
 800ff22:	2b0c      	cmp	r3, #12
 800ff24:	f200 80ae 	bhi.w	8010084 <HAL_TIM_PWM_Start_DMA+0x318>
 800ff28:	a201      	add	r2, pc, #4	@ (adr r2, 800ff30 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800ff2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff2e:	bf00      	nop
 800ff30:	0800ff65 	.word	0x0800ff65
 800ff34:	08010085 	.word	0x08010085
 800ff38:	08010085 	.word	0x08010085
 800ff3c:	08010085 	.word	0x08010085
 800ff40:	0800ffad 	.word	0x0800ffad
 800ff44:	08010085 	.word	0x08010085
 800ff48:	08010085 	.word	0x08010085
 800ff4c:	08010085 	.word	0x08010085
 800ff50:	0800fff5 	.word	0x0800fff5
 800ff54:	08010085 	.word	0x08010085
 800ff58:	08010085 	.word	0x08010085
 800ff5c:	08010085 	.word	0x08010085
 800ff60:	0801003d 	.word	0x0801003d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff68:	4a8b      	ldr	r2, [pc, #556]	@ (8010198 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800ff6a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff70:	4a8a      	ldr	r2, [pc, #552]	@ (801019c <HAL_TIM_PWM_Start_DMA+0x430>)
 800ff72:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff78:	4a89      	ldr	r2, [pc, #548]	@ (80101a0 <HAL_TIM_PWM_Start_DMA+0x434>)
 800ff7a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800ff80:	6879      	ldr	r1, [r7, #4]
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	3334      	adds	r3, #52	@ 0x34
 800ff88:	461a      	mov	r2, r3
 800ff8a:	887b      	ldrh	r3, [r7, #2]
 800ff8c:	f7f7 faec 	bl	8007568 <HAL_DMA_Start_IT>
 800ff90:	4603      	mov	r3, r0
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d001      	beq.n	800ff9a <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800ff96:	2301      	movs	r3, #1
 800ff98:	e0fa      	b.n	8010190 <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	68da      	ldr	r2, [r3, #12]
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ffa8:	60da      	str	r2, [r3, #12]
      break;
 800ffaa:	e06e      	b.n	801008a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ffb0:	4a79      	ldr	r2, [pc, #484]	@ (8010198 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800ffb2:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ffb8:	4a78      	ldr	r2, [pc, #480]	@ (801019c <HAL_TIM_PWM_Start_DMA+0x430>)
 800ffba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ffc0:	4a77      	ldr	r2, [pc, #476]	@ (80101a0 <HAL_TIM_PWM_Start_DMA+0x434>)
 800ffc2:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800ffc8:	6879      	ldr	r1, [r7, #4]
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	3338      	adds	r3, #56	@ 0x38
 800ffd0:	461a      	mov	r2, r3
 800ffd2:	887b      	ldrh	r3, [r7, #2]
 800ffd4:	f7f7 fac8 	bl	8007568 <HAL_DMA_Start_IT>
 800ffd8:	4603      	mov	r3, r0
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d001      	beq.n	800ffe2 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800ffde:	2301      	movs	r3, #1
 800ffe0:	e0d6      	b.n	8010190 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	68da      	ldr	r2, [r3, #12]
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800fff0:	60da      	str	r2, [r3, #12]
      break;
 800fff2:	e04a      	b.n	801008a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fff8:	4a67      	ldr	r2, [pc, #412]	@ (8010198 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800fffa:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010000:	4a66      	ldr	r2, [pc, #408]	@ (801019c <HAL_TIM_PWM_Start_DMA+0x430>)
 8010002:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010008:	4a65      	ldr	r2, [pc, #404]	@ (80101a0 <HAL_TIM_PWM_Start_DMA+0x434>)
 801000a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8010010:	6879      	ldr	r1, [r7, #4]
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	333c      	adds	r3, #60	@ 0x3c
 8010018:	461a      	mov	r2, r3
 801001a:	887b      	ldrh	r3, [r7, #2]
 801001c:	f7f7 faa4 	bl	8007568 <HAL_DMA_Start_IT>
 8010020:	4603      	mov	r3, r0
 8010022:	2b00      	cmp	r3, #0
 8010024:	d001      	beq.n	801002a <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8010026:	2301      	movs	r3, #1
 8010028:	e0b2      	b.n	8010190 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	68da      	ldr	r2, [r3, #12]
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8010038:	60da      	str	r2, [r3, #12]
      break;
 801003a:	e026      	b.n	801008a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010040:	4a55      	ldr	r2, [pc, #340]	@ (8010198 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8010042:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010048:	4a54      	ldr	r2, [pc, #336]	@ (801019c <HAL_TIM_PWM_Start_DMA+0x430>)
 801004a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010050:	4a53      	ldr	r2, [pc, #332]	@ (80101a0 <HAL_TIM_PWM_Start_DMA+0x434>)
 8010052:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8010058:	6879      	ldr	r1, [r7, #4]
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	3340      	adds	r3, #64	@ 0x40
 8010060:	461a      	mov	r2, r3
 8010062:	887b      	ldrh	r3, [r7, #2]
 8010064:	f7f7 fa80 	bl	8007568 <HAL_DMA_Start_IT>
 8010068:	4603      	mov	r3, r0
 801006a:	2b00      	cmp	r3, #0
 801006c:	d001      	beq.n	8010072 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 801006e:	2301      	movs	r3, #1
 8010070:	e08e      	b.n	8010190 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	68da      	ldr	r2, [r3, #12]
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8010080:	60da      	str	r2, [r3, #12]
      break;
 8010082:	e002      	b.n	801008a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8010084:	2301      	movs	r3, #1
 8010086:	75fb      	strb	r3, [r7, #23]
      break;
 8010088:	bf00      	nop
  }

  if (status == HAL_OK)
 801008a:	7dfb      	ldrb	r3, [r7, #23]
 801008c:	2b00      	cmp	r3, #0
 801008e:	d17e      	bne.n	801018e <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	2201      	movs	r2, #1
 8010096:	68b9      	ldr	r1, [r7, #8]
 8010098:	4618      	mov	r0, r3
 801009a:	f001 f9cb 	bl	8011434 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	4a40      	ldr	r2, [pc, #256]	@ (80101a4 <HAL_TIM_PWM_Start_DMA+0x438>)
 80100a4:	4293      	cmp	r3, r2
 80100a6:	d013      	beq.n	80100d0 <HAL_TIM_PWM_Start_DMA+0x364>
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	4a3e      	ldr	r2, [pc, #248]	@ (80101a8 <HAL_TIM_PWM_Start_DMA+0x43c>)
 80100ae:	4293      	cmp	r3, r2
 80100b0:	d00e      	beq.n	80100d0 <HAL_TIM_PWM_Start_DMA+0x364>
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	4a3d      	ldr	r2, [pc, #244]	@ (80101ac <HAL_TIM_PWM_Start_DMA+0x440>)
 80100b8:	4293      	cmp	r3, r2
 80100ba:	d009      	beq.n	80100d0 <HAL_TIM_PWM_Start_DMA+0x364>
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	4a3b      	ldr	r2, [pc, #236]	@ (80101b0 <HAL_TIM_PWM_Start_DMA+0x444>)
 80100c2:	4293      	cmp	r3, r2
 80100c4:	d004      	beq.n	80100d0 <HAL_TIM_PWM_Start_DMA+0x364>
 80100c6:	68fb      	ldr	r3, [r7, #12]
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	4a3a      	ldr	r2, [pc, #232]	@ (80101b4 <HAL_TIM_PWM_Start_DMA+0x448>)
 80100cc:	4293      	cmp	r3, r2
 80100ce:	d101      	bne.n	80100d4 <HAL_TIM_PWM_Start_DMA+0x368>
 80100d0:	2301      	movs	r3, #1
 80100d2:	e000      	b.n	80100d6 <HAL_TIM_PWM_Start_DMA+0x36a>
 80100d4:	2300      	movs	r3, #0
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d007      	beq.n	80100ea <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80100e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	4a2d      	ldr	r2, [pc, #180]	@ (80101a4 <HAL_TIM_PWM_Start_DMA+0x438>)
 80100f0:	4293      	cmp	r3, r2
 80100f2:	d02c      	beq.n	801014e <HAL_TIM_PWM_Start_DMA+0x3e2>
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80100fc:	d027      	beq.n	801014e <HAL_TIM_PWM_Start_DMA+0x3e2>
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	4a2d      	ldr	r2, [pc, #180]	@ (80101b8 <HAL_TIM_PWM_Start_DMA+0x44c>)
 8010104:	4293      	cmp	r3, r2
 8010106:	d022      	beq.n	801014e <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010108:	68fb      	ldr	r3, [r7, #12]
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	4a2b      	ldr	r2, [pc, #172]	@ (80101bc <HAL_TIM_PWM_Start_DMA+0x450>)
 801010e:	4293      	cmp	r3, r2
 8010110:	d01d      	beq.n	801014e <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	4a2a      	ldr	r2, [pc, #168]	@ (80101c0 <HAL_TIM_PWM_Start_DMA+0x454>)
 8010118:	4293      	cmp	r3, r2
 801011a:	d018      	beq.n	801014e <HAL_TIM_PWM_Start_DMA+0x3e2>
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	4a21      	ldr	r2, [pc, #132]	@ (80101a8 <HAL_TIM_PWM_Start_DMA+0x43c>)
 8010122:	4293      	cmp	r3, r2
 8010124:	d013      	beq.n	801014e <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	4a26      	ldr	r2, [pc, #152]	@ (80101c4 <HAL_TIM_PWM_Start_DMA+0x458>)
 801012c:	4293      	cmp	r3, r2
 801012e:	d00e      	beq.n	801014e <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	4a1d      	ldr	r2, [pc, #116]	@ (80101ac <HAL_TIM_PWM_Start_DMA+0x440>)
 8010136:	4293      	cmp	r3, r2
 8010138:	d009      	beq.n	801014e <HAL_TIM_PWM_Start_DMA+0x3e2>
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	4a22      	ldr	r2, [pc, #136]	@ (80101c8 <HAL_TIM_PWM_Start_DMA+0x45c>)
 8010140:	4293      	cmp	r3, r2
 8010142:	d004      	beq.n	801014e <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	4a20      	ldr	r2, [pc, #128]	@ (80101cc <HAL_TIM_PWM_Start_DMA+0x460>)
 801014a:	4293      	cmp	r3, r2
 801014c:	d115      	bne.n	801017a <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	689a      	ldr	r2, [r3, #8]
 8010154:	4b1e      	ldr	r3, [pc, #120]	@ (80101d0 <HAL_TIM_PWM_Start_DMA+0x464>)
 8010156:	4013      	ands	r3, r2
 8010158:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801015a:	693b      	ldr	r3, [r7, #16]
 801015c:	2b06      	cmp	r3, #6
 801015e:	d015      	beq.n	801018c <HAL_TIM_PWM_Start_DMA+0x420>
 8010160:	693b      	ldr	r3, [r7, #16]
 8010162:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010166:	d011      	beq.n	801018c <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	681a      	ldr	r2, [r3, #0]
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	f042 0201 	orr.w	r2, r2, #1
 8010176:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010178:	e008      	b.n	801018c <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	681a      	ldr	r2, [r3, #0]
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	f042 0201 	orr.w	r2, r2, #1
 8010188:	601a      	str	r2, [r3, #0]
 801018a:	e000      	b.n	801018e <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801018c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 801018e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010190:	4618      	mov	r0, r3
 8010192:	3718      	adds	r7, #24
 8010194:	46bd      	mov	sp, r7
 8010196:	bd80      	pop	{r7, pc}
 8010198:	08010ae3 	.word	0x08010ae3
 801019c:	08010b8b 	.word	0x08010b8b
 80101a0:	08010a51 	.word	0x08010a51
 80101a4:	40010000 	.word	0x40010000
 80101a8:	40010400 	.word	0x40010400
 80101ac:	40014000 	.word	0x40014000
 80101b0:	40014400 	.word	0x40014400
 80101b4:	40014800 	.word	0x40014800
 80101b8:	40000400 	.word	0x40000400
 80101bc:	40000800 	.word	0x40000800
 80101c0:	40000c00 	.word	0x40000c00
 80101c4:	40001800 	.word	0x40001800
 80101c8:	4000e000 	.word	0x4000e000
 80101cc:	4000e400 	.word	0x4000e400
 80101d0:	00010007 	.word	0x00010007

080101d4 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80101d4:	b580      	push	{r7, lr}
 80101d6:	b084      	sub	sp, #16
 80101d8:	af00      	add	r7, sp, #0
 80101da:	6078      	str	r0, [r7, #4]
 80101dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80101de:	2300      	movs	r3, #0
 80101e0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 80101e2:	683b      	ldr	r3, [r7, #0]
 80101e4:	2b0c      	cmp	r3, #12
 80101e6:	d855      	bhi.n	8010294 <HAL_TIM_PWM_Stop_DMA+0xc0>
 80101e8:	a201      	add	r2, pc, #4	@ (adr r2, 80101f0 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80101ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101ee:	bf00      	nop
 80101f0:	08010225 	.word	0x08010225
 80101f4:	08010295 	.word	0x08010295
 80101f8:	08010295 	.word	0x08010295
 80101fc:	08010295 	.word	0x08010295
 8010200:	08010241 	.word	0x08010241
 8010204:	08010295 	.word	0x08010295
 8010208:	08010295 	.word	0x08010295
 801020c:	08010295 	.word	0x08010295
 8010210:	0801025d 	.word	0x0801025d
 8010214:	08010295 	.word	0x08010295
 8010218:	08010295 	.word	0x08010295
 801021c:	08010295 	.word	0x08010295
 8010220:	08010279 	.word	0x08010279
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	68da      	ldr	r2, [r3, #12]
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8010232:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010238:	4618      	mov	r0, r3
 801023a:	f7f7 ff1d 	bl	8008078 <HAL_DMA_Abort_IT>
      break;
 801023e:	e02c      	b.n	801029a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	68da      	ldr	r2, [r3, #12]
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801024e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010254:	4618      	mov	r0, r3
 8010256:	f7f7 ff0f 	bl	8008078 <HAL_DMA_Abort_IT>
      break;
 801025a:	e01e      	b.n	801029a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	68da      	ldr	r2, [r3, #12]
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 801026a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010270:	4618      	mov	r0, r3
 8010272:	f7f7 ff01 	bl	8008078 <HAL_DMA_Abort_IT>
      break;
 8010276:	e010      	b.n	801029a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	68da      	ldr	r2, [r3, #12]
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8010286:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801028c:	4618      	mov	r0, r3
 801028e:	f7f7 fef3 	bl	8008078 <HAL_DMA_Abort_IT>
      break;
 8010292:	e002      	b.n	801029a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8010294:	2301      	movs	r3, #1
 8010296:	73fb      	strb	r3, [r7, #15]
      break;
 8010298:	bf00      	nop
  }

  if (status == HAL_OK)
 801029a:	7bfb      	ldrb	r3, [r7, #15]
 801029c:	2b00      	cmp	r3, #0
 801029e:	f040 8081 	bne.w	80103a4 <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	2200      	movs	r2, #0
 80102a8:	6839      	ldr	r1, [r7, #0]
 80102aa:	4618      	mov	r0, r3
 80102ac:	f001 f8c2 	bl	8011434 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	4a3e      	ldr	r2, [pc, #248]	@ (80103b0 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 80102b6:	4293      	cmp	r3, r2
 80102b8:	d013      	beq.n	80102e2 <HAL_TIM_PWM_Stop_DMA+0x10e>
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	4a3d      	ldr	r2, [pc, #244]	@ (80103b4 <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 80102c0:	4293      	cmp	r3, r2
 80102c2:	d00e      	beq.n	80102e2 <HAL_TIM_PWM_Stop_DMA+0x10e>
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	4a3b      	ldr	r2, [pc, #236]	@ (80103b8 <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 80102ca:	4293      	cmp	r3, r2
 80102cc:	d009      	beq.n	80102e2 <HAL_TIM_PWM_Stop_DMA+0x10e>
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	4a3a      	ldr	r2, [pc, #232]	@ (80103bc <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 80102d4:	4293      	cmp	r3, r2
 80102d6:	d004      	beq.n	80102e2 <HAL_TIM_PWM_Stop_DMA+0x10e>
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	4a38      	ldr	r2, [pc, #224]	@ (80103c0 <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 80102de:	4293      	cmp	r3, r2
 80102e0:	d101      	bne.n	80102e6 <HAL_TIM_PWM_Stop_DMA+0x112>
 80102e2:	2301      	movs	r3, #1
 80102e4:	e000      	b.n	80102e8 <HAL_TIM_PWM_Stop_DMA+0x114>
 80102e6:	2300      	movs	r3, #0
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d017      	beq.n	801031c <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	6a1a      	ldr	r2, [r3, #32]
 80102f2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80102f6:	4013      	ands	r3, r2
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d10f      	bne.n	801031c <HAL_TIM_PWM_Stop_DMA+0x148>
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	6a1a      	ldr	r2, [r3, #32]
 8010302:	f240 4344 	movw	r3, #1092	@ 0x444
 8010306:	4013      	ands	r3, r2
 8010308:	2b00      	cmp	r3, #0
 801030a:	d107      	bne.n	801031c <HAL_TIM_PWM_Stop_DMA+0x148>
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801031a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	6a1a      	ldr	r2, [r3, #32]
 8010322:	f241 1311 	movw	r3, #4369	@ 0x1111
 8010326:	4013      	ands	r3, r2
 8010328:	2b00      	cmp	r3, #0
 801032a:	d10f      	bne.n	801034c <HAL_TIM_PWM_Stop_DMA+0x178>
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	6a1a      	ldr	r2, [r3, #32]
 8010332:	f240 4344 	movw	r3, #1092	@ 0x444
 8010336:	4013      	ands	r3, r2
 8010338:	2b00      	cmp	r3, #0
 801033a:	d107      	bne.n	801034c <HAL_TIM_PWM_Stop_DMA+0x178>
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	681a      	ldr	r2, [r3, #0]
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	f022 0201 	bic.w	r2, r2, #1
 801034a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 801034c:	683b      	ldr	r3, [r7, #0]
 801034e:	2b00      	cmp	r3, #0
 8010350:	d104      	bne.n	801035c <HAL_TIM_PWM_Stop_DMA+0x188>
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	2201      	movs	r2, #1
 8010356:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801035a:	e023      	b.n	80103a4 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 801035c:	683b      	ldr	r3, [r7, #0]
 801035e:	2b04      	cmp	r3, #4
 8010360:	d104      	bne.n	801036c <HAL_TIM_PWM_Stop_DMA+0x198>
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	2201      	movs	r2, #1
 8010366:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801036a:	e01b      	b.n	80103a4 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 801036c:	683b      	ldr	r3, [r7, #0]
 801036e:	2b08      	cmp	r3, #8
 8010370:	d104      	bne.n	801037c <HAL_TIM_PWM_Stop_DMA+0x1a8>
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	2201      	movs	r2, #1
 8010376:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801037a:	e013      	b.n	80103a4 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 801037c:	683b      	ldr	r3, [r7, #0]
 801037e:	2b0c      	cmp	r3, #12
 8010380:	d104      	bne.n	801038c <HAL_TIM_PWM_Stop_DMA+0x1b8>
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	2201      	movs	r2, #1
 8010386:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801038a:	e00b      	b.n	80103a4 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 801038c:	683b      	ldr	r3, [r7, #0]
 801038e:	2b10      	cmp	r3, #16
 8010390:	d104      	bne.n	801039c <HAL_TIM_PWM_Stop_DMA+0x1c8>
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	2201      	movs	r2, #1
 8010396:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801039a:	e003      	b.n	80103a4 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	2201      	movs	r2, #1
 80103a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 80103a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80103a6:	4618      	mov	r0, r3
 80103a8:	3710      	adds	r7, #16
 80103aa:	46bd      	mov	sp, r7
 80103ac:	bd80      	pop	{r7, pc}
 80103ae:	bf00      	nop
 80103b0:	40010000 	.word	0x40010000
 80103b4:	40010400 	.word	0x40010400
 80103b8:	40014000 	.word	0x40014000
 80103bc:	40014400 	.word	0x40014400
 80103c0:	40014800 	.word	0x40014800

080103c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80103c4:	b580      	push	{r7, lr}
 80103c6:	b084      	sub	sp, #16
 80103c8:	af00      	add	r7, sp, #0
 80103ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	68db      	ldr	r3, [r3, #12]
 80103d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	691b      	ldr	r3, [r3, #16]
 80103da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80103dc:	68bb      	ldr	r3, [r7, #8]
 80103de:	f003 0302 	and.w	r3, r3, #2
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d020      	beq.n	8010428 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	f003 0302 	and.w	r3, r3, #2
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d01b      	beq.n	8010428 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	f06f 0202 	mvn.w	r2, #2
 80103f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	2201      	movs	r2, #1
 80103fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	699b      	ldr	r3, [r3, #24]
 8010406:	f003 0303 	and.w	r3, r3, #3
 801040a:	2b00      	cmp	r3, #0
 801040c:	d003      	beq.n	8010416 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801040e:	6878      	ldr	r0, [r7, #4]
 8010410:	f000 faf6 	bl	8010a00 <HAL_TIM_IC_CaptureCallback>
 8010414:	e005      	b.n	8010422 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010416:	6878      	ldr	r0, [r7, #4]
 8010418:	f000 fae8 	bl	80109ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801041c:	6878      	ldr	r0, [r7, #4]
 801041e:	f7f5 f9f7 	bl	8005810 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	2200      	movs	r2, #0
 8010426:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8010428:	68bb      	ldr	r3, [r7, #8]
 801042a:	f003 0304 	and.w	r3, r3, #4
 801042e:	2b00      	cmp	r3, #0
 8010430:	d020      	beq.n	8010474 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	f003 0304 	and.w	r3, r3, #4
 8010438:	2b00      	cmp	r3, #0
 801043a:	d01b      	beq.n	8010474 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	f06f 0204 	mvn.w	r2, #4
 8010444:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	2202      	movs	r2, #2
 801044a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	699b      	ldr	r3, [r3, #24]
 8010452:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8010456:	2b00      	cmp	r3, #0
 8010458:	d003      	beq.n	8010462 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801045a:	6878      	ldr	r0, [r7, #4]
 801045c:	f000 fad0 	bl	8010a00 <HAL_TIM_IC_CaptureCallback>
 8010460:	e005      	b.n	801046e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010462:	6878      	ldr	r0, [r7, #4]
 8010464:	f000 fac2 	bl	80109ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010468:	6878      	ldr	r0, [r7, #4]
 801046a:	f7f5 f9d1 	bl	8005810 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	2200      	movs	r2, #0
 8010472:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8010474:	68bb      	ldr	r3, [r7, #8]
 8010476:	f003 0308 	and.w	r3, r3, #8
 801047a:	2b00      	cmp	r3, #0
 801047c:	d020      	beq.n	80104c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	f003 0308 	and.w	r3, r3, #8
 8010484:	2b00      	cmp	r3, #0
 8010486:	d01b      	beq.n	80104c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	f06f 0208 	mvn.w	r2, #8
 8010490:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	2204      	movs	r2, #4
 8010496:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	69db      	ldr	r3, [r3, #28]
 801049e:	f003 0303 	and.w	r3, r3, #3
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d003      	beq.n	80104ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80104a6:	6878      	ldr	r0, [r7, #4]
 80104a8:	f000 faaa 	bl	8010a00 <HAL_TIM_IC_CaptureCallback>
 80104ac:	e005      	b.n	80104ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80104ae:	6878      	ldr	r0, [r7, #4]
 80104b0:	f000 fa9c 	bl	80109ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80104b4:	6878      	ldr	r0, [r7, #4]
 80104b6:	f7f5 f9ab 	bl	8005810 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	2200      	movs	r2, #0
 80104be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80104c0:	68bb      	ldr	r3, [r7, #8]
 80104c2:	f003 0310 	and.w	r3, r3, #16
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d020      	beq.n	801050c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	f003 0310 	and.w	r3, r3, #16
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d01b      	beq.n	801050c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	f06f 0210 	mvn.w	r2, #16
 80104dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	2208      	movs	r2, #8
 80104e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	69db      	ldr	r3, [r3, #28]
 80104ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d003      	beq.n	80104fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80104f2:	6878      	ldr	r0, [r7, #4]
 80104f4:	f000 fa84 	bl	8010a00 <HAL_TIM_IC_CaptureCallback>
 80104f8:	e005      	b.n	8010506 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80104fa:	6878      	ldr	r0, [r7, #4]
 80104fc:	f000 fa76 	bl	80109ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010500:	6878      	ldr	r0, [r7, #4]
 8010502:	f7f5 f985 	bl	8005810 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	2200      	movs	r2, #0
 801050a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 801050c:	68bb      	ldr	r3, [r7, #8]
 801050e:	f003 0301 	and.w	r3, r3, #1
 8010512:	2b00      	cmp	r3, #0
 8010514:	d00c      	beq.n	8010530 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	f003 0301 	and.w	r3, r3, #1
 801051c:	2b00      	cmp	r3, #0
 801051e:	d007      	beq.n	8010530 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	f06f 0201 	mvn.w	r2, #1
 8010528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801052a:	6878      	ldr	r0, [r7, #4]
 801052c:	f7f4 fa2c 	bl	8004988 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8010530:	68bb      	ldr	r3, [r7, #8]
 8010532:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010536:	2b00      	cmp	r3, #0
 8010538:	d104      	bne.n	8010544 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 801053a:	68bb      	ldr	r3, [r7, #8]
 801053c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8010540:	2b00      	cmp	r3, #0
 8010542:	d00c      	beq.n	801055e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801054a:	2b00      	cmp	r3, #0
 801054c:	d007      	beq.n	801055e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8010556:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8010558:	6878      	ldr	r0, [r7, #4]
 801055a:	f001 f837 	bl	80115cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 801055e:	68bb      	ldr	r3, [r7, #8]
 8010560:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010564:	2b00      	cmp	r3, #0
 8010566:	d00c      	beq.n	8010582 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801056e:	2b00      	cmp	r3, #0
 8010570:	d007      	beq.n	8010582 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 801057a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801057c:	6878      	ldr	r0, [r7, #4]
 801057e:	f001 f82f 	bl	80115e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8010582:	68bb      	ldr	r3, [r7, #8]
 8010584:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010588:	2b00      	cmp	r3, #0
 801058a:	d00c      	beq.n	80105a6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010592:	2b00      	cmp	r3, #0
 8010594:	d007      	beq.n	80105a6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 801059e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80105a0:	6878      	ldr	r0, [r7, #4]
 80105a2:	f000 fa41 	bl	8010a28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80105a6:	68bb      	ldr	r3, [r7, #8]
 80105a8:	f003 0320 	and.w	r3, r3, #32
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d00c      	beq.n	80105ca <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	f003 0320 	and.w	r3, r3, #32
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d007      	beq.n	80105ca <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	f06f 0220 	mvn.w	r2, #32
 80105c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80105c4:	6878      	ldr	r0, [r7, #4]
 80105c6:	f000 fff7 	bl	80115b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80105ca:	bf00      	nop
 80105cc:	3710      	adds	r7, #16
 80105ce:	46bd      	mov	sp, r7
 80105d0:	bd80      	pop	{r7, pc}
	...

080105d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80105d4:	b580      	push	{r7, lr}
 80105d6:	b086      	sub	sp, #24
 80105d8:	af00      	add	r7, sp, #0
 80105da:	60f8      	str	r0, [r7, #12]
 80105dc:	60b9      	str	r1, [r7, #8]
 80105de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80105e0:	2300      	movs	r3, #0
 80105e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80105ea:	2b01      	cmp	r3, #1
 80105ec:	d101      	bne.n	80105f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80105ee:	2302      	movs	r3, #2
 80105f0:	e0ff      	b.n	80107f2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	2201      	movs	r2, #1
 80105f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	2b14      	cmp	r3, #20
 80105fe:	f200 80f0 	bhi.w	80107e2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8010602:	a201      	add	r2, pc, #4	@ (adr r2, 8010608 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8010604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010608:	0801065d 	.word	0x0801065d
 801060c:	080107e3 	.word	0x080107e3
 8010610:	080107e3 	.word	0x080107e3
 8010614:	080107e3 	.word	0x080107e3
 8010618:	0801069d 	.word	0x0801069d
 801061c:	080107e3 	.word	0x080107e3
 8010620:	080107e3 	.word	0x080107e3
 8010624:	080107e3 	.word	0x080107e3
 8010628:	080106df 	.word	0x080106df
 801062c:	080107e3 	.word	0x080107e3
 8010630:	080107e3 	.word	0x080107e3
 8010634:	080107e3 	.word	0x080107e3
 8010638:	0801071f 	.word	0x0801071f
 801063c:	080107e3 	.word	0x080107e3
 8010640:	080107e3 	.word	0x080107e3
 8010644:	080107e3 	.word	0x080107e3
 8010648:	08010761 	.word	0x08010761
 801064c:	080107e3 	.word	0x080107e3
 8010650:	080107e3 	.word	0x080107e3
 8010654:	080107e3 	.word	0x080107e3
 8010658:	080107a1 	.word	0x080107a1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	68b9      	ldr	r1, [r7, #8]
 8010662:	4618      	mov	r0, r3
 8010664:	f000 fb72 	bl	8010d4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	699a      	ldr	r2, [r3, #24]
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	f042 0208 	orr.w	r2, r2, #8
 8010676:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	699a      	ldr	r2, [r3, #24]
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	f022 0204 	bic.w	r2, r2, #4
 8010686:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	6999      	ldr	r1, [r3, #24]
 801068e:	68bb      	ldr	r3, [r7, #8]
 8010690:	691a      	ldr	r2, [r3, #16]
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	430a      	orrs	r2, r1
 8010698:	619a      	str	r2, [r3, #24]
      break;
 801069a:	e0a5      	b.n	80107e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	68b9      	ldr	r1, [r7, #8]
 80106a2:	4618      	mov	r0, r3
 80106a4:	f000 fbe2 	bl	8010e6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	699a      	ldr	r2, [r3, #24]
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80106b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	699a      	ldr	r2, [r3, #24]
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80106c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	6999      	ldr	r1, [r3, #24]
 80106ce:	68bb      	ldr	r3, [r7, #8]
 80106d0:	691b      	ldr	r3, [r3, #16]
 80106d2:	021a      	lsls	r2, r3, #8
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	430a      	orrs	r2, r1
 80106da:	619a      	str	r2, [r3, #24]
      break;
 80106dc:	e084      	b.n	80107e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	68b9      	ldr	r1, [r7, #8]
 80106e4:	4618      	mov	r0, r3
 80106e6:	f000 fc4b 	bl	8010f80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	69da      	ldr	r2, [r3, #28]
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	f042 0208 	orr.w	r2, r2, #8
 80106f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	69da      	ldr	r2, [r3, #28]
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	f022 0204 	bic.w	r2, r2, #4
 8010708:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	69d9      	ldr	r1, [r3, #28]
 8010710:	68bb      	ldr	r3, [r7, #8]
 8010712:	691a      	ldr	r2, [r3, #16]
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	430a      	orrs	r2, r1
 801071a:	61da      	str	r2, [r3, #28]
      break;
 801071c:	e064      	b.n	80107e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	68b9      	ldr	r1, [r7, #8]
 8010724:	4618      	mov	r0, r3
 8010726:	f000 fcb3 	bl	8011090 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	69da      	ldr	r2, [r3, #28]
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8010738:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801073a:	68fb      	ldr	r3, [r7, #12]
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	69da      	ldr	r2, [r3, #28]
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8010748:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	69d9      	ldr	r1, [r3, #28]
 8010750:	68bb      	ldr	r3, [r7, #8]
 8010752:	691b      	ldr	r3, [r3, #16]
 8010754:	021a      	lsls	r2, r3, #8
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	430a      	orrs	r2, r1
 801075c:	61da      	str	r2, [r3, #28]
      break;
 801075e:	e043      	b.n	80107e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8010760:	68fb      	ldr	r3, [r7, #12]
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	68b9      	ldr	r1, [r7, #8]
 8010766:	4618      	mov	r0, r3
 8010768:	f000 fcfc 	bl	8011164 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	f042 0208 	orr.w	r2, r2, #8
 801077a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	f022 0204 	bic.w	r2, r2, #4
 801078a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8010792:	68bb      	ldr	r3, [r7, #8]
 8010794:	691a      	ldr	r2, [r3, #16]
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	430a      	orrs	r2, r1
 801079c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 801079e:	e023      	b.n	80107e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	68b9      	ldr	r1, [r7, #8]
 80107a6:	4618      	mov	r0, r3
 80107a8:	f000 fd40 	bl	801122c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80107ba:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80107ca:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80107d2:	68bb      	ldr	r3, [r7, #8]
 80107d4:	691b      	ldr	r3, [r3, #16]
 80107d6:	021a      	lsls	r2, r3, #8
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	430a      	orrs	r2, r1
 80107de:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80107e0:	e002      	b.n	80107e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80107e2:	2301      	movs	r3, #1
 80107e4:	75fb      	strb	r3, [r7, #23]
      break;
 80107e6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	2200      	movs	r2, #0
 80107ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80107f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80107f2:	4618      	mov	r0, r3
 80107f4:	3718      	adds	r7, #24
 80107f6:	46bd      	mov	sp, r7
 80107f8:	bd80      	pop	{r7, pc}
 80107fa:	bf00      	nop

080107fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80107fc:	b580      	push	{r7, lr}
 80107fe:	b084      	sub	sp, #16
 8010800:	af00      	add	r7, sp, #0
 8010802:	6078      	str	r0, [r7, #4]
 8010804:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010806:	2300      	movs	r3, #0
 8010808:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010810:	2b01      	cmp	r3, #1
 8010812:	d101      	bne.n	8010818 <HAL_TIM_ConfigClockSource+0x1c>
 8010814:	2302      	movs	r3, #2
 8010816:	e0dc      	b.n	80109d2 <HAL_TIM_ConfigClockSource+0x1d6>
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	2201      	movs	r2, #1
 801081c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	2202      	movs	r2, #2
 8010824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	689b      	ldr	r3, [r3, #8]
 801082e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8010830:	68ba      	ldr	r2, [r7, #8]
 8010832:	4b6a      	ldr	r3, [pc, #424]	@ (80109dc <HAL_TIM_ConfigClockSource+0x1e0>)
 8010834:	4013      	ands	r3, r2
 8010836:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010838:	68bb      	ldr	r3, [r7, #8]
 801083a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801083e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	68ba      	ldr	r2, [r7, #8]
 8010846:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8010848:	683b      	ldr	r3, [r7, #0]
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	4a64      	ldr	r2, [pc, #400]	@ (80109e0 <HAL_TIM_ConfigClockSource+0x1e4>)
 801084e:	4293      	cmp	r3, r2
 8010850:	f000 80a9 	beq.w	80109a6 <HAL_TIM_ConfigClockSource+0x1aa>
 8010854:	4a62      	ldr	r2, [pc, #392]	@ (80109e0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8010856:	4293      	cmp	r3, r2
 8010858:	f200 80ae 	bhi.w	80109b8 <HAL_TIM_ConfigClockSource+0x1bc>
 801085c:	4a61      	ldr	r2, [pc, #388]	@ (80109e4 <HAL_TIM_ConfigClockSource+0x1e8>)
 801085e:	4293      	cmp	r3, r2
 8010860:	f000 80a1 	beq.w	80109a6 <HAL_TIM_ConfigClockSource+0x1aa>
 8010864:	4a5f      	ldr	r2, [pc, #380]	@ (80109e4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8010866:	4293      	cmp	r3, r2
 8010868:	f200 80a6 	bhi.w	80109b8 <HAL_TIM_ConfigClockSource+0x1bc>
 801086c:	4a5e      	ldr	r2, [pc, #376]	@ (80109e8 <HAL_TIM_ConfigClockSource+0x1ec>)
 801086e:	4293      	cmp	r3, r2
 8010870:	f000 8099 	beq.w	80109a6 <HAL_TIM_ConfigClockSource+0x1aa>
 8010874:	4a5c      	ldr	r2, [pc, #368]	@ (80109e8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8010876:	4293      	cmp	r3, r2
 8010878:	f200 809e 	bhi.w	80109b8 <HAL_TIM_ConfigClockSource+0x1bc>
 801087c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8010880:	f000 8091 	beq.w	80109a6 <HAL_TIM_ConfigClockSource+0x1aa>
 8010884:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8010888:	f200 8096 	bhi.w	80109b8 <HAL_TIM_ConfigClockSource+0x1bc>
 801088c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010890:	f000 8089 	beq.w	80109a6 <HAL_TIM_ConfigClockSource+0x1aa>
 8010894:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010898:	f200 808e 	bhi.w	80109b8 <HAL_TIM_ConfigClockSource+0x1bc>
 801089c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80108a0:	d03e      	beq.n	8010920 <HAL_TIM_ConfigClockSource+0x124>
 80108a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80108a6:	f200 8087 	bhi.w	80109b8 <HAL_TIM_ConfigClockSource+0x1bc>
 80108aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80108ae:	f000 8086 	beq.w	80109be <HAL_TIM_ConfigClockSource+0x1c2>
 80108b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80108b6:	d87f      	bhi.n	80109b8 <HAL_TIM_ConfigClockSource+0x1bc>
 80108b8:	2b70      	cmp	r3, #112	@ 0x70
 80108ba:	d01a      	beq.n	80108f2 <HAL_TIM_ConfigClockSource+0xf6>
 80108bc:	2b70      	cmp	r3, #112	@ 0x70
 80108be:	d87b      	bhi.n	80109b8 <HAL_TIM_ConfigClockSource+0x1bc>
 80108c0:	2b60      	cmp	r3, #96	@ 0x60
 80108c2:	d050      	beq.n	8010966 <HAL_TIM_ConfigClockSource+0x16a>
 80108c4:	2b60      	cmp	r3, #96	@ 0x60
 80108c6:	d877      	bhi.n	80109b8 <HAL_TIM_ConfigClockSource+0x1bc>
 80108c8:	2b50      	cmp	r3, #80	@ 0x50
 80108ca:	d03c      	beq.n	8010946 <HAL_TIM_ConfigClockSource+0x14a>
 80108cc:	2b50      	cmp	r3, #80	@ 0x50
 80108ce:	d873      	bhi.n	80109b8 <HAL_TIM_ConfigClockSource+0x1bc>
 80108d0:	2b40      	cmp	r3, #64	@ 0x40
 80108d2:	d058      	beq.n	8010986 <HAL_TIM_ConfigClockSource+0x18a>
 80108d4:	2b40      	cmp	r3, #64	@ 0x40
 80108d6:	d86f      	bhi.n	80109b8 <HAL_TIM_ConfigClockSource+0x1bc>
 80108d8:	2b30      	cmp	r3, #48	@ 0x30
 80108da:	d064      	beq.n	80109a6 <HAL_TIM_ConfigClockSource+0x1aa>
 80108dc:	2b30      	cmp	r3, #48	@ 0x30
 80108de:	d86b      	bhi.n	80109b8 <HAL_TIM_ConfigClockSource+0x1bc>
 80108e0:	2b20      	cmp	r3, #32
 80108e2:	d060      	beq.n	80109a6 <HAL_TIM_ConfigClockSource+0x1aa>
 80108e4:	2b20      	cmp	r3, #32
 80108e6:	d867      	bhi.n	80109b8 <HAL_TIM_ConfigClockSource+0x1bc>
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d05c      	beq.n	80109a6 <HAL_TIM_ConfigClockSource+0x1aa>
 80108ec:	2b10      	cmp	r3, #16
 80108ee:	d05a      	beq.n	80109a6 <HAL_TIM_ConfigClockSource+0x1aa>
 80108f0:	e062      	b.n	80109b8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80108f6:	683b      	ldr	r3, [r7, #0]
 80108f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80108fa:	683b      	ldr	r3, [r7, #0]
 80108fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80108fe:	683b      	ldr	r3, [r7, #0]
 8010900:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8010902:	f000 fd77 	bl	80113f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	689b      	ldr	r3, [r3, #8]
 801090c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801090e:	68bb      	ldr	r3, [r7, #8]
 8010910:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8010914:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	68ba      	ldr	r2, [r7, #8]
 801091c:	609a      	str	r2, [r3, #8]
      break;
 801091e:	e04f      	b.n	80109c0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8010924:	683b      	ldr	r3, [r7, #0]
 8010926:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8010928:	683b      	ldr	r3, [r7, #0]
 801092a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801092c:	683b      	ldr	r3, [r7, #0]
 801092e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8010930:	f000 fd60 	bl	80113f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	689a      	ldr	r2, [r3, #8]
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8010942:	609a      	str	r2, [r3, #8]
      break;
 8010944:	e03c      	b.n	80109c0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801094a:	683b      	ldr	r3, [r7, #0]
 801094c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801094e:	683b      	ldr	r3, [r7, #0]
 8010950:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010952:	461a      	mov	r2, r3
 8010954:	f000 fcd0 	bl	80112f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	2150      	movs	r1, #80	@ 0x50
 801095e:	4618      	mov	r0, r3
 8010960:	f000 fd2a 	bl	80113b8 <TIM_ITRx_SetConfig>
      break;
 8010964:	e02c      	b.n	80109c0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801096a:	683b      	ldr	r3, [r7, #0]
 801096c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801096e:	683b      	ldr	r3, [r7, #0]
 8010970:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8010972:	461a      	mov	r2, r3
 8010974:	f000 fcef 	bl	8011356 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	2160      	movs	r1, #96	@ 0x60
 801097e:	4618      	mov	r0, r3
 8010980:	f000 fd1a 	bl	80113b8 <TIM_ITRx_SetConfig>
      break;
 8010984:	e01c      	b.n	80109c0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801098a:	683b      	ldr	r3, [r7, #0]
 801098c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801098e:	683b      	ldr	r3, [r7, #0]
 8010990:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010992:	461a      	mov	r2, r3
 8010994:	f000 fcb0 	bl	80112f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	2140      	movs	r1, #64	@ 0x40
 801099e:	4618      	mov	r0, r3
 80109a0:	f000 fd0a 	bl	80113b8 <TIM_ITRx_SetConfig>
      break;
 80109a4:	e00c      	b.n	80109c0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	681a      	ldr	r2, [r3, #0]
 80109aa:	683b      	ldr	r3, [r7, #0]
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	4619      	mov	r1, r3
 80109b0:	4610      	mov	r0, r2
 80109b2:	f000 fd01 	bl	80113b8 <TIM_ITRx_SetConfig>
      break;
 80109b6:	e003      	b.n	80109c0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80109b8:	2301      	movs	r3, #1
 80109ba:	73fb      	strb	r3, [r7, #15]
      break;
 80109bc:	e000      	b.n	80109c0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80109be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	2201      	movs	r2, #1
 80109c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	2200      	movs	r2, #0
 80109cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80109d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80109d2:	4618      	mov	r0, r3
 80109d4:	3710      	adds	r7, #16
 80109d6:	46bd      	mov	sp, r7
 80109d8:	bd80      	pop	{r7, pc}
 80109da:	bf00      	nop
 80109dc:	ffceff88 	.word	0xffceff88
 80109e0:	00100040 	.word	0x00100040
 80109e4:	00100030 	.word	0x00100030
 80109e8:	00100020 	.word	0x00100020

080109ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80109ec:	b480      	push	{r7}
 80109ee:	b083      	sub	sp, #12
 80109f0:	af00      	add	r7, sp, #0
 80109f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80109f4:	bf00      	nop
 80109f6:	370c      	adds	r7, #12
 80109f8:	46bd      	mov	sp, r7
 80109fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109fe:	4770      	bx	lr

08010a00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010a00:	b480      	push	{r7}
 8010a02:	b083      	sub	sp, #12
 8010a04:	af00      	add	r7, sp, #0
 8010a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010a08:	bf00      	nop
 8010a0a:	370c      	adds	r7, #12
 8010a0c:	46bd      	mov	sp, r7
 8010a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a12:	4770      	bx	lr

08010a14 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8010a14:	b480      	push	{r7}
 8010a16:	b083      	sub	sp, #12
 8010a18:	af00      	add	r7, sp, #0
 8010a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8010a1c:	bf00      	nop
 8010a1e:	370c      	adds	r7, #12
 8010a20:	46bd      	mov	sp, r7
 8010a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a26:	4770      	bx	lr

08010a28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010a28:	b480      	push	{r7}
 8010a2a:	b083      	sub	sp, #12
 8010a2c:	af00      	add	r7, sp, #0
 8010a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010a30:	bf00      	nop
 8010a32:	370c      	adds	r7, #12
 8010a34:	46bd      	mov	sp, r7
 8010a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a3a:	4770      	bx	lr

08010a3c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8010a3c:	b480      	push	{r7}
 8010a3e:	b083      	sub	sp, #12
 8010a40:	af00      	add	r7, sp, #0
 8010a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8010a44:	bf00      	nop
 8010a46:	370c      	adds	r7, #12
 8010a48:	46bd      	mov	sp, r7
 8010a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a4e:	4770      	bx	lr

08010a50 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8010a50:	b580      	push	{r7, lr}
 8010a52:	b084      	sub	sp, #16
 8010a54:	af00      	add	r7, sp, #0
 8010a56:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a5c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a62:	687a      	ldr	r2, [r7, #4]
 8010a64:	429a      	cmp	r2, r3
 8010a66:	d107      	bne.n	8010a78 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	2201      	movs	r2, #1
 8010a6c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	2201      	movs	r2, #1
 8010a72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8010a76:	e02a      	b.n	8010ace <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010a7c:	687a      	ldr	r2, [r7, #4]
 8010a7e:	429a      	cmp	r2, r3
 8010a80:	d107      	bne.n	8010a92 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	2202      	movs	r2, #2
 8010a86:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	2201      	movs	r2, #1
 8010a8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8010a90:	e01d      	b.n	8010ace <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a96:	687a      	ldr	r2, [r7, #4]
 8010a98:	429a      	cmp	r2, r3
 8010a9a:	d107      	bne.n	8010aac <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	2204      	movs	r2, #4
 8010aa0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	2201      	movs	r2, #1
 8010aa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8010aaa:	e010      	b.n	8010ace <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010ab0:	687a      	ldr	r2, [r7, #4]
 8010ab2:	429a      	cmp	r2, r3
 8010ab4:	d107      	bne.n	8010ac6 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	2208      	movs	r2, #8
 8010aba:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	2201      	movs	r2, #1
 8010ac0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8010ac4:	e003      	b.n	8010ace <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	2201      	movs	r2, #1
 8010aca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8010ace:	68f8      	ldr	r0, [r7, #12]
 8010ad0:	f7ff ffb4 	bl	8010a3c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010ad4:	68fb      	ldr	r3, [r7, #12]
 8010ad6:	2200      	movs	r2, #0
 8010ad8:	771a      	strb	r2, [r3, #28]
}
 8010ada:	bf00      	nop
 8010adc:	3710      	adds	r7, #16
 8010ade:	46bd      	mov	sp, r7
 8010ae0:	bd80      	pop	{r7, pc}

08010ae2 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8010ae2:	b580      	push	{r7, lr}
 8010ae4:	b084      	sub	sp, #16
 8010ae6:	af00      	add	r7, sp, #0
 8010ae8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010aee:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010af4:	687a      	ldr	r2, [r7, #4]
 8010af6:	429a      	cmp	r2, r3
 8010af8:	d10b      	bne.n	8010b12 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	2201      	movs	r2, #1
 8010afe:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	69db      	ldr	r3, [r3, #28]
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d136      	bne.n	8010b76 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	2201      	movs	r2, #1
 8010b0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8010b10:	e031      	b.n	8010b76 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010b16:	687a      	ldr	r2, [r7, #4]
 8010b18:	429a      	cmp	r2, r3
 8010b1a:	d10b      	bne.n	8010b34 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	2202      	movs	r2, #2
 8010b20:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	69db      	ldr	r3, [r3, #28]
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d125      	bne.n	8010b76 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8010b2a:	68fb      	ldr	r3, [r7, #12]
 8010b2c:	2201      	movs	r2, #1
 8010b2e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8010b32:	e020      	b.n	8010b76 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010b38:	687a      	ldr	r2, [r7, #4]
 8010b3a:	429a      	cmp	r2, r3
 8010b3c:	d10b      	bne.n	8010b56 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	2204      	movs	r2, #4
 8010b42:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	69db      	ldr	r3, [r3, #28]
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d114      	bne.n	8010b76 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	2201      	movs	r2, #1
 8010b50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8010b54:	e00f      	b.n	8010b76 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8010b56:	68fb      	ldr	r3, [r7, #12]
 8010b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010b5a:	687a      	ldr	r2, [r7, #4]
 8010b5c:	429a      	cmp	r2, r3
 8010b5e:	d10a      	bne.n	8010b76 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	2208      	movs	r2, #8
 8010b64:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	69db      	ldr	r3, [r3, #28]
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d103      	bne.n	8010b76 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	2201      	movs	r2, #1
 8010b72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010b76:	68f8      	ldr	r0, [r7, #12]
 8010b78:	f7f4 fe4a 	bl	8005810 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	2200      	movs	r2, #0
 8010b80:	771a      	strb	r2, [r3, #28]
}
 8010b82:	bf00      	nop
 8010b84:	3710      	adds	r7, #16
 8010b86:	46bd      	mov	sp, r7
 8010b88:	bd80      	pop	{r7, pc}

08010b8a <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010b8a:	b580      	push	{r7, lr}
 8010b8c:	b084      	sub	sp, #16
 8010b8e:	af00      	add	r7, sp, #0
 8010b90:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010b96:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010b9c:	687a      	ldr	r2, [r7, #4]
 8010b9e:	429a      	cmp	r2, r3
 8010ba0:	d103      	bne.n	8010baa <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	2201      	movs	r2, #1
 8010ba6:	771a      	strb	r2, [r3, #28]
 8010ba8:	e019      	b.n	8010bde <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010bae:	687a      	ldr	r2, [r7, #4]
 8010bb0:	429a      	cmp	r2, r3
 8010bb2:	d103      	bne.n	8010bbc <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010bb4:	68fb      	ldr	r3, [r7, #12]
 8010bb6:	2202      	movs	r2, #2
 8010bb8:	771a      	strb	r2, [r3, #28]
 8010bba:	e010      	b.n	8010bde <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010bc0:	687a      	ldr	r2, [r7, #4]
 8010bc2:	429a      	cmp	r2, r3
 8010bc4:	d103      	bne.n	8010bce <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	2204      	movs	r2, #4
 8010bca:	771a      	strb	r2, [r3, #28]
 8010bcc:	e007      	b.n	8010bde <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010bd2:	687a      	ldr	r2, [r7, #4]
 8010bd4:	429a      	cmp	r2, r3
 8010bd6:	d102      	bne.n	8010bde <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010bd8:	68fb      	ldr	r3, [r7, #12]
 8010bda:	2208      	movs	r2, #8
 8010bdc:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8010bde:	68f8      	ldr	r0, [r7, #12]
 8010be0:	f7ff ff18 	bl	8010a14 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010be4:	68fb      	ldr	r3, [r7, #12]
 8010be6:	2200      	movs	r2, #0
 8010be8:	771a      	strb	r2, [r3, #28]
}
 8010bea:	bf00      	nop
 8010bec:	3710      	adds	r7, #16
 8010bee:	46bd      	mov	sp, r7
 8010bf0:	bd80      	pop	{r7, pc}
	...

08010bf4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8010bf4:	b480      	push	{r7}
 8010bf6:	b085      	sub	sp, #20
 8010bf8:	af00      	add	r7, sp, #0
 8010bfa:	6078      	str	r0, [r7, #4]
 8010bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	681b      	ldr	r3, [r3, #0]
 8010c02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	4a47      	ldr	r2, [pc, #284]	@ (8010d24 <TIM_Base_SetConfig+0x130>)
 8010c08:	4293      	cmp	r3, r2
 8010c0a:	d013      	beq.n	8010c34 <TIM_Base_SetConfig+0x40>
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010c12:	d00f      	beq.n	8010c34 <TIM_Base_SetConfig+0x40>
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	4a44      	ldr	r2, [pc, #272]	@ (8010d28 <TIM_Base_SetConfig+0x134>)
 8010c18:	4293      	cmp	r3, r2
 8010c1a:	d00b      	beq.n	8010c34 <TIM_Base_SetConfig+0x40>
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	4a43      	ldr	r2, [pc, #268]	@ (8010d2c <TIM_Base_SetConfig+0x138>)
 8010c20:	4293      	cmp	r3, r2
 8010c22:	d007      	beq.n	8010c34 <TIM_Base_SetConfig+0x40>
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	4a42      	ldr	r2, [pc, #264]	@ (8010d30 <TIM_Base_SetConfig+0x13c>)
 8010c28:	4293      	cmp	r3, r2
 8010c2a:	d003      	beq.n	8010c34 <TIM_Base_SetConfig+0x40>
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	4a41      	ldr	r2, [pc, #260]	@ (8010d34 <TIM_Base_SetConfig+0x140>)
 8010c30:	4293      	cmp	r3, r2
 8010c32:	d108      	bne.n	8010c46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010c3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010c3c:	683b      	ldr	r3, [r7, #0]
 8010c3e:	685b      	ldr	r3, [r3, #4]
 8010c40:	68fa      	ldr	r2, [r7, #12]
 8010c42:	4313      	orrs	r3, r2
 8010c44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	4a36      	ldr	r2, [pc, #216]	@ (8010d24 <TIM_Base_SetConfig+0x130>)
 8010c4a:	4293      	cmp	r3, r2
 8010c4c:	d027      	beq.n	8010c9e <TIM_Base_SetConfig+0xaa>
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010c54:	d023      	beq.n	8010c9e <TIM_Base_SetConfig+0xaa>
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	4a33      	ldr	r2, [pc, #204]	@ (8010d28 <TIM_Base_SetConfig+0x134>)
 8010c5a:	4293      	cmp	r3, r2
 8010c5c:	d01f      	beq.n	8010c9e <TIM_Base_SetConfig+0xaa>
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	4a32      	ldr	r2, [pc, #200]	@ (8010d2c <TIM_Base_SetConfig+0x138>)
 8010c62:	4293      	cmp	r3, r2
 8010c64:	d01b      	beq.n	8010c9e <TIM_Base_SetConfig+0xaa>
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	4a31      	ldr	r2, [pc, #196]	@ (8010d30 <TIM_Base_SetConfig+0x13c>)
 8010c6a:	4293      	cmp	r3, r2
 8010c6c:	d017      	beq.n	8010c9e <TIM_Base_SetConfig+0xaa>
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	4a30      	ldr	r2, [pc, #192]	@ (8010d34 <TIM_Base_SetConfig+0x140>)
 8010c72:	4293      	cmp	r3, r2
 8010c74:	d013      	beq.n	8010c9e <TIM_Base_SetConfig+0xaa>
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	4a2f      	ldr	r2, [pc, #188]	@ (8010d38 <TIM_Base_SetConfig+0x144>)
 8010c7a:	4293      	cmp	r3, r2
 8010c7c:	d00f      	beq.n	8010c9e <TIM_Base_SetConfig+0xaa>
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	4a2e      	ldr	r2, [pc, #184]	@ (8010d3c <TIM_Base_SetConfig+0x148>)
 8010c82:	4293      	cmp	r3, r2
 8010c84:	d00b      	beq.n	8010c9e <TIM_Base_SetConfig+0xaa>
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	4a2d      	ldr	r2, [pc, #180]	@ (8010d40 <TIM_Base_SetConfig+0x14c>)
 8010c8a:	4293      	cmp	r3, r2
 8010c8c:	d007      	beq.n	8010c9e <TIM_Base_SetConfig+0xaa>
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	4a2c      	ldr	r2, [pc, #176]	@ (8010d44 <TIM_Base_SetConfig+0x150>)
 8010c92:	4293      	cmp	r3, r2
 8010c94:	d003      	beq.n	8010c9e <TIM_Base_SetConfig+0xaa>
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	4a2b      	ldr	r2, [pc, #172]	@ (8010d48 <TIM_Base_SetConfig+0x154>)
 8010c9a:	4293      	cmp	r3, r2
 8010c9c:	d108      	bne.n	8010cb0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010c9e:	68fb      	ldr	r3, [r7, #12]
 8010ca0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010ca4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010ca6:	683b      	ldr	r3, [r7, #0]
 8010ca8:	68db      	ldr	r3, [r3, #12]
 8010caa:	68fa      	ldr	r2, [r7, #12]
 8010cac:	4313      	orrs	r3, r2
 8010cae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8010cb6:	683b      	ldr	r3, [r7, #0]
 8010cb8:	695b      	ldr	r3, [r3, #20]
 8010cba:	4313      	orrs	r3, r2
 8010cbc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010cbe:	683b      	ldr	r3, [r7, #0]
 8010cc0:	689a      	ldr	r2, [r3, #8]
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010cc6:	683b      	ldr	r3, [r7, #0]
 8010cc8:	681a      	ldr	r2, [r3, #0]
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	4a14      	ldr	r2, [pc, #80]	@ (8010d24 <TIM_Base_SetConfig+0x130>)
 8010cd2:	4293      	cmp	r3, r2
 8010cd4:	d00f      	beq.n	8010cf6 <TIM_Base_SetConfig+0x102>
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	4a16      	ldr	r2, [pc, #88]	@ (8010d34 <TIM_Base_SetConfig+0x140>)
 8010cda:	4293      	cmp	r3, r2
 8010cdc:	d00b      	beq.n	8010cf6 <TIM_Base_SetConfig+0x102>
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	4a15      	ldr	r2, [pc, #84]	@ (8010d38 <TIM_Base_SetConfig+0x144>)
 8010ce2:	4293      	cmp	r3, r2
 8010ce4:	d007      	beq.n	8010cf6 <TIM_Base_SetConfig+0x102>
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	4a14      	ldr	r2, [pc, #80]	@ (8010d3c <TIM_Base_SetConfig+0x148>)
 8010cea:	4293      	cmp	r3, r2
 8010cec:	d003      	beq.n	8010cf6 <TIM_Base_SetConfig+0x102>
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	4a13      	ldr	r2, [pc, #76]	@ (8010d40 <TIM_Base_SetConfig+0x14c>)
 8010cf2:	4293      	cmp	r3, r2
 8010cf4:	d103      	bne.n	8010cfe <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010cf6:	683b      	ldr	r3, [r7, #0]
 8010cf8:	691a      	ldr	r2, [r3, #16]
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	f043 0204 	orr.w	r2, r3, #4
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	2201      	movs	r2, #1
 8010d0e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	68fa      	ldr	r2, [r7, #12]
 8010d14:	601a      	str	r2, [r3, #0]
}
 8010d16:	bf00      	nop
 8010d18:	3714      	adds	r7, #20
 8010d1a:	46bd      	mov	sp, r7
 8010d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d20:	4770      	bx	lr
 8010d22:	bf00      	nop
 8010d24:	40010000 	.word	0x40010000
 8010d28:	40000400 	.word	0x40000400
 8010d2c:	40000800 	.word	0x40000800
 8010d30:	40000c00 	.word	0x40000c00
 8010d34:	40010400 	.word	0x40010400
 8010d38:	40014000 	.word	0x40014000
 8010d3c:	40014400 	.word	0x40014400
 8010d40:	40014800 	.word	0x40014800
 8010d44:	4000e000 	.word	0x4000e000
 8010d48:	4000e400 	.word	0x4000e400

08010d4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010d4c:	b480      	push	{r7}
 8010d4e:	b087      	sub	sp, #28
 8010d50:	af00      	add	r7, sp, #0
 8010d52:	6078      	str	r0, [r7, #4]
 8010d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	6a1b      	ldr	r3, [r3, #32]
 8010d5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	6a1b      	ldr	r3, [r3, #32]
 8010d60:	f023 0201 	bic.w	r2, r3, #1
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	685b      	ldr	r3, [r3, #4]
 8010d6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	699b      	ldr	r3, [r3, #24]
 8010d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010d74:	68fa      	ldr	r2, [r7, #12]
 8010d76:	4b37      	ldr	r3, [pc, #220]	@ (8010e54 <TIM_OC1_SetConfig+0x108>)
 8010d78:	4013      	ands	r3, r2
 8010d7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010d7c:	68fb      	ldr	r3, [r7, #12]
 8010d7e:	f023 0303 	bic.w	r3, r3, #3
 8010d82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010d84:	683b      	ldr	r3, [r7, #0]
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	68fa      	ldr	r2, [r7, #12]
 8010d8a:	4313      	orrs	r3, r2
 8010d8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010d8e:	697b      	ldr	r3, [r7, #20]
 8010d90:	f023 0302 	bic.w	r3, r3, #2
 8010d94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8010d96:	683b      	ldr	r3, [r7, #0]
 8010d98:	689b      	ldr	r3, [r3, #8]
 8010d9a:	697a      	ldr	r2, [r7, #20]
 8010d9c:	4313      	orrs	r3, r2
 8010d9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	4a2d      	ldr	r2, [pc, #180]	@ (8010e58 <TIM_OC1_SetConfig+0x10c>)
 8010da4:	4293      	cmp	r3, r2
 8010da6:	d00f      	beq.n	8010dc8 <TIM_OC1_SetConfig+0x7c>
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	4a2c      	ldr	r2, [pc, #176]	@ (8010e5c <TIM_OC1_SetConfig+0x110>)
 8010dac:	4293      	cmp	r3, r2
 8010dae:	d00b      	beq.n	8010dc8 <TIM_OC1_SetConfig+0x7c>
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	4a2b      	ldr	r2, [pc, #172]	@ (8010e60 <TIM_OC1_SetConfig+0x114>)
 8010db4:	4293      	cmp	r3, r2
 8010db6:	d007      	beq.n	8010dc8 <TIM_OC1_SetConfig+0x7c>
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	4a2a      	ldr	r2, [pc, #168]	@ (8010e64 <TIM_OC1_SetConfig+0x118>)
 8010dbc:	4293      	cmp	r3, r2
 8010dbe:	d003      	beq.n	8010dc8 <TIM_OC1_SetConfig+0x7c>
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	4a29      	ldr	r2, [pc, #164]	@ (8010e68 <TIM_OC1_SetConfig+0x11c>)
 8010dc4:	4293      	cmp	r3, r2
 8010dc6:	d10c      	bne.n	8010de2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010dc8:	697b      	ldr	r3, [r7, #20]
 8010dca:	f023 0308 	bic.w	r3, r3, #8
 8010dce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010dd0:	683b      	ldr	r3, [r7, #0]
 8010dd2:	68db      	ldr	r3, [r3, #12]
 8010dd4:	697a      	ldr	r2, [r7, #20]
 8010dd6:	4313      	orrs	r3, r2
 8010dd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8010dda:	697b      	ldr	r3, [r7, #20]
 8010ddc:	f023 0304 	bic.w	r3, r3, #4
 8010de0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	4a1c      	ldr	r2, [pc, #112]	@ (8010e58 <TIM_OC1_SetConfig+0x10c>)
 8010de6:	4293      	cmp	r3, r2
 8010de8:	d00f      	beq.n	8010e0a <TIM_OC1_SetConfig+0xbe>
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	4a1b      	ldr	r2, [pc, #108]	@ (8010e5c <TIM_OC1_SetConfig+0x110>)
 8010dee:	4293      	cmp	r3, r2
 8010df0:	d00b      	beq.n	8010e0a <TIM_OC1_SetConfig+0xbe>
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	4a1a      	ldr	r2, [pc, #104]	@ (8010e60 <TIM_OC1_SetConfig+0x114>)
 8010df6:	4293      	cmp	r3, r2
 8010df8:	d007      	beq.n	8010e0a <TIM_OC1_SetConfig+0xbe>
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	4a19      	ldr	r2, [pc, #100]	@ (8010e64 <TIM_OC1_SetConfig+0x118>)
 8010dfe:	4293      	cmp	r3, r2
 8010e00:	d003      	beq.n	8010e0a <TIM_OC1_SetConfig+0xbe>
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	4a18      	ldr	r2, [pc, #96]	@ (8010e68 <TIM_OC1_SetConfig+0x11c>)
 8010e06:	4293      	cmp	r3, r2
 8010e08:	d111      	bne.n	8010e2e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8010e0a:	693b      	ldr	r3, [r7, #16]
 8010e0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010e10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010e12:	693b      	ldr	r3, [r7, #16]
 8010e14:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8010e18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8010e1a:	683b      	ldr	r3, [r7, #0]
 8010e1c:	695b      	ldr	r3, [r3, #20]
 8010e1e:	693a      	ldr	r2, [r7, #16]
 8010e20:	4313      	orrs	r3, r2
 8010e22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010e24:	683b      	ldr	r3, [r7, #0]
 8010e26:	699b      	ldr	r3, [r3, #24]
 8010e28:	693a      	ldr	r2, [r7, #16]
 8010e2a:	4313      	orrs	r3, r2
 8010e2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	693a      	ldr	r2, [r7, #16]
 8010e32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	68fa      	ldr	r2, [r7, #12]
 8010e38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8010e3a:	683b      	ldr	r3, [r7, #0]
 8010e3c:	685a      	ldr	r2, [r3, #4]
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	697a      	ldr	r2, [r7, #20]
 8010e46:	621a      	str	r2, [r3, #32]
}
 8010e48:	bf00      	nop
 8010e4a:	371c      	adds	r7, #28
 8010e4c:	46bd      	mov	sp, r7
 8010e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e52:	4770      	bx	lr
 8010e54:	fffeff8f 	.word	0xfffeff8f
 8010e58:	40010000 	.word	0x40010000
 8010e5c:	40010400 	.word	0x40010400
 8010e60:	40014000 	.word	0x40014000
 8010e64:	40014400 	.word	0x40014400
 8010e68:	40014800 	.word	0x40014800

08010e6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010e6c:	b480      	push	{r7}
 8010e6e:	b087      	sub	sp, #28
 8010e70:	af00      	add	r7, sp, #0
 8010e72:	6078      	str	r0, [r7, #4]
 8010e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	6a1b      	ldr	r3, [r3, #32]
 8010e7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	6a1b      	ldr	r3, [r3, #32]
 8010e80:	f023 0210 	bic.w	r2, r3, #16
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	685b      	ldr	r3, [r3, #4]
 8010e8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	699b      	ldr	r3, [r3, #24]
 8010e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010e94:	68fa      	ldr	r2, [r7, #12]
 8010e96:	4b34      	ldr	r3, [pc, #208]	@ (8010f68 <TIM_OC2_SetConfig+0xfc>)
 8010e98:	4013      	ands	r3, r2
 8010e9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010ea2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010ea4:	683b      	ldr	r3, [r7, #0]
 8010ea6:	681b      	ldr	r3, [r3, #0]
 8010ea8:	021b      	lsls	r3, r3, #8
 8010eaa:	68fa      	ldr	r2, [r7, #12]
 8010eac:	4313      	orrs	r3, r2
 8010eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010eb0:	697b      	ldr	r3, [r7, #20]
 8010eb2:	f023 0320 	bic.w	r3, r3, #32
 8010eb6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010eb8:	683b      	ldr	r3, [r7, #0]
 8010eba:	689b      	ldr	r3, [r3, #8]
 8010ebc:	011b      	lsls	r3, r3, #4
 8010ebe:	697a      	ldr	r2, [r7, #20]
 8010ec0:	4313      	orrs	r3, r2
 8010ec2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	4a29      	ldr	r2, [pc, #164]	@ (8010f6c <TIM_OC2_SetConfig+0x100>)
 8010ec8:	4293      	cmp	r3, r2
 8010eca:	d003      	beq.n	8010ed4 <TIM_OC2_SetConfig+0x68>
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	4a28      	ldr	r2, [pc, #160]	@ (8010f70 <TIM_OC2_SetConfig+0x104>)
 8010ed0:	4293      	cmp	r3, r2
 8010ed2:	d10d      	bne.n	8010ef0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010ed4:	697b      	ldr	r3, [r7, #20]
 8010ed6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010eda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010edc:	683b      	ldr	r3, [r7, #0]
 8010ede:	68db      	ldr	r3, [r3, #12]
 8010ee0:	011b      	lsls	r3, r3, #4
 8010ee2:	697a      	ldr	r2, [r7, #20]
 8010ee4:	4313      	orrs	r3, r2
 8010ee6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8010ee8:	697b      	ldr	r3, [r7, #20]
 8010eea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010eee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	4a1e      	ldr	r2, [pc, #120]	@ (8010f6c <TIM_OC2_SetConfig+0x100>)
 8010ef4:	4293      	cmp	r3, r2
 8010ef6:	d00f      	beq.n	8010f18 <TIM_OC2_SetConfig+0xac>
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	4a1d      	ldr	r2, [pc, #116]	@ (8010f70 <TIM_OC2_SetConfig+0x104>)
 8010efc:	4293      	cmp	r3, r2
 8010efe:	d00b      	beq.n	8010f18 <TIM_OC2_SetConfig+0xac>
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	4a1c      	ldr	r2, [pc, #112]	@ (8010f74 <TIM_OC2_SetConfig+0x108>)
 8010f04:	4293      	cmp	r3, r2
 8010f06:	d007      	beq.n	8010f18 <TIM_OC2_SetConfig+0xac>
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	4a1b      	ldr	r2, [pc, #108]	@ (8010f78 <TIM_OC2_SetConfig+0x10c>)
 8010f0c:	4293      	cmp	r3, r2
 8010f0e:	d003      	beq.n	8010f18 <TIM_OC2_SetConfig+0xac>
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	4a1a      	ldr	r2, [pc, #104]	@ (8010f7c <TIM_OC2_SetConfig+0x110>)
 8010f14:	4293      	cmp	r3, r2
 8010f16:	d113      	bne.n	8010f40 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010f18:	693b      	ldr	r3, [r7, #16]
 8010f1a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8010f1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010f20:	693b      	ldr	r3, [r7, #16]
 8010f22:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010f26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010f28:	683b      	ldr	r3, [r7, #0]
 8010f2a:	695b      	ldr	r3, [r3, #20]
 8010f2c:	009b      	lsls	r3, r3, #2
 8010f2e:	693a      	ldr	r2, [r7, #16]
 8010f30:	4313      	orrs	r3, r2
 8010f32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010f34:	683b      	ldr	r3, [r7, #0]
 8010f36:	699b      	ldr	r3, [r3, #24]
 8010f38:	009b      	lsls	r3, r3, #2
 8010f3a:	693a      	ldr	r2, [r7, #16]
 8010f3c:	4313      	orrs	r3, r2
 8010f3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	693a      	ldr	r2, [r7, #16]
 8010f44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	68fa      	ldr	r2, [r7, #12]
 8010f4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010f4c:	683b      	ldr	r3, [r7, #0]
 8010f4e:	685a      	ldr	r2, [r3, #4]
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	697a      	ldr	r2, [r7, #20]
 8010f58:	621a      	str	r2, [r3, #32]
}
 8010f5a:	bf00      	nop
 8010f5c:	371c      	adds	r7, #28
 8010f5e:	46bd      	mov	sp, r7
 8010f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f64:	4770      	bx	lr
 8010f66:	bf00      	nop
 8010f68:	feff8fff 	.word	0xfeff8fff
 8010f6c:	40010000 	.word	0x40010000
 8010f70:	40010400 	.word	0x40010400
 8010f74:	40014000 	.word	0x40014000
 8010f78:	40014400 	.word	0x40014400
 8010f7c:	40014800 	.word	0x40014800

08010f80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010f80:	b480      	push	{r7}
 8010f82:	b087      	sub	sp, #28
 8010f84:	af00      	add	r7, sp, #0
 8010f86:	6078      	str	r0, [r7, #4]
 8010f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	6a1b      	ldr	r3, [r3, #32]
 8010f8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	6a1b      	ldr	r3, [r3, #32]
 8010f94:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	685b      	ldr	r3, [r3, #4]
 8010fa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	69db      	ldr	r3, [r3, #28]
 8010fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010fa8:	68fa      	ldr	r2, [r7, #12]
 8010faa:	4b33      	ldr	r3, [pc, #204]	@ (8011078 <TIM_OC3_SetConfig+0xf8>)
 8010fac:	4013      	ands	r3, r2
 8010fae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	f023 0303 	bic.w	r3, r3, #3
 8010fb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010fb8:	683b      	ldr	r3, [r7, #0]
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	68fa      	ldr	r2, [r7, #12]
 8010fbe:	4313      	orrs	r3, r2
 8010fc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8010fc2:	697b      	ldr	r3, [r7, #20]
 8010fc4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8010fc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010fca:	683b      	ldr	r3, [r7, #0]
 8010fcc:	689b      	ldr	r3, [r3, #8]
 8010fce:	021b      	lsls	r3, r3, #8
 8010fd0:	697a      	ldr	r2, [r7, #20]
 8010fd2:	4313      	orrs	r3, r2
 8010fd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	4a28      	ldr	r2, [pc, #160]	@ (801107c <TIM_OC3_SetConfig+0xfc>)
 8010fda:	4293      	cmp	r3, r2
 8010fdc:	d003      	beq.n	8010fe6 <TIM_OC3_SetConfig+0x66>
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	4a27      	ldr	r2, [pc, #156]	@ (8011080 <TIM_OC3_SetConfig+0x100>)
 8010fe2:	4293      	cmp	r3, r2
 8010fe4:	d10d      	bne.n	8011002 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8010fe6:	697b      	ldr	r3, [r7, #20]
 8010fe8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010fec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8010fee:	683b      	ldr	r3, [r7, #0]
 8010ff0:	68db      	ldr	r3, [r3, #12]
 8010ff2:	021b      	lsls	r3, r3, #8
 8010ff4:	697a      	ldr	r2, [r7, #20]
 8010ff6:	4313      	orrs	r3, r2
 8010ff8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8010ffa:	697b      	ldr	r3, [r7, #20]
 8010ffc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8011000:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	4a1d      	ldr	r2, [pc, #116]	@ (801107c <TIM_OC3_SetConfig+0xfc>)
 8011006:	4293      	cmp	r3, r2
 8011008:	d00f      	beq.n	801102a <TIM_OC3_SetConfig+0xaa>
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	4a1c      	ldr	r2, [pc, #112]	@ (8011080 <TIM_OC3_SetConfig+0x100>)
 801100e:	4293      	cmp	r3, r2
 8011010:	d00b      	beq.n	801102a <TIM_OC3_SetConfig+0xaa>
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	4a1b      	ldr	r2, [pc, #108]	@ (8011084 <TIM_OC3_SetConfig+0x104>)
 8011016:	4293      	cmp	r3, r2
 8011018:	d007      	beq.n	801102a <TIM_OC3_SetConfig+0xaa>
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	4a1a      	ldr	r2, [pc, #104]	@ (8011088 <TIM_OC3_SetConfig+0x108>)
 801101e:	4293      	cmp	r3, r2
 8011020:	d003      	beq.n	801102a <TIM_OC3_SetConfig+0xaa>
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	4a19      	ldr	r2, [pc, #100]	@ (801108c <TIM_OC3_SetConfig+0x10c>)
 8011026:	4293      	cmp	r3, r2
 8011028:	d113      	bne.n	8011052 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801102a:	693b      	ldr	r3, [r7, #16]
 801102c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011030:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8011032:	693b      	ldr	r3, [r7, #16]
 8011034:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8011038:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801103a:	683b      	ldr	r3, [r7, #0]
 801103c:	695b      	ldr	r3, [r3, #20]
 801103e:	011b      	lsls	r3, r3, #4
 8011040:	693a      	ldr	r2, [r7, #16]
 8011042:	4313      	orrs	r3, r2
 8011044:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8011046:	683b      	ldr	r3, [r7, #0]
 8011048:	699b      	ldr	r3, [r3, #24]
 801104a:	011b      	lsls	r3, r3, #4
 801104c:	693a      	ldr	r2, [r7, #16]
 801104e:	4313      	orrs	r3, r2
 8011050:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	693a      	ldr	r2, [r7, #16]
 8011056:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	68fa      	ldr	r2, [r7, #12]
 801105c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801105e:	683b      	ldr	r3, [r7, #0]
 8011060:	685a      	ldr	r2, [r3, #4]
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	697a      	ldr	r2, [r7, #20]
 801106a:	621a      	str	r2, [r3, #32]
}
 801106c:	bf00      	nop
 801106e:	371c      	adds	r7, #28
 8011070:	46bd      	mov	sp, r7
 8011072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011076:	4770      	bx	lr
 8011078:	fffeff8f 	.word	0xfffeff8f
 801107c:	40010000 	.word	0x40010000
 8011080:	40010400 	.word	0x40010400
 8011084:	40014000 	.word	0x40014000
 8011088:	40014400 	.word	0x40014400
 801108c:	40014800 	.word	0x40014800

08011090 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011090:	b480      	push	{r7}
 8011092:	b087      	sub	sp, #28
 8011094:	af00      	add	r7, sp, #0
 8011096:	6078      	str	r0, [r7, #4]
 8011098:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	6a1b      	ldr	r3, [r3, #32]
 801109e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	6a1b      	ldr	r3, [r3, #32]
 80110a4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	685b      	ldr	r3, [r3, #4]
 80110b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	69db      	ldr	r3, [r3, #28]
 80110b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80110b8:	68fa      	ldr	r2, [r7, #12]
 80110ba:	4b24      	ldr	r3, [pc, #144]	@ (801114c <TIM_OC4_SetConfig+0xbc>)
 80110bc:	4013      	ands	r3, r2
 80110be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80110c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80110c8:	683b      	ldr	r3, [r7, #0]
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	021b      	lsls	r3, r3, #8
 80110ce:	68fa      	ldr	r2, [r7, #12]
 80110d0:	4313      	orrs	r3, r2
 80110d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80110d4:	693b      	ldr	r3, [r7, #16]
 80110d6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80110da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80110dc:	683b      	ldr	r3, [r7, #0]
 80110de:	689b      	ldr	r3, [r3, #8]
 80110e0:	031b      	lsls	r3, r3, #12
 80110e2:	693a      	ldr	r2, [r7, #16]
 80110e4:	4313      	orrs	r3, r2
 80110e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	4a19      	ldr	r2, [pc, #100]	@ (8011150 <TIM_OC4_SetConfig+0xc0>)
 80110ec:	4293      	cmp	r3, r2
 80110ee:	d00f      	beq.n	8011110 <TIM_OC4_SetConfig+0x80>
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	4a18      	ldr	r2, [pc, #96]	@ (8011154 <TIM_OC4_SetConfig+0xc4>)
 80110f4:	4293      	cmp	r3, r2
 80110f6:	d00b      	beq.n	8011110 <TIM_OC4_SetConfig+0x80>
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	4a17      	ldr	r2, [pc, #92]	@ (8011158 <TIM_OC4_SetConfig+0xc8>)
 80110fc:	4293      	cmp	r3, r2
 80110fe:	d007      	beq.n	8011110 <TIM_OC4_SetConfig+0x80>
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	4a16      	ldr	r2, [pc, #88]	@ (801115c <TIM_OC4_SetConfig+0xcc>)
 8011104:	4293      	cmp	r3, r2
 8011106:	d003      	beq.n	8011110 <TIM_OC4_SetConfig+0x80>
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	4a15      	ldr	r2, [pc, #84]	@ (8011160 <TIM_OC4_SetConfig+0xd0>)
 801110c:	4293      	cmp	r3, r2
 801110e:	d109      	bne.n	8011124 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8011110:	697b      	ldr	r3, [r7, #20]
 8011112:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011116:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8011118:	683b      	ldr	r3, [r7, #0]
 801111a:	695b      	ldr	r3, [r3, #20]
 801111c:	019b      	lsls	r3, r3, #6
 801111e:	697a      	ldr	r2, [r7, #20]
 8011120:	4313      	orrs	r3, r2
 8011122:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	697a      	ldr	r2, [r7, #20]
 8011128:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	68fa      	ldr	r2, [r7, #12]
 801112e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8011130:	683b      	ldr	r3, [r7, #0]
 8011132:	685a      	ldr	r2, [r3, #4]
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	693a      	ldr	r2, [r7, #16]
 801113c:	621a      	str	r2, [r3, #32]
}
 801113e:	bf00      	nop
 8011140:	371c      	adds	r7, #28
 8011142:	46bd      	mov	sp, r7
 8011144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011148:	4770      	bx	lr
 801114a:	bf00      	nop
 801114c:	feff8fff 	.word	0xfeff8fff
 8011150:	40010000 	.word	0x40010000
 8011154:	40010400 	.word	0x40010400
 8011158:	40014000 	.word	0x40014000
 801115c:	40014400 	.word	0x40014400
 8011160:	40014800 	.word	0x40014800

08011164 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8011164:	b480      	push	{r7}
 8011166:	b087      	sub	sp, #28
 8011168:	af00      	add	r7, sp, #0
 801116a:	6078      	str	r0, [r7, #4]
 801116c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	6a1b      	ldr	r3, [r3, #32]
 8011172:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	6a1b      	ldr	r3, [r3, #32]
 8011178:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	685b      	ldr	r3, [r3, #4]
 8011184:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801118a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 801118c:	68fa      	ldr	r2, [r7, #12]
 801118e:	4b21      	ldr	r3, [pc, #132]	@ (8011214 <TIM_OC5_SetConfig+0xb0>)
 8011190:	4013      	ands	r3, r2
 8011192:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011194:	683b      	ldr	r3, [r7, #0]
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	68fa      	ldr	r2, [r7, #12]
 801119a:	4313      	orrs	r3, r2
 801119c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801119e:	693b      	ldr	r3, [r7, #16]
 80111a0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80111a4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80111a6:	683b      	ldr	r3, [r7, #0]
 80111a8:	689b      	ldr	r3, [r3, #8]
 80111aa:	041b      	lsls	r3, r3, #16
 80111ac:	693a      	ldr	r2, [r7, #16]
 80111ae:	4313      	orrs	r3, r2
 80111b0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	4a18      	ldr	r2, [pc, #96]	@ (8011218 <TIM_OC5_SetConfig+0xb4>)
 80111b6:	4293      	cmp	r3, r2
 80111b8:	d00f      	beq.n	80111da <TIM_OC5_SetConfig+0x76>
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	4a17      	ldr	r2, [pc, #92]	@ (801121c <TIM_OC5_SetConfig+0xb8>)
 80111be:	4293      	cmp	r3, r2
 80111c0:	d00b      	beq.n	80111da <TIM_OC5_SetConfig+0x76>
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	4a16      	ldr	r2, [pc, #88]	@ (8011220 <TIM_OC5_SetConfig+0xbc>)
 80111c6:	4293      	cmp	r3, r2
 80111c8:	d007      	beq.n	80111da <TIM_OC5_SetConfig+0x76>
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	4a15      	ldr	r2, [pc, #84]	@ (8011224 <TIM_OC5_SetConfig+0xc0>)
 80111ce:	4293      	cmp	r3, r2
 80111d0:	d003      	beq.n	80111da <TIM_OC5_SetConfig+0x76>
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	4a14      	ldr	r2, [pc, #80]	@ (8011228 <TIM_OC5_SetConfig+0xc4>)
 80111d6:	4293      	cmp	r3, r2
 80111d8:	d109      	bne.n	80111ee <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80111da:	697b      	ldr	r3, [r7, #20]
 80111dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80111e0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80111e2:	683b      	ldr	r3, [r7, #0]
 80111e4:	695b      	ldr	r3, [r3, #20]
 80111e6:	021b      	lsls	r3, r3, #8
 80111e8:	697a      	ldr	r2, [r7, #20]
 80111ea:	4313      	orrs	r3, r2
 80111ec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	697a      	ldr	r2, [r7, #20]
 80111f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	68fa      	ldr	r2, [r7, #12]
 80111f8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80111fa:	683b      	ldr	r3, [r7, #0]
 80111fc:	685a      	ldr	r2, [r3, #4]
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	693a      	ldr	r2, [r7, #16]
 8011206:	621a      	str	r2, [r3, #32]
}
 8011208:	bf00      	nop
 801120a:	371c      	adds	r7, #28
 801120c:	46bd      	mov	sp, r7
 801120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011212:	4770      	bx	lr
 8011214:	fffeff8f 	.word	0xfffeff8f
 8011218:	40010000 	.word	0x40010000
 801121c:	40010400 	.word	0x40010400
 8011220:	40014000 	.word	0x40014000
 8011224:	40014400 	.word	0x40014400
 8011228:	40014800 	.word	0x40014800

0801122c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801122c:	b480      	push	{r7}
 801122e:	b087      	sub	sp, #28
 8011230:	af00      	add	r7, sp, #0
 8011232:	6078      	str	r0, [r7, #4]
 8011234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	6a1b      	ldr	r3, [r3, #32]
 801123a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	6a1b      	ldr	r3, [r3, #32]
 8011240:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	685b      	ldr	r3, [r3, #4]
 801124c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8011254:	68fa      	ldr	r2, [r7, #12]
 8011256:	4b22      	ldr	r3, [pc, #136]	@ (80112e0 <TIM_OC6_SetConfig+0xb4>)
 8011258:	4013      	ands	r3, r2
 801125a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801125c:	683b      	ldr	r3, [r7, #0]
 801125e:	681b      	ldr	r3, [r3, #0]
 8011260:	021b      	lsls	r3, r3, #8
 8011262:	68fa      	ldr	r2, [r7, #12]
 8011264:	4313      	orrs	r3, r2
 8011266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8011268:	693b      	ldr	r3, [r7, #16]
 801126a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 801126e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8011270:	683b      	ldr	r3, [r7, #0]
 8011272:	689b      	ldr	r3, [r3, #8]
 8011274:	051b      	lsls	r3, r3, #20
 8011276:	693a      	ldr	r2, [r7, #16]
 8011278:	4313      	orrs	r3, r2
 801127a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	4a19      	ldr	r2, [pc, #100]	@ (80112e4 <TIM_OC6_SetConfig+0xb8>)
 8011280:	4293      	cmp	r3, r2
 8011282:	d00f      	beq.n	80112a4 <TIM_OC6_SetConfig+0x78>
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	4a18      	ldr	r2, [pc, #96]	@ (80112e8 <TIM_OC6_SetConfig+0xbc>)
 8011288:	4293      	cmp	r3, r2
 801128a:	d00b      	beq.n	80112a4 <TIM_OC6_SetConfig+0x78>
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	4a17      	ldr	r2, [pc, #92]	@ (80112ec <TIM_OC6_SetConfig+0xc0>)
 8011290:	4293      	cmp	r3, r2
 8011292:	d007      	beq.n	80112a4 <TIM_OC6_SetConfig+0x78>
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	4a16      	ldr	r2, [pc, #88]	@ (80112f0 <TIM_OC6_SetConfig+0xc4>)
 8011298:	4293      	cmp	r3, r2
 801129a:	d003      	beq.n	80112a4 <TIM_OC6_SetConfig+0x78>
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	4a15      	ldr	r2, [pc, #84]	@ (80112f4 <TIM_OC6_SetConfig+0xc8>)
 80112a0:	4293      	cmp	r3, r2
 80112a2:	d109      	bne.n	80112b8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80112a4:	697b      	ldr	r3, [r7, #20]
 80112a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80112aa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80112ac:	683b      	ldr	r3, [r7, #0]
 80112ae:	695b      	ldr	r3, [r3, #20]
 80112b0:	029b      	lsls	r3, r3, #10
 80112b2:	697a      	ldr	r2, [r7, #20]
 80112b4:	4313      	orrs	r3, r2
 80112b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	697a      	ldr	r2, [r7, #20]
 80112bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	68fa      	ldr	r2, [r7, #12]
 80112c2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80112c4:	683b      	ldr	r3, [r7, #0]
 80112c6:	685a      	ldr	r2, [r3, #4]
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	693a      	ldr	r2, [r7, #16]
 80112d0:	621a      	str	r2, [r3, #32]
}
 80112d2:	bf00      	nop
 80112d4:	371c      	adds	r7, #28
 80112d6:	46bd      	mov	sp, r7
 80112d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112dc:	4770      	bx	lr
 80112de:	bf00      	nop
 80112e0:	feff8fff 	.word	0xfeff8fff
 80112e4:	40010000 	.word	0x40010000
 80112e8:	40010400 	.word	0x40010400
 80112ec:	40014000 	.word	0x40014000
 80112f0:	40014400 	.word	0x40014400
 80112f4:	40014800 	.word	0x40014800

080112f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80112f8:	b480      	push	{r7}
 80112fa:	b087      	sub	sp, #28
 80112fc:	af00      	add	r7, sp, #0
 80112fe:	60f8      	str	r0, [r7, #12]
 8011300:	60b9      	str	r1, [r7, #8]
 8011302:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8011304:	68fb      	ldr	r3, [r7, #12]
 8011306:	6a1b      	ldr	r3, [r3, #32]
 8011308:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801130a:	68fb      	ldr	r3, [r7, #12]
 801130c:	6a1b      	ldr	r3, [r3, #32]
 801130e:	f023 0201 	bic.w	r2, r3, #1
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	699b      	ldr	r3, [r3, #24]
 801131a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801131c:	693b      	ldr	r3, [r7, #16]
 801131e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8011322:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	011b      	lsls	r3, r3, #4
 8011328:	693a      	ldr	r2, [r7, #16]
 801132a:	4313      	orrs	r3, r2
 801132c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801132e:	697b      	ldr	r3, [r7, #20]
 8011330:	f023 030a 	bic.w	r3, r3, #10
 8011334:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8011336:	697a      	ldr	r2, [r7, #20]
 8011338:	68bb      	ldr	r3, [r7, #8]
 801133a:	4313      	orrs	r3, r2
 801133c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	693a      	ldr	r2, [r7, #16]
 8011342:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011344:	68fb      	ldr	r3, [r7, #12]
 8011346:	697a      	ldr	r2, [r7, #20]
 8011348:	621a      	str	r2, [r3, #32]
}
 801134a:	bf00      	nop
 801134c:	371c      	adds	r7, #28
 801134e:	46bd      	mov	sp, r7
 8011350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011354:	4770      	bx	lr

08011356 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011356:	b480      	push	{r7}
 8011358:	b087      	sub	sp, #28
 801135a:	af00      	add	r7, sp, #0
 801135c:	60f8      	str	r0, [r7, #12]
 801135e:	60b9      	str	r1, [r7, #8]
 8011360:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	6a1b      	ldr	r3, [r3, #32]
 8011366:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	6a1b      	ldr	r3, [r3, #32]
 801136c:	f023 0210 	bic.w	r2, r3, #16
 8011370:	68fb      	ldr	r3, [r7, #12]
 8011372:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011374:	68fb      	ldr	r3, [r7, #12]
 8011376:	699b      	ldr	r3, [r3, #24]
 8011378:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801137a:	693b      	ldr	r3, [r7, #16]
 801137c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8011380:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	031b      	lsls	r3, r3, #12
 8011386:	693a      	ldr	r2, [r7, #16]
 8011388:	4313      	orrs	r3, r2
 801138a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801138c:	697b      	ldr	r3, [r7, #20]
 801138e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8011392:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8011394:	68bb      	ldr	r3, [r7, #8]
 8011396:	011b      	lsls	r3, r3, #4
 8011398:	697a      	ldr	r2, [r7, #20]
 801139a:	4313      	orrs	r3, r2
 801139c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	693a      	ldr	r2, [r7, #16]
 80113a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80113a4:	68fb      	ldr	r3, [r7, #12]
 80113a6:	697a      	ldr	r2, [r7, #20]
 80113a8:	621a      	str	r2, [r3, #32]
}
 80113aa:	bf00      	nop
 80113ac:	371c      	adds	r7, #28
 80113ae:	46bd      	mov	sp, r7
 80113b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113b4:	4770      	bx	lr
	...

080113b8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80113b8:	b480      	push	{r7}
 80113ba:	b085      	sub	sp, #20
 80113bc:	af00      	add	r7, sp, #0
 80113be:	6078      	str	r0, [r7, #4]
 80113c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	689b      	ldr	r3, [r3, #8]
 80113c6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80113c8:	68fa      	ldr	r2, [r7, #12]
 80113ca:	4b09      	ldr	r3, [pc, #36]	@ (80113f0 <TIM_ITRx_SetConfig+0x38>)
 80113cc:	4013      	ands	r3, r2
 80113ce:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80113d0:	683a      	ldr	r2, [r7, #0]
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	4313      	orrs	r3, r2
 80113d6:	f043 0307 	orr.w	r3, r3, #7
 80113da:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	68fa      	ldr	r2, [r7, #12]
 80113e0:	609a      	str	r2, [r3, #8]
}
 80113e2:	bf00      	nop
 80113e4:	3714      	adds	r7, #20
 80113e6:	46bd      	mov	sp, r7
 80113e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ec:	4770      	bx	lr
 80113ee:	bf00      	nop
 80113f0:	ffcfff8f 	.word	0xffcfff8f

080113f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80113f4:	b480      	push	{r7}
 80113f6:	b087      	sub	sp, #28
 80113f8:	af00      	add	r7, sp, #0
 80113fa:	60f8      	str	r0, [r7, #12]
 80113fc:	60b9      	str	r1, [r7, #8]
 80113fe:	607a      	str	r2, [r7, #4]
 8011400:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	689b      	ldr	r3, [r3, #8]
 8011406:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011408:	697b      	ldr	r3, [r7, #20]
 801140a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801140e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8011410:	683b      	ldr	r3, [r7, #0]
 8011412:	021a      	lsls	r2, r3, #8
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	431a      	orrs	r2, r3
 8011418:	68bb      	ldr	r3, [r7, #8]
 801141a:	4313      	orrs	r3, r2
 801141c:	697a      	ldr	r2, [r7, #20]
 801141e:	4313      	orrs	r3, r2
 8011420:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	697a      	ldr	r2, [r7, #20]
 8011426:	609a      	str	r2, [r3, #8]
}
 8011428:	bf00      	nop
 801142a:	371c      	adds	r7, #28
 801142c:	46bd      	mov	sp, r7
 801142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011432:	4770      	bx	lr

08011434 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8011434:	b480      	push	{r7}
 8011436:	b087      	sub	sp, #28
 8011438:	af00      	add	r7, sp, #0
 801143a:	60f8      	str	r0, [r7, #12]
 801143c:	60b9      	str	r1, [r7, #8]
 801143e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8011440:	68bb      	ldr	r3, [r7, #8]
 8011442:	f003 031f 	and.w	r3, r3, #31
 8011446:	2201      	movs	r2, #1
 8011448:	fa02 f303 	lsl.w	r3, r2, r3
 801144c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	6a1a      	ldr	r2, [r3, #32]
 8011452:	697b      	ldr	r3, [r7, #20]
 8011454:	43db      	mvns	r3, r3
 8011456:	401a      	ands	r2, r3
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801145c:	68fb      	ldr	r3, [r7, #12]
 801145e:	6a1a      	ldr	r2, [r3, #32]
 8011460:	68bb      	ldr	r3, [r7, #8]
 8011462:	f003 031f 	and.w	r3, r3, #31
 8011466:	6879      	ldr	r1, [r7, #4]
 8011468:	fa01 f303 	lsl.w	r3, r1, r3
 801146c:	431a      	orrs	r2, r3
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	621a      	str	r2, [r3, #32]
}
 8011472:	bf00      	nop
 8011474:	371c      	adds	r7, #28
 8011476:	46bd      	mov	sp, r7
 8011478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801147c:	4770      	bx	lr
	...

08011480 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011480:	b480      	push	{r7}
 8011482:	b085      	sub	sp, #20
 8011484:	af00      	add	r7, sp, #0
 8011486:	6078      	str	r0, [r7, #4]
 8011488:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011490:	2b01      	cmp	r3, #1
 8011492:	d101      	bne.n	8011498 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011494:	2302      	movs	r3, #2
 8011496:	e077      	b.n	8011588 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	2201      	movs	r2, #1
 801149c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	2202      	movs	r2, #2
 80114a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	685b      	ldr	r3, [r3, #4]
 80114ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	689b      	ldr	r3, [r3, #8]
 80114b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	4a35      	ldr	r2, [pc, #212]	@ (8011594 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80114be:	4293      	cmp	r3, r2
 80114c0:	d004      	beq.n	80114cc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	4a34      	ldr	r2, [pc, #208]	@ (8011598 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80114c8:	4293      	cmp	r3, r2
 80114ca:	d108      	bne.n	80114de <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80114d2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80114d4:	683b      	ldr	r3, [r7, #0]
 80114d6:	685b      	ldr	r3, [r3, #4]
 80114d8:	68fa      	ldr	r2, [r7, #12]
 80114da:	4313      	orrs	r3, r2
 80114dc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80114de:	68fb      	ldr	r3, [r7, #12]
 80114e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80114e4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80114e6:	683b      	ldr	r3, [r7, #0]
 80114e8:	681b      	ldr	r3, [r3, #0]
 80114ea:	68fa      	ldr	r2, [r7, #12]
 80114ec:	4313      	orrs	r3, r2
 80114ee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	68fa      	ldr	r2, [r7, #12]
 80114f6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	4a25      	ldr	r2, [pc, #148]	@ (8011594 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80114fe:	4293      	cmp	r3, r2
 8011500:	d02c      	beq.n	801155c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	681b      	ldr	r3, [r3, #0]
 8011506:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801150a:	d027      	beq.n	801155c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	681b      	ldr	r3, [r3, #0]
 8011510:	4a22      	ldr	r2, [pc, #136]	@ (801159c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8011512:	4293      	cmp	r3, r2
 8011514:	d022      	beq.n	801155c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	4a21      	ldr	r2, [pc, #132]	@ (80115a0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 801151c:	4293      	cmp	r3, r2
 801151e:	d01d      	beq.n	801155c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	4a1f      	ldr	r2, [pc, #124]	@ (80115a4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8011526:	4293      	cmp	r3, r2
 8011528:	d018      	beq.n	801155c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	4a1a      	ldr	r2, [pc, #104]	@ (8011598 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8011530:	4293      	cmp	r3, r2
 8011532:	d013      	beq.n	801155c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	4a1b      	ldr	r2, [pc, #108]	@ (80115a8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 801153a:	4293      	cmp	r3, r2
 801153c:	d00e      	beq.n	801155c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	4a1a      	ldr	r2, [pc, #104]	@ (80115ac <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8011544:	4293      	cmp	r3, r2
 8011546:	d009      	beq.n	801155c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	4a18      	ldr	r2, [pc, #96]	@ (80115b0 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 801154e:	4293      	cmp	r3, r2
 8011550:	d004      	beq.n	801155c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	681b      	ldr	r3, [r3, #0]
 8011556:	4a17      	ldr	r2, [pc, #92]	@ (80115b4 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8011558:	4293      	cmp	r3, r2
 801155a:	d10c      	bne.n	8011576 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801155c:	68bb      	ldr	r3, [r7, #8]
 801155e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011562:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011564:	683b      	ldr	r3, [r7, #0]
 8011566:	689b      	ldr	r3, [r3, #8]
 8011568:	68ba      	ldr	r2, [r7, #8]
 801156a:	4313      	orrs	r3, r2
 801156c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	681b      	ldr	r3, [r3, #0]
 8011572:	68ba      	ldr	r2, [r7, #8]
 8011574:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	2201      	movs	r2, #1
 801157a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	2200      	movs	r2, #0
 8011582:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8011586:	2300      	movs	r3, #0
}
 8011588:	4618      	mov	r0, r3
 801158a:	3714      	adds	r7, #20
 801158c:	46bd      	mov	sp, r7
 801158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011592:	4770      	bx	lr
 8011594:	40010000 	.word	0x40010000
 8011598:	40010400 	.word	0x40010400
 801159c:	40000400 	.word	0x40000400
 80115a0:	40000800 	.word	0x40000800
 80115a4:	40000c00 	.word	0x40000c00
 80115a8:	40001800 	.word	0x40001800
 80115ac:	40014000 	.word	0x40014000
 80115b0:	4000e000 	.word	0x4000e000
 80115b4:	4000e400 	.word	0x4000e400

080115b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80115b8:	b480      	push	{r7}
 80115ba:	b083      	sub	sp, #12
 80115bc:	af00      	add	r7, sp, #0
 80115be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80115c0:	bf00      	nop
 80115c2:	370c      	adds	r7, #12
 80115c4:	46bd      	mov	sp, r7
 80115c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ca:	4770      	bx	lr

080115cc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80115cc:	b480      	push	{r7}
 80115ce:	b083      	sub	sp, #12
 80115d0:	af00      	add	r7, sp, #0
 80115d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80115d4:	bf00      	nop
 80115d6:	370c      	adds	r7, #12
 80115d8:	46bd      	mov	sp, r7
 80115da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115de:	4770      	bx	lr

080115e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80115e0:	b480      	push	{r7}
 80115e2:	b083      	sub	sp, #12
 80115e4:	af00      	add	r7, sp, #0
 80115e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80115e8:	bf00      	nop
 80115ea:	370c      	adds	r7, #12
 80115ec:	46bd      	mov	sp, r7
 80115ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115f2:	4770      	bx	lr

080115f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80115f4:	b580      	push	{r7, lr}
 80115f6:	b082      	sub	sp, #8
 80115f8:	af00      	add	r7, sp, #0
 80115fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d101      	bne.n	8011606 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011602:	2301      	movs	r3, #1
 8011604:	e042      	b.n	801168c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801160c:	2b00      	cmp	r3, #0
 801160e:	d106      	bne.n	801161e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	2200      	movs	r2, #0
 8011614:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011618:	6878      	ldr	r0, [r7, #4]
 801161a:	f7f5 f933 	bl	8006884 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	2224      	movs	r2, #36	@ 0x24
 8011622:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	681b      	ldr	r3, [r3, #0]
 801162a:	681a      	ldr	r2, [r3, #0]
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	681b      	ldr	r3, [r3, #0]
 8011630:	f022 0201 	bic.w	r2, r2, #1
 8011634:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801163a:	2b00      	cmp	r3, #0
 801163c:	d002      	beq.n	8011644 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 801163e:	6878      	ldr	r0, [r7, #4]
 8011640:	f001 fad6 	bl	8012bf0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011644:	6878      	ldr	r0, [r7, #4]
 8011646:	f000 fc67 	bl	8011f18 <UART_SetConfig>
 801164a:	4603      	mov	r3, r0
 801164c:	2b01      	cmp	r3, #1
 801164e:	d101      	bne.n	8011654 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8011650:	2301      	movs	r3, #1
 8011652:	e01b      	b.n	801168c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	685a      	ldr	r2, [r3, #4]
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8011662:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	689a      	ldr	r2, [r3, #8]
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	681b      	ldr	r3, [r3, #0]
 801166e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8011672:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	681a      	ldr	r2, [r3, #0]
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	f042 0201 	orr.w	r2, r2, #1
 8011682:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8011684:	6878      	ldr	r0, [r7, #4]
 8011686:	f001 fb55 	bl	8012d34 <UART_CheckIdleState>
 801168a:	4603      	mov	r3, r0
}
 801168c:	4618      	mov	r0, r3
 801168e:	3708      	adds	r7, #8
 8011690:	46bd      	mov	sp, r7
 8011692:	bd80      	pop	{r7, pc}

08011694 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011694:	b580      	push	{r7, lr}
 8011696:	b08a      	sub	sp, #40	@ 0x28
 8011698:	af00      	add	r7, sp, #0
 801169a:	60f8      	str	r0, [r7, #12]
 801169c:	60b9      	str	r1, [r7, #8]
 801169e:	4613      	mov	r3, r2
 80116a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80116a8:	2b20      	cmp	r3, #32
 80116aa:	d137      	bne.n	801171c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80116ac:	68bb      	ldr	r3, [r7, #8]
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d002      	beq.n	80116b8 <HAL_UART_Receive_IT+0x24>
 80116b2:	88fb      	ldrh	r3, [r7, #6]
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d101      	bne.n	80116bc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80116b8:	2301      	movs	r3, #1
 80116ba:	e030      	b.n	801171e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	2200      	movs	r2, #0
 80116c0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	681b      	ldr	r3, [r3, #0]
 80116c6:	4a18      	ldr	r2, [pc, #96]	@ (8011728 <HAL_UART_Receive_IT+0x94>)
 80116c8:	4293      	cmp	r3, r2
 80116ca:	d01f      	beq.n	801170c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80116cc:	68fb      	ldr	r3, [r7, #12]
 80116ce:	681b      	ldr	r3, [r3, #0]
 80116d0:	685b      	ldr	r3, [r3, #4]
 80116d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	d018      	beq.n	801170c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80116e0:	697b      	ldr	r3, [r7, #20]
 80116e2:	e853 3f00 	ldrex	r3, [r3]
 80116e6:	613b      	str	r3, [r7, #16]
   return(result);
 80116e8:	693b      	ldr	r3, [r7, #16]
 80116ea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80116ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	681b      	ldr	r3, [r3, #0]
 80116f4:	461a      	mov	r2, r3
 80116f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116f8:	623b      	str	r3, [r7, #32]
 80116fa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116fc:	69f9      	ldr	r1, [r7, #28]
 80116fe:	6a3a      	ldr	r2, [r7, #32]
 8011700:	e841 2300 	strex	r3, r2, [r1]
 8011704:	61bb      	str	r3, [r7, #24]
   return(result);
 8011706:	69bb      	ldr	r3, [r7, #24]
 8011708:	2b00      	cmp	r3, #0
 801170a:	d1e6      	bne.n	80116da <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 801170c:	88fb      	ldrh	r3, [r7, #6]
 801170e:	461a      	mov	r2, r3
 8011710:	68b9      	ldr	r1, [r7, #8]
 8011712:	68f8      	ldr	r0, [r7, #12]
 8011714:	f001 fc26 	bl	8012f64 <UART_Start_Receive_IT>
 8011718:	4603      	mov	r3, r0
 801171a:	e000      	b.n	801171e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801171c:	2302      	movs	r3, #2
  }
}
 801171e:	4618      	mov	r0, r3
 8011720:	3728      	adds	r7, #40	@ 0x28
 8011722:	46bd      	mov	sp, r7
 8011724:	bd80      	pop	{r7, pc}
 8011726:	bf00      	nop
 8011728:	58000c00 	.word	0x58000c00

0801172c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801172c:	b580      	push	{r7, lr}
 801172e:	b0ba      	sub	sp, #232	@ 0xe8
 8011730:	af00      	add	r7, sp, #0
 8011732:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	69db      	ldr	r3, [r3, #28]
 801173a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	681b      	ldr	r3, [r3, #0]
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	681b      	ldr	r3, [r3, #0]
 801174c:	689b      	ldr	r3, [r3, #8]
 801174e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8011752:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8011756:	f640 030f 	movw	r3, #2063	@ 0x80f
 801175a:	4013      	ands	r3, r2
 801175c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8011760:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8011764:	2b00      	cmp	r3, #0
 8011766:	d11b      	bne.n	80117a0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8011768:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801176c:	f003 0320 	and.w	r3, r3, #32
 8011770:	2b00      	cmp	r3, #0
 8011772:	d015      	beq.n	80117a0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8011774:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011778:	f003 0320 	and.w	r3, r3, #32
 801177c:	2b00      	cmp	r3, #0
 801177e:	d105      	bne.n	801178c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8011780:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011784:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8011788:	2b00      	cmp	r3, #0
 801178a:	d009      	beq.n	80117a0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011790:	2b00      	cmp	r3, #0
 8011792:	f000 8393 	beq.w	8011ebc <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801179a:	6878      	ldr	r0, [r7, #4]
 801179c:	4798      	blx	r3
      }
      return;
 801179e:	e38d      	b.n	8011ebc <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80117a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	f000 8123 	beq.w	80119f0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80117aa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80117ae:	4b8d      	ldr	r3, [pc, #564]	@ (80119e4 <HAL_UART_IRQHandler+0x2b8>)
 80117b0:	4013      	ands	r3, r2
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d106      	bne.n	80117c4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80117b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80117ba:	4b8b      	ldr	r3, [pc, #556]	@ (80119e8 <HAL_UART_IRQHandler+0x2bc>)
 80117bc:	4013      	ands	r3, r2
 80117be:	2b00      	cmp	r3, #0
 80117c0:	f000 8116 	beq.w	80119f0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80117c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80117c8:	f003 0301 	and.w	r3, r3, #1
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d011      	beq.n	80117f4 <HAL_UART_IRQHandler+0xc8>
 80117d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80117d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d00b      	beq.n	80117f4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	2201      	movs	r2, #1
 80117e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80117ea:	f043 0201 	orr.w	r2, r3, #1
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80117f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80117f8:	f003 0302 	and.w	r3, r3, #2
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d011      	beq.n	8011824 <HAL_UART_IRQHandler+0xf8>
 8011800:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011804:	f003 0301 	and.w	r3, r3, #1
 8011808:	2b00      	cmp	r3, #0
 801180a:	d00b      	beq.n	8011824 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	681b      	ldr	r3, [r3, #0]
 8011810:	2202      	movs	r2, #2
 8011812:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801181a:	f043 0204 	orr.w	r2, r3, #4
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011824:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011828:	f003 0304 	and.w	r3, r3, #4
 801182c:	2b00      	cmp	r3, #0
 801182e:	d011      	beq.n	8011854 <HAL_UART_IRQHandler+0x128>
 8011830:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011834:	f003 0301 	and.w	r3, r3, #1
 8011838:	2b00      	cmp	r3, #0
 801183a:	d00b      	beq.n	8011854 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	2204      	movs	r2, #4
 8011842:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801184a:	f043 0202 	orr.w	r2, r3, #2
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8011854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011858:	f003 0308 	and.w	r3, r3, #8
 801185c:	2b00      	cmp	r3, #0
 801185e:	d017      	beq.n	8011890 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8011860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011864:	f003 0320 	and.w	r3, r3, #32
 8011868:	2b00      	cmp	r3, #0
 801186a:	d105      	bne.n	8011878 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 801186c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8011870:	4b5c      	ldr	r3, [pc, #368]	@ (80119e4 <HAL_UART_IRQHandler+0x2b8>)
 8011872:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8011874:	2b00      	cmp	r3, #0
 8011876:	d00b      	beq.n	8011890 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	681b      	ldr	r3, [r3, #0]
 801187c:	2208      	movs	r2, #8
 801187e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011886:	f043 0208 	orr.w	r2, r3, #8
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8011890:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011894:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011898:	2b00      	cmp	r3, #0
 801189a:	d012      	beq.n	80118c2 <HAL_UART_IRQHandler+0x196>
 801189c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80118a0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d00c      	beq.n	80118c2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	681b      	ldr	r3, [r3, #0]
 80118ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80118b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80118b8:	f043 0220 	orr.w	r2, r3, #32
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	f000 82f9 	beq.w	8011ec0 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80118ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80118d2:	f003 0320 	and.w	r3, r3, #32
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d013      	beq.n	8011902 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80118da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80118de:	f003 0320 	and.w	r3, r3, #32
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d105      	bne.n	80118f2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80118e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80118ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d007      	beq.n	8011902 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d003      	beq.n	8011902 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80118fe:	6878      	ldr	r0, [r7, #4]
 8011900:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011908:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	681b      	ldr	r3, [r3, #0]
 8011910:	689b      	ldr	r3, [r3, #8]
 8011912:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011916:	2b40      	cmp	r3, #64	@ 0x40
 8011918:	d005      	beq.n	8011926 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801191a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801191e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8011922:	2b00      	cmp	r3, #0
 8011924:	d054      	beq.n	80119d0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8011926:	6878      	ldr	r0, [r7, #4]
 8011928:	f001 fc3e 	bl	80131a8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	689b      	ldr	r3, [r3, #8]
 8011932:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011936:	2b40      	cmp	r3, #64	@ 0x40
 8011938:	d146      	bne.n	80119c8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	3308      	adds	r3, #8
 8011940:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011944:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8011948:	e853 3f00 	ldrex	r3, [r3]
 801194c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8011950:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8011954:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011958:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	3308      	adds	r3, #8
 8011962:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8011966:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 801196a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801196e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8011972:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8011976:	e841 2300 	strex	r3, r2, [r1]
 801197a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 801197e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8011982:	2b00      	cmp	r3, #0
 8011984:	d1d9      	bne.n	801193a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801198c:	2b00      	cmp	r3, #0
 801198e:	d017      	beq.n	80119c0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011996:	4a15      	ldr	r2, [pc, #84]	@ (80119ec <HAL_UART_IRQHandler+0x2c0>)
 8011998:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80119a0:	4618      	mov	r0, r3
 80119a2:	f7f6 fb69 	bl	8008078 <HAL_DMA_Abort_IT>
 80119a6:	4603      	mov	r3, r0
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d019      	beq.n	80119e0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80119b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80119b4:	687a      	ldr	r2, [r7, #4]
 80119b6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80119ba:	4610      	mov	r0, r2
 80119bc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80119be:	e00f      	b.n	80119e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80119c0:	6878      	ldr	r0, [r7, #4]
 80119c2:	f000 fa93 	bl	8011eec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80119c6:	e00b      	b.n	80119e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80119c8:	6878      	ldr	r0, [r7, #4]
 80119ca:	f000 fa8f 	bl	8011eec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80119ce:	e007      	b.n	80119e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80119d0:	6878      	ldr	r0, [r7, #4]
 80119d2:	f000 fa8b 	bl	8011eec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	2200      	movs	r2, #0
 80119da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80119de:	e26f      	b.n	8011ec0 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80119e0:	bf00      	nop
    return;
 80119e2:	e26d      	b.n	8011ec0 <HAL_UART_IRQHandler+0x794>
 80119e4:	10000001 	.word	0x10000001
 80119e8:	04000120 	.word	0x04000120
 80119ec:	08013275 	.word	0x08013275

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80119f4:	2b01      	cmp	r3, #1
 80119f6:	f040 8203 	bne.w	8011e00 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80119fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80119fe:	f003 0310 	and.w	r3, r3, #16
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	f000 81fc 	beq.w	8011e00 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8011a08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011a0c:	f003 0310 	and.w	r3, r3, #16
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	f000 81f5 	beq.w	8011e00 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	2210      	movs	r2, #16
 8011a1c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	681b      	ldr	r3, [r3, #0]
 8011a22:	689b      	ldr	r3, [r3, #8]
 8011a24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011a28:	2b40      	cmp	r3, #64	@ 0x40
 8011a2a:	f040 816d 	bne.w	8011d08 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011a34:	681b      	ldr	r3, [r3, #0]
 8011a36:	4aa4      	ldr	r2, [pc, #656]	@ (8011cc8 <HAL_UART_IRQHandler+0x59c>)
 8011a38:	4293      	cmp	r3, r2
 8011a3a:	d068      	beq.n	8011b0e <HAL_UART_IRQHandler+0x3e2>
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	4aa1      	ldr	r2, [pc, #644]	@ (8011ccc <HAL_UART_IRQHandler+0x5a0>)
 8011a46:	4293      	cmp	r3, r2
 8011a48:	d061      	beq.n	8011b0e <HAL_UART_IRQHandler+0x3e2>
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	4a9f      	ldr	r2, [pc, #636]	@ (8011cd0 <HAL_UART_IRQHandler+0x5a4>)
 8011a54:	4293      	cmp	r3, r2
 8011a56:	d05a      	beq.n	8011b0e <HAL_UART_IRQHandler+0x3e2>
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	4a9c      	ldr	r2, [pc, #624]	@ (8011cd4 <HAL_UART_IRQHandler+0x5a8>)
 8011a62:	4293      	cmp	r3, r2
 8011a64:	d053      	beq.n	8011b0e <HAL_UART_IRQHandler+0x3e2>
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011a6c:	681b      	ldr	r3, [r3, #0]
 8011a6e:	4a9a      	ldr	r2, [pc, #616]	@ (8011cd8 <HAL_UART_IRQHandler+0x5ac>)
 8011a70:	4293      	cmp	r3, r2
 8011a72:	d04c      	beq.n	8011b0e <HAL_UART_IRQHandler+0x3e2>
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011a7a:	681b      	ldr	r3, [r3, #0]
 8011a7c:	4a97      	ldr	r2, [pc, #604]	@ (8011cdc <HAL_UART_IRQHandler+0x5b0>)
 8011a7e:	4293      	cmp	r3, r2
 8011a80:	d045      	beq.n	8011b0e <HAL_UART_IRQHandler+0x3e2>
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	4a95      	ldr	r2, [pc, #596]	@ (8011ce0 <HAL_UART_IRQHandler+0x5b4>)
 8011a8c:	4293      	cmp	r3, r2
 8011a8e:	d03e      	beq.n	8011b0e <HAL_UART_IRQHandler+0x3e2>
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	4a92      	ldr	r2, [pc, #584]	@ (8011ce4 <HAL_UART_IRQHandler+0x5b8>)
 8011a9a:	4293      	cmp	r3, r2
 8011a9c:	d037      	beq.n	8011b0e <HAL_UART_IRQHandler+0x3e2>
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	4a90      	ldr	r2, [pc, #576]	@ (8011ce8 <HAL_UART_IRQHandler+0x5bc>)
 8011aa8:	4293      	cmp	r3, r2
 8011aaa:	d030      	beq.n	8011b0e <HAL_UART_IRQHandler+0x3e2>
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011ab2:	681b      	ldr	r3, [r3, #0]
 8011ab4:	4a8d      	ldr	r2, [pc, #564]	@ (8011cec <HAL_UART_IRQHandler+0x5c0>)
 8011ab6:	4293      	cmp	r3, r2
 8011ab8:	d029      	beq.n	8011b0e <HAL_UART_IRQHandler+0x3e2>
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	4a8b      	ldr	r2, [pc, #556]	@ (8011cf0 <HAL_UART_IRQHandler+0x5c4>)
 8011ac4:	4293      	cmp	r3, r2
 8011ac6:	d022      	beq.n	8011b0e <HAL_UART_IRQHandler+0x3e2>
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011ace:	681b      	ldr	r3, [r3, #0]
 8011ad0:	4a88      	ldr	r2, [pc, #544]	@ (8011cf4 <HAL_UART_IRQHandler+0x5c8>)
 8011ad2:	4293      	cmp	r3, r2
 8011ad4:	d01b      	beq.n	8011b0e <HAL_UART_IRQHandler+0x3e2>
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011adc:	681b      	ldr	r3, [r3, #0]
 8011ade:	4a86      	ldr	r2, [pc, #536]	@ (8011cf8 <HAL_UART_IRQHandler+0x5cc>)
 8011ae0:	4293      	cmp	r3, r2
 8011ae2:	d014      	beq.n	8011b0e <HAL_UART_IRQHandler+0x3e2>
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	4a83      	ldr	r2, [pc, #524]	@ (8011cfc <HAL_UART_IRQHandler+0x5d0>)
 8011aee:	4293      	cmp	r3, r2
 8011af0:	d00d      	beq.n	8011b0e <HAL_UART_IRQHandler+0x3e2>
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	4a81      	ldr	r2, [pc, #516]	@ (8011d00 <HAL_UART_IRQHandler+0x5d4>)
 8011afc:	4293      	cmp	r3, r2
 8011afe:	d006      	beq.n	8011b0e <HAL_UART_IRQHandler+0x3e2>
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011b06:	681b      	ldr	r3, [r3, #0]
 8011b08:	4a7e      	ldr	r2, [pc, #504]	@ (8011d04 <HAL_UART_IRQHandler+0x5d8>)
 8011b0a:	4293      	cmp	r3, r2
 8011b0c:	d106      	bne.n	8011b1c <HAL_UART_IRQHandler+0x3f0>
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	685b      	ldr	r3, [r3, #4]
 8011b18:	b29b      	uxth	r3, r3
 8011b1a:	e005      	b.n	8011b28 <HAL_UART_IRQHandler+0x3fc>
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011b22:	681b      	ldr	r3, [r3, #0]
 8011b24:	685b      	ldr	r3, [r3, #4]
 8011b26:	b29b      	uxth	r3, r3
 8011b28:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8011b2c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	f000 80ad 	beq.w	8011c90 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011b3c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8011b40:	429a      	cmp	r2, r3
 8011b42:	f080 80a5 	bcs.w	8011c90 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8011b4c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011b56:	69db      	ldr	r3, [r3, #28]
 8011b58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011b5c:	f000 8087 	beq.w	8011c6e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b68:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8011b6c:	e853 3f00 	ldrex	r3, [r3]
 8011b70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8011b74:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011b78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011b7c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	681b      	ldr	r3, [r3, #0]
 8011b84:	461a      	mov	r2, r3
 8011b86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8011b8a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8011b8e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b92:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8011b96:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8011b9a:	e841 2300 	strex	r3, r2, [r1]
 8011b9e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8011ba2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d1da      	bne.n	8011b60 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	681b      	ldr	r3, [r3, #0]
 8011bae:	3308      	adds	r3, #8
 8011bb0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bb2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011bb4:	e853 3f00 	ldrex	r3, [r3]
 8011bb8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8011bba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011bbc:	f023 0301 	bic.w	r3, r3, #1
 8011bc0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	3308      	adds	r3, #8
 8011bca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8011bce:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8011bd2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bd4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8011bd6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8011bda:	e841 2300 	strex	r3, r2, [r1]
 8011bde:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8011be0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d1e1      	bne.n	8011baa <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	3308      	adds	r3, #8
 8011bec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011bf0:	e853 3f00 	ldrex	r3, [r3]
 8011bf4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8011bf6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011bf8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011bfc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	3308      	adds	r3, #8
 8011c06:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8011c0a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8011c0c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c0e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8011c10:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8011c12:	e841 2300 	strex	r3, r2, [r1]
 8011c16:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8011c18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d1e3      	bne.n	8011be6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	2220      	movs	r2, #32
 8011c22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	2200      	movs	r2, #0
 8011c2a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011c34:	e853 3f00 	ldrex	r3, [r3]
 8011c38:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8011c3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011c3c:	f023 0310 	bic.w	r3, r3, #16
 8011c40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	461a      	mov	r2, r3
 8011c4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011c4e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011c50:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c52:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011c54:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011c56:	e841 2300 	strex	r3, r2, [r1]
 8011c5a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8011c5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d1e4      	bne.n	8011c2c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011c68:	4618      	mov	r0, r3
 8011c6a:	f7f5 fee7 	bl	8007a3c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	2202      	movs	r2, #2
 8011c72:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011c80:	b29b      	uxth	r3, r3
 8011c82:	1ad3      	subs	r3, r2, r3
 8011c84:	b29b      	uxth	r3, r3
 8011c86:	4619      	mov	r1, r3
 8011c88:	6878      	ldr	r0, [r7, #4]
 8011c8a:	f000 f939 	bl	8011f00 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8011c8e:	e119      	b.n	8011ec4 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011c96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8011c9a:	429a      	cmp	r2, r3
 8011c9c:	f040 8112 	bne.w	8011ec4 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011ca6:	69db      	ldr	r3, [r3, #28]
 8011ca8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011cac:	f040 810a 	bne.w	8011ec4 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	2202      	movs	r2, #2
 8011cb4:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011cbc:	4619      	mov	r1, r3
 8011cbe:	6878      	ldr	r0, [r7, #4]
 8011cc0:	f000 f91e 	bl	8011f00 <HAL_UARTEx_RxEventCallback>
      return;
 8011cc4:	e0fe      	b.n	8011ec4 <HAL_UART_IRQHandler+0x798>
 8011cc6:	bf00      	nop
 8011cc8:	40020010 	.word	0x40020010
 8011ccc:	40020028 	.word	0x40020028
 8011cd0:	40020040 	.word	0x40020040
 8011cd4:	40020058 	.word	0x40020058
 8011cd8:	40020070 	.word	0x40020070
 8011cdc:	40020088 	.word	0x40020088
 8011ce0:	400200a0 	.word	0x400200a0
 8011ce4:	400200b8 	.word	0x400200b8
 8011ce8:	40020410 	.word	0x40020410
 8011cec:	40020428 	.word	0x40020428
 8011cf0:	40020440 	.word	0x40020440
 8011cf4:	40020458 	.word	0x40020458
 8011cf8:	40020470 	.word	0x40020470
 8011cfc:	40020488 	.word	0x40020488
 8011d00:	400204a0 	.word	0x400204a0
 8011d04:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011d14:	b29b      	uxth	r3, r3
 8011d16:	1ad3      	subs	r3, r2, r3
 8011d18:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011d22:	b29b      	uxth	r3, r3
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	f000 80cf 	beq.w	8011ec8 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8011d2a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	f000 80ca 	beq.w	8011ec8 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d3c:	e853 3f00 	ldrex	r3, [r3]
 8011d40:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011d42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011d44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011d48:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	461a      	mov	r2, r3
 8011d52:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8011d56:	647b      	str	r3, [r7, #68]	@ 0x44
 8011d58:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d5a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011d5c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011d5e:	e841 2300 	strex	r3, r2, [r1]
 8011d62:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011d64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d1e4      	bne.n	8011d34 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	3308      	adds	r3, #8
 8011d70:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d74:	e853 3f00 	ldrex	r3, [r3]
 8011d78:	623b      	str	r3, [r7, #32]
   return(result);
 8011d7a:	6a3a      	ldr	r2, [r7, #32]
 8011d7c:	4b55      	ldr	r3, [pc, #340]	@ (8011ed4 <HAL_UART_IRQHandler+0x7a8>)
 8011d7e:	4013      	ands	r3, r2
 8011d80:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	3308      	adds	r3, #8
 8011d8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8011d8e:	633a      	str	r2, [r7, #48]	@ 0x30
 8011d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011d94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011d96:	e841 2300 	strex	r3, r2, [r1]
 8011d9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d1e3      	bne.n	8011d6a <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	2220      	movs	r2, #32
 8011da6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	2200      	movs	r2, #0
 8011dae:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	2200      	movs	r2, #0
 8011db4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011dbc:	693b      	ldr	r3, [r7, #16]
 8011dbe:	e853 3f00 	ldrex	r3, [r3]
 8011dc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8011dc4:	68fb      	ldr	r3, [r7, #12]
 8011dc6:	f023 0310 	bic.w	r3, r3, #16
 8011dca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	461a      	mov	r2, r3
 8011dd4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8011dd8:	61fb      	str	r3, [r7, #28]
 8011dda:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ddc:	69b9      	ldr	r1, [r7, #24]
 8011dde:	69fa      	ldr	r2, [r7, #28]
 8011de0:	e841 2300 	strex	r3, r2, [r1]
 8011de4:	617b      	str	r3, [r7, #20]
   return(result);
 8011de6:	697b      	ldr	r3, [r7, #20]
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d1e4      	bne.n	8011db6 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	2202      	movs	r2, #2
 8011df0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8011df2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8011df6:	4619      	mov	r1, r3
 8011df8:	6878      	ldr	r0, [r7, #4]
 8011dfa:	f000 f881 	bl	8011f00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8011dfe:	e063      	b.n	8011ec8 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8011e00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011e04:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d00e      	beq.n	8011e2a <HAL_UART_IRQHandler+0x6fe>
 8011e0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011e10:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d008      	beq.n	8011e2a <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8011e20:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8011e22:	6878      	ldr	r0, [r7, #4]
 8011e24:	f001 ff84 	bl	8013d30 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011e28:	e051      	b.n	8011ece <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8011e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011e2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d014      	beq.n	8011e60 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8011e36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011e3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d105      	bne.n	8011e4e <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8011e42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011e46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d008      	beq.n	8011e60 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d03a      	beq.n	8011ecc <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011e5a:	6878      	ldr	r0, [r7, #4]
 8011e5c:	4798      	blx	r3
    }
    return;
 8011e5e:	e035      	b.n	8011ecc <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8011e60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011e64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d009      	beq.n	8011e80 <HAL_UART_IRQHandler+0x754>
 8011e6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011e70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d003      	beq.n	8011e80 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8011e78:	6878      	ldr	r0, [r7, #4]
 8011e7a:	f001 fa0d 	bl	8013298 <UART_EndTransmit_IT>
    return;
 8011e7e:	e026      	b.n	8011ece <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8011e80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011e84:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d009      	beq.n	8011ea0 <HAL_UART_IRQHandler+0x774>
 8011e8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011e90:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d003      	beq.n	8011ea0 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8011e98:	6878      	ldr	r0, [r7, #4]
 8011e9a:	f001 ff5d 	bl	8013d58 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011e9e:	e016      	b.n	8011ece <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8011ea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011ea4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d010      	beq.n	8011ece <HAL_UART_IRQHandler+0x7a2>
 8011eac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	da0c      	bge.n	8011ece <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8011eb4:	6878      	ldr	r0, [r7, #4]
 8011eb6:	f001 ff45 	bl	8013d44 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011eba:	e008      	b.n	8011ece <HAL_UART_IRQHandler+0x7a2>
      return;
 8011ebc:	bf00      	nop
 8011ebe:	e006      	b.n	8011ece <HAL_UART_IRQHandler+0x7a2>
    return;
 8011ec0:	bf00      	nop
 8011ec2:	e004      	b.n	8011ece <HAL_UART_IRQHandler+0x7a2>
      return;
 8011ec4:	bf00      	nop
 8011ec6:	e002      	b.n	8011ece <HAL_UART_IRQHandler+0x7a2>
      return;
 8011ec8:	bf00      	nop
 8011eca:	e000      	b.n	8011ece <HAL_UART_IRQHandler+0x7a2>
    return;
 8011ecc:	bf00      	nop
  }
}
 8011ece:	37e8      	adds	r7, #232	@ 0xe8
 8011ed0:	46bd      	mov	sp, r7
 8011ed2:	bd80      	pop	{r7, pc}
 8011ed4:	effffffe 	.word	0xeffffffe

08011ed8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8011ed8:	b480      	push	{r7}
 8011eda:	b083      	sub	sp, #12
 8011edc:	af00      	add	r7, sp, #0
 8011ede:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8011ee0:	bf00      	nop
 8011ee2:	370c      	adds	r7, #12
 8011ee4:	46bd      	mov	sp, r7
 8011ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eea:	4770      	bx	lr

08011eec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8011eec:	b480      	push	{r7}
 8011eee:	b083      	sub	sp, #12
 8011ef0:	af00      	add	r7, sp, #0
 8011ef2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8011ef4:	bf00      	nop
 8011ef6:	370c      	adds	r7, #12
 8011ef8:	46bd      	mov	sp, r7
 8011efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011efe:	4770      	bx	lr

08011f00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8011f00:	b480      	push	{r7}
 8011f02:	b083      	sub	sp, #12
 8011f04:	af00      	add	r7, sp, #0
 8011f06:	6078      	str	r0, [r7, #4]
 8011f08:	460b      	mov	r3, r1
 8011f0a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8011f0c:	bf00      	nop
 8011f0e:	370c      	adds	r7, #12
 8011f10:	46bd      	mov	sp, r7
 8011f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f16:	4770      	bx	lr

08011f18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011f18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011f1c:	b092      	sub	sp, #72	@ 0x48
 8011f1e:	af00      	add	r7, sp, #0
 8011f20:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8011f22:	2300      	movs	r3, #0
 8011f24:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011f28:	697b      	ldr	r3, [r7, #20]
 8011f2a:	689a      	ldr	r2, [r3, #8]
 8011f2c:	697b      	ldr	r3, [r7, #20]
 8011f2e:	691b      	ldr	r3, [r3, #16]
 8011f30:	431a      	orrs	r2, r3
 8011f32:	697b      	ldr	r3, [r7, #20]
 8011f34:	695b      	ldr	r3, [r3, #20]
 8011f36:	431a      	orrs	r2, r3
 8011f38:	697b      	ldr	r3, [r7, #20]
 8011f3a:	69db      	ldr	r3, [r3, #28]
 8011f3c:	4313      	orrs	r3, r2
 8011f3e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011f40:	697b      	ldr	r3, [r7, #20]
 8011f42:	681b      	ldr	r3, [r3, #0]
 8011f44:	681a      	ldr	r2, [r3, #0]
 8011f46:	4bbe      	ldr	r3, [pc, #760]	@ (8012240 <UART_SetConfig+0x328>)
 8011f48:	4013      	ands	r3, r2
 8011f4a:	697a      	ldr	r2, [r7, #20]
 8011f4c:	6812      	ldr	r2, [r2, #0]
 8011f4e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8011f50:	430b      	orrs	r3, r1
 8011f52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011f54:	697b      	ldr	r3, [r7, #20]
 8011f56:	681b      	ldr	r3, [r3, #0]
 8011f58:	685b      	ldr	r3, [r3, #4]
 8011f5a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8011f5e:	697b      	ldr	r3, [r7, #20]
 8011f60:	68da      	ldr	r2, [r3, #12]
 8011f62:	697b      	ldr	r3, [r7, #20]
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	430a      	orrs	r2, r1
 8011f68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8011f6a:	697b      	ldr	r3, [r7, #20]
 8011f6c:	699b      	ldr	r3, [r3, #24]
 8011f6e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011f70:	697b      	ldr	r3, [r7, #20]
 8011f72:	681b      	ldr	r3, [r3, #0]
 8011f74:	4ab3      	ldr	r2, [pc, #716]	@ (8012244 <UART_SetConfig+0x32c>)
 8011f76:	4293      	cmp	r3, r2
 8011f78:	d004      	beq.n	8011f84 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8011f7a:	697b      	ldr	r3, [r7, #20]
 8011f7c:	6a1b      	ldr	r3, [r3, #32]
 8011f7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011f80:	4313      	orrs	r3, r2
 8011f82:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011f84:	697b      	ldr	r3, [r7, #20]
 8011f86:	681b      	ldr	r3, [r3, #0]
 8011f88:	689a      	ldr	r2, [r3, #8]
 8011f8a:	4baf      	ldr	r3, [pc, #700]	@ (8012248 <UART_SetConfig+0x330>)
 8011f8c:	4013      	ands	r3, r2
 8011f8e:	697a      	ldr	r2, [r7, #20]
 8011f90:	6812      	ldr	r2, [r2, #0]
 8011f92:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8011f94:	430b      	orrs	r3, r1
 8011f96:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8011f98:	697b      	ldr	r3, [r7, #20]
 8011f9a:	681b      	ldr	r3, [r3, #0]
 8011f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f9e:	f023 010f 	bic.w	r1, r3, #15
 8011fa2:	697b      	ldr	r3, [r7, #20]
 8011fa4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011fa6:	697b      	ldr	r3, [r7, #20]
 8011fa8:	681b      	ldr	r3, [r3, #0]
 8011faa:	430a      	orrs	r2, r1
 8011fac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011fae:	697b      	ldr	r3, [r7, #20]
 8011fb0:	681b      	ldr	r3, [r3, #0]
 8011fb2:	4aa6      	ldr	r2, [pc, #664]	@ (801224c <UART_SetConfig+0x334>)
 8011fb4:	4293      	cmp	r3, r2
 8011fb6:	d177      	bne.n	80120a8 <UART_SetConfig+0x190>
 8011fb8:	4ba5      	ldr	r3, [pc, #660]	@ (8012250 <UART_SetConfig+0x338>)
 8011fba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011fbc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011fc0:	2b28      	cmp	r3, #40	@ 0x28
 8011fc2:	d86d      	bhi.n	80120a0 <UART_SetConfig+0x188>
 8011fc4:	a201      	add	r2, pc, #4	@ (adr r2, 8011fcc <UART_SetConfig+0xb4>)
 8011fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011fca:	bf00      	nop
 8011fcc:	08012071 	.word	0x08012071
 8011fd0:	080120a1 	.word	0x080120a1
 8011fd4:	080120a1 	.word	0x080120a1
 8011fd8:	080120a1 	.word	0x080120a1
 8011fdc:	080120a1 	.word	0x080120a1
 8011fe0:	080120a1 	.word	0x080120a1
 8011fe4:	080120a1 	.word	0x080120a1
 8011fe8:	080120a1 	.word	0x080120a1
 8011fec:	08012079 	.word	0x08012079
 8011ff0:	080120a1 	.word	0x080120a1
 8011ff4:	080120a1 	.word	0x080120a1
 8011ff8:	080120a1 	.word	0x080120a1
 8011ffc:	080120a1 	.word	0x080120a1
 8012000:	080120a1 	.word	0x080120a1
 8012004:	080120a1 	.word	0x080120a1
 8012008:	080120a1 	.word	0x080120a1
 801200c:	08012081 	.word	0x08012081
 8012010:	080120a1 	.word	0x080120a1
 8012014:	080120a1 	.word	0x080120a1
 8012018:	080120a1 	.word	0x080120a1
 801201c:	080120a1 	.word	0x080120a1
 8012020:	080120a1 	.word	0x080120a1
 8012024:	080120a1 	.word	0x080120a1
 8012028:	080120a1 	.word	0x080120a1
 801202c:	08012089 	.word	0x08012089
 8012030:	080120a1 	.word	0x080120a1
 8012034:	080120a1 	.word	0x080120a1
 8012038:	080120a1 	.word	0x080120a1
 801203c:	080120a1 	.word	0x080120a1
 8012040:	080120a1 	.word	0x080120a1
 8012044:	080120a1 	.word	0x080120a1
 8012048:	080120a1 	.word	0x080120a1
 801204c:	08012091 	.word	0x08012091
 8012050:	080120a1 	.word	0x080120a1
 8012054:	080120a1 	.word	0x080120a1
 8012058:	080120a1 	.word	0x080120a1
 801205c:	080120a1 	.word	0x080120a1
 8012060:	080120a1 	.word	0x080120a1
 8012064:	080120a1 	.word	0x080120a1
 8012068:	080120a1 	.word	0x080120a1
 801206c:	08012099 	.word	0x08012099
 8012070:	2301      	movs	r3, #1
 8012072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012076:	e326      	b.n	80126c6 <UART_SetConfig+0x7ae>
 8012078:	2304      	movs	r3, #4
 801207a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801207e:	e322      	b.n	80126c6 <UART_SetConfig+0x7ae>
 8012080:	2308      	movs	r3, #8
 8012082:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012086:	e31e      	b.n	80126c6 <UART_SetConfig+0x7ae>
 8012088:	2310      	movs	r3, #16
 801208a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801208e:	e31a      	b.n	80126c6 <UART_SetConfig+0x7ae>
 8012090:	2320      	movs	r3, #32
 8012092:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012096:	e316      	b.n	80126c6 <UART_SetConfig+0x7ae>
 8012098:	2340      	movs	r3, #64	@ 0x40
 801209a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801209e:	e312      	b.n	80126c6 <UART_SetConfig+0x7ae>
 80120a0:	2380      	movs	r3, #128	@ 0x80
 80120a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80120a6:	e30e      	b.n	80126c6 <UART_SetConfig+0x7ae>
 80120a8:	697b      	ldr	r3, [r7, #20]
 80120aa:	681b      	ldr	r3, [r3, #0]
 80120ac:	4a69      	ldr	r2, [pc, #420]	@ (8012254 <UART_SetConfig+0x33c>)
 80120ae:	4293      	cmp	r3, r2
 80120b0:	d130      	bne.n	8012114 <UART_SetConfig+0x1fc>
 80120b2:	4b67      	ldr	r3, [pc, #412]	@ (8012250 <UART_SetConfig+0x338>)
 80120b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80120b6:	f003 0307 	and.w	r3, r3, #7
 80120ba:	2b05      	cmp	r3, #5
 80120bc:	d826      	bhi.n	801210c <UART_SetConfig+0x1f4>
 80120be:	a201      	add	r2, pc, #4	@ (adr r2, 80120c4 <UART_SetConfig+0x1ac>)
 80120c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80120c4:	080120dd 	.word	0x080120dd
 80120c8:	080120e5 	.word	0x080120e5
 80120cc:	080120ed 	.word	0x080120ed
 80120d0:	080120f5 	.word	0x080120f5
 80120d4:	080120fd 	.word	0x080120fd
 80120d8:	08012105 	.word	0x08012105
 80120dc:	2300      	movs	r3, #0
 80120de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80120e2:	e2f0      	b.n	80126c6 <UART_SetConfig+0x7ae>
 80120e4:	2304      	movs	r3, #4
 80120e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80120ea:	e2ec      	b.n	80126c6 <UART_SetConfig+0x7ae>
 80120ec:	2308      	movs	r3, #8
 80120ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80120f2:	e2e8      	b.n	80126c6 <UART_SetConfig+0x7ae>
 80120f4:	2310      	movs	r3, #16
 80120f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80120fa:	e2e4      	b.n	80126c6 <UART_SetConfig+0x7ae>
 80120fc:	2320      	movs	r3, #32
 80120fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012102:	e2e0      	b.n	80126c6 <UART_SetConfig+0x7ae>
 8012104:	2340      	movs	r3, #64	@ 0x40
 8012106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801210a:	e2dc      	b.n	80126c6 <UART_SetConfig+0x7ae>
 801210c:	2380      	movs	r3, #128	@ 0x80
 801210e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012112:	e2d8      	b.n	80126c6 <UART_SetConfig+0x7ae>
 8012114:	697b      	ldr	r3, [r7, #20]
 8012116:	681b      	ldr	r3, [r3, #0]
 8012118:	4a4f      	ldr	r2, [pc, #316]	@ (8012258 <UART_SetConfig+0x340>)
 801211a:	4293      	cmp	r3, r2
 801211c:	d130      	bne.n	8012180 <UART_SetConfig+0x268>
 801211e:	4b4c      	ldr	r3, [pc, #304]	@ (8012250 <UART_SetConfig+0x338>)
 8012120:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012122:	f003 0307 	and.w	r3, r3, #7
 8012126:	2b05      	cmp	r3, #5
 8012128:	d826      	bhi.n	8012178 <UART_SetConfig+0x260>
 801212a:	a201      	add	r2, pc, #4	@ (adr r2, 8012130 <UART_SetConfig+0x218>)
 801212c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012130:	08012149 	.word	0x08012149
 8012134:	08012151 	.word	0x08012151
 8012138:	08012159 	.word	0x08012159
 801213c:	08012161 	.word	0x08012161
 8012140:	08012169 	.word	0x08012169
 8012144:	08012171 	.word	0x08012171
 8012148:	2300      	movs	r3, #0
 801214a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801214e:	e2ba      	b.n	80126c6 <UART_SetConfig+0x7ae>
 8012150:	2304      	movs	r3, #4
 8012152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012156:	e2b6      	b.n	80126c6 <UART_SetConfig+0x7ae>
 8012158:	2308      	movs	r3, #8
 801215a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801215e:	e2b2      	b.n	80126c6 <UART_SetConfig+0x7ae>
 8012160:	2310      	movs	r3, #16
 8012162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012166:	e2ae      	b.n	80126c6 <UART_SetConfig+0x7ae>
 8012168:	2320      	movs	r3, #32
 801216a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801216e:	e2aa      	b.n	80126c6 <UART_SetConfig+0x7ae>
 8012170:	2340      	movs	r3, #64	@ 0x40
 8012172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012176:	e2a6      	b.n	80126c6 <UART_SetConfig+0x7ae>
 8012178:	2380      	movs	r3, #128	@ 0x80
 801217a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801217e:	e2a2      	b.n	80126c6 <UART_SetConfig+0x7ae>
 8012180:	697b      	ldr	r3, [r7, #20]
 8012182:	681b      	ldr	r3, [r3, #0]
 8012184:	4a35      	ldr	r2, [pc, #212]	@ (801225c <UART_SetConfig+0x344>)
 8012186:	4293      	cmp	r3, r2
 8012188:	d130      	bne.n	80121ec <UART_SetConfig+0x2d4>
 801218a:	4b31      	ldr	r3, [pc, #196]	@ (8012250 <UART_SetConfig+0x338>)
 801218c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801218e:	f003 0307 	and.w	r3, r3, #7
 8012192:	2b05      	cmp	r3, #5
 8012194:	d826      	bhi.n	80121e4 <UART_SetConfig+0x2cc>
 8012196:	a201      	add	r2, pc, #4	@ (adr r2, 801219c <UART_SetConfig+0x284>)
 8012198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801219c:	080121b5 	.word	0x080121b5
 80121a0:	080121bd 	.word	0x080121bd
 80121a4:	080121c5 	.word	0x080121c5
 80121a8:	080121cd 	.word	0x080121cd
 80121ac:	080121d5 	.word	0x080121d5
 80121b0:	080121dd 	.word	0x080121dd
 80121b4:	2300      	movs	r3, #0
 80121b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80121ba:	e284      	b.n	80126c6 <UART_SetConfig+0x7ae>
 80121bc:	2304      	movs	r3, #4
 80121be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80121c2:	e280      	b.n	80126c6 <UART_SetConfig+0x7ae>
 80121c4:	2308      	movs	r3, #8
 80121c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80121ca:	e27c      	b.n	80126c6 <UART_SetConfig+0x7ae>
 80121cc:	2310      	movs	r3, #16
 80121ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80121d2:	e278      	b.n	80126c6 <UART_SetConfig+0x7ae>
 80121d4:	2320      	movs	r3, #32
 80121d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80121da:	e274      	b.n	80126c6 <UART_SetConfig+0x7ae>
 80121dc:	2340      	movs	r3, #64	@ 0x40
 80121de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80121e2:	e270      	b.n	80126c6 <UART_SetConfig+0x7ae>
 80121e4:	2380      	movs	r3, #128	@ 0x80
 80121e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80121ea:	e26c      	b.n	80126c6 <UART_SetConfig+0x7ae>
 80121ec:	697b      	ldr	r3, [r7, #20]
 80121ee:	681b      	ldr	r3, [r3, #0]
 80121f0:	4a1b      	ldr	r2, [pc, #108]	@ (8012260 <UART_SetConfig+0x348>)
 80121f2:	4293      	cmp	r3, r2
 80121f4:	d142      	bne.n	801227c <UART_SetConfig+0x364>
 80121f6:	4b16      	ldr	r3, [pc, #88]	@ (8012250 <UART_SetConfig+0x338>)
 80121f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80121fa:	f003 0307 	and.w	r3, r3, #7
 80121fe:	2b05      	cmp	r3, #5
 8012200:	d838      	bhi.n	8012274 <UART_SetConfig+0x35c>
 8012202:	a201      	add	r2, pc, #4	@ (adr r2, 8012208 <UART_SetConfig+0x2f0>)
 8012204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012208:	08012221 	.word	0x08012221
 801220c:	08012229 	.word	0x08012229
 8012210:	08012231 	.word	0x08012231
 8012214:	08012239 	.word	0x08012239
 8012218:	08012265 	.word	0x08012265
 801221c:	0801226d 	.word	0x0801226d
 8012220:	2300      	movs	r3, #0
 8012222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012226:	e24e      	b.n	80126c6 <UART_SetConfig+0x7ae>
 8012228:	2304      	movs	r3, #4
 801222a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801222e:	e24a      	b.n	80126c6 <UART_SetConfig+0x7ae>
 8012230:	2308      	movs	r3, #8
 8012232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012236:	e246      	b.n	80126c6 <UART_SetConfig+0x7ae>
 8012238:	2310      	movs	r3, #16
 801223a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801223e:	e242      	b.n	80126c6 <UART_SetConfig+0x7ae>
 8012240:	cfff69f3 	.word	0xcfff69f3
 8012244:	58000c00 	.word	0x58000c00
 8012248:	11fff4ff 	.word	0x11fff4ff
 801224c:	40011000 	.word	0x40011000
 8012250:	58024400 	.word	0x58024400
 8012254:	40004400 	.word	0x40004400
 8012258:	40004800 	.word	0x40004800
 801225c:	40004c00 	.word	0x40004c00
 8012260:	40005000 	.word	0x40005000
 8012264:	2320      	movs	r3, #32
 8012266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801226a:	e22c      	b.n	80126c6 <UART_SetConfig+0x7ae>
 801226c:	2340      	movs	r3, #64	@ 0x40
 801226e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012272:	e228      	b.n	80126c6 <UART_SetConfig+0x7ae>
 8012274:	2380      	movs	r3, #128	@ 0x80
 8012276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801227a:	e224      	b.n	80126c6 <UART_SetConfig+0x7ae>
 801227c:	697b      	ldr	r3, [r7, #20]
 801227e:	681b      	ldr	r3, [r3, #0]
 8012280:	4ab1      	ldr	r2, [pc, #708]	@ (8012548 <UART_SetConfig+0x630>)
 8012282:	4293      	cmp	r3, r2
 8012284:	d176      	bne.n	8012374 <UART_SetConfig+0x45c>
 8012286:	4bb1      	ldr	r3, [pc, #708]	@ (801254c <UART_SetConfig+0x634>)
 8012288:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801228a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801228e:	2b28      	cmp	r3, #40	@ 0x28
 8012290:	d86c      	bhi.n	801236c <UART_SetConfig+0x454>
 8012292:	a201      	add	r2, pc, #4	@ (adr r2, 8012298 <UART_SetConfig+0x380>)
 8012294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012298:	0801233d 	.word	0x0801233d
 801229c:	0801236d 	.word	0x0801236d
 80122a0:	0801236d 	.word	0x0801236d
 80122a4:	0801236d 	.word	0x0801236d
 80122a8:	0801236d 	.word	0x0801236d
 80122ac:	0801236d 	.word	0x0801236d
 80122b0:	0801236d 	.word	0x0801236d
 80122b4:	0801236d 	.word	0x0801236d
 80122b8:	08012345 	.word	0x08012345
 80122bc:	0801236d 	.word	0x0801236d
 80122c0:	0801236d 	.word	0x0801236d
 80122c4:	0801236d 	.word	0x0801236d
 80122c8:	0801236d 	.word	0x0801236d
 80122cc:	0801236d 	.word	0x0801236d
 80122d0:	0801236d 	.word	0x0801236d
 80122d4:	0801236d 	.word	0x0801236d
 80122d8:	0801234d 	.word	0x0801234d
 80122dc:	0801236d 	.word	0x0801236d
 80122e0:	0801236d 	.word	0x0801236d
 80122e4:	0801236d 	.word	0x0801236d
 80122e8:	0801236d 	.word	0x0801236d
 80122ec:	0801236d 	.word	0x0801236d
 80122f0:	0801236d 	.word	0x0801236d
 80122f4:	0801236d 	.word	0x0801236d
 80122f8:	08012355 	.word	0x08012355
 80122fc:	0801236d 	.word	0x0801236d
 8012300:	0801236d 	.word	0x0801236d
 8012304:	0801236d 	.word	0x0801236d
 8012308:	0801236d 	.word	0x0801236d
 801230c:	0801236d 	.word	0x0801236d
 8012310:	0801236d 	.word	0x0801236d
 8012314:	0801236d 	.word	0x0801236d
 8012318:	0801235d 	.word	0x0801235d
 801231c:	0801236d 	.word	0x0801236d
 8012320:	0801236d 	.word	0x0801236d
 8012324:	0801236d 	.word	0x0801236d
 8012328:	0801236d 	.word	0x0801236d
 801232c:	0801236d 	.word	0x0801236d
 8012330:	0801236d 	.word	0x0801236d
 8012334:	0801236d 	.word	0x0801236d
 8012338:	08012365 	.word	0x08012365
 801233c:	2301      	movs	r3, #1
 801233e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012342:	e1c0      	b.n	80126c6 <UART_SetConfig+0x7ae>
 8012344:	2304      	movs	r3, #4
 8012346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801234a:	e1bc      	b.n	80126c6 <UART_SetConfig+0x7ae>
 801234c:	2308      	movs	r3, #8
 801234e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012352:	e1b8      	b.n	80126c6 <UART_SetConfig+0x7ae>
 8012354:	2310      	movs	r3, #16
 8012356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801235a:	e1b4      	b.n	80126c6 <UART_SetConfig+0x7ae>
 801235c:	2320      	movs	r3, #32
 801235e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012362:	e1b0      	b.n	80126c6 <UART_SetConfig+0x7ae>
 8012364:	2340      	movs	r3, #64	@ 0x40
 8012366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801236a:	e1ac      	b.n	80126c6 <UART_SetConfig+0x7ae>
 801236c:	2380      	movs	r3, #128	@ 0x80
 801236e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012372:	e1a8      	b.n	80126c6 <UART_SetConfig+0x7ae>
 8012374:	697b      	ldr	r3, [r7, #20]
 8012376:	681b      	ldr	r3, [r3, #0]
 8012378:	4a75      	ldr	r2, [pc, #468]	@ (8012550 <UART_SetConfig+0x638>)
 801237a:	4293      	cmp	r3, r2
 801237c:	d130      	bne.n	80123e0 <UART_SetConfig+0x4c8>
 801237e:	4b73      	ldr	r3, [pc, #460]	@ (801254c <UART_SetConfig+0x634>)
 8012380:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012382:	f003 0307 	and.w	r3, r3, #7
 8012386:	2b05      	cmp	r3, #5
 8012388:	d826      	bhi.n	80123d8 <UART_SetConfig+0x4c0>
 801238a:	a201      	add	r2, pc, #4	@ (adr r2, 8012390 <UART_SetConfig+0x478>)
 801238c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012390:	080123a9 	.word	0x080123a9
 8012394:	080123b1 	.word	0x080123b1
 8012398:	080123b9 	.word	0x080123b9
 801239c:	080123c1 	.word	0x080123c1
 80123a0:	080123c9 	.word	0x080123c9
 80123a4:	080123d1 	.word	0x080123d1
 80123a8:	2300      	movs	r3, #0
 80123aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80123ae:	e18a      	b.n	80126c6 <UART_SetConfig+0x7ae>
 80123b0:	2304      	movs	r3, #4
 80123b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80123b6:	e186      	b.n	80126c6 <UART_SetConfig+0x7ae>
 80123b8:	2308      	movs	r3, #8
 80123ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80123be:	e182      	b.n	80126c6 <UART_SetConfig+0x7ae>
 80123c0:	2310      	movs	r3, #16
 80123c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80123c6:	e17e      	b.n	80126c6 <UART_SetConfig+0x7ae>
 80123c8:	2320      	movs	r3, #32
 80123ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80123ce:	e17a      	b.n	80126c6 <UART_SetConfig+0x7ae>
 80123d0:	2340      	movs	r3, #64	@ 0x40
 80123d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80123d6:	e176      	b.n	80126c6 <UART_SetConfig+0x7ae>
 80123d8:	2380      	movs	r3, #128	@ 0x80
 80123da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80123de:	e172      	b.n	80126c6 <UART_SetConfig+0x7ae>
 80123e0:	697b      	ldr	r3, [r7, #20]
 80123e2:	681b      	ldr	r3, [r3, #0]
 80123e4:	4a5b      	ldr	r2, [pc, #364]	@ (8012554 <UART_SetConfig+0x63c>)
 80123e6:	4293      	cmp	r3, r2
 80123e8:	d130      	bne.n	801244c <UART_SetConfig+0x534>
 80123ea:	4b58      	ldr	r3, [pc, #352]	@ (801254c <UART_SetConfig+0x634>)
 80123ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80123ee:	f003 0307 	and.w	r3, r3, #7
 80123f2:	2b05      	cmp	r3, #5
 80123f4:	d826      	bhi.n	8012444 <UART_SetConfig+0x52c>
 80123f6:	a201      	add	r2, pc, #4	@ (adr r2, 80123fc <UART_SetConfig+0x4e4>)
 80123f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80123fc:	08012415 	.word	0x08012415
 8012400:	0801241d 	.word	0x0801241d
 8012404:	08012425 	.word	0x08012425
 8012408:	0801242d 	.word	0x0801242d
 801240c:	08012435 	.word	0x08012435
 8012410:	0801243d 	.word	0x0801243d
 8012414:	2300      	movs	r3, #0
 8012416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801241a:	e154      	b.n	80126c6 <UART_SetConfig+0x7ae>
 801241c:	2304      	movs	r3, #4
 801241e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012422:	e150      	b.n	80126c6 <UART_SetConfig+0x7ae>
 8012424:	2308      	movs	r3, #8
 8012426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801242a:	e14c      	b.n	80126c6 <UART_SetConfig+0x7ae>
 801242c:	2310      	movs	r3, #16
 801242e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012432:	e148      	b.n	80126c6 <UART_SetConfig+0x7ae>
 8012434:	2320      	movs	r3, #32
 8012436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801243a:	e144      	b.n	80126c6 <UART_SetConfig+0x7ae>
 801243c:	2340      	movs	r3, #64	@ 0x40
 801243e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012442:	e140      	b.n	80126c6 <UART_SetConfig+0x7ae>
 8012444:	2380      	movs	r3, #128	@ 0x80
 8012446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801244a:	e13c      	b.n	80126c6 <UART_SetConfig+0x7ae>
 801244c:	697b      	ldr	r3, [r7, #20]
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	4a41      	ldr	r2, [pc, #260]	@ (8012558 <UART_SetConfig+0x640>)
 8012452:	4293      	cmp	r3, r2
 8012454:	f040 8082 	bne.w	801255c <UART_SetConfig+0x644>
 8012458:	4b3c      	ldr	r3, [pc, #240]	@ (801254c <UART_SetConfig+0x634>)
 801245a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801245c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8012460:	2b28      	cmp	r3, #40	@ 0x28
 8012462:	d86d      	bhi.n	8012540 <UART_SetConfig+0x628>
 8012464:	a201      	add	r2, pc, #4	@ (adr r2, 801246c <UART_SetConfig+0x554>)
 8012466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801246a:	bf00      	nop
 801246c:	08012511 	.word	0x08012511
 8012470:	08012541 	.word	0x08012541
 8012474:	08012541 	.word	0x08012541
 8012478:	08012541 	.word	0x08012541
 801247c:	08012541 	.word	0x08012541
 8012480:	08012541 	.word	0x08012541
 8012484:	08012541 	.word	0x08012541
 8012488:	08012541 	.word	0x08012541
 801248c:	08012519 	.word	0x08012519
 8012490:	08012541 	.word	0x08012541
 8012494:	08012541 	.word	0x08012541
 8012498:	08012541 	.word	0x08012541
 801249c:	08012541 	.word	0x08012541
 80124a0:	08012541 	.word	0x08012541
 80124a4:	08012541 	.word	0x08012541
 80124a8:	08012541 	.word	0x08012541
 80124ac:	08012521 	.word	0x08012521
 80124b0:	08012541 	.word	0x08012541
 80124b4:	08012541 	.word	0x08012541
 80124b8:	08012541 	.word	0x08012541
 80124bc:	08012541 	.word	0x08012541
 80124c0:	08012541 	.word	0x08012541
 80124c4:	08012541 	.word	0x08012541
 80124c8:	08012541 	.word	0x08012541
 80124cc:	08012529 	.word	0x08012529
 80124d0:	08012541 	.word	0x08012541
 80124d4:	08012541 	.word	0x08012541
 80124d8:	08012541 	.word	0x08012541
 80124dc:	08012541 	.word	0x08012541
 80124e0:	08012541 	.word	0x08012541
 80124e4:	08012541 	.word	0x08012541
 80124e8:	08012541 	.word	0x08012541
 80124ec:	08012531 	.word	0x08012531
 80124f0:	08012541 	.word	0x08012541
 80124f4:	08012541 	.word	0x08012541
 80124f8:	08012541 	.word	0x08012541
 80124fc:	08012541 	.word	0x08012541
 8012500:	08012541 	.word	0x08012541
 8012504:	08012541 	.word	0x08012541
 8012508:	08012541 	.word	0x08012541
 801250c:	08012539 	.word	0x08012539
 8012510:	2301      	movs	r3, #1
 8012512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012516:	e0d6      	b.n	80126c6 <UART_SetConfig+0x7ae>
 8012518:	2304      	movs	r3, #4
 801251a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801251e:	e0d2      	b.n	80126c6 <UART_SetConfig+0x7ae>
 8012520:	2308      	movs	r3, #8
 8012522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012526:	e0ce      	b.n	80126c6 <UART_SetConfig+0x7ae>
 8012528:	2310      	movs	r3, #16
 801252a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801252e:	e0ca      	b.n	80126c6 <UART_SetConfig+0x7ae>
 8012530:	2320      	movs	r3, #32
 8012532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012536:	e0c6      	b.n	80126c6 <UART_SetConfig+0x7ae>
 8012538:	2340      	movs	r3, #64	@ 0x40
 801253a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801253e:	e0c2      	b.n	80126c6 <UART_SetConfig+0x7ae>
 8012540:	2380      	movs	r3, #128	@ 0x80
 8012542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012546:	e0be      	b.n	80126c6 <UART_SetConfig+0x7ae>
 8012548:	40011400 	.word	0x40011400
 801254c:	58024400 	.word	0x58024400
 8012550:	40007800 	.word	0x40007800
 8012554:	40007c00 	.word	0x40007c00
 8012558:	40011800 	.word	0x40011800
 801255c:	697b      	ldr	r3, [r7, #20]
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	4aad      	ldr	r2, [pc, #692]	@ (8012818 <UART_SetConfig+0x900>)
 8012562:	4293      	cmp	r3, r2
 8012564:	d176      	bne.n	8012654 <UART_SetConfig+0x73c>
 8012566:	4bad      	ldr	r3, [pc, #692]	@ (801281c <UART_SetConfig+0x904>)
 8012568:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801256a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801256e:	2b28      	cmp	r3, #40	@ 0x28
 8012570:	d86c      	bhi.n	801264c <UART_SetConfig+0x734>
 8012572:	a201      	add	r2, pc, #4	@ (adr r2, 8012578 <UART_SetConfig+0x660>)
 8012574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012578:	0801261d 	.word	0x0801261d
 801257c:	0801264d 	.word	0x0801264d
 8012580:	0801264d 	.word	0x0801264d
 8012584:	0801264d 	.word	0x0801264d
 8012588:	0801264d 	.word	0x0801264d
 801258c:	0801264d 	.word	0x0801264d
 8012590:	0801264d 	.word	0x0801264d
 8012594:	0801264d 	.word	0x0801264d
 8012598:	08012625 	.word	0x08012625
 801259c:	0801264d 	.word	0x0801264d
 80125a0:	0801264d 	.word	0x0801264d
 80125a4:	0801264d 	.word	0x0801264d
 80125a8:	0801264d 	.word	0x0801264d
 80125ac:	0801264d 	.word	0x0801264d
 80125b0:	0801264d 	.word	0x0801264d
 80125b4:	0801264d 	.word	0x0801264d
 80125b8:	0801262d 	.word	0x0801262d
 80125bc:	0801264d 	.word	0x0801264d
 80125c0:	0801264d 	.word	0x0801264d
 80125c4:	0801264d 	.word	0x0801264d
 80125c8:	0801264d 	.word	0x0801264d
 80125cc:	0801264d 	.word	0x0801264d
 80125d0:	0801264d 	.word	0x0801264d
 80125d4:	0801264d 	.word	0x0801264d
 80125d8:	08012635 	.word	0x08012635
 80125dc:	0801264d 	.word	0x0801264d
 80125e0:	0801264d 	.word	0x0801264d
 80125e4:	0801264d 	.word	0x0801264d
 80125e8:	0801264d 	.word	0x0801264d
 80125ec:	0801264d 	.word	0x0801264d
 80125f0:	0801264d 	.word	0x0801264d
 80125f4:	0801264d 	.word	0x0801264d
 80125f8:	0801263d 	.word	0x0801263d
 80125fc:	0801264d 	.word	0x0801264d
 8012600:	0801264d 	.word	0x0801264d
 8012604:	0801264d 	.word	0x0801264d
 8012608:	0801264d 	.word	0x0801264d
 801260c:	0801264d 	.word	0x0801264d
 8012610:	0801264d 	.word	0x0801264d
 8012614:	0801264d 	.word	0x0801264d
 8012618:	08012645 	.word	0x08012645
 801261c:	2301      	movs	r3, #1
 801261e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012622:	e050      	b.n	80126c6 <UART_SetConfig+0x7ae>
 8012624:	2304      	movs	r3, #4
 8012626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801262a:	e04c      	b.n	80126c6 <UART_SetConfig+0x7ae>
 801262c:	2308      	movs	r3, #8
 801262e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012632:	e048      	b.n	80126c6 <UART_SetConfig+0x7ae>
 8012634:	2310      	movs	r3, #16
 8012636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801263a:	e044      	b.n	80126c6 <UART_SetConfig+0x7ae>
 801263c:	2320      	movs	r3, #32
 801263e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012642:	e040      	b.n	80126c6 <UART_SetConfig+0x7ae>
 8012644:	2340      	movs	r3, #64	@ 0x40
 8012646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801264a:	e03c      	b.n	80126c6 <UART_SetConfig+0x7ae>
 801264c:	2380      	movs	r3, #128	@ 0x80
 801264e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012652:	e038      	b.n	80126c6 <UART_SetConfig+0x7ae>
 8012654:	697b      	ldr	r3, [r7, #20]
 8012656:	681b      	ldr	r3, [r3, #0]
 8012658:	4a71      	ldr	r2, [pc, #452]	@ (8012820 <UART_SetConfig+0x908>)
 801265a:	4293      	cmp	r3, r2
 801265c:	d130      	bne.n	80126c0 <UART_SetConfig+0x7a8>
 801265e:	4b6f      	ldr	r3, [pc, #444]	@ (801281c <UART_SetConfig+0x904>)
 8012660:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012662:	f003 0307 	and.w	r3, r3, #7
 8012666:	2b05      	cmp	r3, #5
 8012668:	d826      	bhi.n	80126b8 <UART_SetConfig+0x7a0>
 801266a:	a201      	add	r2, pc, #4	@ (adr r2, 8012670 <UART_SetConfig+0x758>)
 801266c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012670:	08012689 	.word	0x08012689
 8012674:	08012691 	.word	0x08012691
 8012678:	08012699 	.word	0x08012699
 801267c:	080126a1 	.word	0x080126a1
 8012680:	080126a9 	.word	0x080126a9
 8012684:	080126b1 	.word	0x080126b1
 8012688:	2302      	movs	r3, #2
 801268a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801268e:	e01a      	b.n	80126c6 <UART_SetConfig+0x7ae>
 8012690:	2304      	movs	r3, #4
 8012692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012696:	e016      	b.n	80126c6 <UART_SetConfig+0x7ae>
 8012698:	2308      	movs	r3, #8
 801269a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801269e:	e012      	b.n	80126c6 <UART_SetConfig+0x7ae>
 80126a0:	2310      	movs	r3, #16
 80126a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80126a6:	e00e      	b.n	80126c6 <UART_SetConfig+0x7ae>
 80126a8:	2320      	movs	r3, #32
 80126aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80126ae:	e00a      	b.n	80126c6 <UART_SetConfig+0x7ae>
 80126b0:	2340      	movs	r3, #64	@ 0x40
 80126b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80126b6:	e006      	b.n	80126c6 <UART_SetConfig+0x7ae>
 80126b8:	2380      	movs	r3, #128	@ 0x80
 80126ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80126be:	e002      	b.n	80126c6 <UART_SetConfig+0x7ae>
 80126c0:	2380      	movs	r3, #128	@ 0x80
 80126c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80126c6:	697b      	ldr	r3, [r7, #20]
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	4a55      	ldr	r2, [pc, #340]	@ (8012820 <UART_SetConfig+0x908>)
 80126cc:	4293      	cmp	r3, r2
 80126ce:	f040 80f8 	bne.w	80128c2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80126d2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80126d6:	2b20      	cmp	r3, #32
 80126d8:	dc46      	bgt.n	8012768 <UART_SetConfig+0x850>
 80126da:	2b02      	cmp	r3, #2
 80126dc:	db75      	blt.n	80127ca <UART_SetConfig+0x8b2>
 80126de:	3b02      	subs	r3, #2
 80126e0:	2b1e      	cmp	r3, #30
 80126e2:	d872      	bhi.n	80127ca <UART_SetConfig+0x8b2>
 80126e4:	a201      	add	r2, pc, #4	@ (adr r2, 80126ec <UART_SetConfig+0x7d4>)
 80126e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80126ea:	bf00      	nop
 80126ec:	0801276f 	.word	0x0801276f
 80126f0:	080127cb 	.word	0x080127cb
 80126f4:	08012777 	.word	0x08012777
 80126f8:	080127cb 	.word	0x080127cb
 80126fc:	080127cb 	.word	0x080127cb
 8012700:	080127cb 	.word	0x080127cb
 8012704:	08012787 	.word	0x08012787
 8012708:	080127cb 	.word	0x080127cb
 801270c:	080127cb 	.word	0x080127cb
 8012710:	080127cb 	.word	0x080127cb
 8012714:	080127cb 	.word	0x080127cb
 8012718:	080127cb 	.word	0x080127cb
 801271c:	080127cb 	.word	0x080127cb
 8012720:	080127cb 	.word	0x080127cb
 8012724:	08012797 	.word	0x08012797
 8012728:	080127cb 	.word	0x080127cb
 801272c:	080127cb 	.word	0x080127cb
 8012730:	080127cb 	.word	0x080127cb
 8012734:	080127cb 	.word	0x080127cb
 8012738:	080127cb 	.word	0x080127cb
 801273c:	080127cb 	.word	0x080127cb
 8012740:	080127cb 	.word	0x080127cb
 8012744:	080127cb 	.word	0x080127cb
 8012748:	080127cb 	.word	0x080127cb
 801274c:	080127cb 	.word	0x080127cb
 8012750:	080127cb 	.word	0x080127cb
 8012754:	080127cb 	.word	0x080127cb
 8012758:	080127cb 	.word	0x080127cb
 801275c:	080127cb 	.word	0x080127cb
 8012760:	080127cb 	.word	0x080127cb
 8012764:	080127bd 	.word	0x080127bd
 8012768:	2b40      	cmp	r3, #64	@ 0x40
 801276a:	d02a      	beq.n	80127c2 <UART_SetConfig+0x8aa>
 801276c:	e02d      	b.n	80127ca <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801276e:	f7fc fbd9 	bl	800ef24 <HAL_RCCEx_GetD3PCLK1Freq>
 8012772:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8012774:	e02f      	b.n	80127d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012776:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801277a:	4618      	mov	r0, r3
 801277c:	f7fc fbe8 	bl	800ef50 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8012780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012782:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012784:	e027      	b.n	80127d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012786:	f107 0318 	add.w	r3, r7, #24
 801278a:	4618      	mov	r0, r3
 801278c:	f7fc fd34 	bl	800f1f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8012790:	69fb      	ldr	r3, [r7, #28]
 8012792:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012794:	e01f      	b.n	80127d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012796:	4b21      	ldr	r3, [pc, #132]	@ (801281c <UART_SetConfig+0x904>)
 8012798:	681b      	ldr	r3, [r3, #0]
 801279a:	f003 0320 	and.w	r3, r3, #32
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d009      	beq.n	80127b6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80127a2:	4b1e      	ldr	r3, [pc, #120]	@ (801281c <UART_SetConfig+0x904>)
 80127a4:	681b      	ldr	r3, [r3, #0]
 80127a6:	08db      	lsrs	r3, r3, #3
 80127a8:	f003 0303 	and.w	r3, r3, #3
 80127ac:	4a1d      	ldr	r2, [pc, #116]	@ (8012824 <UART_SetConfig+0x90c>)
 80127ae:	fa22 f303 	lsr.w	r3, r2, r3
 80127b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80127b4:	e00f      	b.n	80127d6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80127b6:	4b1b      	ldr	r3, [pc, #108]	@ (8012824 <UART_SetConfig+0x90c>)
 80127b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80127ba:	e00c      	b.n	80127d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80127bc:	4b1a      	ldr	r3, [pc, #104]	@ (8012828 <UART_SetConfig+0x910>)
 80127be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80127c0:	e009      	b.n	80127d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80127c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80127c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80127c8:	e005      	b.n	80127d6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80127ca:	2300      	movs	r3, #0
 80127cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80127ce:	2301      	movs	r3, #1
 80127d0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80127d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80127d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80127d8:	2b00      	cmp	r3, #0
 80127da:	f000 81ee 	beq.w	8012bba <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80127de:	697b      	ldr	r3, [r7, #20]
 80127e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80127e2:	4a12      	ldr	r2, [pc, #72]	@ (801282c <UART_SetConfig+0x914>)
 80127e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80127e8:	461a      	mov	r2, r3
 80127ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80127ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80127f0:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80127f2:	697b      	ldr	r3, [r7, #20]
 80127f4:	685a      	ldr	r2, [r3, #4]
 80127f6:	4613      	mov	r3, r2
 80127f8:	005b      	lsls	r3, r3, #1
 80127fa:	4413      	add	r3, r2
 80127fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80127fe:	429a      	cmp	r2, r3
 8012800:	d305      	bcc.n	801280e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8012802:	697b      	ldr	r3, [r7, #20]
 8012804:	685b      	ldr	r3, [r3, #4]
 8012806:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8012808:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801280a:	429a      	cmp	r2, r3
 801280c:	d910      	bls.n	8012830 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 801280e:	2301      	movs	r3, #1
 8012810:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8012814:	e1d1      	b.n	8012bba <UART_SetConfig+0xca2>
 8012816:	bf00      	nop
 8012818:	40011c00 	.word	0x40011c00
 801281c:	58024400 	.word	0x58024400
 8012820:	58000c00 	.word	0x58000c00
 8012824:	03d09000 	.word	0x03d09000
 8012828:	003d0900 	.word	0x003d0900
 801282c:	0801f9ac 	.word	0x0801f9ac
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012830:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012832:	2200      	movs	r2, #0
 8012834:	60bb      	str	r3, [r7, #8]
 8012836:	60fa      	str	r2, [r7, #12]
 8012838:	697b      	ldr	r3, [r7, #20]
 801283a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801283c:	4ac0      	ldr	r2, [pc, #768]	@ (8012b40 <UART_SetConfig+0xc28>)
 801283e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012842:	b29b      	uxth	r3, r3
 8012844:	2200      	movs	r2, #0
 8012846:	603b      	str	r3, [r7, #0]
 8012848:	607a      	str	r2, [r7, #4]
 801284a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801284e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8012852:	f7ed ffd1 	bl	80007f8 <__aeabi_uldivmod>
 8012856:	4602      	mov	r2, r0
 8012858:	460b      	mov	r3, r1
 801285a:	4610      	mov	r0, r2
 801285c:	4619      	mov	r1, r3
 801285e:	f04f 0200 	mov.w	r2, #0
 8012862:	f04f 0300 	mov.w	r3, #0
 8012866:	020b      	lsls	r3, r1, #8
 8012868:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801286c:	0202      	lsls	r2, r0, #8
 801286e:	6979      	ldr	r1, [r7, #20]
 8012870:	6849      	ldr	r1, [r1, #4]
 8012872:	0849      	lsrs	r1, r1, #1
 8012874:	2000      	movs	r0, #0
 8012876:	460c      	mov	r4, r1
 8012878:	4605      	mov	r5, r0
 801287a:	eb12 0804 	adds.w	r8, r2, r4
 801287e:	eb43 0905 	adc.w	r9, r3, r5
 8012882:	697b      	ldr	r3, [r7, #20]
 8012884:	685b      	ldr	r3, [r3, #4]
 8012886:	2200      	movs	r2, #0
 8012888:	469a      	mov	sl, r3
 801288a:	4693      	mov	fp, r2
 801288c:	4652      	mov	r2, sl
 801288e:	465b      	mov	r3, fp
 8012890:	4640      	mov	r0, r8
 8012892:	4649      	mov	r1, r9
 8012894:	f7ed ffb0 	bl	80007f8 <__aeabi_uldivmod>
 8012898:	4602      	mov	r2, r0
 801289a:	460b      	mov	r3, r1
 801289c:	4613      	mov	r3, r2
 801289e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80128a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80128a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80128a6:	d308      	bcc.n	80128ba <UART_SetConfig+0x9a2>
 80128a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80128aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80128ae:	d204      	bcs.n	80128ba <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80128b0:	697b      	ldr	r3, [r7, #20]
 80128b2:	681b      	ldr	r3, [r3, #0]
 80128b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80128b6:	60da      	str	r2, [r3, #12]
 80128b8:	e17f      	b.n	8012bba <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80128ba:	2301      	movs	r3, #1
 80128bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80128c0:	e17b      	b.n	8012bba <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80128c2:	697b      	ldr	r3, [r7, #20]
 80128c4:	69db      	ldr	r3, [r3, #28]
 80128c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80128ca:	f040 80bd 	bne.w	8012a48 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80128ce:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80128d2:	2b20      	cmp	r3, #32
 80128d4:	dc48      	bgt.n	8012968 <UART_SetConfig+0xa50>
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	db7b      	blt.n	80129d2 <UART_SetConfig+0xaba>
 80128da:	2b20      	cmp	r3, #32
 80128dc:	d879      	bhi.n	80129d2 <UART_SetConfig+0xaba>
 80128de:	a201      	add	r2, pc, #4	@ (adr r2, 80128e4 <UART_SetConfig+0x9cc>)
 80128e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80128e4:	0801296f 	.word	0x0801296f
 80128e8:	08012977 	.word	0x08012977
 80128ec:	080129d3 	.word	0x080129d3
 80128f0:	080129d3 	.word	0x080129d3
 80128f4:	0801297f 	.word	0x0801297f
 80128f8:	080129d3 	.word	0x080129d3
 80128fc:	080129d3 	.word	0x080129d3
 8012900:	080129d3 	.word	0x080129d3
 8012904:	0801298f 	.word	0x0801298f
 8012908:	080129d3 	.word	0x080129d3
 801290c:	080129d3 	.word	0x080129d3
 8012910:	080129d3 	.word	0x080129d3
 8012914:	080129d3 	.word	0x080129d3
 8012918:	080129d3 	.word	0x080129d3
 801291c:	080129d3 	.word	0x080129d3
 8012920:	080129d3 	.word	0x080129d3
 8012924:	0801299f 	.word	0x0801299f
 8012928:	080129d3 	.word	0x080129d3
 801292c:	080129d3 	.word	0x080129d3
 8012930:	080129d3 	.word	0x080129d3
 8012934:	080129d3 	.word	0x080129d3
 8012938:	080129d3 	.word	0x080129d3
 801293c:	080129d3 	.word	0x080129d3
 8012940:	080129d3 	.word	0x080129d3
 8012944:	080129d3 	.word	0x080129d3
 8012948:	080129d3 	.word	0x080129d3
 801294c:	080129d3 	.word	0x080129d3
 8012950:	080129d3 	.word	0x080129d3
 8012954:	080129d3 	.word	0x080129d3
 8012958:	080129d3 	.word	0x080129d3
 801295c:	080129d3 	.word	0x080129d3
 8012960:	080129d3 	.word	0x080129d3
 8012964:	080129c5 	.word	0x080129c5
 8012968:	2b40      	cmp	r3, #64	@ 0x40
 801296a:	d02e      	beq.n	80129ca <UART_SetConfig+0xab2>
 801296c:	e031      	b.n	80129d2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801296e:	f7fb f8cb 	bl	800db08 <HAL_RCC_GetPCLK1Freq>
 8012972:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8012974:	e033      	b.n	80129de <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012976:	f7fb f8dd 	bl	800db34 <HAL_RCC_GetPCLK2Freq>
 801297a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801297c:	e02f      	b.n	80129de <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801297e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012982:	4618      	mov	r0, r3
 8012984:	f7fc fae4 	bl	800ef50 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8012988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801298a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801298c:	e027      	b.n	80129de <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801298e:	f107 0318 	add.w	r3, r7, #24
 8012992:	4618      	mov	r0, r3
 8012994:	f7fc fc30 	bl	800f1f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8012998:	69fb      	ldr	r3, [r7, #28]
 801299a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801299c:	e01f      	b.n	80129de <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801299e:	4b69      	ldr	r3, [pc, #420]	@ (8012b44 <UART_SetConfig+0xc2c>)
 80129a0:	681b      	ldr	r3, [r3, #0]
 80129a2:	f003 0320 	and.w	r3, r3, #32
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d009      	beq.n	80129be <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80129aa:	4b66      	ldr	r3, [pc, #408]	@ (8012b44 <UART_SetConfig+0xc2c>)
 80129ac:	681b      	ldr	r3, [r3, #0]
 80129ae:	08db      	lsrs	r3, r3, #3
 80129b0:	f003 0303 	and.w	r3, r3, #3
 80129b4:	4a64      	ldr	r2, [pc, #400]	@ (8012b48 <UART_SetConfig+0xc30>)
 80129b6:	fa22 f303 	lsr.w	r3, r2, r3
 80129ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80129bc:	e00f      	b.n	80129de <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80129be:	4b62      	ldr	r3, [pc, #392]	@ (8012b48 <UART_SetConfig+0xc30>)
 80129c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80129c2:	e00c      	b.n	80129de <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80129c4:	4b61      	ldr	r3, [pc, #388]	@ (8012b4c <UART_SetConfig+0xc34>)
 80129c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80129c8:	e009      	b.n	80129de <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80129ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80129ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80129d0:	e005      	b.n	80129de <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80129d2:	2300      	movs	r3, #0
 80129d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80129d6:	2301      	movs	r3, #1
 80129d8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80129dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80129de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	f000 80ea 	beq.w	8012bba <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80129e6:	697b      	ldr	r3, [r7, #20]
 80129e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80129ea:	4a55      	ldr	r2, [pc, #340]	@ (8012b40 <UART_SetConfig+0xc28>)
 80129ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80129f0:	461a      	mov	r2, r3
 80129f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80129f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80129f8:	005a      	lsls	r2, r3, #1
 80129fa:	697b      	ldr	r3, [r7, #20]
 80129fc:	685b      	ldr	r3, [r3, #4]
 80129fe:	085b      	lsrs	r3, r3, #1
 8012a00:	441a      	add	r2, r3
 8012a02:	697b      	ldr	r3, [r7, #20]
 8012a04:	685b      	ldr	r3, [r3, #4]
 8012a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8012a0a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012a0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a0e:	2b0f      	cmp	r3, #15
 8012a10:	d916      	bls.n	8012a40 <UART_SetConfig+0xb28>
 8012a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012a18:	d212      	bcs.n	8012a40 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8012a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a1c:	b29b      	uxth	r3, r3
 8012a1e:	f023 030f 	bic.w	r3, r3, #15
 8012a22:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8012a24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a26:	085b      	lsrs	r3, r3, #1
 8012a28:	b29b      	uxth	r3, r3
 8012a2a:	f003 0307 	and.w	r3, r3, #7
 8012a2e:	b29a      	uxth	r2, r3
 8012a30:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8012a32:	4313      	orrs	r3, r2
 8012a34:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8012a36:	697b      	ldr	r3, [r7, #20]
 8012a38:	681b      	ldr	r3, [r3, #0]
 8012a3a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8012a3c:	60da      	str	r2, [r3, #12]
 8012a3e:	e0bc      	b.n	8012bba <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8012a40:	2301      	movs	r3, #1
 8012a42:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8012a46:	e0b8      	b.n	8012bba <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8012a48:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8012a4c:	2b20      	cmp	r3, #32
 8012a4e:	dc4b      	bgt.n	8012ae8 <UART_SetConfig+0xbd0>
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	f2c0 8087 	blt.w	8012b64 <UART_SetConfig+0xc4c>
 8012a56:	2b20      	cmp	r3, #32
 8012a58:	f200 8084 	bhi.w	8012b64 <UART_SetConfig+0xc4c>
 8012a5c:	a201      	add	r2, pc, #4	@ (adr r2, 8012a64 <UART_SetConfig+0xb4c>)
 8012a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a62:	bf00      	nop
 8012a64:	08012aef 	.word	0x08012aef
 8012a68:	08012af7 	.word	0x08012af7
 8012a6c:	08012b65 	.word	0x08012b65
 8012a70:	08012b65 	.word	0x08012b65
 8012a74:	08012aff 	.word	0x08012aff
 8012a78:	08012b65 	.word	0x08012b65
 8012a7c:	08012b65 	.word	0x08012b65
 8012a80:	08012b65 	.word	0x08012b65
 8012a84:	08012b0f 	.word	0x08012b0f
 8012a88:	08012b65 	.word	0x08012b65
 8012a8c:	08012b65 	.word	0x08012b65
 8012a90:	08012b65 	.word	0x08012b65
 8012a94:	08012b65 	.word	0x08012b65
 8012a98:	08012b65 	.word	0x08012b65
 8012a9c:	08012b65 	.word	0x08012b65
 8012aa0:	08012b65 	.word	0x08012b65
 8012aa4:	08012b1f 	.word	0x08012b1f
 8012aa8:	08012b65 	.word	0x08012b65
 8012aac:	08012b65 	.word	0x08012b65
 8012ab0:	08012b65 	.word	0x08012b65
 8012ab4:	08012b65 	.word	0x08012b65
 8012ab8:	08012b65 	.word	0x08012b65
 8012abc:	08012b65 	.word	0x08012b65
 8012ac0:	08012b65 	.word	0x08012b65
 8012ac4:	08012b65 	.word	0x08012b65
 8012ac8:	08012b65 	.word	0x08012b65
 8012acc:	08012b65 	.word	0x08012b65
 8012ad0:	08012b65 	.word	0x08012b65
 8012ad4:	08012b65 	.word	0x08012b65
 8012ad8:	08012b65 	.word	0x08012b65
 8012adc:	08012b65 	.word	0x08012b65
 8012ae0:	08012b65 	.word	0x08012b65
 8012ae4:	08012b57 	.word	0x08012b57
 8012ae8:	2b40      	cmp	r3, #64	@ 0x40
 8012aea:	d037      	beq.n	8012b5c <UART_SetConfig+0xc44>
 8012aec:	e03a      	b.n	8012b64 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8012aee:	f7fb f80b 	bl	800db08 <HAL_RCC_GetPCLK1Freq>
 8012af2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8012af4:	e03c      	b.n	8012b70 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012af6:	f7fb f81d 	bl	800db34 <HAL_RCC_GetPCLK2Freq>
 8012afa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8012afc:	e038      	b.n	8012b70 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012afe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012b02:	4618      	mov	r0, r3
 8012b04:	f7fc fa24 	bl	800ef50 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8012b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012b0c:	e030      	b.n	8012b70 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012b0e:	f107 0318 	add.w	r3, r7, #24
 8012b12:	4618      	mov	r0, r3
 8012b14:	f7fc fb70 	bl	800f1f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8012b18:	69fb      	ldr	r3, [r7, #28]
 8012b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012b1c:	e028      	b.n	8012b70 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012b1e:	4b09      	ldr	r3, [pc, #36]	@ (8012b44 <UART_SetConfig+0xc2c>)
 8012b20:	681b      	ldr	r3, [r3, #0]
 8012b22:	f003 0320 	and.w	r3, r3, #32
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d012      	beq.n	8012b50 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8012b2a:	4b06      	ldr	r3, [pc, #24]	@ (8012b44 <UART_SetConfig+0xc2c>)
 8012b2c:	681b      	ldr	r3, [r3, #0]
 8012b2e:	08db      	lsrs	r3, r3, #3
 8012b30:	f003 0303 	and.w	r3, r3, #3
 8012b34:	4a04      	ldr	r2, [pc, #16]	@ (8012b48 <UART_SetConfig+0xc30>)
 8012b36:	fa22 f303 	lsr.w	r3, r2, r3
 8012b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012b3c:	e018      	b.n	8012b70 <UART_SetConfig+0xc58>
 8012b3e:	bf00      	nop
 8012b40:	0801f9ac 	.word	0x0801f9ac
 8012b44:	58024400 	.word	0x58024400
 8012b48:	03d09000 	.word	0x03d09000
 8012b4c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8012b50:	4b24      	ldr	r3, [pc, #144]	@ (8012be4 <UART_SetConfig+0xccc>)
 8012b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012b54:	e00c      	b.n	8012b70 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8012b56:	4b24      	ldr	r3, [pc, #144]	@ (8012be8 <UART_SetConfig+0xcd0>)
 8012b58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012b5a:	e009      	b.n	8012b70 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012b5c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8012b60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012b62:	e005      	b.n	8012b70 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8012b64:	2300      	movs	r3, #0
 8012b66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8012b68:	2301      	movs	r3, #1
 8012b6a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8012b6e:	bf00      	nop
    }

    if (pclk != 0U)
 8012b70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d021      	beq.n	8012bba <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012b76:	697b      	ldr	r3, [r7, #20]
 8012b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012b7a:	4a1c      	ldr	r2, [pc, #112]	@ (8012bec <UART_SetConfig+0xcd4>)
 8012b7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012b80:	461a      	mov	r2, r3
 8012b82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012b84:	fbb3 f2f2 	udiv	r2, r3, r2
 8012b88:	697b      	ldr	r3, [r7, #20]
 8012b8a:	685b      	ldr	r3, [r3, #4]
 8012b8c:	085b      	lsrs	r3, r3, #1
 8012b8e:	441a      	add	r2, r3
 8012b90:	697b      	ldr	r3, [r7, #20]
 8012b92:	685b      	ldr	r3, [r3, #4]
 8012b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8012b98:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b9c:	2b0f      	cmp	r3, #15
 8012b9e:	d909      	bls.n	8012bb4 <UART_SetConfig+0xc9c>
 8012ba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ba2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012ba6:	d205      	bcs.n	8012bb4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8012ba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012baa:	b29a      	uxth	r2, r3
 8012bac:	697b      	ldr	r3, [r7, #20]
 8012bae:	681b      	ldr	r3, [r3, #0]
 8012bb0:	60da      	str	r2, [r3, #12]
 8012bb2:	e002      	b.n	8012bba <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8012bb4:	2301      	movs	r3, #1
 8012bb6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8012bba:	697b      	ldr	r3, [r7, #20]
 8012bbc:	2201      	movs	r2, #1
 8012bbe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8012bc2:	697b      	ldr	r3, [r7, #20]
 8012bc4:	2201      	movs	r2, #1
 8012bc6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8012bca:	697b      	ldr	r3, [r7, #20]
 8012bcc:	2200      	movs	r2, #0
 8012bce:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8012bd0:	697b      	ldr	r3, [r7, #20]
 8012bd2:	2200      	movs	r2, #0
 8012bd4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8012bd6:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8012bda:	4618      	mov	r0, r3
 8012bdc:	3748      	adds	r7, #72	@ 0x48
 8012bde:	46bd      	mov	sp, r7
 8012be0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8012be4:	03d09000 	.word	0x03d09000
 8012be8:	003d0900 	.word	0x003d0900
 8012bec:	0801f9ac 	.word	0x0801f9ac

08012bf0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8012bf0:	b480      	push	{r7}
 8012bf2:	b083      	sub	sp, #12
 8012bf4:	af00      	add	r7, sp, #0
 8012bf6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012bfc:	f003 0308 	and.w	r3, r3, #8
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d00a      	beq.n	8012c1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	681b      	ldr	r3, [r3, #0]
 8012c08:	685b      	ldr	r3, [r3, #4]
 8012c0a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	430a      	orrs	r2, r1
 8012c18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012c1e:	f003 0301 	and.w	r3, r3, #1
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d00a      	beq.n	8012c3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	681b      	ldr	r3, [r3, #0]
 8012c2a:	685b      	ldr	r3, [r3, #4]
 8012c2c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	681b      	ldr	r3, [r3, #0]
 8012c38:	430a      	orrs	r2, r1
 8012c3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012c40:	f003 0302 	and.w	r3, r3, #2
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d00a      	beq.n	8012c5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	681b      	ldr	r3, [r3, #0]
 8012c4c:	685b      	ldr	r3, [r3, #4]
 8012c4e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	430a      	orrs	r2, r1
 8012c5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012c62:	f003 0304 	and.w	r3, r3, #4
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d00a      	beq.n	8012c80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	681b      	ldr	r3, [r3, #0]
 8012c6e:	685b      	ldr	r3, [r3, #4]
 8012c70:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	681b      	ldr	r3, [r3, #0]
 8012c7c:	430a      	orrs	r2, r1
 8012c7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012c84:	f003 0310 	and.w	r3, r3, #16
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d00a      	beq.n	8012ca2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	681b      	ldr	r3, [r3, #0]
 8012c90:	689b      	ldr	r3, [r3, #8]
 8012c92:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	681b      	ldr	r3, [r3, #0]
 8012c9e:	430a      	orrs	r2, r1
 8012ca0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012ca6:	f003 0320 	and.w	r3, r3, #32
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d00a      	beq.n	8012cc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	681b      	ldr	r3, [r3, #0]
 8012cb2:	689b      	ldr	r3, [r3, #8]
 8012cb4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	681b      	ldr	r3, [r3, #0]
 8012cc0:	430a      	orrs	r2, r1
 8012cc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012cc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d01a      	beq.n	8012d06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	681b      	ldr	r3, [r3, #0]
 8012cd4:	685b      	ldr	r3, [r3, #4]
 8012cd6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	681b      	ldr	r3, [r3, #0]
 8012ce2:	430a      	orrs	r2, r1
 8012ce4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012cea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012cee:	d10a      	bne.n	8012d06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	681b      	ldr	r3, [r3, #0]
 8012cf4:	685b      	ldr	r3, [r3, #4]
 8012cf6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	681b      	ldr	r3, [r3, #0]
 8012d02:	430a      	orrs	r2, r1
 8012d04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012d0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	d00a      	beq.n	8012d28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	681b      	ldr	r3, [r3, #0]
 8012d16:	685b      	ldr	r3, [r3, #4]
 8012d18:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	681b      	ldr	r3, [r3, #0]
 8012d24:	430a      	orrs	r2, r1
 8012d26:	605a      	str	r2, [r3, #4]
  }
}
 8012d28:	bf00      	nop
 8012d2a:	370c      	adds	r7, #12
 8012d2c:	46bd      	mov	sp, r7
 8012d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d32:	4770      	bx	lr

08012d34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8012d34:	b580      	push	{r7, lr}
 8012d36:	b098      	sub	sp, #96	@ 0x60
 8012d38:	af02      	add	r7, sp, #8
 8012d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	2200      	movs	r2, #0
 8012d40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8012d44:	f7f3 ff30 	bl	8006ba8 <HAL_GetTick>
 8012d48:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	681b      	ldr	r3, [r3, #0]
 8012d4e:	681b      	ldr	r3, [r3, #0]
 8012d50:	f003 0308 	and.w	r3, r3, #8
 8012d54:	2b08      	cmp	r3, #8
 8012d56:	d12f      	bne.n	8012db8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012d58:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8012d5c:	9300      	str	r3, [sp, #0]
 8012d5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012d60:	2200      	movs	r2, #0
 8012d62:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8012d66:	6878      	ldr	r0, [r7, #4]
 8012d68:	f000 f88e 	bl	8012e88 <UART_WaitOnFlagUntilTimeout>
 8012d6c:	4603      	mov	r3, r0
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	d022      	beq.n	8012db8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	681b      	ldr	r3, [r3, #0]
 8012d76:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012d7a:	e853 3f00 	ldrex	r3, [r3]
 8012d7e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8012d80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012d82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8012d86:	653b      	str	r3, [r7, #80]	@ 0x50
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	681b      	ldr	r3, [r3, #0]
 8012d8c:	461a      	mov	r2, r3
 8012d8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012d90:	647b      	str	r3, [r7, #68]	@ 0x44
 8012d92:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012d94:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8012d96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012d98:	e841 2300 	strex	r3, r2, [r1]
 8012d9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8012d9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	d1e6      	bne.n	8012d72 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	2220      	movs	r2, #32
 8012da8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	2200      	movs	r2, #0
 8012db0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012db4:	2303      	movs	r3, #3
 8012db6:	e063      	b.n	8012e80 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	681b      	ldr	r3, [r3, #0]
 8012dbc:	681b      	ldr	r3, [r3, #0]
 8012dbe:	f003 0304 	and.w	r3, r3, #4
 8012dc2:	2b04      	cmp	r3, #4
 8012dc4:	d149      	bne.n	8012e5a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012dc6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8012dca:	9300      	str	r3, [sp, #0]
 8012dcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012dce:	2200      	movs	r2, #0
 8012dd0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8012dd4:	6878      	ldr	r0, [r7, #4]
 8012dd6:	f000 f857 	bl	8012e88 <UART_WaitOnFlagUntilTimeout>
 8012dda:	4603      	mov	r3, r0
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d03c      	beq.n	8012e5a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012de8:	e853 3f00 	ldrex	r3, [r3]
 8012dec:	623b      	str	r3, [r7, #32]
   return(result);
 8012dee:	6a3b      	ldr	r3, [r7, #32]
 8012df0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8012df4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	681b      	ldr	r3, [r3, #0]
 8012dfa:	461a      	mov	r2, r3
 8012dfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012dfe:	633b      	str	r3, [r7, #48]	@ 0x30
 8012e00:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012e02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012e04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012e06:	e841 2300 	strex	r3, r2, [r1]
 8012e0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8012e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d1e6      	bne.n	8012de0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	681b      	ldr	r3, [r3, #0]
 8012e16:	3308      	adds	r3, #8
 8012e18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012e1a:	693b      	ldr	r3, [r7, #16]
 8012e1c:	e853 3f00 	ldrex	r3, [r3]
 8012e20:	60fb      	str	r3, [r7, #12]
   return(result);
 8012e22:	68fb      	ldr	r3, [r7, #12]
 8012e24:	f023 0301 	bic.w	r3, r3, #1
 8012e28:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	681b      	ldr	r3, [r3, #0]
 8012e2e:	3308      	adds	r3, #8
 8012e30:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012e32:	61fa      	str	r2, [r7, #28]
 8012e34:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012e36:	69b9      	ldr	r1, [r7, #24]
 8012e38:	69fa      	ldr	r2, [r7, #28]
 8012e3a:	e841 2300 	strex	r3, r2, [r1]
 8012e3e:	617b      	str	r3, [r7, #20]
   return(result);
 8012e40:	697b      	ldr	r3, [r7, #20]
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d1e5      	bne.n	8012e12 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	2220      	movs	r2, #32
 8012e4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	2200      	movs	r2, #0
 8012e52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012e56:	2303      	movs	r3, #3
 8012e58:	e012      	b.n	8012e80 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	2220      	movs	r2, #32
 8012e5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	2220      	movs	r2, #32
 8012e66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	2200      	movs	r2, #0
 8012e6e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	2200      	movs	r2, #0
 8012e74:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	2200      	movs	r2, #0
 8012e7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8012e7e:	2300      	movs	r3, #0
}
 8012e80:	4618      	mov	r0, r3
 8012e82:	3758      	adds	r7, #88	@ 0x58
 8012e84:	46bd      	mov	sp, r7
 8012e86:	bd80      	pop	{r7, pc}

08012e88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8012e88:	b580      	push	{r7, lr}
 8012e8a:	b084      	sub	sp, #16
 8012e8c:	af00      	add	r7, sp, #0
 8012e8e:	60f8      	str	r0, [r7, #12]
 8012e90:	60b9      	str	r1, [r7, #8]
 8012e92:	603b      	str	r3, [r7, #0]
 8012e94:	4613      	mov	r3, r2
 8012e96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012e98:	e04f      	b.n	8012f3a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012e9a:	69bb      	ldr	r3, [r7, #24]
 8012e9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012ea0:	d04b      	beq.n	8012f3a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012ea2:	f7f3 fe81 	bl	8006ba8 <HAL_GetTick>
 8012ea6:	4602      	mov	r2, r0
 8012ea8:	683b      	ldr	r3, [r7, #0]
 8012eaa:	1ad3      	subs	r3, r2, r3
 8012eac:	69ba      	ldr	r2, [r7, #24]
 8012eae:	429a      	cmp	r2, r3
 8012eb0:	d302      	bcc.n	8012eb8 <UART_WaitOnFlagUntilTimeout+0x30>
 8012eb2:	69bb      	ldr	r3, [r7, #24]
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	d101      	bne.n	8012ebc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8012eb8:	2303      	movs	r3, #3
 8012eba:	e04e      	b.n	8012f5a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8012ebc:	68fb      	ldr	r3, [r7, #12]
 8012ebe:	681b      	ldr	r3, [r3, #0]
 8012ec0:	681b      	ldr	r3, [r3, #0]
 8012ec2:	f003 0304 	and.w	r3, r3, #4
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d037      	beq.n	8012f3a <UART_WaitOnFlagUntilTimeout+0xb2>
 8012eca:	68bb      	ldr	r3, [r7, #8]
 8012ecc:	2b80      	cmp	r3, #128	@ 0x80
 8012ece:	d034      	beq.n	8012f3a <UART_WaitOnFlagUntilTimeout+0xb2>
 8012ed0:	68bb      	ldr	r3, [r7, #8]
 8012ed2:	2b40      	cmp	r3, #64	@ 0x40
 8012ed4:	d031      	beq.n	8012f3a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8012ed6:	68fb      	ldr	r3, [r7, #12]
 8012ed8:	681b      	ldr	r3, [r3, #0]
 8012eda:	69db      	ldr	r3, [r3, #28]
 8012edc:	f003 0308 	and.w	r3, r3, #8
 8012ee0:	2b08      	cmp	r3, #8
 8012ee2:	d110      	bne.n	8012f06 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8012ee4:	68fb      	ldr	r3, [r7, #12]
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	2208      	movs	r2, #8
 8012eea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8012eec:	68f8      	ldr	r0, [r7, #12]
 8012eee:	f000 f95b 	bl	80131a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8012ef2:	68fb      	ldr	r3, [r7, #12]
 8012ef4:	2208      	movs	r2, #8
 8012ef6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012efa:	68fb      	ldr	r3, [r7, #12]
 8012efc:	2200      	movs	r2, #0
 8012efe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8012f02:	2301      	movs	r3, #1
 8012f04:	e029      	b.n	8012f5a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8012f06:	68fb      	ldr	r3, [r7, #12]
 8012f08:	681b      	ldr	r3, [r3, #0]
 8012f0a:	69db      	ldr	r3, [r3, #28]
 8012f0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8012f10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012f14:	d111      	bne.n	8012f3a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012f16:	68fb      	ldr	r3, [r7, #12]
 8012f18:	681b      	ldr	r3, [r3, #0]
 8012f1a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8012f1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8012f20:	68f8      	ldr	r0, [r7, #12]
 8012f22:	f000 f941 	bl	80131a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8012f26:	68fb      	ldr	r3, [r7, #12]
 8012f28:	2220      	movs	r2, #32
 8012f2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012f2e:	68fb      	ldr	r3, [r7, #12]
 8012f30:	2200      	movs	r2, #0
 8012f32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8012f36:	2303      	movs	r3, #3
 8012f38:	e00f      	b.n	8012f5a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012f3a:	68fb      	ldr	r3, [r7, #12]
 8012f3c:	681b      	ldr	r3, [r3, #0]
 8012f3e:	69da      	ldr	r2, [r3, #28]
 8012f40:	68bb      	ldr	r3, [r7, #8]
 8012f42:	4013      	ands	r3, r2
 8012f44:	68ba      	ldr	r2, [r7, #8]
 8012f46:	429a      	cmp	r2, r3
 8012f48:	bf0c      	ite	eq
 8012f4a:	2301      	moveq	r3, #1
 8012f4c:	2300      	movne	r3, #0
 8012f4e:	b2db      	uxtb	r3, r3
 8012f50:	461a      	mov	r2, r3
 8012f52:	79fb      	ldrb	r3, [r7, #7]
 8012f54:	429a      	cmp	r2, r3
 8012f56:	d0a0      	beq.n	8012e9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012f58:	2300      	movs	r3, #0
}
 8012f5a:	4618      	mov	r0, r3
 8012f5c:	3710      	adds	r7, #16
 8012f5e:	46bd      	mov	sp, r7
 8012f60:	bd80      	pop	{r7, pc}
	...

08012f64 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012f64:	b480      	push	{r7}
 8012f66:	b0a3      	sub	sp, #140	@ 0x8c
 8012f68:	af00      	add	r7, sp, #0
 8012f6a:	60f8      	str	r0, [r7, #12]
 8012f6c:	60b9      	str	r1, [r7, #8]
 8012f6e:	4613      	mov	r3, r2
 8012f70:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8012f72:	68fb      	ldr	r3, [r7, #12]
 8012f74:	68ba      	ldr	r2, [r7, #8]
 8012f76:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8012f78:	68fb      	ldr	r3, [r7, #12]
 8012f7a:	88fa      	ldrh	r2, [r7, #6]
 8012f7c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8012f80:	68fb      	ldr	r3, [r7, #12]
 8012f82:	88fa      	ldrh	r2, [r7, #6]
 8012f84:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8012f88:	68fb      	ldr	r3, [r7, #12]
 8012f8a:	2200      	movs	r2, #0
 8012f8c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8012f8e:	68fb      	ldr	r3, [r7, #12]
 8012f90:	689b      	ldr	r3, [r3, #8]
 8012f92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012f96:	d10e      	bne.n	8012fb6 <UART_Start_Receive_IT+0x52>
 8012f98:	68fb      	ldr	r3, [r7, #12]
 8012f9a:	691b      	ldr	r3, [r3, #16]
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	d105      	bne.n	8012fac <UART_Start_Receive_IT+0x48>
 8012fa0:	68fb      	ldr	r3, [r7, #12]
 8012fa2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8012fa6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8012faa:	e02d      	b.n	8013008 <UART_Start_Receive_IT+0xa4>
 8012fac:	68fb      	ldr	r3, [r7, #12]
 8012fae:	22ff      	movs	r2, #255	@ 0xff
 8012fb0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8012fb4:	e028      	b.n	8013008 <UART_Start_Receive_IT+0xa4>
 8012fb6:	68fb      	ldr	r3, [r7, #12]
 8012fb8:	689b      	ldr	r3, [r3, #8]
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	d10d      	bne.n	8012fda <UART_Start_Receive_IT+0x76>
 8012fbe:	68fb      	ldr	r3, [r7, #12]
 8012fc0:	691b      	ldr	r3, [r3, #16]
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d104      	bne.n	8012fd0 <UART_Start_Receive_IT+0x6c>
 8012fc6:	68fb      	ldr	r3, [r7, #12]
 8012fc8:	22ff      	movs	r2, #255	@ 0xff
 8012fca:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8012fce:	e01b      	b.n	8013008 <UART_Start_Receive_IT+0xa4>
 8012fd0:	68fb      	ldr	r3, [r7, #12]
 8012fd2:	227f      	movs	r2, #127	@ 0x7f
 8012fd4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8012fd8:	e016      	b.n	8013008 <UART_Start_Receive_IT+0xa4>
 8012fda:	68fb      	ldr	r3, [r7, #12]
 8012fdc:	689b      	ldr	r3, [r3, #8]
 8012fde:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012fe2:	d10d      	bne.n	8013000 <UART_Start_Receive_IT+0x9c>
 8012fe4:	68fb      	ldr	r3, [r7, #12]
 8012fe6:	691b      	ldr	r3, [r3, #16]
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d104      	bne.n	8012ff6 <UART_Start_Receive_IT+0x92>
 8012fec:	68fb      	ldr	r3, [r7, #12]
 8012fee:	227f      	movs	r2, #127	@ 0x7f
 8012ff0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8012ff4:	e008      	b.n	8013008 <UART_Start_Receive_IT+0xa4>
 8012ff6:	68fb      	ldr	r3, [r7, #12]
 8012ff8:	223f      	movs	r2, #63	@ 0x3f
 8012ffa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8012ffe:	e003      	b.n	8013008 <UART_Start_Receive_IT+0xa4>
 8013000:	68fb      	ldr	r3, [r7, #12]
 8013002:	2200      	movs	r2, #0
 8013004:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013008:	68fb      	ldr	r3, [r7, #12]
 801300a:	2200      	movs	r2, #0
 801300c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8013010:	68fb      	ldr	r3, [r7, #12]
 8013012:	2222      	movs	r2, #34	@ 0x22
 8013014:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013018:	68fb      	ldr	r3, [r7, #12]
 801301a:	681b      	ldr	r3, [r3, #0]
 801301c:	3308      	adds	r3, #8
 801301e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013020:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013022:	e853 3f00 	ldrex	r3, [r3]
 8013026:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8013028:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801302a:	f043 0301 	orr.w	r3, r3, #1
 801302e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8013032:	68fb      	ldr	r3, [r7, #12]
 8013034:	681b      	ldr	r3, [r3, #0]
 8013036:	3308      	adds	r3, #8
 8013038:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801303c:	673a      	str	r2, [r7, #112]	@ 0x70
 801303e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013040:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8013042:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8013044:	e841 2300 	strex	r3, r2, [r1]
 8013048:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 801304a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801304c:	2b00      	cmp	r3, #0
 801304e:	d1e3      	bne.n	8013018 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8013050:	68fb      	ldr	r3, [r7, #12]
 8013052:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8013054:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013058:	d14f      	bne.n	80130fa <UART_Start_Receive_IT+0x196>
 801305a:	68fb      	ldr	r3, [r7, #12]
 801305c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8013060:	88fa      	ldrh	r2, [r7, #6]
 8013062:	429a      	cmp	r2, r3
 8013064:	d349      	bcc.n	80130fa <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013066:	68fb      	ldr	r3, [r7, #12]
 8013068:	689b      	ldr	r3, [r3, #8]
 801306a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801306e:	d107      	bne.n	8013080 <UART_Start_Receive_IT+0x11c>
 8013070:	68fb      	ldr	r3, [r7, #12]
 8013072:	691b      	ldr	r3, [r3, #16]
 8013074:	2b00      	cmp	r3, #0
 8013076:	d103      	bne.n	8013080 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8013078:	68fb      	ldr	r3, [r7, #12]
 801307a:	4a47      	ldr	r2, [pc, #284]	@ (8013198 <UART_Start_Receive_IT+0x234>)
 801307c:	675a      	str	r2, [r3, #116]	@ 0x74
 801307e:	e002      	b.n	8013086 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8013080:	68fb      	ldr	r3, [r7, #12]
 8013082:	4a46      	ldr	r2, [pc, #280]	@ (801319c <UART_Start_Receive_IT+0x238>)
 8013084:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8013086:	68fb      	ldr	r3, [r7, #12]
 8013088:	691b      	ldr	r3, [r3, #16]
 801308a:	2b00      	cmp	r3, #0
 801308c:	d01a      	beq.n	80130c4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801308e:	68fb      	ldr	r3, [r7, #12]
 8013090:	681b      	ldr	r3, [r3, #0]
 8013092:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013094:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013096:	e853 3f00 	ldrex	r3, [r3]
 801309a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 801309c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801309e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80130a2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80130a6:	68fb      	ldr	r3, [r7, #12]
 80130a8:	681b      	ldr	r3, [r3, #0]
 80130aa:	461a      	mov	r2, r3
 80130ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80130b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80130b2:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80130b4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80130b6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80130b8:	e841 2300 	strex	r3, r2, [r1]
 80130bc:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80130be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d1e4      	bne.n	801308e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80130c4:	68fb      	ldr	r3, [r7, #12]
 80130c6:	681b      	ldr	r3, [r3, #0]
 80130c8:	3308      	adds	r3, #8
 80130ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80130cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80130ce:	e853 3f00 	ldrex	r3, [r3]
 80130d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80130d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80130d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80130da:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80130dc:	68fb      	ldr	r3, [r7, #12]
 80130de:	681b      	ldr	r3, [r3, #0]
 80130e0:	3308      	adds	r3, #8
 80130e2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80130e4:	64ba      	str	r2, [r7, #72]	@ 0x48
 80130e6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80130e8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80130ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80130ec:	e841 2300 	strex	r3, r2, [r1]
 80130f0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80130f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d1e5      	bne.n	80130c4 <UART_Start_Receive_IT+0x160>
 80130f8:	e046      	b.n	8013188 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80130fa:	68fb      	ldr	r3, [r7, #12]
 80130fc:	689b      	ldr	r3, [r3, #8]
 80130fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013102:	d107      	bne.n	8013114 <UART_Start_Receive_IT+0x1b0>
 8013104:	68fb      	ldr	r3, [r7, #12]
 8013106:	691b      	ldr	r3, [r3, #16]
 8013108:	2b00      	cmp	r3, #0
 801310a:	d103      	bne.n	8013114 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 801310c:	68fb      	ldr	r3, [r7, #12]
 801310e:	4a24      	ldr	r2, [pc, #144]	@ (80131a0 <UART_Start_Receive_IT+0x23c>)
 8013110:	675a      	str	r2, [r3, #116]	@ 0x74
 8013112:	e002      	b.n	801311a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8013114:	68fb      	ldr	r3, [r7, #12]
 8013116:	4a23      	ldr	r2, [pc, #140]	@ (80131a4 <UART_Start_Receive_IT+0x240>)
 8013118:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801311a:	68fb      	ldr	r3, [r7, #12]
 801311c:	691b      	ldr	r3, [r3, #16]
 801311e:	2b00      	cmp	r3, #0
 8013120:	d019      	beq.n	8013156 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8013122:	68fb      	ldr	r3, [r7, #12]
 8013124:	681b      	ldr	r3, [r3, #0]
 8013126:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801312a:	e853 3f00 	ldrex	r3, [r3]
 801312e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8013130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013132:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8013136:	677b      	str	r3, [r7, #116]	@ 0x74
 8013138:	68fb      	ldr	r3, [r7, #12]
 801313a:	681b      	ldr	r3, [r3, #0]
 801313c:	461a      	mov	r2, r3
 801313e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8013140:	637b      	str	r3, [r7, #52]	@ 0x34
 8013142:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013144:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8013146:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013148:	e841 2300 	strex	r3, r2, [r1]
 801314c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 801314e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013150:	2b00      	cmp	r3, #0
 8013152:	d1e6      	bne.n	8013122 <UART_Start_Receive_IT+0x1be>
 8013154:	e018      	b.n	8013188 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8013156:	68fb      	ldr	r3, [r7, #12]
 8013158:	681b      	ldr	r3, [r3, #0]
 801315a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801315c:	697b      	ldr	r3, [r7, #20]
 801315e:	e853 3f00 	ldrex	r3, [r3]
 8013162:	613b      	str	r3, [r7, #16]
   return(result);
 8013164:	693b      	ldr	r3, [r7, #16]
 8013166:	f043 0320 	orr.w	r3, r3, #32
 801316a:	67bb      	str	r3, [r7, #120]	@ 0x78
 801316c:	68fb      	ldr	r3, [r7, #12]
 801316e:	681b      	ldr	r3, [r3, #0]
 8013170:	461a      	mov	r2, r3
 8013172:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013174:	623b      	str	r3, [r7, #32]
 8013176:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013178:	69f9      	ldr	r1, [r7, #28]
 801317a:	6a3a      	ldr	r2, [r7, #32]
 801317c:	e841 2300 	strex	r3, r2, [r1]
 8013180:	61bb      	str	r3, [r7, #24]
   return(result);
 8013182:	69bb      	ldr	r3, [r7, #24]
 8013184:	2b00      	cmp	r3, #0
 8013186:	d1e6      	bne.n	8013156 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8013188:	2300      	movs	r3, #0
}
 801318a:	4618      	mov	r0, r3
 801318c:	378c      	adds	r7, #140	@ 0x8c
 801318e:	46bd      	mov	sp, r7
 8013190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013194:	4770      	bx	lr
 8013196:	bf00      	nop
 8013198:	080139c5 	.word	0x080139c5
 801319c:	08013661 	.word	0x08013661
 80131a0:	080134a9 	.word	0x080134a9
 80131a4:	080132f1 	.word	0x080132f1

080131a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80131a8:	b480      	push	{r7}
 80131aa:	b095      	sub	sp, #84	@ 0x54
 80131ac:	af00      	add	r7, sp, #0
 80131ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	681b      	ldr	r3, [r3, #0]
 80131b4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80131b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80131b8:	e853 3f00 	ldrex	r3, [r3]
 80131bc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80131be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80131c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80131c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	681b      	ldr	r3, [r3, #0]
 80131ca:	461a      	mov	r2, r3
 80131cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80131ce:	643b      	str	r3, [r7, #64]	@ 0x40
 80131d0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80131d2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80131d4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80131d6:	e841 2300 	strex	r3, r2, [r1]
 80131da:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80131dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131de:	2b00      	cmp	r3, #0
 80131e0:	d1e6      	bne.n	80131b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	681b      	ldr	r3, [r3, #0]
 80131e6:	3308      	adds	r3, #8
 80131e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80131ea:	6a3b      	ldr	r3, [r7, #32]
 80131ec:	e853 3f00 	ldrex	r3, [r3]
 80131f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80131f2:	69fa      	ldr	r2, [r7, #28]
 80131f4:	4b1e      	ldr	r3, [pc, #120]	@ (8013270 <UART_EndRxTransfer+0xc8>)
 80131f6:	4013      	ands	r3, r2
 80131f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	681b      	ldr	r3, [r3, #0]
 80131fe:	3308      	adds	r3, #8
 8013200:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013202:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8013204:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013206:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013208:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801320a:	e841 2300 	strex	r3, r2, [r1]
 801320e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8013210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013212:	2b00      	cmp	r3, #0
 8013214:	d1e5      	bne.n	80131e2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801321a:	2b01      	cmp	r3, #1
 801321c:	d118      	bne.n	8013250 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	681b      	ldr	r3, [r3, #0]
 8013222:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013224:	68fb      	ldr	r3, [r7, #12]
 8013226:	e853 3f00 	ldrex	r3, [r3]
 801322a:	60bb      	str	r3, [r7, #8]
   return(result);
 801322c:	68bb      	ldr	r3, [r7, #8]
 801322e:	f023 0310 	bic.w	r3, r3, #16
 8013232:	647b      	str	r3, [r7, #68]	@ 0x44
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	681b      	ldr	r3, [r3, #0]
 8013238:	461a      	mov	r2, r3
 801323a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801323c:	61bb      	str	r3, [r7, #24]
 801323e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013240:	6979      	ldr	r1, [r7, #20]
 8013242:	69ba      	ldr	r2, [r7, #24]
 8013244:	e841 2300 	strex	r3, r2, [r1]
 8013248:	613b      	str	r3, [r7, #16]
   return(result);
 801324a:	693b      	ldr	r3, [r7, #16]
 801324c:	2b00      	cmp	r3, #0
 801324e:	d1e6      	bne.n	801321e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	2220      	movs	r2, #32
 8013254:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	2200      	movs	r2, #0
 801325c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	2200      	movs	r2, #0
 8013262:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8013264:	bf00      	nop
 8013266:	3754      	adds	r7, #84	@ 0x54
 8013268:	46bd      	mov	sp, r7
 801326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801326e:	4770      	bx	lr
 8013270:	effffffe 	.word	0xeffffffe

08013274 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8013274:	b580      	push	{r7, lr}
 8013276:	b084      	sub	sp, #16
 8013278:	af00      	add	r7, sp, #0
 801327a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013280:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8013282:	68fb      	ldr	r3, [r7, #12]
 8013284:	2200      	movs	r2, #0
 8013286:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801328a:	68f8      	ldr	r0, [r7, #12]
 801328c:	f7fe fe2e 	bl	8011eec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013290:	bf00      	nop
 8013292:	3710      	adds	r7, #16
 8013294:	46bd      	mov	sp, r7
 8013296:	bd80      	pop	{r7, pc}

08013298 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8013298:	b580      	push	{r7, lr}
 801329a:	b088      	sub	sp, #32
 801329c:	af00      	add	r7, sp, #0
 801329e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	681b      	ldr	r3, [r3, #0]
 80132a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80132a6:	68fb      	ldr	r3, [r7, #12]
 80132a8:	e853 3f00 	ldrex	r3, [r3]
 80132ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80132ae:	68bb      	ldr	r3, [r7, #8]
 80132b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80132b4:	61fb      	str	r3, [r7, #28]
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	681b      	ldr	r3, [r3, #0]
 80132ba:	461a      	mov	r2, r3
 80132bc:	69fb      	ldr	r3, [r7, #28]
 80132be:	61bb      	str	r3, [r7, #24]
 80132c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80132c2:	6979      	ldr	r1, [r7, #20]
 80132c4:	69ba      	ldr	r2, [r7, #24]
 80132c6:	e841 2300 	strex	r3, r2, [r1]
 80132ca:	613b      	str	r3, [r7, #16]
   return(result);
 80132cc:	693b      	ldr	r3, [r7, #16]
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d1e6      	bne.n	80132a0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	2220      	movs	r2, #32
 80132d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	2200      	movs	r2, #0
 80132de:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80132e0:	6878      	ldr	r0, [r7, #4]
 80132e2:	f7fe fdf9 	bl	8011ed8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80132e6:	bf00      	nop
 80132e8:	3720      	adds	r7, #32
 80132ea:	46bd      	mov	sp, r7
 80132ec:	bd80      	pop	{r7, pc}
	...

080132f0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80132f0:	b580      	push	{r7, lr}
 80132f2:	b09c      	sub	sp, #112	@ 0x70
 80132f4:	af00      	add	r7, sp, #0
 80132f6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80132fe:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8013308:	2b22      	cmp	r3, #34	@ 0x22
 801330a:	f040 80be 	bne.w	801348a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	681b      	ldr	r3, [r3, #0]
 8013312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013314:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8013318:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 801331c:	b2d9      	uxtb	r1, r3
 801331e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8013322:	b2da      	uxtb	r2, r3
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013328:	400a      	ands	r2, r1
 801332a:	b2d2      	uxtb	r2, r2
 801332c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013332:	1c5a      	adds	r2, r3, #1
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801333e:	b29b      	uxth	r3, r3
 8013340:	3b01      	subs	r3, #1
 8013342:	b29a      	uxth	r2, r3
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8013350:	b29b      	uxth	r3, r3
 8013352:	2b00      	cmp	r3, #0
 8013354:	f040 80a1 	bne.w	801349a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	681b      	ldr	r3, [r3, #0]
 801335c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801335e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013360:	e853 3f00 	ldrex	r3, [r3]
 8013364:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8013366:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013368:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801336c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	681b      	ldr	r3, [r3, #0]
 8013372:	461a      	mov	r2, r3
 8013374:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013376:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013378:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801337a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801337c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801337e:	e841 2300 	strex	r3, r2, [r1]
 8013382:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8013384:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013386:	2b00      	cmp	r3, #0
 8013388:	d1e6      	bne.n	8013358 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	681b      	ldr	r3, [r3, #0]
 801338e:	3308      	adds	r3, #8
 8013390:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013394:	e853 3f00 	ldrex	r3, [r3]
 8013398:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801339a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801339c:	f023 0301 	bic.w	r3, r3, #1
 80133a0:	667b      	str	r3, [r7, #100]	@ 0x64
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	681b      	ldr	r3, [r3, #0]
 80133a6:	3308      	adds	r3, #8
 80133a8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80133aa:	647a      	str	r2, [r7, #68]	@ 0x44
 80133ac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80133ae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80133b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80133b2:	e841 2300 	strex	r3, r2, [r1]
 80133b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80133b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d1e5      	bne.n	801338a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	2220      	movs	r2, #32
 80133c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	2200      	movs	r2, #0
 80133ca:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	2200      	movs	r2, #0
 80133d0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	681b      	ldr	r3, [r3, #0]
 80133d6:	4a33      	ldr	r2, [pc, #204]	@ (80134a4 <UART_RxISR_8BIT+0x1b4>)
 80133d8:	4293      	cmp	r3, r2
 80133da:	d01f      	beq.n	801341c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	681b      	ldr	r3, [r3, #0]
 80133e0:	685b      	ldr	r3, [r3, #4]
 80133e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	d018      	beq.n	801341c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	681b      	ldr	r3, [r3, #0]
 80133ee:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80133f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80133f2:	e853 3f00 	ldrex	r3, [r3]
 80133f6:	623b      	str	r3, [r7, #32]
   return(result);
 80133f8:	6a3b      	ldr	r3, [r7, #32]
 80133fa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80133fe:	663b      	str	r3, [r7, #96]	@ 0x60
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	681b      	ldr	r3, [r3, #0]
 8013404:	461a      	mov	r2, r3
 8013406:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8013408:	633b      	str	r3, [r7, #48]	@ 0x30
 801340a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801340c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801340e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013410:	e841 2300 	strex	r3, r2, [r1]
 8013414:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8013416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013418:	2b00      	cmp	r3, #0
 801341a:	d1e6      	bne.n	80133ea <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013420:	2b01      	cmp	r3, #1
 8013422:	d12e      	bne.n	8013482 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	2200      	movs	r2, #0
 8013428:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	681b      	ldr	r3, [r3, #0]
 801342e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013430:	693b      	ldr	r3, [r7, #16]
 8013432:	e853 3f00 	ldrex	r3, [r3]
 8013436:	60fb      	str	r3, [r7, #12]
   return(result);
 8013438:	68fb      	ldr	r3, [r7, #12]
 801343a:	f023 0310 	bic.w	r3, r3, #16
 801343e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	681b      	ldr	r3, [r3, #0]
 8013444:	461a      	mov	r2, r3
 8013446:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013448:	61fb      	str	r3, [r7, #28]
 801344a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801344c:	69b9      	ldr	r1, [r7, #24]
 801344e:	69fa      	ldr	r2, [r7, #28]
 8013450:	e841 2300 	strex	r3, r2, [r1]
 8013454:	617b      	str	r3, [r7, #20]
   return(result);
 8013456:	697b      	ldr	r3, [r7, #20]
 8013458:	2b00      	cmp	r3, #0
 801345a:	d1e6      	bne.n	801342a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	681b      	ldr	r3, [r3, #0]
 8013460:	69db      	ldr	r3, [r3, #28]
 8013462:	f003 0310 	and.w	r3, r3, #16
 8013466:	2b10      	cmp	r3, #16
 8013468:	d103      	bne.n	8013472 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	681b      	ldr	r3, [r3, #0]
 801346e:	2210      	movs	r2, #16
 8013470:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8013478:	4619      	mov	r1, r3
 801347a:	6878      	ldr	r0, [r7, #4]
 801347c:	f7fe fd40 	bl	8011f00 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8013480:	e00b      	b.n	801349a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8013482:	6878      	ldr	r0, [r7, #4]
 8013484:	f7f1 f9c6 	bl	8004814 <HAL_UART_RxCpltCallback>
}
 8013488:	e007      	b.n	801349a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	681b      	ldr	r3, [r3, #0]
 801348e:	699a      	ldr	r2, [r3, #24]
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	681b      	ldr	r3, [r3, #0]
 8013494:	f042 0208 	orr.w	r2, r2, #8
 8013498:	619a      	str	r2, [r3, #24]
}
 801349a:	bf00      	nop
 801349c:	3770      	adds	r7, #112	@ 0x70
 801349e:	46bd      	mov	sp, r7
 80134a0:	bd80      	pop	{r7, pc}
 80134a2:	bf00      	nop
 80134a4:	58000c00 	.word	0x58000c00

080134a8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80134a8:	b580      	push	{r7, lr}
 80134aa:	b09c      	sub	sp, #112	@ 0x70
 80134ac:	af00      	add	r7, sp, #0
 80134ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80134b6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80134c0:	2b22      	cmp	r3, #34	@ 0x22
 80134c2:	f040 80be 	bne.w	8013642 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	681b      	ldr	r3, [r3, #0]
 80134ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80134cc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80134d4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80134d6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80134da:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80134de:	4013      	ands	r3, r2
 80134e0:	b29a      	uxth	r2, r3
 80134e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80134e4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80134ea:	1c9a      	adds	r2, r3, #2
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80134f6:	b29b      	uxth	r3, r3
 80134f8:	3b01      	subs	r3, #1
 80134fa:	b29a      	uxth	r2, r3
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8013508:	b29b      	uxth	r3, r3
 801350a:	2b00      	cmp	r3, #0
 801350c:	f040 80a1 	bne.w	8013652 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	681b      	ldr	r3, [r3, #0]
 8013514:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013516:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013518:	e853 3f00 	ldrex	r3, [r3]
 801351c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 801351e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013520:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8013524:	667b      	str	r3, [r7, #100]	@ 0x64
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	681b      	ldr	r3, [r3, #0]
 801352a:	461a      	mov	r2, r3
 801352c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801352e:	657b      	str	r3, [r7, #84]	@ 0x54
 8013530:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013532:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8013534:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013536:	e841 2300 	strex	r3, r2, [r1]
 801353a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 801353c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801353e:	2b00      	cmp	r3, #0
 8013540:	d1e6      	bne.n	8013510 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	681b      	ldr	r3, [r3, #0]
 8013546:	3308      	adds	r3, #8
 8013548:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801354a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801354c:	e853 3f00 	ldrex	r3, [r3]
 8013550:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8013552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013554:	f023 0301 	bic.w	r3, r3, #1
 8013558:	663b      	str	r3, [r7, #96]	@ 0x60
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	681b      	ldr	r3, [r3, #0]
 801355e:	3308      	adds	r3, #8
 8013560:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8013562:	643a      	str	r2, [r7, #64]	@ 0x40
 8013564:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013566:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8013568:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801356a:	e841 2300 	strex	r3, r2, [r1]
 801356e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8013570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013572:	2b00      	cmp	r3, #0
 8013574:	d1e5      	bne.n	8013542 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	2220      	movs	r2, #32
 801357a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	2200      	movs	r2, #0
 8013582:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	2200      	movs	r2, #0
 8013588:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	681b      	ldr	r3, [r3, #0]
 801358e:	4a33      	ldr	r2, [pc, #204]	@ (801365c <UART_RxISR_16BIT+0x1b4>)
 8013590:	4293      	cmp	r3, r2
 8013592:	d01f      	beq.n	80135d4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	681b      	ldr	r3, [r3, #0]
 8013598:	685b      	ldr	r3, [r3, #4]
 801359a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801359e:	2b00      	cmp	r3, #0
 80135a0:	d018      	beq.n	80135d4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	681b      	ldr	r3, [r3, #0]
 80135a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80135a8:	6a3b      	ldr	r3, [r7, #32]
 80135aa:	e853 3f00 	ldrex	r3, [r3]
 80135ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80135b0:	69fb      	ldr	r3, [r7, #28]
 80135b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80135b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	681b      	ldr	r3, [r3, #0]
 80135bc:	461a      	mov	r2, r3
 80135be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80135c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80135c2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80135c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80135c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80135c8:	e841 2300 	strex	r3, r2, [r1]
 80135cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80135ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d1e6      	bne.n	80135a2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80135d8:	2b01      	cmp	r3, #1
 80135da:	d12e      	bne.n	801363a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	2200      	movs	r2, #0
 80135e0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	681b      	ldr	r3, [r3, #0]
 80135e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80135e8:	68fb      	ldr	r3, [r7, #12]
 80135ea:	e853 3f00 	ldrex	r3, [r3]
 80135ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80135f0:	68bb      	ldr	r3, [r7, #8]
 80135f2:	f023 0310 	bic.w	r3, r3, #16
 80135f6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	681b      	ldr	r3, [r3, #0]
 80135fc:	461a      	mov	r2, r3
 80135fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013600:	61bb      	str	r3, [r7, #24]
 8013602:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013604:	6979      	ldr	r1, [r7, #20]
 8013606:	69ba      	ldr	r2, [r7, #24]
 8013608:	e841 2300 	strex	r3, r2, [r1]
 801360c:	613b      	str	r3, [r7, #16]
   return(result);
 801360e:	693b      	ldr	r3, [r7, #16]
 8013610:	2b00      	cmp	r3, #0
 8013612:	d1e6      	bne.n	80135e2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	681b      	ldr	r3, [r3, #0]
 8013618:	69db      	ldr	r3, [r3, #28]
 801361a:	f003 0310 	and.w	r3, r3, #16
 801361e:	2b10      	cmp	r3, #16
 8013620:	d103      	bne.n	801362a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	681b      	ldr	r3, [r3, #0]
 8013626:	2210      	movs	r2, #16
 8013628:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8013630:	4619      	mov	r1, r3
 8013632:	6878      	ldr	r0, [r7, #4]
 8013634:	f7fe fc64 	bl	8011f00 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8013638:	e00b      	b.n	8013652 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801363a:	6878      	ldr	r0, [r7, #4]
 801363c:	f7f1 f8ea 	bl	8004814 <HAL_UART_RxCpltCallback>
}
 8013640:	e007      	b.n	8013652 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	681b      	ldr	r3, [r3, #0]
 8013646:	699a      	ldr	r2, [r3, #24]
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	681b      	ldr	r3, [r3, #0]
 801364c:	f042 0208 	orr.w	r2, r2, #8
 8013650:	619a      	str	r2, [r3, #24]
}
 8013652:	bf00      	nop
 8013654:	3770      	adds	r7, #112	@ 0x70
 8013656:	46bd      	mov	sp, r7
 8013658:	bd80      	pop	{r7, pc}
 801365a:	bf00      	nop
 801365c:	58000c00 	.word	0x58000c00

08013660 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8013660:	b580      	push	{r7, lr}
 8013662:	b0ac      	sub	sp, #176	@ 0xb0
 8013664:	af00      	add	r7, sp, #0
 8013666:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801366e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	681b      	ldr	r3, [r3, #0]
 8013676:	69db      	ldr	r3, [r3, #28]
 8013678:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	681b      	ldr	r3, [r3, #0]
 8013680:	681b      	ldr	r3, [r3, #0]
 8013682:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	681b      	ldr	r3, [r3, #0]
 801368a:	689b      	ldr	r3, [r3, #8]
 801368c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8013696:	2b22      	cmp	r3, #34	@ 0x22
 8013698:	f040 8181 	bne.w	801399e <UART_RxISR_8BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80136a2:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80136a6:	e124      	b.n	80138f2 <UART_RxISR_8BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	681b      	ldr	r3, [r3, #0]
 80136ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80136ae:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80136b2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80136b6:	b2d9      	uxtb	r1, r3
 80136b8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80136bc:	b2da      	uxtb	r2, r3
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80136c2:	400a      	ands	r2, r1
 80136c4:	b2d2      	uxtb	r2, r2
 80136c6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80136cc:	1c5a      	adds	r2, r3, #1
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80136d8:	b29b      	uxth	r3, r3
 80136da:	3b01      	subs	r3, #1
 80136dc:	b29a      	uxth	r2, r3
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	681b      	ldr	r3, [r3, #0]
 80136e8:	69db      	ldr	r3, [r3, #28]
 80136ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80136ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80136f2:	f003 0307 	and.w	r3, r3, #7
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d053      	beq.n	80137a2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80136fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80136fe:	f003 0301 	and.w	r3, r3, #1
 8013702:	2b00      	cmp	r3, #0
 8013704:	d011      	beq.n	801372a <UART_RxISR_8BIT_FIFOEN+0xca>
 8013706:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801370a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801370e:	2b00      	cmp	r3, #0
 8013710:	d00b      	beq.n	801372a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	681b      	ldr	r3, [r3, #0]
 8013716:	2201      	movs	r2, #1
 8013718:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013720:	f043 0201 	orr.w	r2, r3, #1
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801372a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801372e:	f003 0302 	and.w	r3, r3, #2
 8013732:	2b00      	cmp	r3, #0
 8013734:	d011      	beq.n	801375a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8013736:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801373a:	f003 0301 	and.w	r3, r3, #1
 801373e:	2b00      	cmp	r3, #0
 8013740:	d00b      	beq.n	801375a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	681b      	ldr	r3, [r3, #0]
 8013746:	2202      	movs	r2, #2
 8013748:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013750:	f043 0204 	orr.w	r2, r3, #4
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801375a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801375e:	f003 0304 	and.w	r3, r3, #4
 8013762:	2b00      	cmp	r3, #0
 8013764:	d011      	beq.n	801378a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8013766:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801376a:	f003 0301 	and.w	r3, r3, #1
 801376e:	2b00      	cmp	r3, #0
 8013770:	d00b      	beq.n	801378a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	681b      	ldr	r3, [r3, #0]
 8013776:	2204      	movs	r2, #4
 8013778:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013780:	f043 0202 	orr.w	r2, r3, #2
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013790:	2b00      	cmp	r3, #0
 8013792:	d006      	beq.n	80137a2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8013794:	6878      	ldr	r0, [r7, #4]
 8013796:	f7fe fba9 	bl	8011eec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	2200      	movs	r2, #0
 801379e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80137a8:	b29b      	uxth	r3, r3
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	f040 80a1 	bne.w	80138f2 <UART_RxISR_8BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	681b      	ldr	r3, [r3, #0]
 80137b4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80137b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80137b8:	e853 3f00 	ldrex	r3, [r3]
 80137bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 80137be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80137c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80137c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	681b      	ldr	r3, [r3, #0]
 80137cc:	461a      	mov	r2, r3
 80137ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80137d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80137d4:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80137d6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80137d8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80137da:	e841 2300 	strex	r3, r2, [r1]
 80137de:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80137e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	d1e4      	bne.n	80137b0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	681b      	ldr	r3, [r3, #0]
 80137ea:	3308      	adds	r3, #8
 80137ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80137ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80137f0:	e853 3f00 	ldrex	r3, [r3]
 80137f4:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80137f6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80137f8:	4b6f      	ldr	r3, [pc, #444]	@ (80139b8 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80137fa:	4013      	ands	r3, r2
 80137fc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	681b      	ldr	r3, [r3, #0]
 8013804:	3308      	adds	r3, #8
 8013806:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801380a:	66ba      	str	r2, [r7, #104]	@ 0x68
 801380c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801380e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8013810:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8013812:	e841 2300 	strex	r3, r2, [r1]
 8013816:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8013818:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801381a:	2b00      	cmp	r3, #0
 801381c:	d1e3      	bne.n	80137e6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	2220      	movs	r2, #32
 8013822:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	2200      	movs	r2, #0
 801382a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	2200      	movs	r2, #0
 8013830:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	681b      	ldr	r3, [r3, #0]
 8013836:	4a61      	ldr	r2, [pc, #388]	@ (80139bc <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8013838:	4293      	cmp	r3, r2
 801383a:	d021      	beq.n	8013880 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	685b      	ldr	r3, [r3, #4]
 8013842:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8013846:	2b00      	cmp	r3, #0
 8013848:	d01a      	beq.n	8013880 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	681b      	ldr	r3, [r3, #0]
 801384e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013850:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013852:	e853 3f00 	ldrex	r3, [r3]
 8013856:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8013858:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801385a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801385e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	681b      	ldr	r3, [r3, #0]
 8013866:	461a      	mov	r2, r3
 8013868:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801386c:	657b      	str	r3, [r7, #84]	@ 0x54
 801386e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013870:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8013872:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013874:	e841 2300 	strex	r3, r2, [r1]
 8013878:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 801387a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801387c:	2b00      	cmp	r3, #0
 801387e:	d1e4      	bne.n	801384a <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013884:	2b01      	cmp	r3, #1
 8013886:	d130      	bne.n	80138ea <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	2200      	movs	r2, #0
 801388c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	681b      	ldr	r3, [r3, #0]
 8013892:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013894:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013896:	e853 3f00 	ldrex	r3, [r3]
 801389a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801389c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801389e:	f023 0310 	bic.w	r3, r3, #16
 80138a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	681b      	ldr	r3, [r3, #0]
 80138aa:	461a      	mov	r2, r3
 80138ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80138b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80138b2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80138b4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80138b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80138b8:	e841 2300 	strex	r3, r2, [r1]
 80138bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80138be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	d1e4      	bne.n	801388e <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	681b      	ldr	r3, [r3, #0]
 80138c8:	69db      	ldr	r3, [r3, #28]
 80138ca:	f003 0310 	and.w	r3, r3, #16
 80138ce:	2b10      	cmp	r3, #16
 80138d0:	d103      	bne.n	80138da <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	681b      	ldr	r3, [r3, #0]
 80138d6:	2210      	movs	r2, #16
 80138d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80138e0:	4619      	mov	r1, r3
 80138e2:	6878      	ldr	r0, [r7, #4]
 80138e4:	f7fe fb0c 	bl	8011f00 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80138e8:	e00e      	b.n	8013908 <UART_RxISR_8BIT_FIFOEN+0x2a8>
          HAL_UART_RxCpltCallback(huart);
 80138ea:	6878      	ldr	r0, [r7, #4]
 80138ec:	f7f0 ff92 	bl	8004814 <HAL_UART_RxCpltCallback>
        break;
 80138f0:	e00a      	b.n	8013908 <UART_RxISR_8BIT_FIFOEN+0x2a8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80138f2:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d006      	beq.n	8013908 <UART_RxISR_8BIT_FIFOEN+0x2a8>
 80138fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80138fe:	f003 0320 	and.w	r3, r3, #32
 8013902:	2b00      	cmp	r3, #0
 8013904:	f47f aed0 	bne.w	80136a8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801390e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8013912:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8013916:	2b00      	cmp	r3, #0
 8013918:	d049      	beq.n	80139ae <UART_RxISR_8BIT_FIFOEN+0x34e>
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8013920:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8013924:	429a      	cmp	r2, r3
 8013926:	d242      	bcs.n	80139ae <UART_RxISR_8BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	681b      	ldr	r3, [r3, #0]
 801392c:	3308      	adds	r3, #8
 801392e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013930:	6a3b      	ldr	r3, [r7, #32]
 8013932:	e853 3f00 	ldrex	r3, [r3]
 8013936:	61fb      	str	r3, [r7, #28]
   return(result);
 8013938:	69fb      	ldr	r3, [r7, #28]
 801393a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801393e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	681b      	ldr	r3, [r3, #0]
 8013946:	3308      	adds	r3, #8
 8013948:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801394c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801394e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013950:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013952:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013954:	e841 2300 	strex	r3, r2, [r1]
 8013958:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801395a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801395c:	2b00      	cmp	r3, #0
 801395e:	d1e3      	bne.n	8013928 <UART_RxISR_8BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	4a17      	ldr	r2, [pc, #92]	@ (80139c0 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8013964:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	681b      	ldr	r3, [r3, #0]
 801396a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801396c:	68fb      	ldr	r3, [r7, #12]
 801396e:	e853 3f00 	ldrex	r3, [r3]
 8013972:	60bb      	str	r3, [r7, #8]
   return(result);
 8013974:	68bb      	ldr	r3, [r7, #8]
 8013976:	f043 0320 	orr.w	r3, r3, #32
 801397a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	681b      	ldr	r3, [r3, #0]
 8013982:	461a      	mov	r2, r3
 8013984:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013988:	61bb      	str	r3, [r7, #24]
 801398a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801398c:	6979      	ldr	r1, [r7, #20]
 801398e:	69ba      	ldr	r2, [r7, #24]
 8013990:	e841 2300 	strex	r3, r2, [r1]
 8013994:	613b      	str	r3, [r7, #16]
   return(result);
 8013996:	693b      	ldr	r3, [r7, #16]
 8013998:	2b00      	cmp	r3, #0
 801399a:	d1e4      	bne.n	8013966 <UART_RxISR_8BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801399c:	e007      	b.n	80139ae <UART_RxISR_8BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	681b      	ldr	r3, [r3, #0]
 80139a2:	699a      	ldr	r2, [r3, #24]
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	681b      	ldr	r3, [r3, #0]
 80139a8:	f042 0208 	orr.w	r2, r2, #8
 80139ac:	619a      	str	r2, [r3, #24]
}
 80139ae:	bf00      	nop
 80139b0:	37b0      	adds	r7, #176	@ 0xb0
 80139b2:	46bd      	mov	sp, r7
 80139b4:	bd80      	pop	{r7, pc}
 80139b6:	bf00      	nop
 80139b8:	effffffe 	.word	0xeffffffe
 80139bc:	58000c00 	.word	0x58000c00
 80139c0:	080132f1 	.word	0x080132f1

080139c4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80139c4:	b580      	push	{r7, lr}
 80139c6:	b0ae      	sub	sp, #184	@ 0xb8
 80139c8:	af00      	add	r7, sp, #0
 80139ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80139d2:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	681b      	ldr	r3, [r3, #0]
 80139da:	69db      	ldr	r3, [r3, #28]
 80139dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	681b      	ldr	r3, [r3, #0]
 80139e4:	681b      	ldr	r3, [r3, #0]
 80139e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	681b      	ldr	r3, [r3, #0]
 80139ee:	689b      	ldr	r3, [r3, #8]
 80139f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80139fa:	2b22      	cmp	r3, #34	@ 0x22
 80139fc:	f040 8185 	bne.w	8013d0a <UART_RxISR_16BIT_FIFOEN+0x346>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8013a06:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8013a0a:	e128      	b.n	8013c5e <UART_RxISR_16BIT_FIFOEN+0x29a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	681b      	ldr	r3, [r3, #0]
 8013a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013a12:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013a1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8013a1e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8013a22:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8013a26:	4013      	ands	r3, r2
 8013a28:	b29a      	uxth	r2, r3
 8013a2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013a2e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013a34:	1c9a      	adds	r2, r3, #2
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8013a40:	b29b      	uxth	r3, r3
 8013a42:	3b01      	subs	r3, #1
 8013a44:	b29a      	uxth	r2, r3
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	681b      	ldr	r3, [r3, #0]
 8013a50:	69db      	ldr	r3, [r3, #28]
 8013a52:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8013a56:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8013a5a:	f003 0307 	and.w	r3, r3, #7
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d053      	beq.n	8013b0a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8013a62:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8013a66:	f003 0301 	and.w	r3, r3, #1
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d011      	beq.n	8013a92 <UART_RxISR_16BIT_FIFOEN+0xce>
 8013a6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013a72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d00b      	beq.n	8013a92 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	681b      	ldr	r3, [r3, #0]
 8013a7e:	2201      	movs	r2, #1
 8013a80:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013a88:	f043 0201 	orr.w	r2, r3, #1
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8013a92:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8013a96:	f003 0302 	and.w	r3, r3, #2
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d011      	beq.n	8013ac2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8013a9e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8013aa2:	f003 0301 	and.w	r3, r3, #1
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	d00b      	beq.n	8013ac2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	681b      	ldr	r3, [r3, #0]
 8013aae:	2202      	movs	r2, #2
 8013ab0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013ab8:	f043 0204 	orr.w	r2, r3, #4
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8013ac2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8013ac6:	f003 0304 	and.w	r3, r3, #4
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d011      	beq.n	8013af2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8013ace:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8013ad2:	f003 0301 	and.w	r3, r3, #1
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	d00b      	beq.n	8013af2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	681b      	ldr	r3, [r3, #0]
 8013ade:	2204      	movs	r2, #4
 8013ae0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013ae8:	f043 0202 	orr.w	r2, r3, #2
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d006      	beq.n	8013b0a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8013afc:	6878      	ldr	r0, [r7, #4]
 8013afe:	f7fe f9f5 	bl	8011eec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	2200      	movs	r2, #0
 8013b06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8013b10:	b29b      	uxth	r3, r3
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	f040 80a3 	bne.w	8013c5e <UART_RxISR_16BIT_FIFOEN+0x29a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	681b      	ldr	r3, [r3, #0]
 8013b1c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013b1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8013b20:	e853 3f00 	ldrex	r3, [r3]
 8013b24:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8013b26:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013b28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8013b2c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	681b      	ldr	r3, [r3, #0]
 8013b34:	461a      	mov	r2, r3
 8013b36:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8013b3a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8013b3e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013b40:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8013b42:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8013b46:	e841 2300 	strex	r3, r2, [r1]
 8013b4a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8013b4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d1e2      	bne.n	8013b18 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	681b      	ldr	r3, [r3, #0]
 8013b56:	3308      	adds	r3, #8
 8013b58:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013b5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8013b5c:	e853 3f00 	ldrex	r3, [r3]
 8013b60:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8013b62:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013b64:	4b6f      	ldr	r3, [pc, #444]	@ (8013d24 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8013b66:	4013      	ands	r3, r2
 8013b68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	681b      	ldr	r3, [r3, #0]
 8013b70:	3308      	adds	r3, #8
 8013b72:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8013b76:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8013b78:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013b7a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8013b7c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8013b7e:	e841 2300 	strex	r3, r2, [r1]
 8013b82:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8013b84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	d1e3      	bne.n	8013b52 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	2220      	movs	r2, #32
 8013b8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	2200      	movs	r2, #0
 8013b96:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	2200      	movs	r2, #0
 8013b9c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	681b      	ldr	r3, [r3, #0]
 8013ba2:	4a61      	ldr	r2, [pc, #388]	@ (8013d28 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8013ba4:	4293      	cmp	r3, r2
 8013ba6:	d021      	beq.n	8013bec <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	681b      	ldr	r3, [r3, #0]
 8013bac:	685b      	ldr	r3, [r3, #4]
 8013bae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	d01a      	beq.n	8013bec <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	681b      	ldr	r3, [r3, #0]
 8013bba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013bbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013bbe:	e853 3f00 	ldrex	r3, [r3]
 8013bc2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8013bc4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013bc6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8013bca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	681b      	ldr	r3, [r3, #0]
 8013bd2:	461a      	mov	r2, r3
 8013bd4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8013bd8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013bda:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013bdc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8013bde:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013be0:	e841 2300 	strex	r3, r2, [r1]
 8013be4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8013be6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d1e4      	bne.n	8013bb6 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013bf0:	2b01      	cmp	r3, #1
 8013bf2:	d130      	bne.n	8013c56 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	2200      	movs	r2, #0
 8013bf8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	681b      	ldr	r3, [r3, #0]
 8013bfe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013c00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c02:	e853 3f00 	ldrex	r3, [r3]
 8013c06:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8013c08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013c0a:	f023 0310 	bic.w	r3, r3, #16
 8013c0e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	681b      	ldr	r3, [r3, #0]
 8013c16:	461a      	mov	r2, r3
 8013c18:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013c1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8013c1e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013c20:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8013c22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013c24:	e841 2300 	strex	r3, r2, [r1]
 8013c28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8013c2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	d1e4      	bne.n	8013bfa <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	681b      	ldr	r3, [r3, #0]
 8013c34:	69db      	ldr	r3, [r3, #28]
 8013c36:	f003 0310 	and.w	r3, r3, #16
 8013c3a:	2b10      	cmp	r3, #16
 8013c3c:	d103      	bne.n	8013c46 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	681b      	ldr	r3, [r3, #0]
 8013c42:	2210      	movs	r2, #16
 8013c44:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8013c4c:	4619      	mov	r1, r3
 8013c4e:	6878      	ldr	r0, [r7, #4]
 8013c50:	f7fe f956 	bl	8011f00 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8013c54:	e00e      	b.n	8013c74 <UART_RxISR_16BIT_FIFOEN+0x2b0>
          HAL_UART_RxCpltCallback(huart);
 8013c56:	6878      	ldr	r0, [r7, #4]
 8013c58:	f7f0 fddc 	bl	8004814 <HAL_UART_RxCpltCallback>
        break;
 8013c5c:	e00a      	b.n	8013c74 <UART_RxISR_16BIT_FIFOEN+0x2b0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8013c5e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d006      	beq.n	8013c74 <UART_RxISR_16BIT_FIFOEN+0x2b0>
 8013c66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8013c6a:	f003 0320 	and.w	r3, r3, #32
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	f47f aecc 	bne.w	8013a0c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8013c7a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8013c7e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8013c82:	2b00      	cmp	r3, #0
 8013c84:	d049      	beq.n	8013d1a <UART_RxISR_16BIT_FIFOEN+0x356>
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8013c8c:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8013c90:	429a      	cmp	r2, r3
 8013c92:	d242      	bcs.n	8013d1a <UART_RxISR_16BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	681b      	ldr	r3, [r3, #0]
 8013c98:	3308      	adds	r3, #8
 8013c9a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c9e:	e853 3f00 	ldrex	r3, [r3]
 8013ca2:	623b      	str	r3, [r7, #32]
   return(result);
 8013ca4:	6a3b      	ldr	r3, [r7, #32]
 8013ca6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8013caa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	681b      	ldr	r3, [r3, #0]
 8013cb2:	3308      	adds	r3, #8
 8013cb4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8013cb8:	633a      	str	r2, [r7, #48]	@ 0x30
 8013cba:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013cbc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013cbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013cc0:	e841 2300 	strex	r3, r2, [r1]
 8013cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8013cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	d1e3      	bne.n	8013c94 <UART_RxISR_16BIT_FIFOEN+0x2d0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	4a17      	ldr	r2, [pc, #92]	@ (8013d2c <UART_RxISR_16BIT_FIFOEN+0x368>)
 8013cd0:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	681b      	ldr	r3, [r3, #0]
 8013cd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013cd8:	693b      	ldr	r3, [r7, #16]
 8013cda:	e853 3f00 	ldrex	r3, [r3]
 8013cde:	60fb      	str	r3, [r7, #12]
   return(result);
 8013ce0:	68fb      	ldr	r3, [r7, #12]
 8013ce2:	f043 0320 	orr.w	r3, r3, #32
 8013ce6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	681b      	ldr	r3, [r3, #0]
 8013cee:	461a      	mov	r2, r3
 8013cf0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8013cf4:	61fb      	str	r3, [r7, #28]
 8013cf6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013cf8:	69b9      	ldr	r1, [r7, #24]
 8013cfa:	69fa      	ldr	r2, [r7, #28]
 8013cfc:	e841 2300 	strex	r3, r2, [r1]
 8013d00:	617b      	str	r3, [r7, #20]
   return(result);
 8013d02:	697b      	ldr	r3, [r7, #20]
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d1e4      	bne.n	8013cd2 <UART_RxISR_16BIT_FIFOEN+0x30e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8013d08:	e007      	b.n	8013d1a <UART_RxISR_16BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	681b      	ldr	r3, [r3, #0]
 8013d0e:	699a      	ldr	r2, [r3, #24]
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	681b      	ldr	r3, [r3, #0]
 8013d14:	f042 0208 	orr.w	r2, r2, #8
 8013d18:	619a      	str	r2, [r3, #24]
}
 8013d1a:	bf00      	nop
 8013d1c:	37b8      	adds	r7, #184	@ 0xb8
 8013d1e:	46bd      	mov	sp, r7
 8013d20:	bd80      	pop	{r7, pc}
 8013d22:	bf00      	nop
 8013d24:	effffffe 	.word	0xeffffffe
 8013d28:	58000c00 	.word	0x58000c00
 8013d2c:	080134a9 	.word	0x080134a9

08013d30 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8013d30:	b480      	push	{r7}
 8013d32:	b083      	sub	sp, #12
 8013d34:	af00      	add	r7, sp, #0
 8013d36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8013d38:	bf00      	nop
 8013d3a:	370c      	adds	r7, #12
 8013d3c:	46bd      	mov	sp, r7
 8013d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d42:	4770      	bx	lr

08013d44 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8013d44:	b480      	push	{r7}
 8013d46:	b083      	sub	sp, #12
 8013d48:	af00      	add	r7, sp, #0
 8013d4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8013d4c:	bf00      	nop
 8013d4e:	370c      	adds	r7, #12
 8013d50:	46bd      	mov	sp, r7
 8013d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d56:	4770      	bx	lr

08013d58 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8013d58:	b480      	push	{r7}
 8013d5a:	b083      	sub	sp, #12
 8013d5c:	af00      	add	r7, sp, #0
 8013d5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8013d60:	bf00      	nop
 8013d62:	370c      	adds	r7, #12
 8013d64:	46bd      	mov	sp, r7
 8013d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d6a:	4770      	bx	lr

08013d6c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8013d6c:	b480      	push	{r7}
 8013d6e:	b085      	sub	sp, #20
 8013d70:	af00      	add	r7, sp, #0
 8013d72:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8013d7a:	2b01      	cmp	r3, #1
 8013d7c:	d101      	bne.n	8013d82 <HAL_UARTEx_DisableFifoMode+0x16>
 8013d7e:	2302      	movs	r3, #2
 8013d80:	e027      	b.n	8013dd2 <HAL_UARTEx_DisableFifoMode+0x66>
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	2201      	movs	r2, #1
 8013d86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	2224      	movs	r2, #36	@ 0x24
 8013d8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	681b      	ldr	r3, [r3, #0]
 8013d96:	681b      	ldr	r3, [r3, #0]
 8013d98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	681b      	ldr	r3, [r3, #0]
 8013d9e:	681a      	ldr	r2, [r3, #0]
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	681b      	ldr	r3, [r3, #0]
 8013da4:	f022 0201 	bic.w	r2, r2, #1
 8013da8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8013daa:	68fb      	ldr	r3, [r7, #12]
 8013dac:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8013db0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	2200      	movs	r2, #0
 8013db6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	681b      	ldr	r3, [r3, #0]
 8013dbc:	68fa      	ldr	r2, [r7, #12]
 8013dbe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	2220      	movs	r2, #32
 8013dc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	2200      	movs	r2, #0
 8013dcc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8013dd0:	2300      	movs	r3, #0
}
 8013dd2:	4618      	mov	r0, r3
 8013dd4:	3714      	adds	r7, #20
 8013dd6:	46bd      	mov	sp, r7
 8013dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ddc:	4770      	bx	lr

08013dde <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8013dde:	b580      	push	{r7, lr}
 8013de0:	b084      	sub	sp, #16
 8013de2:	af00      	add	r7, sp, #0
 8013de4:	6078      	str	r0, [r7, #4]
 8013de6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8013dee:	2b01      	cmp	r3, #1
 8013df0:	d101      	bne.n	8013df6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8013df2:	2302      	movs	r3, #2
 8013df4:	e02d      	b.n	8013e52 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	2201      	movs	r2, #1
 8013dfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	2224      	movs	r2, #36	@ 0x24
 8013e02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	681b      	ldr	r3, [r3, #0]
 8013e0a:	681b      	ldr	r3, [r3, #0]
 8013e0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	681b      	ldr	r3, [r3, #0]
 8013e12:	681a      	ldr	r2, [r3, #0]
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	681b      	ldr	r3, [r3, #0]
 8013e18:	f022 0201 	bic.w	r2, r2, #1
 8013e1c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	681b      	ldr	r3, [r3, #0]
 8013e22:	689b      	ldr	r3, [r3, #8]
 8013e24:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	681b      	ldr	r3, [r3, #0]
 8013e2c:	683a      	ldr	r2, [r7, #0]
 8013e2e:	430a      	orrs	r2, r1
 8013e30:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8013e32:	6878      	ldr	r0, [r7, #4]
 8013e34:	f000 f850 	bl	8013ed8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	681b      	ldr	r3, [r3, #0]
 8013e3c:	68fa      	ldr	r2, [r7, #12]
 8013e3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	2220      	movs	r2, #32
 8013e44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	2200      	movs	r2, #0
 8013e4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8013e50:	2300      	movs	r3, #0
}
 8013e52:	4618      	mov	r0, r3
 8013e54:	3710      	adds	r7, #16
 8013e56:	46bd      	mov	sp, r7
 8013e58:	bd80      	pop	{r7, pc}

08013e5a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8013e5a:	b580      	push	{r7, lr}
 8013e5c:	b084      	sub	sp, #16
 8013e5e:	af00      	add	r7, sp, #0
 8013e60:	6078      	str	r0, [r7, #4]
 8013e62:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8013e6a:	2b01      	cmp	r3, #1
 8013e6c:	d101      	bne.n	8013e72 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8013e6e:	2302      	movs	r3, #2
 8013e70:	e02d      	b.n	8013ece <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	2201      	movs	r2, #1
 8013e76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	2224      	movs	r2, #36	@ 0x24
 8013e7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	681b      	ldr	r3, [r3, #0]
 8013e86:	681b      	ldr	r3, [r3, #0]
 8013e88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	681b      	ldr	r3, [r3, #0]
 8013e8e:	681a      	ldr	r2, [r3, #0]
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	681b      	ldr	r3, [r3, #0]
 8013e94:	f022 0201 	bic.w	r2, r2, #1
 8013e98:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	681b      	ldr	r3, [r3, #0]
 8013e9e:	689b      	ldr	r3, [r3, #8]
 8013ea0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	681b      	ldr	r3, [r3, #0]
 8013ea8:	683a      	ldr	r2, [r7, #0]
 8013eaa:	430a      	orrs	r2, r1
 8013eac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8013eae:	6878      	ldr	r0, [r7, #4]
 8013eb0:	f000 f812 	bl	8013ed8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	681b      	ldr	r3, [r3, #0]
 8013eb8:	68fa      	ldr	r2, [r7, #12]
 8013eba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	2220      	movs	r2, #32
 8013ec0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	2200      	movs	r2, #0
 8013ec8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8013ecc:	2300      	movs	r3, #0
}
 8013ece:	4618      	mov	r0, r3
 8013ed0:	3710      	adds	r7, #16
 8013ed2:	46bd      	mov	sp, r7
 8013ed4:	bd80      	pop	{r7, pc}
	...

08013ed8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8013ed8:	b480      	push	{r7}
 8013eda:	b085      	sub	sp, #20
 8013edc:	af00      	add	r7, sp, #0
 8013ede:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d108      	bne.n	8013efa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	2201      	movs	r2, #1
 8013eec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	2201      	movs	r2, #1
 8013ef4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8013ef8:	e031      	b.n	8013f5e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8013efa:	2310      	movs	r3, #16
 8013efc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8013efe:	2310      	movs	r3, #16
 8013f00:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	681b      	ldr	r3, [r3, #0]
 8013f06:	689b      	ldr	r3, [r3, #8]
 8013f08:	0e5b      	lsrs	r3, r3, #25
 8013f0a:	b2db      	uxtb	r3, r3
 8013f0c:	f003 0307 	and.w	r3, r3, #7
 8013f10:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	681b      	ldr	r3, [r3, #0]
 8013f16:	689b      	ldr	r3, [r3, #8]
 8013f18:	0f5b      	lsrs	r3, r3, #29
 8013f1a:	b2db      	uxtb	r3, r3
 8013f1c:	f003 0307 	and.w	r3, r3, #7
 8013f20:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8013f22:	7bbb      	ldrb	r3, [r7, #14]
 8013f24:	7b3a      	ldrb	r2, [r7, #12]
 8013f26:	4911      	ldr	r1, [pc, #68]	@ (8013f6c <UARTEx_SetNbDataToProcess+0x94>)
 8013f28:	5c8a      	ldrb	r2, [r1, r2]
 8013f2a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8013f2e:	7b3a      	ldrb	r2, [r7, #12]
 8013f30:	490f      	ldr	r1, [pc, #60]	@ (8013f70 <UARTEx_SetNbDataToProcess+0x98>)
 8013f32:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8013f34:	fb93 f3f2 	sdiv	r3, r3, r2
 8013f38:	b29a      	uxth	r2, r3
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8013f40:	7bfb      	ldrb	r3, [r7, #15]
 8013f42:	7b7a      	ldrb	r2, [r7, #13]
 8013f44:	4909      	ldr	r1, [pc, #36]	@ (8013f6c <UARTEx_SetNbDataToProcess+0x94>)
 8013f46:	5c8a      	ldrb	r2, [r1, r2]
 8013f48:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8013f4c:	7b7a      	ldrb	r2, [r7, #13]
 8013f4e:	4908      	ldr	r1, [pc, #32]	@ (8013f70 <UARTEx_SetNbDataToProcess+0x98>)
 8013f50:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8013f52:	fb93 f3f2 	sdiv	r3, r3, r2
 8013f56:	b29a      	uxth	r2, r3
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8013f5e:	bf00      	nop
 8013f60:	3714      	adds	r7, #20
 8013f62:	46bd      	mov	sp, r7
 8013f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f68:	4770      	bx	lr
 8013f6a:	bf00      	nop
 8013f6c:	0801f9c4 	.word	0x0801f9c4
 8013f70:	0801f9cc 	.word	0x0801f9cc

08013f74 <LL_GPIO_SetPinMode>:
{
 8013f74:	b480      	push	{r7}
 8013f76:	b085      	sub	sp, #20
 8013f78:	af00      	add	r7, sp, #0
 8013f7a:	60f8      	str	r0, [r7, #12]
 8013f7c:	60b9      	str	r1, [r7, #8]
 8013f7e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8013f80:	68fb      	ldr	r3, [r7, #12]
 8013f82:	6819      	ldr	r1, [r3, #0]
 8013f84:	68bb      	ldr	r3, [r7, #8]
 8013f86:	fb03 f203 	mul.w	r2, r3, r3
 8013f8a:	4613      	mov	r3, r2
 8013f8c:	005b      	lsls	r3, r3, #1
 8013f8e:	4413      	add	r3, r2
 8013f90:	43db      	mvns	r3, r3
 8013f92:	ea01 0203 	and.w	r2, r1, r3
 8013f96:	68bb      	ldr	r3, [r7, #8]
 8013f98:	fb03 f303 	mul.w	r3, r3, r3
 8013f9c:	6879      	ldr	r1, [r7, #4]
 8013f9e:	fb01 f303 	mul.w	r3, r1, r3
 8013fa2:	431a      	orrs	r2, r3
 8013fa4:	68fb      	ldr	r3, [r7, #12]
 8013fa6:	601a      	str	r2, [r3, #0]
}
 8013fa8:	bf00      	nop
 8013faa:	3714      	adds	r7, #20
 8013fac:	46bd      	mov	sp, r7
 8013fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fb2:	4770      	bx	lr

08013fb4 <LL_GPIO_SetPinOutputType>:
{
 8013fb4:	b480      	push	{r7}
 8013fb6:	b085      	sub	sp, #20
 8013fb8:	af00      	add	r7, sp, #0
 8013fba:	60f8      	str	r0, [r7, #12]
 8013fbc:	60b9      	str	r1, [r7, #8]
 8013fbe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8013fc0:	68fb      	ldr	r3, [r7, #12]
 8013fc2:	685a      	ldr	r2, [r3, #4]
 8013fc4:	68bb      	ldr	r3, [r7, #8]
 8013fc6:	43db      	mvns	r3, r3
 8013fc8:	401a      	ands	r2, r3
 8013fca:	68bb      	ldr	r3, [r7, #8]
 8013fcc:	6879      	ldr	r1, [r7, #4]
 8013fce:	fb01 f303 	mul.w	r3, r1, r3
 8013fd2:	431a      	orrs	r2, r3
 8013fd4:	68fb      	ldr	r3, [r7, #12]
 8013fd6:	605a      	str	r2, [r3, #4]
}
 8013fd8:	bf00      	nop
 8013fda:	3714      	adds	r7, #20
 8013fdc:	46bd      	mov	sp, r7
 8013fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fe2:	4770      	bx	lr

08013fe4 <LL_GPIO_SetPinSpeed>:
{
 8013fe4:	b480      	push	{r7}
 8013fe6:	b085      	sub	sp, #20
 8013fe8:	af00      	add	r7, sp, #0
 8013fea:	60f8      	str	r0, [r7, #12]
 8013fec:	60b9      	str	r1, [r7, #8]
 8013fee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8013ff0:	68fb      	ldr	r3, [r7, #12]
 8013ff2:	6899      	ldr	r1, [r3, #8]
 8013ff4:	68bb      	ldr	r3, [r7, #8]
 8013ff6:	fb03 f203 	mul.w	r2, r3, r3
 8013ffa:	4613      	mov	r3, r2
 8013ffc:	005b      	lsls	r3, r3, #1
 8013ffe:	4413      	add	r3, r2
 8014000:	43db      	mvns	r3, r3
 8014002:	ea01 0203 	and.w	r2, r1, r3
 8014006:	68bb      	ldr	r3, [r7, #8]
 8014008:	fb03 f303 	mul.w	r3, r3, r3
 801400c:	6879      	ldr	r1, [r7, #4]
 801400e:	fb01 f303 	mul.w	r3, r1, r3
 8014012:	431a      	orrs	r2, r3
 8014014:	68fb      	ldr	r3, [r7, #12]
 8014016:	609a      	str	r2, [r3, #8]
}
 8014018:	bf00      	nop
 801401a:	3714      	adds	r7, #20
 801401c:	46bd      	mov	sp, r7
 801401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014022:	4770      	bx	lr

08014024 <LL_GPIO_SetPinPull>:
{
 8014024:	b480      	push	{r7}
 8014026:	b085      	sub	sp, #20
 8014028:	af00      	add	r7, sp, #0
 801402a:	60f8      	str	r0, [r7, #12]
 801402c:	60b9      	str	r1, [r7, #8]
 801402e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8014030:	68fb      	ldr	r3, [r7, #12]
 8014032:	68d9      	ldr	r1, [r3, #12]
 8014034:	68bb      	ldr	r3, [r7, #8]
 8014036:	fb03 f203 	mul.w	r2, r3, r3
 801403a:	4613      	mov	r3, r2
 801403c:	005b      	lsls	r3, r3, #1
 801403e:	4413      	add	r3, r2
 8014040:	43db      	mvns	r3, r3
 8014042:	ea01 0203 	and.w	r2, r1, r3
 8014046:	68bb      	ldr	r3, [r7, #8]
 8014048:	fb03 f303 	mul.w	r3, r3, r3
 801404c:	6879      	ldr	r1, [r7, #4]
 801404e:	fb01 f303 	mul.w	r3, r1, r3
 8014052:	431a      	orrs	r2, r3
 8014054:	68fb      	ldr	r3, [r7, #12]
 8014056:	60da      	str	r2, [r3, #12]
}
 8014058:	bf00      	nop
 801405a:	3714      	adds	r7, #20
 801405c:	46bd      	mov	sp, r7
 801405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014062:	4770      	bx	lr

08014064 <LL_GPIO_SetAFPin_0_7>:
{
 8014064:	b480      	push	{r7}
 8014066:	b085      	sub	sp, #20
 8014068:	af00      	add	r7, sp, #0
 801406a:	60f8      	str	r0, [r7, #12]
 801406c:	60b9      	str	r1, [r7, #8]
 801406e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8014070:	68fb      	ldr	r3, [r7, #12]
 8014072:	6a19      	ldr	r1, [r3, #32]
 8014074:	68bb      	ldr	r3, [r7, #8]
 8014076:	fb03 f303 	mul.w	r3, r3, r3
 801407a:	68ba      	ldr	r2, [r7, #8]
 801407c:	fb02 f303 	mul.w	r3, r2, r3
 8014080:	68ba      	ldr	r2, [r7, #8]
 8014082:	fb03 f202 	mul.w	r2, r3, r2
 8014086:	4613      	mov	r3, r2
 8014088:	011b      	lsls	r3, r3, #4
 801408a:	1a9b      	subs	r3, r3, r2
 801408c:	43db      	mvns	r3, r3
 801408e:	ea01 0203 	and.w	r2, r1, r3
 8014092:	68bb      	ldr	r3, [r7, #8]
 8014094:	fb03 f303 	mul.w	r3, r3, r3
 8014098:	68b9      	ldr	r1, [r7, #8]
 801409a:	fb01 f303 	mul.w	r3, r1, r3
 801409e:	68b9      	ldr	r1, [r7, #8]
 80140a0:	fb01 f303 	mul.w	r3, r1, r3
 80140a4:	6879      	ldr	r1, [r7, #4]
 80140a6:	fb01 f303 	mul.w	r3, r1, r3
 80140aa:	431a      	orrs	r2, r3
 80140ac:	68fb      	ldr	r3, [r7, #12]
 80140ae:	621a      	str	r2, [r3, #32]
}
 80140b0:	bf00      	nop
 80140b2:	3714      	adds	r7, #20
 80140b4:	46bd      	mov	sp, r7
 80140b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140ba:	4770      	bx	lr

080140bc <LL_GPIO_SetAFPin_8_15>:
{
 80140bc:	b480      	push	{r7}
 80140be:	b085      	sub	sp, #20
 80140c0:	af00      	add	r7, sp, #0
 80140c2:	60f8      	str	r0, [r7, #12]
 80140c4:	60b9      	str	r1, [r7, #8]
 80140c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 80140c8:	68fb      	ldr	r3, [r7, #12]
 80140ca:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80140cc:	68bb      	ldr	r3, [r7, #8]
 80140ce:	0a1b      	lsrs	r3, r3, #8
 80140d0:	68ba      	ldr	r2, [r7, #8]
 80140d2:	0a12      	lsrs	r2, r2, #8
 80140d4:	fb02 f303 	mul.w	r3, r2, r3
 80140d8:	68ba      	ldr	r2, [r7, #8]
 80140da:	0a12      	lsrs	r2, r2, #8
 80140dc:	fb02 f303 	mul.w	r3, r2, r3
 80140e0:	68ba      	ldr	r2, [r7, #8]
 80140e2:	0a12      	lsrs	r2, r2, #8
 80140e4:	fb03 f202 	mul.w	r2, r3, r2
 80140e8:	4613      	mov	r3, r2
 80140ea:	011b      	lsls	r3, r3, #4
 80140ec:	1a9b      	subs	r3, r3, r2
 80140ee:	43db      	mvns	r3, r3
 80140f0:	ea01 0203 	and.w	r2, r1, r3
 80140f4:	68bb      	ldr	r3, [r7, #8]
 80140f6:	0a1b      	lsrs	r3, r3, #8
 80140f8:	68b9      	ldr	r1, [r7, #8]
 80140fa:	0a09      	lsrs	r1, r1, #8
 80140fc:	fb01 f303 	mul.w	r3, r1, r3
 8014100:	68b9      	ldr	r1, [r7, #8]
 8014102:	0a09      	lsrs	r1, r1, #8
 8014104:	fb01 f303 	mul.w	r3, r1, r3
 8014108:	68b9      	ldr	r1, [r7, #8]
 801410a:	0a09      	lsrs	r1, r1, #8
 801410c:	fb01 f303 	mul.w	r3, r1, r3
 8014110:	6879      	ldr	r1, [r7, #4]
 8014112:	fb01 f303 	mul.w	r3, r1, r3
 8014116:	431a      	orrs	r2, r3
 8014118:	68fb      	ldr	r3, [r7, #12]
 801411a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 801411c:	bf00      	nop
 801411e:	3714      	adds	r7, #20
 8014120:	46bd      	mov	sp, r7
 8014122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014126:	4770      	bx	lr

08014128 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8014128:	b580      	push	{r7, lr}
 801412a:	b088      	sub	sp, #32
 801412c:	af00      	add	r7, sp, #0
 801412e:	6078      	str	r0, [r7, #4]
 8014130:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8014132:	683b      	ldr	r3, [r7, #0]
 8014134:	681b      	ldr	r3, [r3, #0]
 8014136:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014138:	693b      	ldr	r3, [r7, #16]
 801413a:	fa93 f3a3 	rbit	r3, r3
 801413e:	60fb      	str	r3, [r7, #12]
  return result;
 8014140:	68fb      	ldr	r3, [r7, #12]
 8014142:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8014144:	697b      	ldr	r3, [r7, #20]
 8014146:	2b00      	cmp	r3, #0
 8014148:	d101      	bne.n	801414e <LL_GPIO_Init+0x26>
    return 32U;
 801414a:	2320      	movs	r3, #32
 801414c:	e003      	b.n	8014156 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 801414e:	697b      	ldr	r3, [r7, #20]
 8014150:	fab3 f383 	clz	r3, r3
 8014154:	b2db      	uxtb	r3, r3
 8014156:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8014158:	e048      	b.n	80141ec <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 801415a:	683b      	ldr	r3, [r7, #0]
 801415c:	681a      	ldr	r2, [r3, #0]
 801415e:	2101      	movs	r1, #1
 8014160:	69fb      	ldr	r3, [r7, #28]
 8014162:	fa01 f303 	lsl.w	r3, r1, r3
 8014166:	4013      	ands	r3, r2
 8014168:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00000000U)
 801416a:	69bb      	ldr	r3, [r7, #24]
 801416c:	2b00      	cmp	r3, #0
 801416e:	d03a      	beq.n	80141e6 <LL_GPIO_Init+0xbe>
    {

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8014170:	683b      	ldr	r3, [r7, #0]
 8014172:	685b      	ldr	r3, [r3, #4]
 8014174:	2b01      	cmp	r3, #1
 8014176:	d003      	beq.n	8014180 <LL_GPIO_Init+0x58>
 8014178:	683b      	ldr	r3, [r7, #0]
 801417a:	685b      	ldr	r3, [r3, #4]
 801417c:	2b02      	cmp	r3, #2
 801417e:	d10e      	bne.n	801419e <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8014180:	683b      	ldr	r3, [r7, #0]
 8014182:	689b      	ldr	r3, [r3, #8]
 8014184:	461a      	mov	r2, r3
 8014186:	69b9      	ldr	r1, [r7, #24]
 8014188:	6878      	ldr	r0, [r7, #4]
 801418a:	f7ff ff2b 	bl	8013fe4 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 801418e:	683b      	ldr	r3, [r7, #0]
 8014190:	6819      	ldr	r1, [r3, #0]
 8014192:	683b      	ldr	r3, [r7, #0]
 8014194:	68db      	ldr	r3, [r3, #12]
 8014196:	461a      	mov	r2, r3
 8014198:	6878      	ldr	r0, [r7, #4]
 801419a:	f7ff ff0b 	bl	8013fb4 <LL_GPIO_SetPinOutputType>

      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 801419e:	683b      	ldr	r3, [r7, #0]
 80141a0:	691b      	ldr	r3, [r3, #16]
 80141a2:	461a      	mov	r2, r3
 80141a4:	69b9      	ldr	r1, [r7, #24]
 80141a6:	6878      	ldr	r0, [r7, #4]
 80141a8:	f7ff ff3c 	bl	8014024 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80141ac:	683b      	ldr	r3, [r7, #0]
 80141ae:	685b      	ldr	r3, [r3, #4]
 80141b0:	2b02      	cmp	r3, #2
 80141b2:	d111      	bne.n	80141d8 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80141b4:	69bb      	ldr	r3, [r7, #24]
 80141b6:	2bff      	cmp	r3, #255	@ 0xff
 80141b8:	d807      	bhi.n	80141ca <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80141ba:	683b      	ldr	r3, [r7, #0]
 80141bc:	695b      	ldr	r3, [r3, #20]
 80141be:	461a      	mov	r2, r3
 80141c0:	69b9      	ldr	r1, [r7, #24]
 80141c2:	6878      	ldr	r0, [r7, #4]
 80141c4:	f7ff ff4e 	bl	8014064 <LL_GPIO_SetAFPin_0_7>
 80141c8:	e006      	b.n	80141d8 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80141ca:	683b      	ldr	r3, [r7, #0]
 80141cc:	695b      	ldr	r3, [r3, #20]
 80141ce:	461a      	mov	r2, r3
 80141d0:	69b9      	ldr	r1, [r7, #24]
 80141d2:	6878      	ldr	r0, [r7, #4]
 80141d4:	f7ff ff72 	bl	80140bc <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80141d8:	683b      	ldr	r3, [r7, #0]
 80141da:	685b      	ldr	r3, [r3, #4]
 80141dc:	461a      	mov	r2, r3
 80141de:	69b9      	ldr	r1, [r7, #24]
 80141e0:	6878      	ldr	r0, [r7, #4]
 80141e2:	f7ff fec7 	bl	8013f74 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80141e6:	69fb      	ldr	r3, [r7, #28]
 80141e8:	3301      	adds	r3, #1
 80141ea:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80141ec:	683b      	ldr	r3, [r7, #0]
 80141ee:	681a      	ldr	r2, [r3, #0]
 80141f0:	69fb      	ldr	r3, [r7, #28]
 80141f2:	fa22 f303 	lsr.w	r3, r2, r3
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	d1af      	bne.n	801415a <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 80141fa:	2300      	movs	r3, #0
}
 80141fc:	4618      	mov	r0, r3
 80141fe:	3720      	adds	r7, #32
 8014200:	46bd      	mov	sp, r7
 8014202:	bd80      	pop	{r7, pc}

08014204 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8014204:	b480      	push	{r7}
 8014206:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8014208:	4b07      	ldr	r3, [pc, #28]	@ (8014228 <LL_RCC_HSE_IsReady+0x24>)
 801420a:	681b      	ldr	r3, [r3, #0]
 801420c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8014210:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8014214:	d101      	bne.n	801421a <LL_RCC_HSE_IsReady+0x16>
 8014216:	2301      	movs	r3, #1
 8014218:	e000      	b.n	801421c <LL_RCC_HSE_IsReady+0x18>
 801421a:	2300      	movs	r3, #0
}
 801421c:	4618      	mov	r0, r3
 801421e:	46bd      	mov	sp, r7
 8014220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014224:	4770      	bx	lr
 8014226:	bf00      	nop
 8014228:	58024400 	.word	0x58024400

0801422c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 801422c:	b480      	push	{r7}
 801422e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8014230:	4b06      	ldr	r3, [pc, #24]	@ (801424c <LL_RCC_HSI_IsReady+0x20>)
 8014232:	681b      	ldr	r3, [r3, #0]
 8014234:	f003 0304 	and.w	r3, r3, #4
 8014238:	2b04      	cmp	r3, #4
 801423a:	d101      	bne.n	8014240 <LL_RCC_HSI_IsReady+0x14>
 801423c:	2301      	movs	r3, #1
 801423e:	e000      	b.n	8014242 <LL_RCC_HSI_IsReady+0x16>
 8014240:	2300      	movs	r3, #0
}
 8014242:	4618      	mov	r0, r3
 8014244:	46bd      	mov	sp, r7
 8014246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801424a:	4770      	bx	lr
 801424c:	58024400 	.word	0x58024400

08014250 <LL_RCC_HSI_GetDivider>:
  *         @arg @ref LL_RCC_HSI_DIV2
  *         @arg @ref LL_RCC_HSI_DIV4
  *         @arg @ref LL_RCC_HSI_DIV8
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_GetDivider(void)
{
 8014250:	b480      	push	{r7}
 8014252:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIDIV));
 8014254:	4b04      	ldr	r3, [pc, #16]	@ (8014268 <LL_RCC_HSI_GetDivider+0x18>)
 8014256:	681b      	ldr	r3, [r3, #0]
 8014258:	f003 0318 	and.w	r3, r3, #24
}
 801425c:	4618      	mov	r0, r3
 801425e:	46bd      	mov	sp, r7
 8014260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014264:	4770      	bx	lr
 8014266:	bf00      	nop
 8014268:	58024400 	.word	0x58024400

0801426c <LL_RCC_CSI_IsReady>:
  * @brief  Check if CSI clock is ready
  * @rmtoll CR           CSIRDY        LL_RCC_CSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_CSI_IsReady(void)
{
 801426c:	b480      	push	{r7}
 801426e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_CSIRDY) == (RCC_CR_CSIRDY)) ? 1UL : 0UL);
 8014270:	4b07      	ldr	r3, [pc, #28]	@ (8014290 <LL_RCC_CSI_IsReady+0x24>)
 8014272:	681b      	ldr	r3, [r3, #0]
 8014274:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014278:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801427c:	d101      	bne.n	8014282 <LL_RCC_CSI_IsReady+0x16>
 801427e:	2301      	movs	r3, #1
 8014280:	e000      	b.n	8014284 <LL_RCC_CSI_IsReady+0x18>
 8014282:	2300      	movs	r3, #0
}
 8014284:	4618      	mov	r0, r3
 8014286:	46bd      	mov	sp, r7
 8014288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801428c:	4770      	bx	lr
 801428e:	bf00      	nop
 8014290:	58024400 	.word	0x58024400

08014294 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8014294:	b480      	push	{r7}
 8014296:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8014298:	4b06      	ldr	r3, [pc, #24]	@ (80142b4 <LL_RCC_LSE_IsReady+0x20>)
 801429a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801429c:	f003 0302 	and.w	r3, r3, #2
 80142a0:	2b02      	cmp	r3, #2
 80142a2:	d101      	bne.n	80142a8 <LL_RCC_LSE_IsReady+0x14>
 80142a4:	2301      	movs	r3, #1
 80142a6:	e000      	b.n	80142aa <LL_RCC_LSE_IsReady+0x16>
 80142a8:	2300      	movs	r3, #0
}
 80142aa:	4618      	mov	r0, r3
 80142ac:	46bd      	mov	sp, r7
 80142ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142b2:	4770      	bx	lr
 80142b4:	58024400 	.word	0x58024400

080142b8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_CSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL1
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80142b8:	b480      	push	{r7}
 80142ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80142bc:	4b04      	ldr	r3, [pc, #16]	@ (80142d0 <LL_RCC_GetSysClkSource+0x18>)
 80142be:	691b      	ldr	r3, [r3, #16]
 80142c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
}
 80142c4:	4618      	mov	r0, r3
 80142c6:	46bd      	mov	sp, r7
 80142c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142cc:	4770      	bx	lr
 80142ce:	bf00      	nop
 80142d0:	58024400 	.word	0x58024400

080142d4 <LL_RCC_GetSysPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysPrescaler(void)
{
 80142d4:	b480      	push	{r7}
 80142d6:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_D1CPRE)
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_D1CPRE));
 80142d8:	4b04      	ldr	r3, [pc, #16]	@ (80142ec <LL_RCC_GetSysPrescaler+0x18>)
 80142da:	699b      	ldr	r3, [r3, #24]
 80142dc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE));
#endif /* RCC_D1CFGR_D1CPRE */
}
 80142e0:	4618      	mov	r0, r3
 80142e2:	46bd      	mov	sp, r7
 80142e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142e8:	4770      	bx	lr
 80142ea:	bf00      	nop
 80142ec:	58024400 	.word	0x58024400

080142f0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_AHB_DIV_128
  *         @arg @ref LL_RCC_AHB_DIV_256
  *         @arg @ref LL_RCC_AHB_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80142f0:	b480      	push	{r7}
 80142f2:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_HPRE)
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_HPRE));
 80142f4:	4b04      	ldr	r3, [pc, #16]	@ (8014308 <LL_RCC_GetAHBPrescaler+0x18>)
 80142f6:	699b      	ldr	r3, [r3, #24]
 80142f8:	f003 030f 	and.w	r3, r3, #15
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR1, RCC_CDCFGR1_HPRE));
#endif /* RCC_D1CFGR_HPRE */
}
 80142fc:	4618      	mov	r0, r3
 80142fe:	46bd      	mov	sp, r7
 8014300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014304:	4770      	bx	lr
 8014306:	bf00      	nop
 8014308:	58024400 	.word	0x58024400

0801430c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 801430c:	b480      	push	{r7}
 801430e:	af00      	add	r7, sp, #0
#if defined(RCC_D2CFGR_D2PPRE1)
  return (uint32_t)(READ_BIT(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1));
 8014310:	4b04      	ldr	r3, [pc, #16]	@ (8014324 <LL_RCC_GetAPB1Prescaler+0x18>)
 8014312:	69db      	ldr	r3, [r3, #28]
 8014314:	f003 0370 	and.w	r3, r3, #112	@ 0x70
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1));
#endif /* RCC_D2CFGR_D2PPRE1 */
}
 8014318:	4618      	mov	r0, r3
 801431a:	46bd      	mov	sp, r7
 801431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014320:	4770      	bx	lr
 8014322:	bf00      	nop
 8014324:	58024400 	.word	0x58024400

08014328 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8014328:	b480      	push	{r7}
 801432a:	af00      	add	r7, sp, #0
#if defined(RCC_D2CFGR_D2PPRE2)
  return (uint32_t)(READ_BIT(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2));
 801432c:	4b04      	ldr	r3, [pc, #16]	@ (8014340 <LL_RCC_GetAPB2Prescaler+0x18>)
 801432e:	69db      	ldr	r3, [r3, #28]
 8014330:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2));
#endif /* RCC_D2CFGR_D2PPRE2 */
}
 8014334:	4618      	mov	r0, r3
 8014336:	46bd      	mov	sp, r7
 8014338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801433c:	4770      	bx	lr
 801433e:	bf00      	nop
 8014340:	58024400 	.word	0x58024400

08014344 <LL_RCC_GetClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_GetClockSource(uint32_t Periph)
{
 8014344:	b480      	push	{r7}
 8014346:	b085      	sub	sp, #20
 8014348:	af00      	add	r7, sp, #0
 801434a:	6078      	str	r0, [r7, #4]
#if defined(RCC_D1CCIPR_FMCSEL)
  const uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->D1CCIPR) + LL_CLKSOURCE_REG(Periph)));
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	b2da      	uxtb	r2, r3
 8014350:	4b0e      	ldr	r3, [pc, #56]	@ (801438c <LL_RCC_GetClockSource+0x48>)
 8014352:	4413      	add	r3, r2
 8014354:	60fb      	str	r3, [r7, #12]
#else
  const uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->CDCCIPR) + LL_CLKSOURCE_REG(Periph)));
#endif /* RCC_D1CCIPR_FMCSEL */
  return (uint32_t)(Periph | (((READ_BIT(*pReg, LL_CLKSOURCE_MASK(Periph))) >> LL_CLKSOURCE_SHIFT(Periph)) << LL_RCC_CONFIG_SHIFT));
 8014356:	68fb      	ldr	r3, [r7, #12]
 8014358:	681a      	ldr	r2, [r3, #0]
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	0e19      	lsrs	r1, r3, #24
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	0a1b      	lsrs	r3, r3, #8
 8014362:	f003 031f 	and.w	r3, r3, #31
 8014366:	fa01 f303 	lsl.w	r3, r1, r3
 801436a:	401a      	ands	r2, r3
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	0a1b      	lsrs	r3, r3, #8
 8014370:	f003 031f 	and.w	r3, r3, #31
 8014374:	fa22 f303 	lsr.w	r3, r2, r3
 8014378:	041a      	lsls	r2, r3, #16
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	4313      	orrs	r3, r2
}
 801437e:	4618      	mov	r0, r3
 8014380:	3714      	adds	r7, #20
 8014382:	46bd      	mov	sp, r7
 8014384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014388:	4770      	bx	lr
 801438a:	bf00      	nop
 801438c:	5802444c 	.word	0x5802444c

08014390 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_CSI
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t Periph)
{
 8014390:	b580      	push	{r7, lr}
 8014392:	b082      	sub	sp, #8
 8014394:	af00      	add	r7, sp, #0
 8014396:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
 8014398:	6878      	ldr	r0, [r7, #4]
 801439a:	f7ff ffd3 	bl	8014344 <LL_RCC_GetClockSource>
 801439e:	4603      	mov	r3, r0
}
 80143a0:	4618      	mov	r0, r3
 80143a2:	3708      	adds	r7, #8
 80143a4:	46bd      	mov	sp, r7
 80143a6:	bd80      	pop	{r7, pc}

080143a8 <LL_RCC_PLL_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_CSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetSource(void)
{
 80143a8:	b480      	push	{r7}
 80143aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_PLLSRC));
 80143ac:	4b04      	ldr	r3, [pc, #16]	@ (80143c0 <LL_RCC_PLL_GetSource+0x18>)
 80143ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80143b0:	f003 0303 	and.w	r3, r3, #3
}
 80143b4:	4618      	mov	r0, r3
 80143b6:	46bd      	mov	sp, r7
 80143b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143bc:	4770      	bx	lr
 80143be:	bf00      	nop
 80143c0:	58024400 	.word	0x58024400

080143c4 <LL_RCC_PLL1P_IsEnabled>:
  * @brief  Check if PLL1 P is enabled
  * @rmtoll PLLCFGR           DIVP1EN         LL_RCC_PLL1P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1P_IsEnabled(void)
{
 80143c4:	b480      	push	{r7}
 80143c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP1EN) == RCC_PLLCFGR_DIVP1EN) ? 1UL : 0UL);
 80143c8:	4b07      	ldr	r3, [pc, #28]	@ (80143e8 <LL_RCC_PLL1P_IsEnabled+0x24>)
 80143ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80143cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80143d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80143d4:	d101      	bne.n	80143da <LL_RCC_PLL1P_IsEnabled+0x16>
 80143d6:	2301      	movs	r3, #1
 80143d8:	e000      	b.n	80143dc <LL_RCC_PLL1P_IsEnabled+0x18>
 80143da:	2300      	movs	r3, #0
}
 80143dc:	4618      	mov	r0, r3
 80143de:	46bd      	mov	sp, r7
 80143e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143e4:	4770      	bx	lr
 80143e6:	bf00      	nop
 80143e8:	58024400 	.word	0x58024400

080143ec <LL_RCC_PLL1Q_IsEnabled>:
  * @brief  Check if PLL1 Q is enabled
  * @rmtoll PLLCFGR           DIVQ1EN         LL_RCC_PLL1Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1Q_IsEnabled(void)
{
 80143ec:	b480      	push	{r7}
 80143ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ1EN) == RCC_PLLCFGR_DIVQ1EN) ? 1UL : 0UL);
 80143f0:	4b07      	ldr	r3, [pc, #28]	@ (8014410 <LL_RCC_PLL1Q_IsEnabled+0x24>)
 80143f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80143f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80143f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80143fc:	d101      	bne.n	8014402 <LL_RCC_PLL1Q_IsEnabled+0x16>
 80143fe:	2301      	movs	r3, #1
 8014400:	e000      	b.n	8014404 <LL_RCC_PLL1Q_IsEnabled+0x18>
 8014402:	2300      	movs	r3, #0
}
 8014404:	4618      	mov	r0, r3
 8014406:	46bd      	mov	sp, r7
 8014408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801440c:	4770      	bx	lr
 801440e:	bf00      	nop
 8014410:	58024400 	.word	0x58024400

08014414 <LL_RCC_PLL1R_IsEnabled>:
  * @brief  Check if PLL1 R is enabled
  * @rmtoll PLLCFGR           DIVR1EN         LL_RCC_PLL1R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1R_IsEnabled(void)
{
 8014414:	b480      	push	{r7}
 8014416:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR1EN) == RCC_PLLCFGR_DIVR1EN) ? 1UL : 0UL);
 8014418:	4b07      	ldr	r3, [pc, #28]	@ (8014438 <LL_RCC_PLL1R_IsEnabled+0x24>)
 801441a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801441c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8014420:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8014424:	d101      	bne.n	801442a <LL_RCC_PLL1R_IsEnabled+0x16>
 8014426:	2301      	movs	r3, #1
 8014428:	e000      	b.n	801442c <LL_RCC_PLL1R_IsEnabled+0x18>
 801442a:	2300      	movs	r3, #0
}
 801442c:	4618      	mov	r0, r3
 801442e:	46bd      	mov	sp, r7
 8014430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014434:	4770      	bx	lr
 8014436:	bf00      	nop
 8014438:	58024400 	.word	0x58024400

0801443c <LL_RCC_PLL1FRACN_IsEnabled>:
  * @brief  Check if PLL1 FRACN is enabled
  * @rmtoll PLLCFGR           PLL1FRACEN         LL_RCC_PLL1FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1FRACN_IsEnabled(void)
{
 801443c:	b480      	push	{r7}
 801443e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1FRACEN) == RCC_PLLCFGR_PLL1FRACEN) ? 1UL : 0UL);
 8014440:	4b06      	ldr	r3, [pc, #24]	@ (801445c <LL_RCC_PLL1FRACN_IsEnabled+0x20>)
 8014442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014444:	f003 0301 	and.w	r3, r3, #1
 8014448:	2b01      	cmp	r3, #1
 801444a:	d101      	bne.n	8014450 <LL_RCC_PLL1FRACN_IsEnabled+0x14>
 801444c:	2301      	movs	r3, #1
 801444e:	e000      	b.n	8014452 <LL_RCC_PLL1FRACN_IsEnabled+0x16>
 8014450:	2300      	movs	r3, #0
}
 8014452:	4618      	mov	r0, r3
 8014454:	46bd      	mov	sp, r7
 8014456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801445a:	4770      	bx	lr
 801445c:	58024400 	.word	0x58024400

08014460 <LL_RCC_PLL1_GetN>:
  * @brief  Get PLL1 N Coefficient
  * @rmtoll PLL1DIVR        N1          LL_RCC_PLL1_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetN(void)
{
 8014460:	b480      	push	{r7}
 8014462:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_N1) >>  RCC_PLL1DIVR_N1_Pos) + 1UL);
 8014464:	4b04      	ldr	r3, [pc, #16]	@ (8014478 <LL_RCC_PLL1_GetN+0x18>)
 8014466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014468:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801446c:	3301      	adds	r3, #1
}
 801446e:	4618      	mov	r0, r3
 8014470:	46bd      	mov	sp, r7
 8014472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014476:	4770      	bx	lr
 8014478:	58024400 	.word	0x58024400

0801447c <LL_RCC_PLL1_GetM>:
  * @brief  Get PLL1 M Coefficient
  * @rmtoll PLLCKSELR       DIVM1          LL_RCC_PLL1_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetM(void)
{
 801447c:	b480      	push	{r7}
 801447e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM1) >>  RCC_PLLCKSELR_DIVM1_Pos);
 8014480:	4b04      	ldr	r3, [pc, #16]	@ (8014494 <LL_RCC_PLL1_GetM+0x18>)
 8014482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014484:	091b      	lsrs	r3, r3, #4
 8014486:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 801448a:	4618      	mov	r0, r3
 801448c:	46bd      	mov	sp, r7
 801448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014492:	4770      	bx	lr
 8014494:	58024400 	.word	0x58024400

08014498 <LL_RCC_PLL1_GetP>:
  * @brief  Get PLL1 P Coefficient
  * @rmtoll PLL1DIVR        P1          LL_RCC_PLL1_GetP
  * @retval A value between 2 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetP(void)
{
 8014498:	b480      	push	{r7}
 801449a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_P1) >>  RCC_PLL1DIVR_P1_Pos) + 1UL);
 801449c:	4b05      	ldr	r3, [pc, #20]	@ (80144b4 <LL_RCC_PLL1_GetP+0x1c>)
 801449e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80144a0:	0a5b      	lsrs	r3, r3, #9
 80144a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80144a6:	3301      	adds	r3, #1
}
 80144a8:	4618      	mov	r0, r3
 80144aa:	46bd      	mov	sp, r7
 80144ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144b0:	4770      	bx	lr
 80144b2:	bf00      	nop
 80144b4:	58024400 	.word	0x58024400

080144b8 <LL_RCC_PLL1_GetQ>:
  * @brief  Get PLL1 Q Coefficient
  * @rmtoll PLL1DIVR        Q1          LL_RCC_PLL1_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetQ(void)
{
 80144b8:	b480      	push	{r7}
 80144ba:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_Q1) >>  RCC_PLL1DIVR_Q1_Pos) + 1UL);
 80144bc:	4b05      	ldr	r3, [pc, #20]	@ (80144d4 <LL_RCC_PLL1_GetQ+0x1c>)
 80144be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80144c0:	0c1b      	lsrs	r3, r3, #16
 80144c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80144c6:	3301      	adds	r3, #1
}
 80144c8:	4618      	mov	r0, r3
 80144ca:	46bd      	mov	sp, r7
 80144cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144d0:	4770      	bx	lr
 80144d2:	bf00      	nop
 80144d4:	58024400 	.word	0x58024400

080144d8 <LL_RCC_PLL1_GetR>:
  * @brief  Get PLL1 R Coefficient
  * @rmtoll PLL1DIVR        R1          LL_RCC_PLL1_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetR(void)
{
 80144d8:	b480      	push	{r7}
 80144da:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_R1) >>  RCC_PLL1DIVR_R1_Pos) + 1UL);
 80144dc:	4b05      	ldr	r3, [pc, #20]	@ (80144f4 <LL_RCC_PLL1_GetR+0x1c>)
 80144de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80144e0:	0e1b      	lsrs	r3, r3, #24
 80144e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80144e6:	3301      	adds	r3, #1
}
 80144e8:	4618      	mov	r0, r3
 80144ea:	46bd      	mov	sp, r7
 80144ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144f0:	4770      	bx	lr
 80144f2:	bf00      	nop
 80144f4:	58024400 	.word	0x58024400

080144f8 <LL_RCC_PLL1_GetFRACN>:
  * @brief  Get PLL1 FRACN Coefficient
  * @rmtoll PLL1FRACR      FRACN1          LL_RCC_PLL1_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetFRACN(void)
{
 80144f8:	b480      	push	{r7}
 80144fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_FRACN1) >>  RCC_PLL1FRACR_FRACN1_Pos);
 80144fc:	4b04      	ldr	r3, [pc, #16]	@ (8014510 <LL_RCC_PLL1_GetFRACN+0x18>)
 80144fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014500:	08db      	lsrs	r3, r3, #3
 8014502:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 8014506:	4618      	mov	r0, r3
 8014508:	46bd      	mov	sp, r7
 801450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801450e:	4770      	bx	lr
 8014510:	58024400 	.word	0x58024400

08014514 <LL_RCC_PLL2_IsReady>:
  * @brief  Check if PLL2 Ready
  * @rmtoll CR           PLL2RDY        LL_RCC_PLL2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_IsReady(void)
{
 8014514:	b480      	push	{r7}
 8014516:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL2RDY) == (RCC_CR_PLL2RDY)) ? 1UL : 0UL);
 8014518:	4b07      	ldr	r3, [pc, #28]	@ (8014538 <LL_RCC_PLL2_IsReady+0x24>)
 801451a:	681b      	ldr	r3, [r3, #0]
 801451c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8014520:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8014524:	d101      	bne.n	801452a <LL_RCC_PLL2_IsReady+0x16>
 8014526:	2301      	movs	r3, #1
 8014528:	e000      	b.n	801452c <LL_RCC_PLL2_IsReady+0x18>
 801452a:	2300      	movs	r3, #0
}
 801452c:	4618      	mov	r0, r3
 801452e:	46bd      	mov	sp, r7
 8014530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014534:	4770      	bx	lr
 8014536:	bf00      	nop
 8014538:	58024400 	.word	0x58024400

0801453c <LL_RCC_PLL2P_IsEnabled>:
  * @brief  Check if PLL2 P is enabled
  * @rmtoll PLLCFGR           DIVP2EN         LL_RCC_PLL2P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2P_IsEnabled(void)
{
 801453c:	b480      	push	{r7}
 801453e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP2EN) == RCC_PLLCFGR_DIVP2EN) ? 1UL : 0UL);
 8014540:	4b07      	ldr	r3, [pc, #28]	@ (8014560 <LL_RCC_PLL2P_IsEnabled+0x24>)
 8014542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014544:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8014548:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 801454c:	d101      	bne.n	8014552 <LL_RCC_PLL2P_IsEnabled+0x16>
 801454e:	2301      	movs	r3, #1
 8014550:	e000      	b.n	8014554 <LL_RCC_PLL2P_IsEnabled+0x18>
 8014552:	2300      	movs	r3, #0
}
 8014554:	4618      	mov	r0, r3
 8014556:	46bd      	mov	sp, r7
 8014558:	f85d 7b04 	ldr.w	r7, [sp], #4
 801455c:	4770      	bx	lr
 801455e:	bf00      	nop
 8014560:	58024400 	.word	0x58024400

08014564 <LL_RCC_PLL2Q_IsEnabled>:
  * @brief  Check if PLL2 Q is enabled
  * @rmtoll PLLCFGR           DIVQ2EN         LL_RCC_PLL2Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2Q_IsEnabled(void)
{
 8014564:	b480      	push	{r7}
 8014566:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ2EN) == RCC_PLLCFGR_DIVQ2EN) ? 1UL : 0UL);
 8014568:	4b07      	ldr	r3, [pc, #28]	@ (8014588 <LL_RCC_PLL2Q_IsEnabled+0x24>)
 801456a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801456c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8014570:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8014574:	d101      	bne.n	801457a <LL_RCC_PLL2Q_IsEnabled+0x16>
 8014576:	2301      	movs	r3, #1
 8014578:	e000      	b.n	801457c <LL_RCC_PLL2Q_IsEnabled+0x18>
 801457a:	2300      	movs	r3, #0
}
 801457c:	4618      	mov	r0, r3
 801457e:	46bd      	mov	sp, r7
 8014580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014584:	4770      	bx	lr
 8014586:	bf00      	nop
 8014588:	58024400 	.word	0x58024400

0801458c <LL_RCC_PLL2R_IsEnabled>:
  * @brief  Check if PLL2 R is enabled
  * @rmtoll PLLCFGR           DIVR2EN         LL_RCC_PLL2R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2R_IsEnabled(void)
{
 801458c:	b480      	push	{r7}
 801458e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR2EN) == RCC_PLLCFGR_DIVR2EN) ? 1UL : 0UL);
 8014590:	4b07      	ldr	r3, [pc, #28]	@ (80145b0 <LL_RCC_PLL2R_IsEnabled+0x24>)
 8014592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014594:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8014598:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801459c:	d101      	bne.n	80145a2 <LL_RCC_PLL2R_IsEnabled+0x16>
 801459e:	2301      	movs	r3, #1
 80145a0:	e000      	b.n	80145a4 <LL_RCC_PLL2R_IsEnabled+0x18>
 80145a2:	2300      	movs	r3, #0
}
 80145a4:	4618      	mov	r0, r3
 80145a6:	46bd      	mov	sp, r7
 80145a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145ac:	4770      	bx	lr
 80145ae:	bf00      	nop
 80145b0:	58024400 	.word	0x58024400

080145b4 <LL_RCC_PLL2FRACN_IsEnabled>:
  * @brief  Check if PLL2 FRACN is enabled
  * @rmtoll PLLCFGR           PLL2FRACEN         LL_RCC_PLL2FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2FRACN_IsEnabled(void)
{
 80145b4:	b480      	push	{r7}
 80145b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL2FRACEN) == RCC_PLLCFGR_PLL2FRACEN) ? 1UL : 0UL);
 80145b8:	4b06      	ldr	r3, [pc, #24]	@ (80145d4 <LL_RCC_PLL2FRACN_IsEnabled+0x20>)
 80145ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80145bc:	f003 0310 	and.w	r3, r3, #16
 80145c0:	2b10      	cmp	r3, #16
 80145c2:	d101      	bne.n	80145c8 <LL_RCC_PLL2FRACN_IsEnabled+0x14>
 80145c4:	2301      	movs	r3, #1
 80145c6:	e000      	b.n	80145ca <LL_RCC_PLL2FRACN_IsEnabled+0x16>
 80145c8:	2300      	movs	r3, #0
}
 80145ca:	4618      	mov	r0, r3
 80145cc:	46bd      	mov	sp, r7
 80145ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145d2:	4770      	bx	lr
 80145d4:	58024400 	.word	0x58024400

080145d8 <LL_RCC_PLL2_GetN>:
  * @brief  Get PLL2 N Coefficient
  * @rmtoll PLL2DIVR        N2          LL_RCC_PLL2_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetN(void)
{
 80145d8:	b480      	push	{r7}
 80145da:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_N2) >>  RCC_PLL2DIVR_N2_Pos) + 1UL);
 80145dc:	4b04      	ldr	r3, [pc, #16]	@ (80145f0 <LL_RCC_PLL2_GetN+0x18>)
 80145de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80145e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80145e4:	3301      	adds	r3, #1
}
 80145e6:	4618      	mov	r0, r3
 80145e8:	46bd      	mov	sp, r7
 80145ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145ee:	4770      	bx	lr
 80145f0:	58024400 	.word	0x58024400

080145f4 <LL_RCC_PLL2_GetM>:
  * @brief  Get PLL2 M Coefficient
  * @rmtoll PLLCKSELR       DIVM2          LL_RCC_PLL2_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetM(void)
{
 80145f4:	b480      	push	{r7}
 80145f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM2) >>  RCC_PLLCKSELR_DIVM2_Pos);
 80145f8:	4b04      	ldr	r3, [pc, #16]	@ (801460c <LL_RCC_PLL2_GetM+0x18>)
 80145fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80145fc:	0b1b      	lsrs	r3, r3, #12
 80145fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8014602:	4618      	mov	r0, r3
 8014604:	46bd      	mov	sp, r7
 8014606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801460a:	4770      	bx	lr
 801460c:	58024400 	.word	0x58024400

08014610 <LL_RCC_PLL2_GetP>:
  * @brief  Get PLL2 P Coefficient
  * @rmtoll PLL2DIVR        P2          LL_RCC_PLL2_GetP
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetP(void)
{
 8014610:	b480      	push	{r7}
 8014612:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_P2) >>  RCC_PLL2DIVR_P2_Pos) + 1UL);
 8014614:	4b05      	ldr	r3, [pc, #20]	@ (801462c <LL_RCC_PLL2_GetP+0x1c>)
 8014616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014618:	0a5b      	lsrs	r3, r3, #9
 801461a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801461e:	3301      	adds	r3, #1
}
 8014620:	4618      	mov	r0, r3
 8014622:	46bd      	mov	sp, r7
 8014624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014628:	4770      	bx	lr
 801462a:	bf00      	nop
 801462c:	58024400 	.word	0x58024400

08014630 <LL_RCC_PLL2_GetQ>:
  * @brief  Get PLL2 Q Coefficient
  * @rmtoll PLL2DIVR        Q2          LL_RCC_PLL2_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetQ(void)
{
 8014630:	b480      	push	{r7}
 8014632:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_Q2) >>  RCC_PLL2DIVR_Q2_Pos) + 1UL);
 8014634:	4b05      	ldr	r3, [pc, #20]	@ (801464c <LL_RCC_PLL2_GetQ+0x1c>)
 8014636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014638:	0c1b      	lsrs	r3, r3, #16
 801463a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801463e:	3301      	adds	r3, #1
}
 8014640:	4618      	mov	r0, r3
 8014642:	46bd      	mov	sp, r7
 8014644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014648:	4770      	bx	lr
 801464a:	bf00      	nop
 801464c:	58024400 	.word	0x58024400

08014650 <LL_RCC_PLL2_GetR>:
  * @brief  Get PLL2 R Coefficient
  * @rmtoll PLL2DIVR        R2          LL_RCC_PLL2_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetR(void)
{
 8014650:	b480      	push	{r7}
 8014652:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_R2) >>  RCC_PLL2DIVR_R2_Pos) + 1UL);
 8014654:	4b05      	ldr	r3, [pc, #20]	@ (801466c <LL_RCC_PLL2_GetR+0x1c>)
 8014656:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014658:	0e1b      	lsrs	r3, r3, #24
 801465a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801465e:	3301      	adds	r3, #1
}
 8014660:	4618      	mov	r0, r3
 8014662:	46bd      	mov	sp, r7
 8014664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014668:	4770      	bx	lr
 801466a:	bf00      	nop
 801466c:	58024400 	.word	0x58024400

08014670 <LL_RCC_PLL2_GetFRACN>:
  * @brief  Get PLL2 FRACN Coefficient
  * @rmtoll PLL2FRACR      FRACN2          LL_RCC_PLL2_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetFRACN(void)
{
 8014670:	b480      	push	{r7}
 8014672:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2FRACR, RCC_PLL2FRACR_FRACN2) >>  RCC_PLL2FRACR_FRACN2_Pos);
 8014674:	4b04      	ldr	r3, [pc, #16]	@ (8014688 <LL_RCC_PLL2_GetFRACN+0x18>)
 8014676:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014678:	08db      	lsrs	r3, r3, #3
 801467a:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 801467e:	4618      	mov	r0, r3
 8014680:	46bd      	mov	sp, r7
 8014682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014686:	4770      	bx	lr
 8014688:	58024400 	.word	0x58024400

0801468c <LL_RCC_PLL3_IsReady>:
  * @brief  Check if PLL3 Ready
  * @rmtoll CR           PLL3RDY        LL_RCC_PLL3_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_IsReady(void)
{
 801468c:	b480      	push	{r7}
 801468e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL3RDY) == (RCC_CR_PLL3RDY)) ? 1UL : 0UL);
 8014690:	4b07      	ldr	r3, [pc, #28]	@ (80146b0 <LL_RCC_PLL3_IsReady+0x24>)
 8014692:	681b      	ldr	r3, [r3, #0]
 8014694:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8014698:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801469c:	d101      	bne.n	80146a2 <LL_RCC_PLL3_IsReady+0x16>
 801469e:	2301      	movs	r3, #1
 80146a0:	e000      	b.n	80146a4 <LL_RCC_PLL3_IsReady+0x18>
 80146a2:	2300      	movs	r3, #0
}
 80146a4:	4618      	mov	r0, r3
 80146a6:	46bd      	mov	sp, r7
 80146a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146ac:	4770      	bx	lr
 80146ae:	bf00      	nop
 80146b0:	58024400 	.word	0x58024400

080146b4 <LL_RCC_PLL3P_IsEnabled>:
  * @brief  Check if PLL3 P is enabled
  * @rmtoll PLLCFGR           DIVP3EN         LL_RCC_PLL3P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3P_IsEnabled(void)
{
 80146b4:	b480      	push	{r7}
 80146b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP3EN) == RCC_PLLCFGR_DIVP3EN) ? 1UL : 0UL);
 80146b8:	4b07      	ldr	r3, [pc, #28]	@ (80146d8 <LL_RCC_PLL3P_IsEnabled+0x24>)
 80146ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80146bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80146c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80146c4:	d101      	bne.n	80146ca <LL_RCC_PLL3P_IsEnabled+0x16>
 80146c6:	2301      	movs	r3, #1
 80146c8:	e000      	b.n	80146cc <LL_RCC_PLL3P_IsEnabled+0x18>
 80146ca:	2300      	movs	r3, #0
}
 80146cc:	4618      	mov	r0, r3
 80146ce:	46bd      	mov	sp, r7
 80146d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146d4:	4770      	bx	lr
 80146d6:	bf00      	nop
 80146d8:	58024400 	.word	0x58024400

080146dc <LL_RCC_PLL3Q_IsEnabled>:
  * @brief  Check if PLL3 Q is enabled
  * @rmtoll PLLCFGR           DIVQ3EN         LL_RCC_PLL3Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3Q_IsEnabled(void)
{
 80146dc:	b480      	push	{r7}
 80146de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ3EN) == RCC_PLLCFGR_DIVQ3EN) ? 1UL : 0UL);
 80146e0:	4b07      	ldr	r3, [pc, #28]	@ (8014700 <LL_RCC_PLL3Q_IsEnabled+0x24>)
 80146e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80146e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80146e8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80146ec:	d101      	bne.n	80146f2 <LL_RCC_PLL3Q_IsEnabled+0x16>
 80146ee:	2301      	movs	r3, #1
 80146f0:	e000      	b.n	80146f4 <LL_RCC_PLL3Q_IsEnabled+0x18>
 80146f2:	2300      	movs	r3, #0
}
 80146f4:	4618      	mov	r0, r3
 80146f6:	46bd      	mov	sp, r7
 80146f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146fc:	4770      	bx	lr
 80146fe:	bf00      	nop
 8014700:	58024400 	.word	0x58024400

08014704 <LL_RCC_PLL3R_IsEnabled>:
  * @brief  Check if PLL3 R is enabled
  * @rmtoll PLLCFGR           DIVR3EN         LL_RCC_PLL3R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3R_IsEnabled(void)
{
 8014704:	b480      	push	{r7}
 8014706:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR3EN) == RCC_PLLCFGR_DIVR3EN) ? 1UL : 0UL);
 8014708:	4b07      	ldr	r3, [pc, #28]	@ (8014728 <LL_RCC_PLL3R_IsEnabled+0x24>)
 801470a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801470c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8014710:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8014714:	d101      	bne.n	801471a <LL_RCC_PLL3R_IsEnabled+0x16>
 8014716:	2301      	movs	r3, #1
 8014718:	e000      	b.n	801471c <LL_RCC_PLL3R_IsEnabled+0x18>
 801471a:	2300      	movs	r3, #0
}
 801471c:	4618      	mov	r0, r3
 801471e:	46bd      	mov	sp, r7
 8014720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014724:	4770      	bx	lr
 8014726:	bf00      	nop
 8014728:	58024400 	.word	0x58024400

0801472c <LL_RCC_PLL3FRACN_IsEnabled>:
  * @brief  Check if PLL3 FRACN is enabled
  * @rmtoll PLLCFGR           PLL3FRACEN         LL_RCC_PLL3FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3FRACN_IsEnabled(void)
{
 801472c:	b480      	push	{r7}
 801472e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL3FRACEN) == RCC_PLLCFGR_PLL3FRACEN) ? 1UL : 0UL);
 8014730:	4b07      	ldr	r3, [pc, #28]	@ (8014750 <LL_RCC_PLL3FRACN_IsEnabled+0x24>)
 8014732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014734:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014738:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801473c:	d101      	bne.n	8014742 <LL_RCC_PLL3FRACN_IsEnabled+0x16>
 801473e:	2301      	movs	r3, #1
 8014740:	e000      	b.n	8014744 <LL_RCC_PLL3FRACN_IsEnabled+0x18>
 8014742:	2300      	movs	r3, #0
}
 8014744:	4618      	mov	r0, r3
 8014746:	46bd      	mov	sp, r7
 8014748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801474c:	4770      	bx	lr
 801474e:	bf00      	nop
 8014750:	58024400 	.word	0x58024400

08014754 <LL_RCC_PLL3_GetN>:
  * @brief  Get PLL3 N Coefficient
  * @rmtoll PLL3DIVR        N3          LL_RCC_PLL3_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetN(void)
{
 8014754:	b480      	push	{r7}
 8014756:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_N3) >>  RCC_PLL3DIVR_N3_Pos) + 1UL);
 8014758:	4b04      	ldr	r3, [pc, #16]	@ (801476c <LL_RCC_PLL3_GetN+0x18>)
 801475a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801475c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014760:	3301      	adds	r3, #1
}
 8014762:	4618      	mov	r0, r3
 8014764:	46bd      	mov	sp, r7
 8014766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801476a:	4770      	bx	lr
 801476c:	58024400 	.word	0x58024400

08014770 <LL_RCC_PLL3_GetM>:
  * @brief  Get PLL3 M Coefficient
  * @rmtoll PLLCKSELR       DIVM3          LL_RCC_PLL3_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetM(void)
{
 8014770:	b480      	push	{r7}
 8014772:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM3) >>  RCC_PLLCKSELR_DIVM3_Pos);
 8014774:	4b04      	ldr	r3, [pc, #16]	@ (8014788 <LL_RCC_PLL3_GetM+0x18>)
 8014776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014778:	0d1b      	lsrs	r3, r3, #20
 801477a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 801477e:	4618      	mov	r0, r3
 8014780:	46bd      	mov	sp, r7
 8014782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014786:	4770      	bx	lr
 8014788:	58024400 	.word	0x58024400

0801478c <LL_RCC_PLL3_GetP>:
  * @brief  Get PLL3 P Coefficient
  * @rmtoll PLL3DIVR        P3          LL_RCC_PLL3_GetP
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetP(void)
{
 801478c:	b480      	push	{r7}
 801478e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_P3) >>  RCC_PLL3DIVR_P3_Pos) + 1UL);
 8014790:	4b05      	ldr	r3, [pc, #20]	@ (80147a8 <LL_RCC_PLL3_GetP+0x1c>)
 8014792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014794:	0a5b      	lsrs	r3, r3, #9
 8014796:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801479a:	3301      	adds	r3, #1
}
 801479c:	4618      	mov	r0, r3
 801479e:	46bd      	mov	sp, r7
 80147a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147a4:	4770      	bx	lr
 80147a6:	bf00      	nop
 80147a8:	58024400 	.word	0x58024400

080147ac <LL_RCC_PLL3_GetQ>:
  * @brief  Get PLL3 Q Coefficient
  * @rmtoll PLL3DIVR        Q3          LL_RCC_PLL3_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetQ(void)
{
 80147ac:	b480      	push	{r7}
 80147ae:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_Q3) >>  RCC_PLL3DIVR_Q3_Pos) + 1UL);
 80147b0:	4b05      	ldr	r3, [pc, #20]	@ (80147c8 <LL_RCC_PLL3_GetQ+0x1c>)
 80147b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80147b4:	0c1b      	lsrs	r3, r3, #16
 80147b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80147ba:	3301      	adds	r3, #1
}
 80147bc:	4618      	mov	r0, r3
 80147be:	46bd      	mov	sp, r7
 80147c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147c4:	4770      	bx	lr
 80147c6:	bf00      	nop
 80147c8:	58024400 	.word	0x58024400

080147cc <LL_RCC_PLL3_GetR>:
  * @brief  Get PLL3 R Coefficient
  * @rmtoll PLL3DIVR        R3          LL_RCC_PLL3_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetR(void)
{
 80147cc:	b480      	push	{r7}
 80147ce:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_R3) >>  RCC_PLL3DIVR_R3_Pos) + 1UL);
 80147d0:	4b05      	ldr	r3, [pc, #20]	@ (80147e8 <LL_RCC_PLL3_GetR+0x1c>)
 80147d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80147d4:	0e1b      	lsrs	r3, r3, #24
 80147d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80147da:	3301      	adds	r3, #1
}
 80147dc:	4618      	mov	r0, r3
 80147de:	46bd      	mov	sp, r7
 80147e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147e4:	4770      	bx	lr
 80147e6:	bf00      	nop
 80147e8:	58024400 	.word	0x58024400

080147ec <LL_RCC_PLL3_GetFRACN>:
  * @brief  Get PLL3 FRACN Coefficient
  * @rmtoll PLL3FRACR      FRACN3          LL_RCC_PLL3_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetFRACN(void)
{
 80147ec:	b480      	push	{r7}
 80147ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3FRACR, RCC_PLL3FRACR_FRACN3) >>  RCC_PLL3FRACR_FRACN3_Pos);
 80147f0:	4b04      	ldr	r3, [pc, #16]	@ (8014804 <LL_RCC_PLL3_GetFRACN+0x18>)
 80147f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80147f4:	08db      	lsrs	r3, r3, #3
 80147f6:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 80147fa:	4618      	mov	r0, r3
 80147fc:	46bd      	mov	sp, r7
 80147fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014802:	4770      	bx	lr
 8014804:	58024400 	.word	0x58024400

08014808 <LL_RCC_GetPLL1ClockFreq>:
  * @brief  Return PLL1 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL1ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 8014808:	b580      	push	{r7, lr}
 801480a:	b08a      	sub	sp, #40	@ 0x28
 801480c:	af02      	add	r7, sp, #8
 801480e:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 8014810:	2300      	movs	r3, #0
 8014812:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 8014814:	2300      	movs	r3, #0
 8014816:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 8014818:	f7ff fdc6 	bl	80143a8 <LL_RCC_PLL_GetSource>
 801481c:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 801481e:	697b      	ldr	r3, [r7, #20]
 8014820:	2b02      	cmp	r3, #2
 8014822:	d01f      	beq.n	8014864 <LL_RCC_GetPLL1ClockFreq+0x5c>
 8014824:	697b      	ldr	r3, [r7, #20]
 8014826:	2b02      	cmp	r3, #2
 8014828:	d824      	bhi.n	8014874 <LL_RCC_GetPLL1ClockFreq+0x6c>
 801482a:	697b      	ldr	r3, [r7, #20]
 801482c:	2b00      	cmp	r3, #0
 801482e:	d003      	beq.n	8014838 <LL_RCC_GetPLL1ClockFreq+0x30>
 8014830:	697b      	ldr	r3, [r7, #20]
 8014832:	2b01      	cmp	r3, #1
 8014834:	d00e      	beq.n	8014854 <LL_RCC_GetPLL1ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 8014836:	e01d      	b.n	8014874 <LL_RCC_GetPLL1ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 8014838:	f7ff fcf8 	bl	801422c <LL_RCC_HSI_IsReady>
 801483c:	4603      	mov	r3, r0
 801483e:	2b00      	cmp	r3, #0
 8014840:	d01a      	beq.n	8014878 <LL_RCC_GetPLL1ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 8014842:	f7ff fd05 	bl	8014250 <LL_RCC_HSI_GetDivider>
 8014846:	4603      	mov	r3, r0
 8014848:	08db      	lsrs	r3, r3, #3
 801484a:	4a38      	ldr	r2, [pc, #224]	@ (801492c <LL_RCC_GetPLL1ClockFreq+0x124>)
 801484c:	fa22 f303 	lsr.w	r3, r2, r3
 8014850:	61fb      	str	r3, [r7, #28]
      break;
 8014852:	e011      	b.n	8014878 <LL_RCC_GetPLL1ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 8014854:	f7ff fd0a 	bl	801426c <LL_RCC_CSI_IsReady>
 8014858:	4603      	mov	r3, r0
 801485a:	2b00      	cmp	r3, #0
 801485c:	d00e      	beq.n	801487c <LL_RCC_GetPLL1ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 801485e:	4b34      	ldr	r3, [pc, #208]	@ (8014930 <LL_RCC_GetPLL1ClockFreq+0x128>)
 8014860:	61fb      	str	r3, [r7, #28]
      break;
 8014862:	e00b      	b.n	801487c <LL_RCC_GetPLL1ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 8014864:	f7ff fcce 	bl	8014204 <LL_RCC_HSE_IsReady>
 8014868:	4603      	mov	r3, r0
 801486a:	2b00      	cmp	r3, #0
 801486c:	d008      	beq.n	8014880 <LL_RCC_GetPLL1ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 801486e:	4b31      	ldr	r3, [pc, #196]	@ (8014934 <LL_RCC_GetPLL1ClockFreq+0x12c>)
 8014870:	61fb      	str	r3, [r7, #28]
      break;
 8014872:	e005      	b.n	8014880 <LL_RCC_GetPLL1ClockFreq+0x78>
      break;
 8014874:	bf00      	nop
 8014876:	e004      	b.n	8014882 <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 8014878:	bf00      	nop
 801487a:	e002      	b.n	8014882 <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 801487c:	bf00      	nop
 801487e:	e000      	b.n	8014882 <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 8014880:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	2200      	movs	r2, #0
 8014886:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	2200      	movs	r2, #0
 801488c:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	2200      	movs	r2, #0
 8014892:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL1_GetM();
 8014894:	f7ff fdf2 	bl	801447c <LL_RCC_PLL1_GetM>
 8014898:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL1_GetN();
 801489a:	f7ff fde1 	bl	8014460 <LL_RCC_PLL1_GetN>
 801489e:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL1FRACN_IsEnabled() != 0U)
 80148a0:	f7ff fdcc 	bl	801443c <LL_RCC_PLL1FRACN_IsEnabled>
 80148a4:	4603      	mov	r3, r0
 80148a6:	2b00      	cmp	r3, #0
 80148a8:	d002      	beq.n	80148b0 <LL_RCC_GetPLL1ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL1_GetFRACN();
 80148aa:	f7ff fe25 	bl	80144f8 <LL_RCC_PLL1_GetFRACN>
 80148ae:	61b8      	str	r0, [r7, #24]
  }

  if (m != 0U)
 80148b0:	693b      	ldr	r3, [r7, #16]
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	d035      	beq.n	8014922 <LL_RCC_GetPLL1ClockFreq+0x11a>
  {
    if (LL_RCC_PLL1P_IsEnabled() != 0U)
 80148b6:	f7ff fd85 	bl	80143c4 <LL_RCC_PLL1P_IsEnabled>
 80148ba:	4603      	mov	r3, r0
 80148bc:	2b00      	cmp	r3, #0
 80148be:	d00c      	beq.n	80148da <LL_RCC_GetPLL1ClockFreq+0xd2>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetP());
 80148c0:	f7ff fdea 	bl	8014498 <LL_RCC_PLL1_GetP>
 80148c4:	4603      	mov	r3, r0
 80148c6:	9300      	str	r3, [sp, #0]
 80148c8:	69bb      	ldr	r3, [r7, #24]
 80148ca:	68fa      	ldr	r2, [r7, #12]
 80148cc:	6939      	ldr	r1, [r7, #16]
 80148ce:	69f8      	ldr	r0, [r7, #28]
 80148d0:	f000 f964 	bl	8014b9c <LL_RCC_CalcPLLClockFreq>
 80148d4:	4602      	mov	r2, r0
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL1Q_IsEnabled() != 0U)
 80148da:	f7ff fd87 	bl	80143ec <LL_RCC_PLL1Q_IsEnabled>
 80148de:	4603      	mov	r3, r0
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	d00c      	beq.n	80148fe <LL_RCC_GetPLL1ClockFreq+0xf6>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetQ());
 80148e4:	f7ff fde8 	bl	80144b8 <LL_RCC_PLL1_GetQ>
 80148e8:	4603      	mov	r3, r0
 80148ea:	9300      	str	r3, [sp, #0]
 80148ec:	69bb      	ldr	r3, [r7, #24]
 80148ee:	68fa      	ldr	r2, [r7, #12]
 80148f0:	6939      	ldr	r1, [r7, #16]
 80148f2:	69f8      	ldr	r0, [r7, #28]
 80148f4:	f000 f952 	bl	8014b9c <LL_RCC_CalcPLLClockFreq>
 80148f8:	4602      	mov	r2, r0
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL1R_IsEnabled() != 0U)
 80148fe:	f7ff fd89 	bl	8014414 <LL_RCC_PLL1R_IsEnabled>
 8014902:	4603      	mov	r3, r0
 8014904:	2b00      	cmp	r3, #0
 8014906:	d00c      	beq.n	8014922 <LL_RCC_GetPLL1ClockFreq+0x11a>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetR());
 8014908:	f7ff fde6 	bl	80144d8 <LL_RCC_PLL1_GetR>
 801490c:	4603      	mov	r3, r0
 801490e:	9300      	str	r3, [sp, #0]
 8014910:	69bb      	ldr	r3, [r7, #24]
 8014912:	68fa      	ldr	r2, [r7, #12]
 8014914:	6939      	ldr	r1, [r7, #16]
 8014916:	69f8      	ldr	r0, [r7, #28]
 8014918:	f000 f940 	bl	8014b9c <LL_RCC_CalcPLLClockFreq>
 801491c:	4602      	mov	r2, r0
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	609a      	str	r2, [r3, #8]
    }
  }
}
 8014922:	bf00      	nop
 8014924:	3720      	adds	r7, #32
 8014926:	46bd      	mov	sp, r7
 8014928:	bd80      	pop	{r7, pc}
 801492a:	bf00      	nop
 801492c:	03d09000 	.word	0x03d09000
 8014930:	003d0900 	.word	0x003d0900
 8014934:	017d7840 	.word	0x017d7840

08014938 <LL_RCC_GetPLL2ClockFreq>:
  * @brief  Return PLL2 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL2ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 8014938:	b580      	push	{r7, lr}
 801493a:	b08a      	sub	sp, #40	@ 0x28
 801493c:	af02      	add	r7, sp, #8
 801493e:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 8014940:	2300      	movs	r3, #0
 8014942:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 8014944:	2300      	movs	r3, #0
 8014946:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 8014948:	f7ff fd2e 	bl	80143a8 <LL_RCC_PLL_GetSource>
 801494c:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 801494e:	697b      	ldr	r3, [r7, #20]
 8014950:	2b02      	cmp	r3, #2
 8014952:	d01f      	beq.n	8014994 <LL_RCC_GetPLL2ClockFreq+0x5c>
 8014954:	697b      	ldr	r3, [r7, #20]
 8014956:	2b02      	cmp	r3, #2
 8014958:	d824      	bhi.n	80149a4 <LL_RCC_GetPLL2ClockFreq+0x6c>
 801495a:	697b      	ldr	r3, [r7, #20]
 801495c:	2b00      	cmp	r3, #0
 801495e:	d003      	beq.n	8014968 <LL_RCC_GetPLL2ClockFreq+0x30>
 8014960:	697b      	ldr	r3, [r7, #20]
 8014962:	2b01      	cmp	r3, #1
 8014964:	d00e      	beq.n	8014984 <LL_RCC_GetPLL2ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 8014966:	e01d      	b.n	80149a4 <LL_RCC_GetPLL2ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 8014968:	f7ff fc60 	bl	801422c <LL_RCC_HSI_IsReady>
 801496c:	4603      	mov	r3, r0
 801496e:	2b00      	cmp	r3, #0
 8014970:	d01a      	beq.n	80149a8 <LL_RCC_GetPLL2ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 8014972:	f7ff fc6d 	bl	8014250 <LL_RCC_HSI_GetDivider>
 8014976:	4603      	mov	r3, r0
 8014978:	08db      	lsrs	r3, r3, #3
 801497a:	4a38      	ldr	r2, [pc, #224]	@ (8014a5c <LL_RCC_GetPLL2ClockFreq+0x124>)
 801497c:	fa22 f303 	lsr.w	r3, r2, r3
 8014980:	61fb      	str	r3, [r7, #28]
      break;
 8014982:	e011      	b.n	80149a8 <LL_RCC_GetPLL2ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 8014984:	f7ff fc72 	bl	801426c <LL_RCC_CSI_IsReady>
 8014988:	4603      	mov	r3, r0
 801498a:	2b00      	cmp	r3, #0
 801498c:	d00e      	beq.n	80149ac <LL_RCC_GetPLL2ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 801498e:	4b34      	ldr	r3, [pc, #208]	@ (8014a60 <LL_RCC_GetPLL2ClockFreq+0x128>)
 8014990:	61fb      	str	r3, [r7, #28]
      break;
 8014992:	e00b      	b.n	80149ac <LL_RCC_GetPLL2ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 8014994:	f7ff fc36 	bl	8014204 <LL_RCC_HSE_IsReady>
 8014998:	4603      	mov	r3, r0
 801499a:	2b00      	cmp	r3, #0
 801499c:	d008      	beq.n	80149b0 <LL_RCC_GetPLL2ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 801499e:	4b31      	ldr	r3, [pc, #196]	@ (8014a64 <LL_RCC_GetPLL2ClockFreq+0x12c>)
 80149a0:	61fb      	str	r3, [r7, #28]
      break;
 80149a2:	e005      	b.n	80149b0 <LL_RCC_GetPLL2ClockFreq+0x78>
      break;
 80149a4:	bf00      	nop
 80149a6:	e004      	b.n	80149b2 <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 80149a8:	bf00      	nop
 80149aa:	e002      	b.n	80149b2 <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 80149ac:	bf00      	nop
 80149ae:	e000      	b.n	80149b2 <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 80149b0:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	2200      	movs	r2, #0
 80149b6:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	2200      	movs	r2, #0
 80149bc:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 80149be:	687b      	ldr	r3, [r7, #4]
 80149c0:	2200      	movs	r2, #0
 80149c2:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL2_GetM();
 80149c4:	f7ff fe16 	bl	80145f4 <LL_RCC_PLL2_GetM>
 80149c8:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL2_GetN();
 80149ca:	f7ff fe05 	bl	80145d8 <LL_RCC_PLL2_GetN>
 80149ce:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL2FRACN_IsEnabled() != 0U)
 80149d0:	f7ff fdf0 	bl	80145b4 <LL_RCC_PLL2FRACN_IsEnabled>
 80149d4:	4603      	mov	r3, r0
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	d002      	beq.n	80149e0 <LL_RCC_GetPLL2ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL2_GetFRACN();
 80149da:	f7ff fe49 	bl	8014670 <LL_RCC_PLL2_GetFRACN>
 80149de:	61b8      	str	r0, [r7, #24]
  }

  if (m != 0U)
 80149e0:	693b      	ldr	r3, [r7, #16]
 80149e2:	2b00      	cmp	r3, #0
 80149e4:	d035      	beq.n	8014a52 <LL_RCC_GetPLL2ClockFreq+0x11a>
  {
    if (LL_RCC_PLL2P_IsEnabled() != 0U)
 80149e6:	f7ff fda9 	bl	801453c <LL_RCC_PLL2P_IsEnabled>
 80149ea:	4603      	mov	r3, r0
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	d00c      	beq.n	8014a0a <LL_RCC_GetPLL2ClockFreq+0xd2>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetP());
 80149f0:	f7ff fe0e 	bl	8014610 <LL_RCC_PLL2_GetP>
 80149f4:	4603      	mov	r3, r0
 80149f6:	9300      	str	r3, [sp, #0]
 80149f8:	69bb      	ldr	r3, [r7, #24]
 80149fa:	68fa      	ldr	r2, [r7, #12]
 80149fc:	6939      	ldr	r1, [r7, #16]
 80149fe:	69f8      	ldr	r0, [r7, #28]
 8014a00:	f000 f8cc 	bl	8014b9c <LL_RCC_CalcPLLClockFreq>
 8014a04:	4602      	mov	r2, r0
 8014a06:	687b      	ldr	r3, [r7, #4]
 8014a08:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL2Q_IsEnabled() != 0U)
 8014a0a:	f7ff fdab 	bl	8014564 <LL_RCC_PLL2Q_IsEnabled>
 8014a0e:	4603      	mov	r3, r0
 8014a10:	2b00      	cmp	r3, #0
 8014a12:	d00c      	beq.n	8014a2e <LL_RCC_GetPLL2ClockFreq+0xf6>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetQ());
 8014a14:	f7ff fe0c 	bl	8014630 <LL_RCC_PLL2_GetQ>
 8014a18:	4603      	mov	r3, r0
 8014a1a:	9300      	str	r3, [sp, #0]
 8014a1c:	69bb      	ldr	r3, [r7, #24]
 8014a1e:	68fa      	ldr	r2, [r7, #12]
 8014a20:	6939      	ldr	r1, [r7, #16]
 8014a22:	69f8      	ldr	r0, [r7, #28]
 8014a24:	f000 f8ba 	bl	8014b9c <LL_RCC_CalcPLLClockFreq>
 8014a28:	4602      	mov	r2, r0
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL2R_IsEnabled() != 0U)
 8014a2e:	f7ff fdad 	bl	801458c <LL_RCC_PLL2R_IsEnabled>
 8014a32:	4603      	mov	r3, r0
 8014a34:	2b00      	cmp	r3, #0
 8014a36:	d00c      	beq.n	8014a52 <LL_RCC_GetPLL2ClockFreq+0x11a>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetR());
 8014a38:	f7ff fe0a 	bl	8014650 <LL_RCC_PLL2_GetR>
 8014a3c:	4603      	mov	r3, r0
 8014a3e:	9300      	str	r3, [sp, #0]
 8014a40:	69bb      	ldr	r3, [r7, #24]
 8014a42:	68fa      	ldr	r2, [r7, #12]
 8014a44:	6939      	ldr	r1, [r7, #16]
 8014a46:	69f8      	ldr	r0, [r7, #28]
 8014a48:	f000 f8a8 	bl	8014b9c <LL_RCC_CalcPLLClockFreq>
 8014a4c:	4602      	mov	r2, r0
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	609a      	str	r2, [r3, #8]
    }
  }
}
 8014a52:	bf00      	nop
 8014a54:	3720      	adds	r7, #32
 8014a56:	46bd      	mov	sp, r7
 8014a58:	bd80      	pop	{r7, pc}
 8014a5a:	bf00      	nop
 8014a5c:	03d09000 	.word	0x03d09000
 8014a60:	003d0900 	.word	0x003d0900
 8014a64:	017d7840 	.word	0x017d7840

08014a68 <LL_RCC_GetPLL3ClockFreq>:
  * @brief  Return PLL3 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL3ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 8014a68:	b580      	push	{r7, lr}
 8014a6a:	b08a      	sub	sp, #40	@ 0x28
 8014a6c:	af02      	add	r7, sp, #8
 8014a6e:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 8014a70:	2300      	movs	r3, #0
 8014a72:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 8014a74:	2300      	movs	r3, #0
 8014a76:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 8014a78:	f7ff fc96 	bl	80143a8 <LL_RCC_PLL_GetSource>
 8014a7c:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 8014a7e:	697b      	ldr	r3, [r7, #20]
 8014a80:	2b02      	cmp	r3, #2
 8014a82:	d01f      	beq.n	8014ac4 <LL_RCC_GetPLL3ClockFreq+0x5c>
 8014a84:	697b      	ldr	r3, [r7, #20]
 8014a86:	2b02      	cmp	r3, #2
 8014a88:	d824      	bhi.n	8014ad4 <LL_RCC_GetPLL3ClockFreq+0x6c>
 8014a8a:	697b      	ldr	r3, [r7, #20]
 8014a8c:	2b00      	cmp	r3, #0
 8014a8e:	d003      	beq.n	8014a98 <LL_RCC_GetPLL3ClockFreq+0x30>
 8014a90:	697b      	ldr	r3, [r7, #20]
 8014a92:	2b01      	cmp	r3, #1
 8014a94:	d00e      	beq.n	8014ab4 <LL_RCC_GetPLL3ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 8014a96:	e01d      	b.n	8014ad4 <LL_RCC_GetPLL3ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 8014a98:	f7ff fbc8 	bl	801422c <LL_RCC_HSI_IsReady>
 8014a9c:	4603      	mov	r3, r0
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	d01a      	beq.n	8014ad8 <LL_RCC_GetPLL3ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 8014aa2:	f7ff fbd5 	bl	8014250 <LL_RCC_HSI_GetDivider>
 8014aa6:	4603      	mov	r3, r0
 8014aa8:	08db      	lsrs	r3, r3, #3
 8014aaa:	4a39      	ldr	r2, [pc, #228]	@ (8014b90 <LL_RCC_GetPLL3ClockFreq+0x128>)
 8014aac:	fa22 f303 	lsr.w	r3, r2, r3
 8014ab0:	61fb      	str	r3, [r7, #28]
      break;
 8014ab2:	e011      	b.n	8014ad8 <LL_RCC_GetPLL3ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 8014ab4:	f7ff fbda 	bl	801426c <LL_RCC_CSI_IsReady>
 8014ab8:	4603      	mov	r3, r0
 8014aba:	2b00      	cmp	r3, #0
 8014abc:	d00e      	beq.n	8014adc <LL_RCC_GetPLL3ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 8014abe:	4b35      	ldr	r3, [pc, #212]	@ (8014b94 <LL_RCC_GetPLL3ClockFreq+0x12c>)
 8014ac0:	61fb      	str	r3, [r7, #28]
      break;
 8014ac2:	e00b      	b.n	8014adc <LL_RCC_GetPLL3ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 8014ac4:	f7ff fb9e 	bl	8014204 <LL_RCC_HSE_IsReady>
 8014ac8:	4603      	mov	r3, r0
 8014aca:	2b00      	cmp	r3, #0
 8014acc:	d008      	beq.n	8014ae0 <LL_RCC_GetPLL3ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 8014ace:	4b32      	ldr	r3, [pc, #200]	@ (8014b98 <LL_RCC_GetPLL3ClockFreq+0x130>)
 8014ad0:	61fb      	str	r3, [r7, #28]
      break;
 8014ad2:	e005      	b.n	8014ae0 <LL_RCC_GetPLL3ClockFreq+0x78>
      break;
 8014ad4:	bf00      	nop
 8014ad6:	e004      	b.n	8014ae2 <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 8014ad8:	bf00      	nop
 8014ada:	e002      	b.n	8014ae2 <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 8014adc:	bf00      	nop
 8014ade:	e000      	b.n	8014ae2 <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 8014ae0:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	2200      	movs	r2, #0
 8014ae6:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	2200      	movs	r2, #0
 8014aec:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	2200      	movs	r2, #0
 8014af2:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL3_GetM();
 8014af4:	f7ff fe3c 	bl	8014770 <LL_RCC_PLL3_GetM>
 8014af8:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL3_GetN();
 8014afa:	f7ff fe2b 	bl	8014754 <LL_RCC_PLL3_GetN>
 8014afe:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL3FRACN_IsEnabled() != 0U)
 8014b00:	f7ff fe14 	bl	801472c <LL_RCC_PLL3FRACN_IsEnabled>
 8014b04:	4603      	mov	r3, r0
 8014b06:	2b00      	cmp	r3, #0
 8014b08:	d002      	beq.n	8014b10 <LL_RCC_GetPLL3ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL3_GetFRACN();
 8014b0a:	f7ff fe6f 	bl	80147ec <LL_RCC_PLL3_GetFRACN>
 8014b0e:	61b8      	str	r0, [r7, #24]
  }

  if ((m != 0U) && (pllinputfreq != 0U))
 8014b10:	693b      	ldr	r3, [r7, #16]
 8014b12:	2b00      	cmp	r3, #0
 8014b14:	d038      	beq.n	8014b88 <LL_RCC_GetPLL3ClockFreq+0x120>
 8014b16:	69fb      	ldr	r3, [r7, #28]
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	d035      	beq.n	8014b88 <LL_RCC_GetPLL3ClockFreq+0x120>
  {
    if (LL_RCC_PLL3P_IsEnabled() != 0U)
 8014b1c:	f7ff fdca 	bl	80146b4 <LL_RCC_PLL3P_IsEnabled>
 8014b20:	4603      	mov	r3, r0
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	d00c      	beq.n	8014b40 <LL_RCC_GetPLL3ClockFreq+0xd8>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetP());
 8014b26:	f7ff fe31 	bl	801478c <LL_RCC_PLL3_GetP>
 8014b2a:	4603      	mov	r3, r0
 8014b2c:	9300      	str	r3, [sp, #0]
 8014b2e:	69bb      	ldr	r3, [r7, #24]
 8014b30:	68fa      	ldr	r2, [r7, #12]
 8014b32:	6939      	ldr	r1, [r7, #16]
 8014b34:	69f8      	ldr	r0, [r7, #28]
 8014b36:	f000 f831 	bl	8014b9c <LL_RCC_CalcPLLClockFreq>
 8014b3a:	4602      	mov	r2, r0
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL3Q_IsEnabled() != 0U)
 8014b40:	f7ff fdcc 	bl	80146dc <LL_RCC_PLL3Q_IsEnabled>
 8014b44:	4603      	mov	r3, r0
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	d00c      	beq.n	8014b64 <LL_RCC_GetPLL3ClockFreq+0xfc>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetQ());
 8014b4a:	f7ff fe2f 	bl	80147ac <LL_RCC_PLL3_GetQ>
 8014b4e:	4603      	mov	r3, r0
 8014b50:	9300      	str	r3, [sp, #0]
 8014b52:	69bb      	ldr	r3, [r7, #24]
 8014b54:	68fa      	ldr	r2, [r7, #12]
 8014b56:	6939      	ldr	r1, [r7, #16]
 8014b58:	69f8      	ldr	r0, [r7, #28]
 8014b5a:	f000 f81f 	bl	8014b9c <LL_RCC_CalcPLLClockFreq>
 8014b5e:	4602      	mov	r2, r0
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL3R_IsEnabled() != 0U)
 8014b64:	f7ff fdce 	bl	8014704 <LL_RCC_PLL3R_IsEnabled>
 8014b68:	4603      	mov	r3, r0
 8014b6a:	2b00      	cmp	r3, #0
 8014b6c:	d00c      	beq.n	8014b88 <LL_RCC_GetPLL3ClockFreq+0x120>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetR());
 8014b6e:	f7ff fe2d 	bl	80147cc <LL_RCC_PLL3_GetR>
 8014b72:	4603      	mov	r3, r0
 8014b74:	9300      	str	r3, [sp, #0]
 8014b76:	69bb      	ldr	r3, [r7, #24]
 8014b78:	68fa      	ldr	r2, [r7, #12]
 8014b7a:	6939      	ldr	r1, [r7, #16]
 8014b7c:	69f8      	ldr	r0, [r7, #28]
 8014b7e:	f000 f80d 	bl	8014b9c <LL_RCC_CalcPLLClockFreq>
 8014b82:	4602      	mov	r2, r0
 8014b84:	687b      	ldr	r3, [r7, #4]
 8014b86:	609a      	str	r2, [r3, #8]
    }
  }
}
 8014b88:	bf00      	nop
 8014b8a:	3720      	adds	r7, #32
 8014b8c:	46bd      	mov	sp, r7
 8014b8e:	bd80      	pop	{r7, pc}
 8014b90:	03d09000 	.word	0x03d09000
 8014b94:	003d0900 	.word	0x003d0900
 8014b98:	017d7840 	.word	0x017d7840

08014b9c <LL_RCC_CalcPLLClockFreq>:
  * @param  PQR    VCO output divider (P, Q or R)
  *                Between 1 and 128, except for PLL1P Odd value not allowed
  * @retval PLL1 clock frequency (in Hz)
  */
uint32_t LL_RCC_CalcPLLClockFreq(uint32_t PLLInputFreq, uint32_t M, uint32_t N, uint32_t FRACN, uint32_t PQR)
{
 8014b9c:	b480      	push	{r7}
 8014b9e:	b087      	sub	sp, #28
 8014ba0:	af00      	add	r7, sp, #0
 8014ba2:	60f8      	str	r0, [r7, #12]
 8014ba4:	60b9      	str	r1, [r7, #8]
 8014ba6:	607a      	str	r2, [r7, #4]
 8014ba8:	603b      	str	r3, [r7, #0]
  float_t freq;

  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN / (float_t)0x2000));
 8014baa:	68fb      	ldr	r3, [r7, #12]
 8014bac:	ee07 3a90 	vmov	s15, r3
 8014bb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014bb4:	68bb      	ldr	r3, [r7, #8]
 8014bb6:	ee07 3a90 	vmov	s15, r3
 8014bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014bbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	ee07 3a90 	vmov	s15, r3
 8014bc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014bcc:	683b      	ldr	r3, [r7, #0]
 8014bce:	ee07 3a90 	vmov	s15, r3
 8014bd2:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8014bd6:	eddf 5a10 	vldr	s11, [pc, #64]	@ 8014c18 <LL_RCC_CalcPLLClockFreq+0x7c>
 8014bda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8014bde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014be2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014be6:	edc7 7a05 	vstr	s15, [r7, #20]

  freq = freq / (float_t)PQR;
 8014bea:	6a3b      	ldr	r3, [r7, #32]
 8014bec:	ee07 3a90 	vmov	s15, r3
 8014bf0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8014bf4:	edd7 6a05 	vldr	s13, [r7, #20]
 8014bf8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014bfc:	edc7 7a05 	vstr	s15, [r7, #20]

  return (uint32_t)freq;
 8014c00:	edd7 7a05 	vldr	s15, [r7, #20]
 8014c04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014c08:	ee17 3a90 	vmov	r3, s15
}
 8014c0c:	4618      	mov	r0, r3
 8014c0e:	371c      	adds	r7, #28
 8014c10:	46bd      	mov	sp, r7
 8014c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c16:	4770      	bx	lr
 8014c18:	46000000 	.word	0x46000000

08014c1c <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8014c1c:	b590      	push	{r4, r7, lr}
 8014c1e:	b087      	sub	sp, #28
 8014c20:	af00      	add	r7, sp, #0
 8014c22:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8014c24:	2300      	movs	r3, #0
 8014c26:	617b      	str	r3, [r7, #20]
  LL_PLL_ClocksTypeDef PLL_Clocks;

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8014c28:	6878      	ldr	r0, [r7, #4]
 8014c2a:	f7ff fbb1 	bl	8014390 <LL_RCC_GetUSARTClockSource>
 8014c2e:	4603      	mov	r3, r0
 8014c30:	4a62      	ldr	r2, [pc, #392]	@ (8014dbc <LL_RCC_GetUSARTClockFreq+0x1a0>)
 8014c32:	4293      	cmp	r3, r2
 8014c34:	f000 80a9 	beq.w	8014d8a <LL_RCC_GetUSARTClockFreq+0x16e>
 8014c38:	4a60      	ldr	r2, [pc, #384]	@ (8014dbc <LL_RCC_GetUSARTClockFreq+0x1a0>)
 8014c3a:	4293      	cmp	r3, r2
 8014c3c:	f200 80ae 	bhi.w	8014d9c <LL_RCC_GetUSARTClockFreq+0x180>
 8014c40:	4a5f      	ldr	r2, [pc, #380]	@ (8014dc0 <LL_RCC_GetUSARTClockFreq+0x1a4>)
 8014c42:	4293      	cmp	r3, r2
 8014c44:	f000 80a1 	beq.w	8014d8a <LL_RCC_GetUSARTClockFreq+0x16e>
 8014c48:	4a5d      	ldr	r2, [pc, #372]	@ (8014dc0 <LL_RCC_GetUSARTClockFreq+0x1a4>)
 8014c4a:	4293      	cmp	r3, r2
 8014c4c:	f200 80a6 	bhi.w	8014d9c <LL_RCC_GetUSARTClockFreq+0x180>
 8014c50:	4a5c      	ldr	r2, [pc, #368]	@ (8014dc4 <LL_RCC_GetUSARTClockFreq+0x1a8>)
 8014c52:	4293      	cmp	r3, r2
 8014c54:	f000 8091 	beq.w	8014d7a <LL_RCC_GetUSARTClockFreq+0x15e>
 8014c58:	4a5a      	ldr	r2, [pc, #360]	@ (8014dc4 <LL_RCC_GetUSARTClockFreq+0x1a8>)
 8014c5a:	4293      	cmp	r3, r2
 8014c5c:	f200 809e 	bhi.w	8014d9c <LL_RCC_GetUSARTClockFreq+0x180>
 8014c60:	4a59      	ldr	r2, [pc, #356]	@ (8014dc8 <LL_RCC_GetUSARTClockFreq+0x1ac>)
 8014c62:	4293      	cmp	r3, r2
 8014c64:	f000 8089 	beq.w	8014d7a <LL_RCC_GetUSARTClockFreq+0x15e>
 8014c68:	4a57      	ldr	r2, [pc, #348]	@ (8014dc8 <LL_RCC_GetUSARTClockFreq+0x1ac>)
 8014c6a:	4293      	cmp	r3, r2
 8014c6c:	f200 8096 	bhi.w	8014d9c <LL_RCC_GetUSARTClockFreq+0x180>
 8014c70:	4a56      	ldr	r2, [pc, #344]	@ (8014dcc <LL_RCC_GetUSARTClockFreq+0x1b0>)
 8014c72:	4293      	cmp	r3, r2
 8014c74:	d073      	beq.n	8014d5e <LL_RCC_GetUSARTClockFreq+0x142>
 8014c76:	4a55      	ldr	r2, [pc, #340]	@ (8014dcc <LL_RCC_GetUSARTClockFreq+0x1b0>)
 8014c78:	4293      	cmp	r3, r2
 8014c7a:	f200 808f 	bhi.w	8014d9c <LL_RCC_GetUSARTClockFreq+0x180>
 8014c7e:	4a54      	ldr	r2, [pc, #336]	@ (8014dd0 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 8014c80:	4293      	cmp	r3, r2
 8014c82:	d06c      	beq.n	8014d5e <LL_RCC_GetUSARTClockFreq+0x142>
 8014c84:	4a52      	ldr	r2, [pc, #328]	@ (8014dd0 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 8014c86:	4293      	cmp	r3, r2
 8014c88:	f200 8088 	bhi.w	8014d9c <LL_RCC_GetUSARTClockFreq+0x180>
 8014c8c:	4a51      	ldr	r2, [pc, #324]	@ (8014dd4 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8014c8e:	4293      	cmp	r3, r2
 8014c90:	d058      	beq.n	8014d44 <LL_RCC_GetUSARTClockFreq+0x128>
 8014c92:	4a50      	ldr	r2, [pc, #320]	@ (8014dd4 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8014c94:	4293      	cmp	r3, r2
 8014c96:	f200 8081 	bhi.w	8014d9c <LL_RCC_GetUSARTClockFreq+0x180>
 8014c9a:	4a4f      	ldr	r2, [pc, #316]	@ (8014dd8 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8014c9c:	4293      	cmp	r3, r2
 8014c9e:	d051      	beq.n	8014d44 <LL_RCC_GetUSARTClockFreq+0x128>
 8014ca0:	4a4d      	ldr	r2, [pc, #308]	@ (8014dd8 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8014ca2:	4293      	cmp	r3, r2
 8014ca4:	d87a      	bhi.n	8014d9c <LL_RCC_GetUSARTClockFreq+0x180>
 8014ca6:	4a4d      	ldr	r2, [pc, #308]	@ (8014ddc <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8014ca8:	4293      	cmp	r3, r2
 8014caa:	d03e      	beq.n	8014d2a <LL_RCC_GetUSARTClockFreq+0x10e>
 8014cac:	4a4b      	ldr	r2, [pc, #300]	@ (8014ddc <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8014cae:	4293      	cmp	r3, r2
 8014cb0:	d874      	bhi.n	8014d9c <LL_RCC_GetUSARTClockFreq+0x180>
 8014cb2:	4a4b      	ldr	r2, [pc, #300]	@ (8014de0 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 8014cb4:	4293      	cmp	r3, r2
 8014cb6:	d038      	beq.n	8014d2a <LL_RCC_GetUSARTClockFreq+0x10e>
 8014cb8:	4a49      	ldr	r2, [pc, #292]	@ (8014de0 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 8014cba:	4293      	cmp	r3, r2
 8014cbc:	d86e      	bhi.n	8014d9c <LL_RCC_GetUSARTClockFreq+0x180>
 8014cbe:	4a49      	ldr	r2, [pc, #292]	@ (8014de4 <LL_RCC_GetUSARTClockFreq+0x1c8>)
 8014cc0:	4293      	cmp	r3, r2
 8014cc2:	d01a      	beq.n	8014cfa <LL_RCC_GetUSARTClockFreq+0xde>
 8014cc4:	4a48      	ldr	r2, [pc, #288]	@ (8014de8 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 8014cc6:	4293      	cmp	r3, r2
 8014cc8:	d168      	bne.n	8014d9c <LL_RCC_GetUSARTClockFreq+0x180>
  {
    case LL_RCC_USART16_CLKSOURCE_PCLK2:
      usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(), LL_RCC_GetSysPrescaler())));
 8014cca:	f000 f895 	bl	8014df8 <RCC_GetSystemClockFreq>
 8014cce:	4604      	mov	r4, r0
 8014cd0:	f7ff fb00 	bl	80142d4 <LL_RCC_GetSysPrescaler>
 8014cd4:	4603      	mov	r3, r0
 8014cd6:	0a1b      	lsrs	r3, r3, #8
 8014cd8:	f003 030f 	and.w	r3, r3, #15
 8014cdc:	4a43      	ldr	r2, [pc, #268]	@ (8014dec <LL_RCC_GetUSARTClockFreq+0x1d0>)
 8014cde:	5cd3      	ldrb	r3, [r2, r3]
 8014ce0:	f003 031f 	and.w	r3, r3, #31
 8014ce4:	fa24 f303 	lsr.w	r3, r4, r3
 8014ce8:	4618      	mov	r0, r3
 8014cea:	f000 f8e7 	bl	8014ebc <RCC_GetHCLKClockFreq>
 8014cee:	4603      	mov	r3, r0
 8014cf0:	4618      	mov	r0, r3
 8014cf2:	f000 f911 	bl	8014f18 <RCC_GetPCLK2ClockFreq>
 8014cf6:	6178      	str	r0, [r7, #20]
      break;
 8014cf8:	e05b      	b.n	8014db2 <LL_RCC_GetUSARTClockFreq+0x196>

    case LL_RCC_USART234578_CLKSOURCE_PCLK1:
      usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(), LL_RCC_GetSysPrescaler())));
 8014cfa:	f000 f87d 	bl	8014df8 <RCC_GetSystemClockFreq>
 8014cfe:	4604      	mov	r4, r0
 8014d00:	f7ff fae8 	bl	80142d4 <LL_RCC_GetSysPrescaler>
 8014d04:	4603      	mov	r3, r0
 8014d06:	0a1b      	lsrs	r3, r3, #8
 8014d08:	f003 030f 	and.w	r3, r3, #15
 8014d0c:	4a37      	ldr	r2, [pc, #220]	@ (8014dec <LL_RCC_GetUSARTClockFreq+0x1d0>)
 8014d0e:	5cd3      	ldrb	r3, [r2, r3]
 8014d10:	f003 031f 	and.w	r3, r3, #31
 8014d14:	fa24 f303 	lsr.w	r3, r4, r3
 8014d18:	4618      	mov	r0, r3
 8014d1a:	f000 f8cf 	bl	8014ebc <RCC_GetHCLKClockFreq>
 8014d1e:	4603      	mov	r3, r0
 8014d20:	4618      	mov	r0, r3
 8014d22:	f000 f8e1 	bl	8014ee8 <RCC_GetPCLK1ClockFreq>
 8014d26:	6178      	str	r0, [r7, #20]
      break;
 8014d28:	e043      	b.n	8014db2 <LL_RCC_GetUSARTClockFreq+0x196>

    case LL_RCC_USART16_CLKSOURCE_PLL2Q:
    case LL_RCC_USART234578_CLKSOURCE_PLL2Q:
      if (LL_RCC_PLL2_IsReady() != 0U)
 8014d2a:	f7ff fbf3 	bl	8014514 <LL_RCC_PLL2_IsReady>
 8014d2e:	4603      	mov	r3, r0
 8014d30:	2b00      	cmp	r3, #0
 8014d32:	d035      	beq.n	8014da0 <LL_RCC_GetUSARTClockFreq+0x184>
      {
        LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 8014d34:	f107 0308 	add.w	r3, r7, #8
 8014d38:	4618      	mov	r0, r3
 8014d3a:	f7ff fdfd 	bl	8014938 <LL_RCC_GetPLL2ClockFreq>
        usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 8014d3e:	68fb      	ldr	r3, [r7, #12]
 8014d40:	617b      	str	r3, [r7, #20]
      }
      break;
 8014d42:	e02d      	b.n	8014da0 <LL_RCC_GetUSARTClockFreq+0x184>

    case LL_RCC_USART16_CLKSOURCE_PLL3Q:
    case LL_RCC_USART234578_CLKSOURCE_PLL3Q:
      if (LL_RCC_PLL3_IsReady() != 0U)
 8014d44:	f7ff fca2 	bl	801468c <LL_RCC_PLL3_IsReady>
 8014d48:	4603      	mov	r3, r0
 8014d4a:	2b00      	cmp	r3, #0
 8014d4c:	d02a      	beq.n	8014da4 <LL_RCC_GetUSARTClockFreq+0x188>
      {
        LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 8014d4e:	f107 0308 	add.w	r3, r7, #8
 8014d52:	4618      	mov	r0, r3
 8014d54:	f7ff fe88 	bl	8014a68 <LL_RCC_GetPLL3ClockFreq>
        usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 8014d58:	68fb      	ldr	r3, [r7, #12]
 8014d5a:	617b      	str	r3, [r7, #20]
      }
      break;
 8014d5c:	e022      	b.n	8014da4 <LL_RCC_GetUSARTClockFreq+0x188>

    case LL_RCC_USART16_CLKSOURCE_HSI:
    case LL_RCC_USART234578_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
 8014d5e:	f7ff fa65 	bl	801422c <LL_RCC_HSI_IsReady>
 8014d62:	4603      	mov	r3, r0
 8014d64:	2b00      	cmp	r3, #0
 8014d66:	d01f      	beq.n	8014da8 <LL_RCC_GetUSARTClockFreq+0x18c>
      {
        usart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 8014d68:	f7ff fa72 	bl	8014250 <LL_RCC_HSI_GetDivider>
 8014d6c:	4603      	mov	r3, r0
 8014d6e:	08db      	lsrs	r3, r3, #3
 8014d70:	4a1f      	ldr	r2, [pc, #124]	@ (8014df0 <LL_RCC_GetUSARTClockFreq+0x1d4>)
 8014d72:	fa22 f303 	lsr.w	r3, r2, r3
 8014d76:	617b      	str	r3, [r7, #20]
      }
      break;
 8014d78:	e016      	b.n	8014da8 <LL_RCC_GetUSARTClockFreq+0x18c>

    case LL_RCC_USART16_CLKSOURCE_CSI:
    case LL_RCC_USART234578_CLKSOURCE_CSI:
      if (LL_RCC_CSI_IsReady() != 0U)
 8014d7a:	f7ff fa77 	bl	801426c <LL_RCC_CSI_IsReady>
 8014d7e:	4603      	mov	r3, r0
 8014d80:	2b00      	cmp	r3, #0
 8014d82:	d013      	beq.n	8014dac <LL_RCC_GetUSARTClockFreq+0x190>
      {
        usart_frequency = CSI_VALUE;
 8014d84:	4b1b      	ldr	r3, [pc, #108]	@ (8014df4 <LL_RCC_GetUSARTClockFreq+0x1d8>)
 8014d86:	617b      	str	r3, [r7, #20]
      }
      break;
 8014d88:	e010      	b.n	8014dac <LL_RCC_GetUSARTClockFreq+0x190>

    case LL_RCC_USART16_CLKSOURCE_LSE:
    case LL_RCC_USART234578_CLKSOURCE_LSE:
      if (LL_RCC_LSE_IsReady() != 0U)
 8014d8a:	f7ff fa83 	bl	8014294 <LL_RCC_LSE_IsReady>
 8014d8e:	4603      	mov	r3, r0
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	d00d      	beq.n	8014db0 <LL_RCC_GetUSARTClockFreq+0x194>
      {
        usart_frequency = LSE_VALUE;
 8014d94:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8014d98:	617b      	str	r3, [r7, #20]
      }
      break;
 8014d9a:	e009      	b.n	8014db0 <LL_RCC_GetUSARTClockFreq+0x194>

    default:
      /* Kernel clock disabled */
      break;
 8014d9c:	bf00      	nop
 8014d9e:	e008      	b.n	8014db2 <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8014da0:	bf00      	nop
 8014da2:	e006      	b.n	8014db2 <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8014da4:	bf00      	nop
 8014da6:	e004      	b.n	8014db2 <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8014da8:	bf00      	nop
 8014daa:	e002      	b.n	8014db2 <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8014dac:	bf00      	nop
 8014dae:	e000      	b.n	8014db2 <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8014db0:	bf00      	nop
  }

  return usart_frequency;
 8014db2:	697b      	ldr	r3, [r7, #20]
}
 8014db4:	4618      	mov	r0, r3
 8014db6:	371c      	adds	r7, #28
 8014db8:	46bd      	mov	sp, r7
 8014dba:	bd90      	pop	{r4, r7, pc}
 8014dbc:	07050308 	.word	0x07050308
 8014dc0:	07050008 	.word	0x07050008
 8014dc4:	07040308 	.word	0x07040308
 8014dc8:	07040008 	.word	0x07040008
 8014dcc:	07030308 	.word	0x07030308
 8014dd0:	07030008 	.word	0x07030008
 8014dd4:	07020308 	.word	0x07020308
 8014dd8:	07020008 	.word	0x07020008
 8014ddc:	07010308 	.word	0x07010308
 8014de0:	07010008 	.word	0x07010008
 8014de4:	07000008 	.word	0x07000008
 8014de8:	07000308 	.word	0x07000308
 8014dec:	0801f9d4 	.word	0x0801f9d4
 8014df0:	03d09000 	.word	0x03d09000
 8014df4:	003d0900 	.word	0x003d0900

08014df8 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8014df8:	b580      	push	{r7, lr}
 8014dfa:	b084      	sub	sp, #16
 8014dfc:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8014dfe:	2300      	movs	r3, #0
 8014e00:	60fb      	str	r3, [r7, #12]
  LL_PLL_ClocksTypeDef PLL_Clocks;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8014e02:	f7ff fa59 	bl	80142b8 <LL_RCC_GetSysClkSource>
 8014e06:	4603      	mov	r3, r0
 8014e08:	2b18      	cmp	r3, #24
 8014e0a:	d84b      	bhi.n	8014ea4 <RCC_GetSystemClockFreq+0xac>
 8014e0c:	a201      	add	r2, pc, #4	@ (adr r2, 8014e14 <RCC_GetSystemClockFreq+0x1c>)
 8014e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e12:	bf00      	nop
 8014e14:	08014e79 	.word	0x08014e79
 8014e18:	08014ea5 	.word	0x08014ea5
 8014e1c:	08014ea5 	.word	0x08014ea5
 8014e20:	08014ea5 	.word	0x08014ea5
 8014e24:	08014ea5 	.word	0x08014ea5
 8014e28:	08014ea5 	.word	0x08014ea5
 8014e2c:	08014ea5 	.word	0x08014ea5
 8014e30:	08014ea5 	.word	0x08014ea5
 8014e34:	08014e8b 	.word	0x08014e8b
 8014e38:	08014ea5 	.word	0x08014ea5
 8014e3c:	08014ea5 	.word	0x08014ea5
 8014e40:	08014ea5 	.word	0x08014ea5
 8014e44:	08014ea5 	.word	0x08014ea5
 8014e48:	08014ea5 	.word	0x08014ea5
 8014e4c:	08014ea5 	.word	0x08014ea5
 8014e50:	08014ea5 	.word	0x08014ea5
 8014e54:	08014e91 	.word	0x08014e91
 8014e58:	08014ea5 	.word	0x08014ea5
 8014e5c:	08014ea5 	.word	0x08014ea5
 8014e60:	08014ea5 	.word	0x08014ea5
 8014e64:	08014ea5 	.word	0x08014ea5
 8014e68:	08014ea5 	.word	0x08014ea5
 8014e6c:	08014ea5 	.word	0x08014ea5
 8014e70:	08014ea5 	.word	0x08014ea5
 8014e74:	08014e97 	.word	0x08014e97
  {
    /* No check on Ready: Won't be selected by hardware if not */
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 8014e78:	f7ff f9ea 	bl	8014250 <LL_RCC_HSI_GetDivider>
 8014e7c:	4603      	mov	r3, r0
 8014e7e:	08db      	lsrs	r3, r3, #3
 8014e80:	4a0b      	ldr	r2, [pc, #44]	@ (8014eb0 <RCC_GetSystemClockFreq+0xb8>)
 8014e82:	fa22 f303 	lsr.w	r3, r2, r3
 8014e86:	60fb      	str	r3, [r7, #12]
      break;
 8014e88:	e00d      	b.n	8014ea6 <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_CSI:
      frequency = CSI_VALUE;
 8014e8a:	4b0a      	ldr	r3, [pc, #40]	@ (8014eb4 <RCC_GetSystemClockFreq+0xbc>)
 8014e8c:	60fb      	str	r3, [r7, #12]
      break;
 8014e8e:	e00a      	b.n	8014ea6 <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:
      frequency = HSE_VALUE;
 8014e90:	4b09      	ldr	r3, [pc, #36]	@ (8014eb8 <RCC_GetSystemClockFreq+0xc0>)
 8014e92:	60fb      	str	r3, [r7, #12]
      break;
 8014e94:	e007      	b.n	8014ea6 <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL1:
      LL_RCC_GetPLL1ClockFreq(&PLL_Clocks);
 8014e96:	463b      	mov	r3, r7
 8014e98:	4618      	mov	r0, r3
 8014e9a:	f7ff fcb5 	bl	8014808 <LL_RCC_GetPLL1ClockFreq>
      frequency = PLL_Clocks.PLL_P_Frequency;
 8014e9e:	683b      	ldr	r3, [r7, #0]
 8014ea0:	60fb      	str	r3, [r7, #12]
      break;
 8014ea2:	e000      	b.n	8014ea6 <RCC_GetSystemClockFreq+0xae>

    default:
      /* Nothing to do */
      break;
 8014ea4:	bf00      	nop
  }

  return frequency;
 8014ea6:	68fb      	ldr	r3, [r7, #12]
}
 8014ea8:	4618      	mov	r0, r3
 8014eaa:	3710      	adds	r7, #16
 8014eac:	46bd      	mov	sp, r7
 8014eae:	bd80      	pop	{r7, pc}
 8014eb0:	03d09000 	.word	0x03d09000
 8014eb4:	003d0900 	.word	0x003d0900
 8014eb8:	017d7840 	.word	0x017d7840

08014ebc <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8014ebc:	b580      	push	{r7, lr}
 8014ebe:	b082      	sub	sp, #8
 8014ec0:	af00      	add	r7, sp, #0
 8014ec2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8014ec4:	f7ff fa14 	bl	80142f0 <LL_RCC_GetAHBPrescaler>
 8014ec8:	4603      	mov	r3, r0
 8014eca:	f003 030f 	and.w	r3, r3, #15
 8014ece:	4a05      	ldr	r2, [pc, #20]	@ (8014ee4 <RCC_GetHCLKClockFreq+0x28>)
 8014ed0:	5cd3      	ldrb	r3, [r2, r3]
 8014ed2:	f003 031f 	and.w	r3, r3, #31
 8014ed6:	687a      	ldr	r2, [r7, #4]
 8014ed8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8014edc:	4618      	mov	r0, r3
 8014ede:	3708      	adds	r7, #8
 8014ee0:	46bd      	mov	sp, r7
 8014ee2:	bd80      	pop	{r7, pc}
 8014ee4:	0801f9d4 	.word	0x0801f9d4

08014ee8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8014ee8:	b580      	push	{r7, lr}
 8014eea:	b082      	sub	sp, #8
 8014eec:	af00      	add	r7, sp, #0
 8014eee:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8014ef0:	f7ff fa0c 	bl	801430c <LL_RCC_GetAPB1Prescaler>
 8014ef4:	4603      	mov	r3, r0
 8014ef6:	091b      	lsrs	r3, r3, #4
 8014ef8:	f003 0307 	and.w	r3, r3, #7
 8014efc:	4a05      	ldr	r2, [pc, #20]	@ (8014f14 <RCC_GetPCLK1ClockFreq+0x2c>)
 8014efe:	5cd3      	ldrb	r3, [r2, r3]
 8014f00:	f003 031f 	and.w	r3, r3, #31
 8014f04:	687a      	ldr	r2, [r7, #4]
 8014f06:	fa22 f303 	lsr.w	r3, r2, r3
}
 8014f0a:	4618      	mov	r0, r3
 8014f0c:	3708      	adds	r7, #8
 8014f0e:	46bd      	mov	sp, r7
 8014f10:	bd80      	pop	{r7, pc}
 8014f12:	bf00      	nop
 8014f14:	0801f9d4 	.word	0x0801f9d4

08014f18 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8014f18:	b580      	push	{r7, lr}
 8014f1a:	b082      	sub	sp, #8
 8014f1c:	af00      	add	r7, sp, #0
 8014f1e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8014f20:	f7ff fa02 	bl	8014328 <LL_RCC_GetAPB2Prescaler>
 8014f24:	4603      	mov	r3, r0
 8014f26:	0a1b      	lsrs	r3, r3, #8
 8014f28:	f003 0307 	and.w	r3, r3, #7
 8014f2c:	4a05      	ldr	r2, [pc, #20]	@ (8014f44 <RCC_GetPCLK2ClockFreq+0x2c>)
 8014f2e:	5cd3      	ldrb	r3, [r2, r3]
 8014f30:	f003 031f 	and.w	r3, r3, #31
 8014f34:	687a      	ldr	r2, [r7, #4]
 8014f36:	fa22 f303 	lsr.w	r3, r2, r3
}
 8014f3a:	4618      	mov	r0, r3
 8014f3c:	3708      	adds	r7, #8
 8014f3e:	46bd      	mov	sp, r7
 8014f40:	bd80      	pop	{r7, pc}
 8014f42:	bf00      	nop
 8014f44:	0801f9d4 	.word	0x0801f9d4

08014f48 <LL_SPI_IsEnabled>:
{
 8014f48:	b480      	push	{r7}
 8014f4a:	b083      	sub	sp, #12
 8014f4c:	af00      	add	r7, sp, #0
 8014f4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	681b      	ldr	r3, [r3, #0]
 8014f54:	f003 0301 	and.w	r3, r3, #1
 8014f58:	2b01      	cmp	r3, #1
 8014f5a:	d101      	bne.n	8014f60 <LL_SPI_IsEnabled+0x18>
 8014f5c:	2301      	movs	r3, #1
 8014f5e:	e000      	b.n	8014f62 <LL_SPI_IsEnabled+0x1a>
 8014f60:	2300      	movs	r3, #0
}
 8014f62:	4618      	mov	r0, r3
 8014f64:	370c      	adds	r7, #12
 8014f66:	46bd      	mov	sp, r7
 8014f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f6c:	4770      	bx	lr

08014f6e <LL_SPI_SetInternalSSLevel>:
{
 8014f6e:	b480      	push	{r7}
 8014f70:	b083      	sub	sp, #12
 8014f72:	af00      	add	r7, sp, #0
 8014f74:	6078      	str	r0, [r7, #4]
 8014f76:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSI, SSLevel);
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	681b      	ldr	r3, [r3, #0]
 8014f7c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8014f80:	683b      	ldr	r3, [r7, #0]
 8014f82:	431a      	orrs	r2, r3
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	601a      	str	r2, [r3, #0]
}
 8014f88:	bf00      	nop
 8014f8a:	370c      	adds	r7, #12
 8014f8c:	46bd      	mov	sp, r7
 8014f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f92:	4770      	bx	lr

08014f94 <LL_SPI_GetNSSPolarity>:
{
 8014f94:	b480      	push	{r7}
 8014f96:	b083      	sub	sp, #12
 8014f98:	af00      	add	r7, sp, #0
 8014f9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(SPIx->CFG2, SPI_CFG2_SSIOP));
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	68db      	ldr	r3, [r3, #12]
 8014fa0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
}
 8014fa4:	4618      	mov	r0, r3
 8014fa6:	370c      	adds	r7, #12
 8014fa8:	46bd      	mov	sp, r7
 8014faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fae:	4770      	bx	lr

08014fb0 <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly 0..0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 8014fb0:	b480      	push	{r7}
 8014fb2:	b083      	sub	sp, #12
 8014fb4:	af00      	add	r7, sp, #0
 8014fb6:	6078      	str	r0, [r7, #4]
 8014fb8:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPOLY, CRCPoly);
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	683a      	ldr	r2, [r7, #0]
 8014fbe:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8014fc0:	bf00      	nop
 8014fc2:	370c      	adds	r7, #12
 8014fc4:	46bd      	mov	sp, r7
 8014fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fca:	4770      	bx	lr

08014fcc <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8014fcc:	b580      	push	{r7, lr}
 8014fce:	b086      	sub	sp, #24
 8014fd0:	af00      	add	r7, sp, #0
 8014fd2:	6078      	str	r0, [r7, #4]
 8014fd4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8014fd6:	2301      	movs	r3, #1
 8014fd8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_LL_SPI_BAUDRATEPRESCALER(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  /* Check the SPI instance is not enabled */
  if (LL_SPI_IsEnabled(SPIx) == 0x00000000UL)
 8014fda:	6878      	ldr	r0, [r7, #4]
 8014fdc:	f7ff ffb4 	bl	8014f48 <LL_SPI_IsEnabled>
 8014fe0:	4603      	mov	r3, r0
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	d167      	bne.n	80150b6 <LL_SPI_Init+0xea>
       * Configure SPIx CFG1 with parameters:
       * - Master Baud Rate       : SPI_CFG1_MBR[2:0] bits
       * - CRC Computation Enable : SPI_CFG1_CRCEN bit
       * - Length of data frame   : SPI_CFG1_DSIZE[4:0] bits
       */
    MODIFY_REG(SPIx->CFG1, SPI_CFG1_MBR | SPI_CFG1_CRCEN | SPI_CFG1_DSIZE,
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	689a      	ldr	r2, [r3, #8]
 8014fea:	4b35      	ldr	r3, [pc, #212]	@ (80150c0 <LL_SPI_Init+0xf4>)
 8014fec:	4013      	ands	r3, r2
 8014fee:	683a      	ldr	r2, [r7, #0]
 8014ff0:	6991      	ldr	r1, [r2, #24]
 8014ff2:	683a      	ldr	r2, [r7, #0]
 8014ff4:	6a12      	ldr	r2, [r2, #32]
 8014ff6:	4311      	orrs	r1, r2
 8014ff8:	683a      	ldr	r2, [r7, #0]
 8014ffa:	6892      	ldr	r2, [r2, #8]
 8014ffc:	430a      	orrs	r2, r1
 8014ffe:	431a      	orrs	r2, r3
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	609a      	str	r2, [r3, #8]
               SPI_InitStruct->BaudRate  | SPI_InitStruct->CRCCalculation | SPI_InitStruct->DataWidth);

    tmp_nss  = SPI_InitStruct->NSS;
 8015004:	683b      	ldr	r3, [r7, #0]
 8015006:	695b      	ldr	r3, [r3, #20]
 8015008:	613b      	str	r3, [r7, #16]
    tmp_mode = SPI_InitStruct->Mode;
 801500a:	683b      	ldr	r3, [r7, #0]
 801500c:	685b      	ldr	r3, [r3, #4]
 801500e:	60fb      	str	r3, [r7, #12]
    tmp_nss_polarity = LL_SPI_GetNSSPolarity(SPIx);
 8015010:	6878      	ldr	r0, [r7, #4]
 8015012:	f7ff ffbf 	bl	8014f94 <LL_SPI_GetNSSPolarity>
 8015016:	60b8      	str	r0, [r7, #8]

    /* Checks to setup Internal SS signal level and avoid a MODF Error */
    if ((tmp_nss == LL_SPI_NSS_SOFT) && (((tmp_nss_polarity == LL_SPI_NSS_POLARITY_LOW)  && \
 8015018:	693b      	ldr	r3, [r7, #16]
 801501a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801501e:	d112      	bne.n	8015046 <LL_SPI_Init+0x7a>
 8015020:	68bb      	ldr	r3, [r7, #8]
 8015022:	2b00      	cmp	r3, #0
 8015024:	d103      	bne.n	801502e <LL_SPI_Init+0x62>
 8015026:	68fb      	ldr	r3, [r7, #12]
 8015028:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801502c:	d006      	beq.n	801503c <LL_SPI_Init+0x70>
                                          (tmp_mode == LL_SPI_MODE_MASTER))              || \
 801502e:	68bb      	ldr	r3, [r7, #8]
 8015030:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015034:	d107      	bne.n	8015046 <LL_SPI_Init+0x7a>
                                         ((tmp_nss_polarity == LL_SPI_NSS_POLARITY_HIGH) && \
 8015036:	68fb      	ldr	r3, [r7, #12]
 8015038:	2b00      	cmp	r3, #0
 801503a:	d104      	bne.n	8015046 <LL_SPI_Init+0x7a>
                                          (tmp_mode == LL_SPI_MODE_SLAVE))))
    {
      LL_SPI_SetInternalSSLevel(SPIx, LL_SPI_SS_LEVEL_HIGH);
 801503c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8015040:	6878      	ldr	r0, [r7, #4]
 8015042:	f7ff ff94 	bl	8014f6e <LL_SPI_SetInternalSSLevel>
       * - ClockPhase             : SPI_CFG2_CPHA bit
       * - BitOrder               : SPI_CFG2_LSBFRST bit
       * - Master/Slave Mode      : SPI_CFG2_MASTER bit
       * - SPI Mode               : SPI_CFG2_COMM[1:0] bits
       */
    MODIFY_REG(SPIx->CFG2, SPI_CFG2_SSM   | SPI_CFG2_SSOE    |
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	68da      	ldr	r2, [r3, #12]
 801504a:	4b1e      	ldr	r3, [pc, #120]	@ (80150c4 <LL_SPI_Init+0xf8>)
 801504c:	4013      	ands	r3, r2
 801504e:	683a      	ldr	r2, [r7, #0]
 8015050:	6951      	ldr	r1, [r2, #20]
 8015052:	683a      	ldr	r2, [r7, #0]
 8015054:	68d2      	ldr	r2, [r2, #12]
 8015056:	4311      	orrs	r1, r2
 8015058:	683a      	ldr	r2, [r7, #0]
 801505a:	6912      	ldr	r2, [r2, #16]
 801505c:	4311      	orrs	r1, r2
 801505e:	683a      	ldr	r2, [r7, #0]
 8015060:	69d2      	ldr	r2, [r2, #28]
 8015062:	4311      	orrs	r1, r2
 8015064:	683a      	ldr	r2, [r7, #0]
 8015066:	6852      	ldr	r2, [r2, #4]
 8015068:	4311      	orrs	r1, r2
 801506a:	683a      	ldr	r2, [r7, #0]
 801506c:	6812      	ldr	r2, [r2, #0]
 801506e:	f402 22c0 	and.w	r2, r2, #393216	@ 0x60000
 8015072:	430a      	orrs	r2, r1
 8015074:	431a      	orrs	r2, r3
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	60da      	str	r2, [r3, #12]

    /*---------------------------- SPIx CR1 Configuration ------------------------
       * Configure SPIx CR1 with parameter:
       * - Half Duplex Direction  : SPI_CR1_HDDIR bit
       */
    MODIFY_REG(SPIx->CR1, SPI_CR1_HDDIR, SPI_InitStruct->TransferDirection & SPI_CR1_HDDIR);
 801507a:	687b      	ldr	r3, [r7, #4]
 801507c:	681b      	ldr	r3, [r3, #0]
 801507e:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8015082:	683b      	ldr	r3, [r7, #0]
 8015084:	681b      	ldr	r3, [r3, #0]
 8015086:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801508a:	431a      	orrs	r2, r3
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CRCPOLY Configuration ----------------------
       * Configure SPIx CRCPOLY with parameter:
       * - CRCPoly                : CRCPOLY[31:0] bits
       */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8015090:	683b      	ldr	r3, [r7, #0]
 8015092:	6a1b      	ldr	r3, [r3, #32]
 8015094:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8015098:	d105      	bne.n	80150a6 <LL_SPI_Init+0xda>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 801509a:	683b      	ldr	r3, [r7, #0]
 801509c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801509e:	4619      	mov	r1, r3
 80150a0:	6878      	ldr	r0, [r7, #4]
 80150a2:	f7ff ff85 	bl	8014fb0 <LL_SPI_SetCRCPolynomial>
    }

    /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
    CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80150aa:	f023 0201 	bic.w	r2, r3, #1
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	651a      	str	r2, [r3, #80]	@ 0x50

    status = SUCCESS;
 80150b2:	2300      	movs	r3, #0
 80150b4:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80150b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80150b8:	4618      	mov	r0, r3
 80150ba:	3718      	adds	r7, #24
 80150bc:	46bd      	mov	sp, r7
 80150be:	bd80      	pop	{r7, pc}
 80150c0:	8fbfffe0 	.word	0x8fbfffe0
 80150c4:	d839ffff 	.word	0xd839ffff

080150c8 <LL_TIM_SetPrescaler>:
{
 80150c8:	b480      	push	{r7}
 80150ca:	b083      	sub	sp, #12
 80150cc:	af00      	add	r7, sp, #0
 80150ce:	6078      	str	r0, [r7, #4]
 80150d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	683a      	ldr	r2, [r7, #0]
 80150d6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80150d8:	bf00      	nop
 80150da:	370c      	adds	r7, #12
 80150dc:	46bd      	mov	sp, r7
 80150de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150e2:	4770      	bx	lr

080150e4 <LL_TIM_SetAutoReload>:
{
 80150e4:	b480      	push	{r7}
 80150e6:	b083      	sub	sp, #12
 80150e8:	af00      	add	r7, sp, #0
 80150ea:	6078      	str	r0, [r7, #4]
 80150ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	683a      	ldr	r2, [r7, #0]
 80150f2:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80150f4:	bf00      	nop
 80150f6:	370c      	adds	r7, #12
 80150f8:	46bd      	mov	sp, r7
 80150fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150fe:	4770      	bx	lr

08015100 <LL_TIM_SetRepetitionCounter>:
{
 8015100:	b480      	push	{r7}
 8015102:	b083      	sub	sp, #12
 8015104:	af00      	add	r7, sp, #0
 8015106:	6078      	str	r0, [r7, #4]
 8015108:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	683a      	ldr	r2, [r7, #0]
 801510e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8015110:	bf00      	nop
 8015112:	370c      	adds	r7, #12
 8015114:	46bd      	mov	sp, r7
 8015116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801511a:	4770      	bx	lr

0801511c <LL_TIM_OC_SetCompareCH1>:
{
 801511c:	b480      	push	{r7}
 801511e:	b083      	sub	sp, #12
 8015120:	af00      	add	r7, sp, #0
 8015122:	6078      	str	r0, [r7, #4]
 8015124:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	683a      	ldr	r2, [r7, #0]
 801512a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 801512c:	bf00      	nop
 801512e:	370c      	adds	r7, #12
 8015130:	46bd      	mov	sp, r7
 8015132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015136:	4770      	bx	lr

08015138 <LL_TIM_OC_SetCompareCH2>:
{
 8015138:	b480      	push	{r7}
 801513a:	b083      	sub	sp, #12
 801513c:	af00      	add	r7, sp, #0
 801513e:	6078      	str	r0, [r7, #4]
 8015140:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	683a      	ldr	r2, [r7, #0]
 8015146:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8015148:	bf00      	nop
 801514a:	370c      	adds	r7, #12
 801514c:	46bd      	mov	sp, r7
 801514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015152:	4770      	bx	lr

08015154 <LL_TIM_OC_SetCompareCH3>:
{
 8015154:	b480      	push	{r7}
 8015156:	b083      	sub	sp, #12
 8015158:	af00      	add	r7, sp, #0
 801515a:	6078      	str	r0, [r7, #4]
 801515c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	683a      	ldr	r2, [r7, #0]
 8015162:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8015164:	bf00      	nop
 8015166:	370c      	adds	r7, #12
 8015168:	46bd      	mov	sp, r7
 801516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801516e:	4770      	bx	lr

08015170 <LL_TIM_OC_SetCompareCH4>:
{
 8015170:	b480      	push	{r7}
 8015172:	b083      	sub	sp, #12
 8015174:	af00      	add	r7, sp, #0
 8015176:	6078      	str	r0, [r7, #4]
 8015178:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 801517a:	687b      	ldr	r3, [r7, #4]
 801517c:	683a      	ldr	r2, [r7, #0]
 801517e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8015180:	bf00      	nop
 8015182:	370c      	adds	r7, #12
 8015184:	46bd      	mov	sp, r7
 8015186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801518a:	4770      	bx	lr

0801518c <LL_TIM_OC_SetCompareCH5>:
{
 801518c:	b480      	push	{r7}
 801518e:	b083      	sub	sp, #12
 8015190:	af00      	add	r7, sp, #0
 8015192:	6078      	str	r0, [r7, #4]
 8015194:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801519a:	687b      	ldr	r3, [r7, #4]
 801519c:	683a      	ldr	r2, [r7, #0]
 801519e:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80151a0:	bf00      	nop
 80151a2:	370c      	adds	r7, #12
 80151a4:	46bd      	mov	sp, r7
 80151a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151aa:	4770      	bx	lr

080151ac <LL_TIM_OC_SetCompareCH6>:
{
 80151ac:	b480      	push	{r7}
 80151ae:	b083      	sub	sp, #12
 80151b0:	af00      	add	r7, sp, #0
 80151b2:	6078      	str	r0, [r7, #4]
 80151b4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	683a      	ldr	r2, [r7, #0]
 80151ba:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80151bc:	bf00      	nop
 80151be:	370c      	adds	r7, #12
 80151c0:	46bd      	mov	sp, r7
 80151c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151c6:	4770      	bx	lr

080151c8 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80151c8:	b480      	push	{r7}
 80151ca:	b083      	sub	sp, #12
 80151cc:	af00      	add	r7, sp, #0
 80151ce:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	695b      	ldr	r3, [r3, #20]
 80151d4:	f043 0201 	orr.w	r2, r3, #1
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	615a      	str	r2, [r3, #20]
}
 80151dc:	bf00      	nop
 80151de:	370c      	adds	r7, #12
 80151e0:	46bd      	mov	sp, r7
 80151e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151e6:	4770      	bx	lr

080151e8 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80151e8:	b580      	push	{r7, lr}
 80151ea:	b084      	sub	sp, #16
 80151ec:	af00      	add	r7, sp, #0
 80151ee:	6078      	str	r0, [r7, #4]
 80151f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80151f2:	687b      	ldr	r3, [r7, #4]
 80151f4:	681b      	ldr	r3, [r3, #0]
 80151f6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80151f8:	687b      	ldr	r3, [r7, #4]
 80151fa:	4a41      	ldr	r2, [pc, #260]	@ (8015300 <LL_TIM_Init+0x118>)
 80151fc:	4293      	cmp	r3, r2
 80151fe:	d013      	beq.n	8015228 <LL_TIM_Init+0x40>
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015206:	d00f      	beq.n	8015228 <LL_TIM_Init+0x40>
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	4a3e      	ldr	r2, [pc, #248]	@ (8015304 <LL_TIM_Init+0x11c>)
 801520c:	4293      	cmp	r3, r2
 801520e:	d00b      	beq.n	8015228 <LL_TIM_Init+0x40>
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	4a3d      	ldr	r2, [pc, #244]	@ (8015308 <LL_TIM_Init+0x120>)
 8015214:	4293      	cmp	r3, r2
 8015216:	d007      	beq.n	8015228 <LL_TIM_Init+0x40>
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	4a3c      	ldr	r2, [pc, #240]	@ (801530c <LL_TIM_Init+0x124>)
 801521c:	4293      	cmp	r3, r2
 801521e:	d003      	beq.n	8015228 <LL_TIM_Init+0x40>
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	4a3b      	ldr	r2, [pc, #236]	@ (8015310 <LL_TIM_Init+0x128>)
 8015224:	4293      	cmp	r3, r2
 8015226:	d106      	bne.n	8015236 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8015228:	68fb      	ldr	r3, [r7, #12]
 801522a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801522e:	683b      	ldr	r3, [r7, #0]
 8015230:	685b      	ldr	r3, [r3, #4]
 8015232:	4313      	orrs	r3, r2
 8015234:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	4a31      	ldr	r2, [pc, #196]	@ (8015300 <LL_TIM_Init+0x118>)
 801523a:	4293      	cmp	r3, r2
 801523c:	d027      	beq.n	801528e <LL_TIM_Init+0xa6>
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015244:	d023      	beq.n	801528e <LL_TIM_Init+0xa6>
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	4a2e      	ldr	r2, [pc, #184]	@ (8015304 <LL_TIM_Init+0x11c>)
 801524a:	4293      	cmp	r3, r2
 801524c:	d01f      	beq.n	801528e <LL_TIM_Init+0xa6>
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	4a2d      	ldr	r2, [pc, #180]	@ (8015308 <LL_TIM_Init+0x120>)
 8015252:	4293      	cmp	r3, r2
 8015254:	d01b      	beq.n	801528e <LL_TIM_Init+0xa6>
 8015256:	687b      	ldr	r3, [r7, #4]
 8015258:	4a2c      	ldr	r2, [pc, #176]	@ (801530c <LL_TIM_Init+0x124>)
 801525a:	4293      	cmp	r3, r2
 801525c:	d017      	beq.n	801528e <LL_TIM_Init+0xa6>
 801525e:	687b      	ldr	r3, [r7, #4]
 8015260:	4a2b      	ldr	r2, [pc, #172]	@ (8015310 <LL_TIM_Init+0x128>)
 8015262:	4293      	cmp	r3, r2
 8015264:	d013      	beq.n	801528e <LL_TIM_Init+0xa6>
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	4a2a      	ldr	r2, [pc, #168]	@ (8015314 <LL_TIM_Init+0x12c>)
 801526a:	4293      	cmp	r3, r2
 801526c:	d00f      	beq.n	801528e <LL_TIM_Init+0xa6>
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	4a29      	ldr	r2, [pc, #164]	@ (8015318 <LL_TIM_Init+0x130>)
 8015272:	4293      	cmp	r3, r2
 8015274:	d00b      	beq.n	801528e <LL_TIM_Init+0xa6>
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	4a28      	ldr	r2, [pc, #160]	@ (801531c <LL_TIM_Init+0x134>)
 801527a:	4293      	cmp	r3, r2
 801527c:	d007      	beq.n	801528e <LL_TIM_Init+0xa6>
 801527e:	687b      	ldr	r3, [r7, #4]
 8015280:	4a27      	ldr	r2, [pc, #156]	@ (8015320 <LL_TIM_Init+0x138>)
 8015282:	4293      	cmp	r3, r2
 8015284:	d003      	beq.n	801528e <LL_TIM_Init+0xa6>
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	4a26      	ldr	r2, [pc, #152]	@ (8015324 <LL_TIM_Init+0x13c>)
 801528a:	4293      	cmp	r3, r2
 801528c:	d106      	bne.n	801529c <LL_TIM_Init+0xb4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 801528e:	68fb      	ldr	r3, [r7, #12]
 8015290:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8015294:	683b      	ldr	r3, [r7, #0]
 8015296:	68db      	ldr	r3, [r3, #12]
 8015298:	4313      	orrs	r3, r2
 801529a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	68fa      	ldr	r2, [r7, #12]
 80152a0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80152a2:	683b      	ldr	r3, [r7, #0]
 80152a4:	689b      	ldr	r3, [r3, #8]
 80152a6:	4619      	mov	r1, r3
 80152a8:	6878      	ldr	r0, [r7, #4]
 80152aa:	f7ff ff1b 	bl	80150e4 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80152ae:	683b      	ldr	r3, [r7, #0]
 80152b0:	881b      	ldrh	r3, [r3, #0]
 80152b2:	4619      	mov	r1, r3
 80152b4:	6878      	ldr	r0, [r7, #4]
 80152b6:	f7ff ff07 	bl	80150c8 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	4a10      	ldr	r2, [pc, #64]	@ (8015300 <LL_TIM_Init+0x118>)
 80152be:	4293      	cmp	r3, r2
 80152c0:	d00f      	beq.n	80152e2 <LL_TIM_Init+0xfa>
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	4a12      	ldr	r2, [pc, #72]	@ (8015310 <LL_TIM_Init+0x128>)
 80152c6:	4293      	cmp	r3, r2
 80152c8:	d00b      	beq.n	80152e2 <LL_TIM_Init+0xfa>
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	4a11      	ldr	r2, [pc, #68]	@ (8015314 <LL_TIM_Init+0x12c>)
 80152ce:	4293      	cmp	r3, r2
 80152d0:	d007      	beq.n	80152e2 <LL_TIM_Init+0xfa>
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	4a10      	ldr	r2, [pc, #64]	@ (8015318 <LL_TIM_Init+0x130>)
 80152d6:	4293      	cmp	r3, r2
 80152d8:	d003      	beq.n	80152e2 <LL_TIM_Init+0xfa>
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	4a0f      	ldr	r2, [pc, #60]	@ (801531c <LL_TIM_Init+0x134>)
 80152de:	4293      	cmp	r3, r2
 80152e0:	d105      	bne.n	80152ee <LL_TIM_Init+0x106>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80152e2:	683b      	ldr	r3, [r7, #0]
 80152e4:	691b      	ldr	r3, [r3, #16]
 80152e6:	4619      	mov	r1, r3
 80152e8:	6878      	ldr	r0, [r7, #4]
 80152ea:	f7ff ff09 	bl	8015100 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80152ee:	6878      	ldr	r0, [r7, #4]
 80152f0:	f7ff ff6a 	bl	80151c8 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80152f4:	2300      	movs	r3, #0
}
 80152f6:	4618      	mov	r0, r3
 80152f8:	3710      	adds	r7, #16
 80152fa:	46bd      	mov	sp, r7
 80152fc:	bd80      	pop	{r7, pc}
 80152fe:	bf00      	nop
 8015300:	40010000 	.word	0x40010000
 8015304:	40000400 	.word	0x40000400
 8015308:	40000800 	.word	0x40000800
 801530c:	40000c00 	.word	0x40000c00
 8015310:	40010400 	.word	0x40010400
 8015314:	40014000 	.word	0x40014000
 8015318:	40014400 	.word	0x40014400
 801531c:	40014800 	.word	0x40014800
 8015320:	4000e000 	.word	0x4000e000
 8015324:	4000e400 	.word	0x4000e400

08015328 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8015328:	b580      	push	{r7, lr}
 801532a:	b086      	sub	sp, #24
 801532c:	af00      	add	r7, sp, #0
 801532e:	60f8      	str	r0, [r7, #12]
 8015330:	60b9      	str	r1, [r7, #8]
 8015332:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8015334:	2301      	movs	r3, #1
 8015336:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8015338:	68bb      	ldr	r3, [r7, #8]
 801533a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801533e:	d045      	beq.n	80153cc <LL_TIM_OC_Init+0xa4>
 8015340:	68bb      	ldr	r3, [r7, #8]
 8015342:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8015346:	d848      	bhi.n	80153da <LL_TIM_OC_Init+0xb2>
 8015348:	68bb      	ldr	r3, [r7, #8]
 801534a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801534e:	d036      	beq.n	80153be <LL_TIM_OC_Init+0x96>
 8015350:	68bb      	ldr	r3, [r7, #8]
 8015352:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015356:	d840      	bhi.n	80153da <LL_TIM_OC_Init+0xb2>
 8015358:	68bb      	ldr	r3, [r7, #8]
 801535a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801535e:	d027      	beq.n	80153b0 <LL_TIM_OC_Init+0x88>
 8015360:	68bb      	ldr	r3, [r7, #8]
 8015362:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8015366:	d838      	bhi.n	80153da <LL_TIM_OC_Init+0xb2>
 8015368:	68bb      	ldr	r3, [r7, #8]
 801536a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801536e:	d018      	beq.n	80153a2 <LL_TIM_OC_Init+0x7a>
 8015370:	68bb      	ldr	r3, [r7, #8]
 8015372:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015376:	d830      	bhi.n	80153da <LL_TIM_OC_Init+0xb2>
 8015378:	68bb      	ldr	r3, [r7, #8]
 801537a:	2b01      	cmp	r3, #1
 801537c:	d003      	beq.n	8015386 <LL_TIM_OC_Init+0x5e>
 801537e:	68bb      	ldr	r3, [r7, #8]
 8015380:	2b10      	cmp	r3, #16
 8015382:	d007      	beq.n	8015394 <LL_TIM_OC_Init+0x6c>
      break;
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8015384:	e029      	b.n	80153da <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8015386:	6879      	ldr	r1, [r7, #4]
 8015388:	68f8      	ldr	r0, [r7, #12]
 801538a:	f000 f82d 	bl	80153e8 <OC1Config>
 801538e:	4603      	mov	r3, r0
 8015390:	75fb      	strb	r3, [r7, #23]
      break;
 8015392:	e023      	b.n	80153dc <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8015394:	6879      	ldr	r1, [r7, #4]
 8015396:	68f8      	ldr	r0, [r7, #12]
 8015398:	f000 f8a6 	bl	80154e8 <OC2Config>
 801539c:	4603      	mov	r3, r0
 801539e:	75fb      	strb	r3, [r7, #23]
      break;
 80153a0:	e01c      	b.n	80153dc <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80153a2:	6879      	ldr	r1, [r7, #4]
 80153a4:	68f8      	ldr	r0, [r7, #12]
 80153a6:	f000 f923 	bl	80155f0 <OC3Config>
 80153aa:	4603      	mov	r3, r0
 80153ac:	75fb      	strb	r3, [r7, #23]
      break;
 80153ae:	e015      	b.n	80153dc <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80153b0:	6879      	ldr	r1, [r7, #4]
 80153b2:	68f8      	ldr	r0, [r7, #12]
 80153b4:	f000 f9a0 	bl	80156f8 <OC4Config>
 80153b8:	4603      	mov	r3, r0
 80153ba:	75fb      	strb	r3, [r7, #23]
      break;
 80153bc:	e00e      	b.n	80153dc <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 80153be:	6879      	ldr	r1, [r7, #4]
 80153c0:	68f8      	ldr	r0, [r7, #12]
 80153c2:	f000 fa05 	bl	80157d0 <OC5Config>
 80153c6:	4603      	mov	r3, r0
 80153c8:	75fb      	strb	r3, [r7, #23]
      break;
 80153ca:	e007      	b.n	80153dc <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 80153cc:	6879      	ldr	r1, [r7, #4]
 80153ce:	68f8      	ldr	r0, [r7, #12]
 80153d0:	f000 fa62 	bl	8015898 <OC6Config>
 80153d4:	4603      	mov	r3, r0
 80153d6:	75fb      	strb	r3, [r7, #23]
      break;
 80153d8:	e000      	b.n	80153dc <LL_TIM_OC_Init+0xb4>
      break;
 80153da:	bf00      	nop
  }

  return result;
 80153dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80153de:	4618      	mov	r0, r3
 80153e0:	3718      	adds	r7, #24
 80153e2:	46bd      	mov	sp, r7
 80153e4:	bd80      	pop	{r7, pc}
	...

080153e8 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80153e8:	b580      	push	{r7, lr}
 80153ea:	b086      	sub	sp, #24
 80153ec:	af00      	add	r7, sp, #0
 80153ee:	6078      	str	r0, [r7, #4]
 80153f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	6a1b      	ldr	r3, [r3, #32]
 80153f6:	f023 0201 	bic.w	r2, r3, #1
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	6a1b      	ldr	r3, [r3, #32]
 8015402:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	685b      	ldr	r3, [r3, #4]
 8015408:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	699b      	ldr	r3, [r3, #24]
 801540e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8015410:	68fb      	ldr	r3, [r7, #12]
 8015412:	f023 0303 	bic.w	r3, r3, #3
 8015416:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8015418:	68fa      	ldr	r2, [r7, #12]
 801541a:	4b2d      	ldr	r3, [pc, #180]	@ (80154d0 <OC1Config+0xe8>)
 801541c:	4013      	ands	r3, r2
 801541e:	683a      	ldr	r2, [r7, #0]
 8015420:	6812      	ldr	r2, [r2, #0]
 8015422:	4313      	orrs	r3, r2
 8015424:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8015426:	697b      	ldr	r3, [r7, #20]
 8015428:	f023 0202 	bic.w	r2, r3, #2
 801542c:	683b      	ldr	r3, [r7, #0]
 801542e:	691b      	ldr	r3, [r3, #16]
 8015430:	4313      	orrs	r3, r2
 8015432:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8015434:	697b      	ldr	r3, [r7, #20]
 8015436:	f023 0201 	bic.w	r2, r3, #1
 801543a:	683b      	ldr	r3, [r7, #0]
 801543c:	685b      	ldr	r3, [r3, #4]
 801543e:	4313      	orrs	r3, r2
 8015440:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	4a23      	ldr	r2, [pc, #140]	@ (80154d4 <OC1Config+0xec>)
 8015446:	4293      	cmp	r3, r2
 8015448:	d00f      	beq.n	801546a <OC1Config+0x82>
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	4a22      	ldr	r2, [pc, #136]	@ (80154d8 <OC1Config+0xf0>)
 801544e:	4293      	cmp	r3, r2
 8015450:	d00b      	beq.n	801546a <OC1Config+0x82>
 8015452:	687b      	ldr	r3, [r7, #4]
 8015454:	4a21      	ldr	r2, [pc, #132]	@ (80154dc <OC1Config+0xf4>)
 8015456:	4293      	cmp	r3, r2
 8015458:	d007      	beq.n	801546a <OC1Config+0x82>
 801545a:	687b      	ldr	r3, [r7, #4]
 801545c:	4a20      	ldr	r2, [pc, #128]	@ (80154e0 <OC1Config+0xf8>)
 801545e:	4293      	cmp	r3, r2
 8015460:	d003      	beq.n	801546a <OC1Config+0x82>
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	4a1f      	ldr	r2, [pc, #124]	@ (80154e4 <OC1Config+0xfc>)
 8015466:	4293      	cmp	r3, r2
 8015468:	d11e      	bne.n	80154a8 <OC1Config+0xc0>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 801546a:	697b      	ldr	r3, [r7, #20]
 801546c:	f023 0208 	bic.w	r2, r3, #8
 8015470:	683b      	ldr	r3, [r7, #0]
 8015472:	695b      	ldr	r3, [r3, #20]
 8015474:	009b      	lsls	r3, r3, #2
 8015476:	4313      	orrs	r3, r2
 8015478:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 801547a:	697b      	ldr	r3, [r7, #20]
 801547c:	f023 0204 	bic.w	r2, r3, #4
 8015480:	683b      	ldr	r3, [r7, #0]
 8015482:	689b      	ldr	r3, [r3, #8]
 8015484:	009b      	lsls	r3, r3, #2
 8015486:	4313      	orrs	r3, r2
 8015488:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 801548a:	693b      	ldr	r3, [r7, #16]
 801548c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8015490:	683b      	ldr	r3, [r7, #0]
 8015492:	699b      	ldr	r3, [r3, #24]
 8015494:	4313      	orrs	r3, r2
 8015496:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8015498:	693b      	ldr	r3, [r7, #16]
 801549a:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 801549e:	683b      	ldr	r3, [r7, #0]
 80154a0:	69db      	ldr	r3, [r3, #28]
 80154a2:	005b      	lsls	r3, r3, #1
 80154a4:	4313      	orrs	r3, r2
 80154a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	693a      	ldr	r2, [r7, #16]
 80154ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	68fa      	ldr	r2, [r7, #12]
 80154b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80154b4:	683b      	ldr	r3, [r7, #0]
 80154b6:	68db      	ldr	r3, [r3, #12]
 80154b8:	4619      	mov	r1, r3
 80154ba:	6878      	ldr	r0, [r7, #4]
 80154bc:	f7ff fe2e 	bl	801511c <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	697a      	ldr	r2, [r7, #20]
 80154c4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80154c6:	2300      	movs	r3, #0
}
 80154c8:	4618      	mov	r0, r3
 80154ca:	3718      	adds	r7, #24
 80154cc:	46bd      	mov	sp, r7
 80154ce:	bd80      	pop	{r7, pc}
 80154d0:	fffeff8f 	.word	0xfffeff8f
 80154d4:	40010000 	.word	0x40010000
 80154d8:	40010400 	.word	0x40010400
 80154dc:	40014000 	.word	0x40014000
 80154e0:	40014400 	.word	0x40014400
 80154e4:	40014800 	.word	0x40014800

080154e8 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80154e8:	b580      	push	{r7, lr}
 80154ea:	b086      	sub	sp, #24
 80154ec:	af00      	add	r7, sp, #0
 80154ee:	6078      	str	r0, [r7, #4]
 80154f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	6a1b      	ldr	r3, [r3, #32]
 80154f6:	f023 0210 	bic.w	r2, r3, #16
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	6a1b      	ldr	r3, [r3, #32]
 8015502:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8015504:	687b      	ldr	r3, [r7, #4]
 8015506:	685b      	ldr	r3, [r3, #4]
 8015508:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	699b      	ldr	r3, [r3, #24]
 801550e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8015510:	68fb      	ldr	r3, [r7, #12]
 8015512:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8015516:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8015518:	68fa      	ldr	r2, [r7, #12]
 801551a:	4b2f      	ldr	r3, [pc, #188]	@ (80155d8 <OC2Config+0xf0>)
 801551c:	4013      	ands	r3, r2
 801551e:	683a      	ldr	r2, [r7, #0]
 8015520:	6812      	ldr	r2, [r2, #0]
 8015522:	0212      	lsls	r2, r2, #8
 8015524:	4313      	orrs	r3, r2
 8015526:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8015528:	697b      	ldr	r3, [r7, #20]
 801552a:	f023 0220 	bic.w	r2, r3, #32
 801552e:	683b      	ldr	r3, [r7, #0]
 8015530:	691b      	ldr	r3, [r3, #16]
 8015532:	011b      	lsls	r3, r3, #4
 8015534:	4313      	orrs	r3, r2
 8015536:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8015538:	697b      	ldr	r3, [r7, #20]
 801553a:	f023 0210 	bic.w	r2, r3, #16
 801553e:	683b      	ldr	r3, [r7, #0]
 8015540:	685b      	ldr	r3, [r3, #4]
 8015542:	011b      	lsls	r3, r3, #4
 8015544:	4313      	orrs	r3, r2
 8015546:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	4a24      	ldr	r2, [pc, #144]	@ (80155dc <OC2Config+0xf4>)
 801554c:	4293      	cmp	r3, r2
 801554e:	d00f      	beq.n	8015570 <OC2Config+0x88>
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	4a23      	ldr	r2, [pc, #140]	@ (80155e0 <OC2Config+0xf8>)
 8015554:	4293      	cmp	r3, r2
 8015556:	d00b      	beq.n	8015570 <OC2Config+0x88>
 8015558:	687b      	ldr	r3, [r7, #4]
 801555a:	4a22      	ldr	r2, [pc, #136]	@ (80155e4 <OC2Config+0xfc>)
 801555c:	4293      	cmp	r3, r2
 801555e:	d007      	beq.n	8015570 <OC2Config+0x88>
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	4a21      	ldr	r2, [pc, #132]	@ (80155e8 <OC2Config+0x100>)
 8015564:	4293      	cmp	r3, r2
 8015566:	d003      	beq.n	8015570 <OC2Config+0x88>
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	4a20      	ldr	r2, [pc, #128]	@ (80155ec <OC2Config+0x104>)
 801556c:	4293      	cmp	r3, r2
 801556e:	d11f      	bne.n	80155b0 <OC2Config+0xc8>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8015570:	697b      	ldr	r3, [r7, #20]
 8015572:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8015576:	683b      	ldr	r3, [r7, #0]
 8015578:	695b      	ldr	r3, [r3, #20]
 801557a:	019b      	lsls	r3, r3, #6
 801557c:	4313      	orrs	r3, r2
 801557e:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8015580:	697b      	ldr	r3, [r7, #20]
 8015582:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8015586:	683b      	ldr	r3, [r7, #0]
 8015588:	689b      	ldr	r3, [r3, #8]
 801558a:	019b      	lsls	r3, r3, #6
 801558c:	4313      	orrs	r3, r2
 801558e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8015590:	693b      	ldr	r3, [r7, #16]
 8015592:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8015596:	683b      	ldr	r3, [r7, #0]
 8015598:	699b      	ldr	r3, [r3, #24]
 801559a:	009b      	lsls	r3, r3, #2
 801559c:	4313      	orrs	r3, r2
 801559e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80155a0:	693b      	ldr	r3, [r7, #16]
 80155a2:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80155a6:	683b      	ldr	r3, [r7, #0]
 80155a8:	69db      	ldr	r3, [r3, #28]
 80155aa:	00db      	lsls	r3, r3, #3
 80155ac:	4313      	orrs	r3, r2
 80155ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	693a      	ldr	r2, [r7, #16]
 80155b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	68fa      	ldr	r2, [r7, #12]
 80155ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80155bc:	683b      	ldr	r3, [r7, #0]
 80155be:	68db      	ldr	r3, [r3, #12]
 80155c0:	4619      	mov	r1, r3
 80155c2:	6878      	ldr	r0, [r7, #4]
 80155c4:	f7ff fdb8 	bl	8015138 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	697a      	ldr	r2, [r7, #20]
 80155cc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80155ce:	2300      	movs	r3, #0
}
 80155d0:	4618      	mov	r0, r3
 80155d2:	3718      	adds	r7, #24
 80155d4:	46bd      	mov	sp, r7
 80155d6:	bd80      	pop	{r7, pc}
 80155d8:	feff8fff 	.word	0xfeff8fff
 80155dc:	40010000 	.word	0x40010000
 80155e0:	40010400 	.word	0x40010400
 80155e4:	40014000 	.word	0x40014000
 80155e8:	40014400 	.word	0x40014400
 80155ec:	40014800 	.word	0x40014800

080155f0 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80155f0:	b580      	push	{r7, lr}
 80155f2:	b086      	sub	sp, #24
 80155f4:	af00      	add	r7, sp, #0
 80155f6:	6078      	str	r0, [r7, #4]
 80155f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80155fa:	687b      	ldr	r3, [r7, #4]
 80155fc:	6a1b      	ldr	r3, [r3, #32]
 80155fe:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	6a1b      	ldr	r3, [r3, #32]
 801560a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	685b      	ldr	r3, [r3, #4]
 8015610:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	69db      	ldr	r3, [r3, #28]
 8015616:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8015618:	68fb      	ldr	r3, [r7, #12]
 801561a:	f023 0303 	bic.w	r3, r3, #3
 801561e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8015620:	68fa      	ldr	r2, [r7, #12]
 8015622:	4b2f      	ldr	r3, [pc, #188]	@ (80156e0 <OC3Config+0xf0>)
 8015624:	4013      	ands	r3, r2
 8015626:	683a      	ldr	r2, [r7, #0]
 8015628:	6812      	ldr	r2, [r2, #0]
 801562a:	4313      	orrs	r3, r2
 801562c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 801562e:	697b      	ldr	r3, [r7, #20]
 8015630:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8015634:	683b      	ldr	r3, [r7, #0]
 8015636:	691b      	ldr	r3, [r3, #16]
 8015638:	021b      	lsls	r3, r3, #8
 801563a:	4313      	orrs	r3, r2
 801563c:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 801563e:	697b      	ldr	r3, [r7, #20]
 8015640:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8015644:	683b      	ldr	r3, [r7, #0]
 8015646:	685b      	ldr	r3, [r3, #4]
 8015648:	021b      	lsls	r3, r3, #8
 801564a:	4313      	orrs	r3, r2
 801564c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	4a24      	ldr	r2, [pc, #144]	@ (80156e4 <OC3Config+0xf4>)
 8015652:	4293      	cmp	r3, r2
 8015654:	d00f      	beq.n	8015676 <OC3Config+0x86>
 8015656:	687b      	ldr	r3, [r7, #4]
 8015658:	4a23      	ldr	r2, [pc, #140]	@ (80156e8 <OC3Config+0xf8>)
 801565a:	4293      	cmp	r3, r2
 801565c:	d00b      	beq.n	8015676 <OC3Config+0x86>
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	4a22      	ldr	r2, [pc, #136]	@ (80156ec <OC3Config+0xfc>)
 8015662:	4293      	cmp	r3, r2
 8015664:	d007      	beq.n	8015676 <OC3Config+0x86>
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	4a21      	ldr	r2, [pc, #132]	@ (80156f0 <OC3Config+0x100>)
 801566a:	4293      	cmp	r3, r2
 801566c:	d003      	beq.n	8015676 <OC3Config+0x86>
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	4a20      	ldr	r2, [pc, #128]	@ (80156f4 <OC3Config+0x104>)
 8015672:	4293      	cmp	r3, r2
 8015674:	d11f      	bne.n	80156b6 <OC3Config+0xc6>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8015676:	697b      	ldr	r3, [r7, #20]
 8015678:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 801567c:	683b      	ldr	r3, [r7, #0]
 801567e:	695b      	ldr	r3, [r3, #20]
 8015680:	029b      	lsls	r3, r3, #10
 8015682:	4313      	orrs	r3, r2
 8015684:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8015686:	697b      	ldr	r3, [r7, #20]
 8015688:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 801568c:	683b      	ldr	r3, [r7, #0]
 801568e:	689b      	ldr	r3, [r3, #8]
 8015690:	029b      	lsls	r3, r3, #10
 8015692:	4313      	orrs	r3, r2
 8015694:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8015696:	693b      	ldr	r3, [r7, #16]
 8015698:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801569c:	683b      	ldr	r3, [r7, #0]
 801569e:	699b      	ldr	r3, [r3, #24]
 80156a0:	011b      	lsls	r3, r3, #4
 80156a2:	4313      	orrs	r3, r2
 80156a4:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80156a6:	693b      	ldr	r3, [r7, #16]
 80156a8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80156ac:	683b      	ldr	r3, [r7, #0]
 80156ae:	69db      	ldr	r3, [r3, #28]
 80156b0:	015b      	lsls	r3, r3, #5
 80156b2:	4313      	orrs	r3, r2
 80156b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	693a      	ldr	r2, [r7, #16]
 80156ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	68fa      	ldr	r2, [r7, #12]
 80156c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80156c2:	683b      	ldr	r3, [r7, #0]
 80156c4:	68db      	ldr	r3, [r3, #12]
 80156c6:	4619      	mov	r1, r3
 80156c8:	6878      	ldr	r0, [r7, #4]
 80156ca:	f7ff fd43 	bl	8015154 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80156ce:	687b      	ldr	r3, [r7, #4]
 80156d0:	697a      	ldr	r2, [r7, #20]
 80156d2:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80156d4:	2300      	movs	r3, #0
}
 80156d6:	4618      	mov	r0, r3
 80156d8:	3718      	adds	r7, #24
 80156da:	46bd      	mov	sp, r7
 80156dc:	bd80      	pop	{r7, pc}
 80156de:	bf00      	nop
 80156e0:	fffeff8f 	.word	0xfffeff8f
 80156e4:	40010000 	.word	0x40010000
 80156e8:	40010400 	.word	0x40010400
 80156ec:	40014000 	.word	0x40014000
 80156f0:	40014400 	.word	0x40014400
 80156f4:	40014800 	.word	0x40014800

080156f8 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80156f8:	b580      	push	{r7, lr}
 80156fa:	b086      	sub	sp, #24
 80156fc:	af00      	add	r7, sp, #0
 80156fe:	6078      	str	r0, [r7, #4]
 8015700:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	6a1b      	ldr	r3, [r3, #32]
 8015706:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 801570e:	687b      	ldr	r3, [r7, #4]
 8015710:	6a1b      	ldr	r3, [r3, #32]
 8015712:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	685b      	ldr	r3, [r3, #4]
 8015718:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 801571a:	687b      	ldr	r3, [r7, #4]
 801571c:	69db      	ldr	r3, [r3, #28]
 801571e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8015720:	68fb      	ldr	r3, [r7, #12]
 8015722:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8015726:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8015728:	68fa      	ldr	r2, [r7, #12]
 801572a:	4b23      	ldr	r3, [pc, #140]	@ (80157b8 <OC4Config+0xc0>)
 801572c:	4013      	ands	r3, r2
 801572e:	683a      	ldr	r2, [r7, #0]
 8015730:	6812      	ldr	r2, [r2, #0]
 8015732:	0212      	lsls	r2, r2, #8
 8015734:	4313      	orrs	r3, r2
 8015736:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8015738:	693b      	ldr	r3, [r7, #16]
 801573a:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 801573e:	683b      	ldr	r3, [r7, #0]
 8015740:	691b      	ldr	r3, [r3, #16]
 8015742:	031b      	lsls	r3, r3, #12
 8015744:	4313      	orrs	r3, r2
 8015746:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8015748:	693b      	ldr	r3, [r7, #16]
 801574a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801574e:	683b      	ldr	r3, [r7, #0]
 8015750:	685b      	ldr	r3, [r3, #4]
 8015752:	031b      	lsls	r3, r3, #12
 8015754:	4313      	orrs	r3, r2
 8015756:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	4a18      	ldr	r2, [pc, #96]	@ (80157bc <OC4Config+0xc4>)
 801575c:	4293      	cmp	r3, r2
 801575e:	d00f      	beq.n	8015780 <OC4Config+0x88>
 8015760:	687b      	ldr	r3, [r7, #4]
 8015762:	4a17      	ldr	r2, [pc, #92]	@ (80157c0 <OC4Config+0xc8>)
 8015764:	4293      	cmp	r3, r2
 8015766:	d00b      	beq.n	8015780 <OC4Config+0x88>
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	4a16      	ldr	r2, [pc, #88]	@ (80157c4 <OC4Config+0xcc>)
 801576c:	4293      	cmp	r3, r2
 801576e:	d007      	beq.n	8015780 <OC4Config+0x88>
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	4a15      	ldr	r2, [pc, #84]	@ (80157c8 <OC4Config+0xd0>)
 8015774:	4293      	cmp	r3, r2
 8015776:	d003      	beq.n	8015780 <OC4Config+0x88>
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	4a14      	ldr	r2, [pc, #80]	@ (80157cc <OC4Config+0xd4>)
 801577c:	4293      	cmp	r3, r2
 801577e:	d107      	bne.n	8015790 <OC4Config+0x98>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8015780:	697b      	ldr	r3, [r7, #20]
 8015782:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8015786:	683b      	ldr	r3, [r7, #0]
 8015788:	699b      	ldr	r3, [r3, #24]
 801578a:	019b      	lsls	r3, r3, #6
 801578c:	4313      	orrs	r3, r2
 801578e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	697a      	ldr	r2, [r7, #20]
 8015794:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	68fa      	ldr	r2, [r7, #12]
 801579a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 801579c:	683b      	ldr	r3, [r7, #0]
 801579e:	68db      	ldr	r3, [r3, #12]
 80157a0:	4619      	mov	r1, r3
 80157a2:	6878      	ldr	r0, [r7, #4]
 80157a4:	f7ff fce4 	bl	8015170 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	693a      	ldr	r2, [r7, #16]
 80157ac:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80157ae:	2300      	movs	r3, #0
}
 80157b0:	4618      	mov	r0, r3
 80157b2:	3718      	adds	r7, #24
 80157b4:	46bd      	mov	sp, r7
 80157b6:	bd80      	pop	{r7, pc}
 80157b8:	feff8fff 	.word	0xfeff8fff
 80157bc:	40010000 	.word	0x40010000
 80157c0:	40010400 	.word	0x40010400
 80157c4:	40014000 	.word	0x40014000
 80157c8:	40014400 	.word	0x40014400
 80157cc:	40014800 	.word	0x40014800

080157d0 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80157d0:	b580      	push	{r7, lr}
 80157d2:	b084      	sub	sp, #16
 80157d4:	af00      	add	r7, sp, #0
 80157d6:	6078      	str	r0, [r7, #4]
 80157d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	6a1b      	ldr	r3, [r3, #32]
 80157de:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80157e6:	687b      	ldr	r3, [r7, #4]
 80157e8:	6a1b      	ldr	r3, [r3, #32]
 80157ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80157f0:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 80157f2:	68ba      	ldr	r2, [r7, #8]
 80157f4:	4b22      	ldr	r3, [pc, #136]	@ (8015880 <OC5Config+0xb0>)
 80157f6:	4013      	ands	r3, r2
 80157f8:	683a      	ldr	r2, [r7, #0]
 80157fa:	6812      	ldr	r2, [r2, #0]
 80157fc:	4313      	orrs	r3, r2
 80157fe:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8015800:	68fb      	ldr	r3, [r7, #12]
 8015802:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8015806:	683b      	ldr	r3, [r7, #0]
 8015808:	691b      	ldr	r3, [r3, #16]
 801580a:	041b      	lsls	r3, r3, #16
 801580c:	4313      	orrs	r3, r2
 801580e:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8015810:	68fb      	ldr	r3, [r7, #12]
 8015812:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8015816:	683b      	ldr	r3, [r7, #0]
 8015818:	685b      	ldr	r3, [r3, #4]
 801581a:	041b      	lsls	r3, r3, #16
 801581c:	4313      	orrs	r3, r2
 801581e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8015820:	687b      	ldr	r3, [r7, #4]
 8015822:	4a18      	ldr	r2, [pc, #96]	@ (8015884 <OC5Config+0xb4>)
 8015824:	4293      	cmp	r3, r2
 8015826:	d00f      	beq.n	8015848 <OC5Config+0x78>
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	4a17      	ldr	r2, [pc, #92]	@ (8015888 <OC5Config+0xb8>)
 801582c:	4293      	cmp	r3, r2
 801582e:	d00b      	beq.n	8015848 <OC5Config+0x78>
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	4a16      	ldr	r2, [pc, #88]	@ (801588c <OC5Config+0xbc>)
 8015834:	4293      	cmp	r3, r2
 8015836:	d007      	beq.n	8015848 <OC5Config+0x78>
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	4a15      	ldr	r2, [pc, #84]	@ (8015890 <OC5Config+0xc0>)
 801583c:	4293      	cmp	r3, r2
 801583e:	d003      	beq.n	8015848 <OC5Config+0x78>
 8015840:	687b      	ldr	r3, [r7, #4]
 8015842:	4a14      	ldr	r2, [pc, #80]	@ (8015894 <OC5Config+0xc4>)
 8015844:	4293      	cmp	r3, r2
 8015846:	d109      	bne.n	801585c <OC5Config+0x8c>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	685b      	ldr	r3, [r3, #4]
 801584c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8015850:	683b      	ldr	r3, [r7, #0]
 8015852:	699b      	ldr	r3, [r3, #24]
 8015854:	021b      	lsls	r3, r3, #8
 8015856:	431a      	orrs	r2, r3
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	68ba      	ldr	r2, [r7, #8]
 8015860:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8015862:	683b      	ldr	r3, [r7, #0]
 8015864:	68db      	ldr	r3, [r3, #12]
 8015866:	4619      	mov	r1, r3
 8015868:	6878      	ldr	r0, [r7, #4]
 801586a:	f7ff fc8f 	bl	801518c <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 801586e:	687b      	ldr	r3, [r7, #4]
 8015870:	68fa      	ldr	r2, [r7, #12]
 8015872:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8015874:	2300      	movs	r3, #0
}
 8015876:	4618      	mov	r0, r3
 8015878:	3710      	adds	r7, #16
 801587a:	46bd      	mov	sp, r7
 801587c:	bd80      	pop	{r7, pc}
 801587e:	bf00      	nop
 8015880:	fffeff8f 	.word	0xfffeff8f
 8015884:	40010000 	.word	0x40010000
 8015888:	40010400 	.word	0x40010400
 801588c:	40014000 	.word	0x40014000
 8015890:	40014400 	.word	0x40014400
 8015894:	40014800 	.word	0x40014800

08015898 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8015898:	b580      	push	{r7, lr}
 801589a:	b084      	sub	sp, #16
 801589c:	af00      	add	r7, sp, #0
 801589e:	6078      	str	r0, [r7, #4]
 80158a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 80158a2:	687b      	ldr	r3, [r7, #4]
 80158a4:	6a1b      	ldr	r3, [r3, #32]
 80158a6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80158aa:	687b      	ldr	r3, [r7, #4]
 80158ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	6a1b      	ldr	r3, [r3, #32]
 80158b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80158b4:	687b      	ldr	r3, [r7, #4]
 80158b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80158b8:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 80158ba:	68ba      	ldr	r2, [r7, #8]
 80158bc:	4b22      	ldr	r3, [pc, #136]	@ (8015948 <OC6Config+0xb0>)
 80158be:	4013      	ands	r3, r2
 80158c0:	683a      	ldr	r2, [r7, #0]
 80158c2:	6812      	ldr	r2, [r2, #0]
 80158c4:	0212      	lsls	r2, r2, #8
 80158c6:	4313      	orrs	r3, r2
 80158c8:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 80158ca:	68fb      	ldr	r3, [r7, #12]
 80158cc:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80158d0:	683b      	ldr	r3, [r7, #0]
 80158d2:	691b      	ldr	r3, [r3, #16]
 80158d4:	051b      	lsls	r3, r3, #20
 80158d6:	4313      	orrs	r3, r2
 80158d8:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 80158da:	68fb      	ldr	r3, [r7, #12]
 80158dc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80158e0:	683b      	ldr	r3, [r7, #0]
 80158e2:	685b      	ldr	r3, [r3, #4]
 80158e4:	051b      	lsls	r3, r3, #20
 80158e6:	4313      	orrs	r3, r2
 80158e8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80158ea:	687b      	ldr	r3, [r7, #4]
 80158ec:	4a17      	ldr	r2, [pc, #92]	@ (801594c <OC6Config+0xb4>)
 80158ee:	4293      	cmp	r3, r2
 80158f0:	d00f      	beq.n	8015912 <OC6Config+0x7a>
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	4a16      	ldr	r2, [pc, #88]	@ (8015950 <OC6Config+0xb8>)
 80158f6:	4293      	cmp	r3, r2
 80158f8:	d00b      	beq.n	8015912 <OC6Config+0x7a>
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	4a15      	ldr	r2, [pc, #84]	@ (8015954 <OC6Config+0xbc>)
 80158fe:	4293      	cmp	r3, r2
 8015900:	d007      	beq.n	8015912 <OC6Config+0x7a>
 8015902:	687b      	ldr	r3, [r7, #4]
 8015904:	4a14      	ldr	r2, [pc, #80]	@ (8015958 <OC6Config+0xc0>)
 8015906:	4293      	cmp	r3, r2
 8015908:	d003      	beq.n	8015912 <OC6Config+0x7a>
 801590a:	687b      	ldr	r3, [r7, #4]
 801590c:	4a13      	ldr	r2, [pc, #76]	@ (801595c <OC6Config+0xc4>)
 801590e:	4293      	cmp	r3, r2
 8015910:	d109      	bne.n	8015926 <OC6Config+0x8e>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	685b      	ldr	r3, [r3, #4]
 8015916:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 801591a:	683b      	ldr	r3, [r7, #0]
 801591c:	699b      	ldr	r3, [r3, #24]
 801591e:	029b      	lsls	r3, r3, #10
 8015920:	431a      	orrs	r2, r3
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8015926:	687b      	ldr	r3, [r7, #4]
 8015928:	68ba      	ldr	r2, [r7, #8]
 801592a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 801592c:	683b      	ldr	r3, [r7, #0]
 801592e:	68db      	ldr	r3, [r3, #12]
 8015930:	4619      	mov	r1, r3
 8015932:	6878      	ldr	r0, [r7, #4]
 8015934:	f7ff fc3a 	bl	80151ac <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	68fa      	ldr	r2, [r7, #12]
 801593c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 801593e:	2300      	movs	r3, #0
}
 8015940:	4618      	mov	r0, r3
 8015942:	3710      	adds	r7, #16
 8015944:	46bd      	mov	sp, r7
 8015946:	bd80      	pop	{r7, pc}
 8015948:	feff8fff 	.word	0xfeff8fff
 801594c:	40010000 	.word	0x40010000
 8015950:	40010400 	.word	0x40010400
 8015954:	40014000 	.word	0x40014000
 8015958:	40014400 	.word	0x40014400
 801595c:	40014800 	.word	0x40014800

08015960 <LL_USART_IsEnabled>:
{
 8015960:	b480      	push	{r7}
 8015962:	b083      	sub	sp, #12
 8015964:	af00      	add	r7, sp, #0
 8015966:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	681b      	ldr	r3, [r3, #0]
 801596c:	f003 0301 	and.w	r3, r3, #1
 8015970:	2b01      	cmp	r3, #1
 8015972:	d101      	bne.n	8015978 <LL_USART_IsEnabled+0x18>
 8015974:	2301      	movs	r3, #1
 8015976:	e000      	b.n	801597a <LL_USART_IsEnabled+0x1a>
 8015978:	2300      	movs	r3, #0
}
 801597a:	4618      	mov	r0, r3
 801597c:	370c      	adds	r7, #12
 801597e:	46bd      	mov	sp, r7
 8015980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015984:	4770      	bx	lr

08015986 <LL_USART_SetPrescaler>:
{
 8015986:	b480      	push	{r7}
 8015988:	b083      	sub	sp, #12
 801598a:	af00      	add	r7, sp, #0
 801598c:	6078      	str	r0, [r7, #4]
 801598e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015994:	f023 030f 	bic.w	r3, r3, #15
 8015998:	683a      	ldr	r2, [r7, #0]
 801599a:	b292      	uxth	r2, r2
 801599c:	431a      	orrs	r2, r3
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80159a2:	bf00      	nop
 80159a4:	370c      	adds	r7, #12
 80159a6:	46bd      	mov	sp, r7
 80159a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159ac:	4770      	bx	lr

080159ae <LL_USART_SetStopBitsLength>:
{
 80159ae:	b480      	push	{r7}
 80159b0:	b083      	sub	sp, #12
 80159b2:	af00      	add	r7, sp, #0
 80159b4:	6078      	str	r0, [r7, #4]
 80159b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	685b      	ldr	r3, [r3, #4]
 80159bc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80159c0:	683b      	ldr	r3, [r7, #0]
 80159c2:	431a      	orrs	r2, r3
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	605a      	str	r2, [r3, #4]
}
 80159c8:	bf00      	nop
 80159ca:	370c      	adds	r7, #12
 80159cc:	46bd      	mov	sp, r7
 80159ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159d2:	4770      	bx	lr

080159d4 <LL_USART_SetHWFlowCtrl>:
{
 80159d4:	b480      	push	{r7}
 80159d6:	b083      	sub	sp, #12
 80159d8:	af00      	add	r7, sp, #0
 80159da:	6078      	str	r0, [r7, #4]
 80159dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80159de:	687b      	ldr	r3, [r7, #4]
 80159e0:	689b      	ldr	r3, [r3, #8]
 80159e2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80159e6:	683b      	ldr	r3, [r7, #0]
 80159e8:	431a      	orrs	r2, r3
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	609a      	str	r2, [r3, #8]
}
 80159ee:	bf00      	nop
 80159f0:	370c      	adds	r7, #12
 80159f2:	46bd      	mov	sp, r7
 80159f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159f8:	4770      	bx	lr
	...

080159fc <LL_USART_SetBaudRate>:
{
 80159fc:	b480      	push	{r7}
 80159fe:	b087      	sub	sp, #28
 8015a00:	af00      	add	r7, sp, #0
 8015a02:	60f8      	str	r0, [r7, #12]
 8015a04:	60b9      	str	r1, [r7, #8]
 8015a06:	607a      	str	r2, [r7, #4]
 8015a08:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 8015a0a:	687b      	ldr	r3, [r7, #4]
 8015a0c:	2b0b      	cmp	r3, #11
 8015a0e:	d83c      	bhi.n	8015a8a <LL_USART_SetBaudRate+0x8e>
  else if (BaudRate == 0U)
 8015a10:	6a3b      	ldr	r3, [r7, #32]
 8015a12:	2b00      	cmp	r3, #0
 8015a14:	d039      	beq.n	8015a8a <LL_USART_SetBaudRate+0x8e>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 8015a16:	683b      	ldr	r3, [r7, #0]
 8015a18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8015a1c:	d122      	bne.n	8015a64 <LL_USART_SetBaudRate+0x68>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8015a1e:	687b      	ldr	r3, [r7, #4]
 8015a20:	b2db      	uxtb	r3, r3
 8015a22:	461a      	mov	r2, r3
 8015a24:	4b1c      	ldr	r3, [pc, #112]	@ (8015a98 <LL_USART_SetBaudRate+0x9c>)
 8015a26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a2a:	68ba      	ldr	r2, [r7, #8]
 8015a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8015a30:	005a      	lsls	r2, r3, #1
 8015a32:	6a3b      	ldr	r3, [r7, #32]
 8015a34:	085b      	lsrs	r3, r3, #1
 8015a36:	441a      	add	r2, r3
 8015a38:	6a3b      	ldr	r3, [r7, #32]
 8015a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8015a3e:	b29b      	uxth	r3, r3
 8015a40:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8015a42:	697a      	ldr	r2, [r7, #20]
 8015a44:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8015a48:	4013      	ands	r3, r2
 8015a4a:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8015a4c:	697b      	ldr	r3, [r7, #20]
 8015a4e:	085b      	lsrs	r3, r3, #1
 8015a50:	b29b      	uxth	r3, r3
 8015a52:	f003 0307 	and.w	r3, r3, #7
 8015a56:	693a      	ldr	r2, [r7, #16]
 8015a58:	4313      	orrs	r3, r2
 8015a5a:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8015a5c:	68fb      	ldr	r3, [r7, #12]
 8015a5e:	693a      	ldr	r2, [r7, #16]
 8015a60:	60da      	str	r2, [r3, #12]
}
 8015a62:	e012      	b.n	8015a8a <LL_USART_SetBaudRate+0x8e>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	b2db      	uxtb	r3, r3
 8015a68:	461a      	mov	r2, r3
 8015a6a:	4b0b      	ldr	r3, [pc, #44]	@ (8015a98 <LL_USART_SetBaudRate+0x9c>)
 8015a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a70:	68ba      	ldr	r2, [r7, #8]
 8015a72:	fbb2 f2f3 	udiv	r2, r2, r3
 8015a76:	6a3b      	ldr	r3, [r7, #32]
 8015a78:	085b      	lsrs	r3, r3, #1
 8015a7a:	441a      	add	r2, r3
 8015a7c:	6a3b      	ldr	r3, [r7, #32]
 8015a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8015a82:	b29b      	uxth	r3, r3
 8015a84:	461a      	mov	r2, r3
 8015a86:	68fb      	ldr	r3, [r7, #12]
 8015a88:	60da      	str	r2, [r3, #12]
}
 8015a8a:	bf00      	nop
 8015a8c:	371c      	adds	r7, #28
 8015a8e:	46bd      	mov	sp, r7
 8015a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a94:	4770      	bx	lr
 8015a96:	bf00      	nop
 8015a98:	0801f9e4 	.word	0x0801f9e4

08015a9c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8015a9c:	b580      	push	{r7, lr}
 8015a9e:	b086      	sub	sp, #24
 8015aa0:	af02      	add	r7, sp, #8
 8015aa2:	6078      	str	r0, [r7, #4]
 8015aa4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8015aa6:	2301      	movs	r3, #1
 8015aa8:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8015aaa:	2300      	movs	r3, #0
 8015aac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8015aae:	6878      	ldr	r0, [r7, #4]
 8015ab0:	f7ff ff56 	bl	8015960 <LL_USART_IsEnabled>
 8015ab4:	4603      	mov	r3, r0
 8015ab6:	2b00      	cmp	r3, #0
 8015ab8:	f040 8092 	bne.w	8015be0 <LL_USART_Init+0x144>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	681a      	ldr	r2, [r3, #0]
 8015ac0:	4b4a      	ldr	r3, [pc, #296]	@ (8015bec <LL_USART_Init+0x150>)
 8015ac2:	4013      	ands	r3, r2
 8015ac4:	683a      	ldr	r2, [r7, #0]
 8015ac6:	6891      	ldr	r1, [r2, #8]
 8015ac8:	683a      	ldr	r2, [r7, #0]
 8015aca:	6912      	ldr	r2, [r2, #16]
 8015acc:	4311      	orrs	r1, r2
 8015ace:	683a      	ldr	r2, [r7, #0]
 8015ad0:	6952      	ldr	r2, [r2, #20]
 8015ad2:	4311      	orrs	r1, r2
 8015ad4:	683a      	ldr	r2, [r7, #0]
 8015ad6:	69d2      	ldr	r2, [r2, #28]
 8015ad8:	430a      	orrs	r2, r1
 8015ada:	431a      	orrs	r2, r3
 8015adc:	687b      	ldr	r3, [r7, #4]
 8015ade:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8015ae0:	683b      	ldr	r3, [r7, #0]
 8015ae2:	68db      	ldr	r3, [r3, #12]
 8015ae4:	4619      	mov	r1, r3
 8015ae6:	6878      	ldr	r0, [r7, #4]
 8015ae8:	f7ff ff61 	bl	80159ae <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8015aec:	683b      	ldr	r3, [r7, #0]
 8015aee:	699b      	ldr	r3, [r3, #24]
 8015af0:	4619      	mov	r1, r3
 8015af2:	6878      	ldr	r0, [r7, #4]
 8015af4:	f7ff ff6e 	bl	80159d4 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8015af8:	687b      	ldr	r3, [r7, #4]
 8015afa:	4a3d      	ldr	r2, [pc, #244]	@ (8015bf0 <LL_USART_Init+0x154>)
 8015afc:	4293      	cmp	r3, r2
 8015afe:	d104      	bne.n	8015b0a <LL_USART_Init+0x6e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 8015b00:	483c      	ldr	r0, [pc, #240]	@ (8015bf4 <LL_USART_Init+0x158>)
 8015b02:	f7ff f88b 	bl	8014c1c <LL_RCC_GetUSARTClockFreq>
 8015b06:	60b8      	str	r0, [r7, #8]
 8015b08:	e04f      	b.n	8015baa <LL_USART_Init+0x10e>
    }
    else if (USARTx == USART2)
 8015b0a:	687b      	ldr	r3, [r7, #4]
 8015b0c:	4a3a      	ldr	r2, [pc, #232]	@ (8015bf8 <LL_USART_Init+0x15c>)
 8015b0e:	4293      	cmp	r3, r2
 8015b10:	d104      	bne.n	8015b1c <LL_USART_Init+0x80>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8015b12:	483a      	ldr	r0, [pc, #232]	@ (8015bfc <LL_USART_Init+0x160>)
 8015b14:	f7ff f882 	bl	8014c1c <LL_RCC_GetUSARTClockFreq>
 8015b18:	60b8      	str	r0, [r7, #8]
 8015b1a:	e046      	b.n	8015baa <LL_USART_Init+0x10e>
    }
    else if (USARTx == USART3)
 8015b1c:	687b      	ldr	r3, [r7, #4]
 8015b1e:	4a38      	ldr	r2, [pc, #224]	@ (8015c00 <LL_USART_Init+0x164>)
 8015b20:	4293      	cmp	r3, r2
 8015b22:	d104      	bne.n	8015b2e <LL_USART_Init+0x92>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8015b24:	4835      	ldr	r0, [pc, #212]	@ (8015bfc <LL_USART_Init+0x160>)
 8015b26:	f7ff f879 	bl	8014c1c <LL_RCC_GetUSARTClockFreq>
 8015b2a:	60b8      	str	r0, [r7, #8]
 8015b2c:	e03d      	b.n	8015baa <LL_USART_Init+0x10e>
    }
    else if (USARTx == UART4)
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	4a34      	ldr	r2, [pc, #208]	@ (8015c04 <LL_USART_Init+0x168>)
 8015b32:	4293      	cmp	r3, r2
 8015b34:	d104      	bne.n	8015b40 <LL_USART_Init+0xa4>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8015b36:	4831      	ldr	r0, [pc, #196]	@ (8015bfc <LL_USART_Init+0x160>)
 8015b38:	f7ff f870 	bl	8014c1c <LL_RCC_GetUSARTClockFreq>
 8015b3c:	60b8      	str	r0, [r7, #8]
 8015b3e:	e034      	b.n	8015baa <LL_USART_Init+0x10e>
    }
    else if (USARTx == UART5)
 8015b40:	687b      	ldr	r3, [r7, #4]
 8015b42:	4a31      	ldr	r2, [pc, #196]	@ (8015c08 <LL_USART_Init+0x16c>)
 8015b44:	4293      	cmp	r3, r2
 8015b46:	d104      	bne.n	8015b52 <LL_USART_Init+0xb6>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8015b48:	482c      	ldr	r0, [pc, #176]	@ (8015bfc <LL_USART_Init+0x160>)
 8015b4a:	f7ff f867 	bl	8014c1c <LL_RCC_GetUSARTClockFreq>
 8015b4e:	60b8      	str	r0, [r7, #8]
 8015b50:	e02b      	b.n	8015baa <LL_USART_Init+0x10e>
    }
    else if (USARTx == USART6)
 8015b52:	687b      	ldr	r3, [r7, #4]
 8015b54:	4a2d      	ldr	r2, [pc, #180]	@ (8015c0c <LL_USART_Init+0x170>)
 8015b56:	4293      	cmp	r3, r2
 8015b58:	d104      	bne.n	8015b64 <LL_USART_Init+0xc8>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 8015b5a:	4826      	ldr	r0, [pc, #152]	@ (8015bf4 <LL_USART_Init+0x158>)
 8015b5c:	f7ff f85e 	bl	8014c1c <LL_RCC_GetUSARTClockFreq>
 8015b60:	60b8      	str	r0, [r7, #8]
 8015b62:	e022      	b.n	8015baa <LL_USART_Init+0x10e>
    }
    else if (USARTx == UART7)
 8015b64:	687b      	ldr	r3, [r7, #4]
 8015b66:	4a2a      	ldr	r2, [pc, #168]	@ (8015c10 <LL_USART_Init+0x174>)
 8015b68:	4293      	cmp	r3, r2
 8015b6a:	d104      	bne.n	8015b76 <LL_USART_Init+0xda>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8015b6c:	4823      	ldr	r0, [pc, #140]	@ (8015bfc <LL_USART_Init+0x160>)
 8015b6e:	f7ff f855 	bl	8014c1c <LL_RCC_GetUSARTClockFreq>
 8015b72:	60b8      	str	r0, [r7, #8]
 8015b74:	e019      	b.n	8015baa <LL_USART_Init+0x10e>
    }
    else if (USARTx == UART8)
 8015b76:	687b      	ldr	r3, [r7, #4]
 8015b78:	4a26      	ldr	r2, [pc, #152]	@ (8015c14 <LL_USART_Init+0x178>)
 8015b7a:	4293      	cmp	r3, r2
 8015b7c:	d104      	bne.n	8015b88 <LL_USART_Init+0xec>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8015b7e:	481f      	ldr	r0, [pc, #124]	@ (8015bfc <LL_USART_Init+0x160>)
 8015b80:	f7ff f84c 	bl	8014c1c <LL_RCC_GetUSARTClockFreq>
 8015b84:	60b8      	str	r0, [r7, #8]
 8015b86:	e010      	b.n	8015baa <LL_USART_Init+0x10e>
    }
#if defined(UART9)
    else if (USARTx == UART9)
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	4a23      	ldr	r2, [pc, #140]	@ (8015c18 <LL_USART_Init+0x17c>)
 8015b8c:	4293      	cmp	r3, r2
 8015b8e:	d104      	bne.n	8015b9a <LL_USART_Init+0xfe>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 8015b90:	4818      	ldr	r0, [pc, #96]	@ (8015bf4 <LL_USART_Init+0x158>)
 8015b92:	f7ff f843 	bl	8014c1c <LL_RCC_GetUSARTClockFreq>
 8015b96:	60b8      	str	r0, [r7, #8]
 8015b98:	e007      	b.n	8015baa <LL_USART_Init+0x10e>
    }
#endif /* UART9 */
#if defined(USART10)
    else if (USARTx == USART10)
 8015b9a:	687b      	ldr	r3, [r7, #4]
 8015b9c:	4a1f      	ldr	r2, [pc, #124]	@ (8015c1c <LL_USART_Init+0x180>)
 8015b9e:	4293      	cmp	r3, r2
 8015ba0:	d103      	bne.n	8015baa <LL_USART_Init+0x10e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 8015ba2:	4814      	ldr	r0, [pc, #80]	@ (8015bf4 <LL_USART_Init+0x158>)
 8015ba4:	f7ff f83a 	bl	8014c1c <LL_RCC_GetUSARTClockFreq>
 8015ba8:	60b8      	str	r0, [r7, #8]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8015baa:	68bb      	ldr	r3, [r7, #8]
 8015bac:	2b00      	cmp	r3, #0
 8015bae:	d011      	beq.n	8015bd4 <LL_USART_Init+0x138>
        && (USART_InitStruct->BaudRate != 0U))
 8015bb0:	683b      	ldr	r3, [r7, #0]
 8015bb2:	685b      	ldr	r3, [r3, #4]
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	d00d      	beq.n	8015bd4 <LL_USART_Init+0x138>
    {
      status = SUCCESS;
 8015bb8:	2300      	movs	r3, #0
 8015bba:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->PrescalerValue,
 8015bbc:	683b      	ldr	r3, [r7, #0]
 8015bbe:	681a      	ldr	r2, [r3, #0]
                           USART_InitStruct->OverSampling,
 8015bc0:	683b      	ldr	r3, [r7, #0]
 8015bc2:	69d9      	ldr	r1, [r3, #28]
                           USART_InitStruct->BaudRate);
 8015bc4:	683b      	ldr	r3, [r7, #0]
 8015bc6:	685b      	ldr	r3, [r3, #4]
      LL_USART_SetBaudRate(USARTx,
 8015bc8:	9300      	str	r3, [sp, #0]
 8015bca:	460b      	mov	r3, r1
 8015bcc:	68b9      	ldr	r1, [r7, #8]
 8015bce:	6878      	ldr	r0, [r7, #4]
 8015bd0:	f7ff ff14 	bl	80159fc <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 8015bd4:	683b      	ldr	r3, [r7, #0]
 8015bd6:	681b      	ldr	r3, [r3, #0]
 8015bd8:	4619      	mov	r1, r3
 8015bda:	6878      	ldr	r0, [r7, #4]
 8015bdc:	f7ff fed3 	bl	8015986 <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8015be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8015be2:	4618      	mov	r0, r3
 8015be4:	3710      	adds	r7, #16
 8015be6:	46bd      	mov	sp, r7
 8015be8:	bd80      	pop	{r7, pc}
 8015bea:	bf00      	nop
 8015bec:	efff69f3 	.word	0xefff69f3
 8015bf0:	40011000 	.word	0x40011000
 8015bf4:	07000308 	.word	0x07000308
 8015bf8:	40004400 	.word	0x40004400
 8015bfc:	07000008 	.word	0x07000008
 8015c00:	40004800 	.word	0x40004800
 8015c04:	40004c00 	.word	0x40004c00
 8015c08:	40005000 	.word	0x40005000
 8015c0c:	40011400 	.word	0x40011400
 8015c10:	40007800 	.word	0x40007800
 8015c14:	40007c00 	.word	0x40007c00
 8015c18:	40011800 	.word	0x40011800
 8015c1c:	40011c00 	.word	0x40011c00

08015c20 <__NVIC_SetPriority>:
{
 8015c20:	b480      	push	{r7}
 8015c22:	b083      	sub	sp, #12
 8015c24:	af00      	add	r7, sp, #0
 8015c26:	4603      	mov	r3, r0
 8015c28:	6039      	str	r1, [r7, #0]
 8015c2a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8015c2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	db0a      	blt.n	8015c4a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015c34:	683b      	ldr	r3, [r7, #0]
 8015c36:	b2da      	uxtb	r2, r3
 8015c38:	490c      	ldr	r1, [pc, #48]	@ (8015c6c <__NVIC_SetPriority+0x4c>)
 8015c3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015c3e:	0112      	lsls	r2, r2, #4
 8015c40:	b2d2      	uxtb	r2, r2
 8015c42:	440b      	add	r3, r1
 8015c44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8015c48:	e00a      	b.n	8015c60 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015c4a:	683b      	ldr	r3, [r7, #0]
 8015c4c:	b2da      	uxtb	r2, r3
 8015c4e:	4908      	ldr	r1, [pc, #32]	@ (8015c70 <__NVIC_SetPriority+0x50>)
 8015c50:	88fb      	ldrh	r3, [r7, #6]
 8015c52:	f003 030f 	and.w	r3, r3, #15
 8015c56:	3b04      	subs	r3, #4
 8015c58:	0112      	lsls	r2, r2, #4
 8015c5a:	b2d2      	uxtb	r2, r2
 8015c5c:	440b      	add	r3, r1
 8015c5e:	761a      	strb	r2, [r3, #24]
}
 8015c60:	bf00      	nop
 8015c62:	370c      	adds	r7, #12
 8015c64:	46bd      	mov	sp, r7
 8015c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c6a:	4770      	bx	lr
 8015c6c:	e000e100 	.word	0xe000e100
 8015c70:	e000ed00 	.word	0xe000ed00

08015c74 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8015c74:	b580      	push	{r7, lr}
 8015c76:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8015c78:	4b05      	ldr	r3, [pc, #20]	@ (8015c90 <SysTick_Handler+0x1c>)
 8015c7a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8015c7c:	f002 f98c 	bl	8017f98 <xTaskGetSchedulerState>
 8015c80:	4603      	mov	r3, r0
 8015c82:	2b01      	cmp	r3, #1
 8015c84:	d001      	beq.n	8015c8a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8015c86:	f003 f887 	bl	8018d98 <xPortSysTickHandler>
  }
}
 8015c8a:	bf00      	nop
 8015c8c:	bd80      	pop	{r7, pc}
 8015c8e:	bf00      	nop
 8015c90:	e000e010 	.word	0xe000e010

08015c94 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8015c94:	b580      	push	{r7, lr}
 8015c96:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8015c98:	2100      	movs	r1, #0
 8015c9a:	f06f 0004 	mvn.w	r0, #4
 8015c9e:	f7ff ffbf 	bl	8015c20 <__NVIC_SetPriority>
#endif
}
 8015ca2:	bf00      	nop
 8015ca4:	bd80      	pop	{r7, pc}
	...

08015ca8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8015ca8:	b480      	push	{r7}
 8015caa:	b083      	sub	sp, #12
 8015cac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015cae:	f3ef 8305 	mrs	r3, IPSR
 8015cb2:	603b      	str	r3, [r7, #0]
  return(result);
 8015cb4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015cb6:	2b00      	cmp	r3, #0
 8015cb8:	d003      	beq.n	8015cc2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8015cba:	f06f 0305 	mvn.w	r3, #5
 8015cbe:	607b      	str	r3, [r7, #4]
 8015cc0:	e00c      	b.n	8015cdc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8015cc2:	4b0a      	ldr	r3, [pc, #40]	@ (8015cec <osKernelInitialize+0x44>)
 8015cc4:	681b      	ldr	r3, [r3, #0]
 8015cc6:	2b00      	cmp	r3, #0
 8015cc8:	d105      	bne.n	8015cd6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8015cca:	4b08      	ldr	r3, [pc, #32]	@ (8015cec <osKernelInitialize+0x44>)
 8015ccc:	2201      	movs	r2, #1
 8015cce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8015cd0:	2300      	movs	r3, #0
 8015cd2:	607b      	str	r3, [r7, #4]
 8015cd4:	e002      	b.n	8015cdc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8015cd6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015cda:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8015cdc:	687b      	ldr	r3, [r7, #4]
}
 8015cde:	4618      	mov	r0, r3
 8015ce0:	370c      	adds	r7, #12
 8015ce2:	46bd      	mov	sp, r7
 8015ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ce8:	4770      	bx	lr
 8015cea:	bf00      	nop
 8015cec:	240011d4 	.word	0x240011d4

08015cf0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8015cf0:	b580      	push	{r7, lr}
 8015cf2:	b082      	sub	sp, #8
 8015cf4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015cf6:	f3ef 8305 	mrs	r3, IPSR
 8015cfa:	603b      	str	r3, [r7, #0]
  return(result);
 8015cfc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015cfe:	2b00      	cmp	r3, #0
 8015d00:	d003      	beq.n	8015d0a <osKernelStart+0x1a>
    stat = osErrorISR;
 8015d02:	f06f 0305 	mvn.w	r3, #5
 8015d06:	607b      	str	r3, [r7, #4]
 8015d08:	e010      	b.n	8015d2c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8015d0a:	4b0b      	ldr	r3, [pc, #44]	@ (8015d38 <osKernelStart+0x48>)
 8015d0c:	681b      	ldr	r3, [r3, #0]
 8015d0e:	2b01      	cmp	r3, #1
 8015d10:	d109      	bne.n	8015d26 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8015d12:	f7ff ffbf 	bl	8015c94 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8015d16:	4b08      	ldr	r3, [pc, #32]	@ (8015d38 <osKernelStart+0x48>)
 8015d18:	2202      	movs	r2, #2
 8015d1a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8015d1c:	f001 fcd8 	bl	80176d0 <vTaskStartScheduler>
      stat = osOK;
 8015d20:	2300      	movs	r3, #0
 8015d22:	607b      	str	r3, [r7, #4]
 8015d24:	e002      	b.n	8015d2c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8015d26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015d2a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8015d2c:	687b      	ldr	r3, [r7, #4]
}
 8015d2e:	4618      	mov	r0, r3
 8015d30:	3708      	adds	r7, #8
 8015d32:	46bd      	mov	sp, r7
 8015d34:	bd80      	pop	{r7, pc}
 8015d36:	bf00      	nop
 8015d38:	240011d4 	.word	0x240011d4

08015d3c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8015d3c:	b580      	push	{r7, lr}
 8015d3e:	b08e      	sub	sp, #56	@ 0x38
 8015d40:	af04      	add	r7, sp, #16
 8015d42:	60f8      	str	r0, [r7, #12]
 8015d44:	60b9      	str	r1, [r7, #8]
 8015d46:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8015d48:	2300      	movs	r3, #0
 8015d4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015d4c:	f3ef 8305 	mrs	r3, IPSR
 8015d50:	617b      	str	r3, [r7, #20]
  return(result);
 8015d52:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	d17e      	bne.n	8015e56 <osThreadNew+0x11a>
 8015d58:	68fb      	ldr	r3, [r7, #12]
 8015d5a:	2b00      	cmp	r3, #0
 8015d5c:	d07b      	beq.n	8015e56 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8015d5e:	2380      	movs	r3, #128	@ 0x80
 8015d60:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8015d62:	2318      	movs	r3, #24
 8015d64:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8015d66:	2300      	movs	r3, #0
 8015d68:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8015d6a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015d6e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	2b00      	cmp	r3, #0
 8015d74:	d045      	beq.n	8015e02 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8015d76:	687b      	ldr	r3, [r7, #4]
 8015d78:	681b      	ldr	r3, [r3, #0]
 8015d7a:	2b00      	cmp	r3, #0
 8015d7c:	d002      	beq.n	8015d84 <osThreadNew+0x48>
        name = attr->name;
 8015d7e:	687b      	ldr	r3, [r7, #4]
 8015d80:	681b      	ldr	r3, [r3, #0]
 8015d82:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	699b      	ldr	r3, [r3, #24]
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	d002      	beq.n	8015d92 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8015d8c:	687b      	ldr	r3, [r7, #4]
 8015d8e:	699b      	ldr	r3, [r3, #24]
 8015d90:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8015d92:	69fb      	ldr	r3, [r7, #28]
 8015d94:	2b00      	cmp	r3, #0
 8015d96:	d008      	beq.n	8015daa <osThreadNew+0x6e>
 8015d98:	69fb      	ldr	r3, [r7, #28]
 8015d9a:	2b38      	cmp	r3, #56	@ 0x38
 8015d9c:	d805      	bhi.n	8015daa <osThreadNew+0x6e>
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	685b      	ldr	r3, [r3, #4]
 8015da2:	f003 0301 	and.w	r3, r3, #1
 8015da6:	2b00      	cmp	r3, #0
 8015da8:	d001      	beq.n	8015dae <osThreadNew+0x72>
        return (NULL);
 8015daa:	2300      	movs	r3, #0
 8015dac:	e054      	b.n	8015e58 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8015dae:	687b      	ldr	r3, [r7, #4]
 8015db0:	695b      	ldr	r3, [r3, #20]
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	d003      	beq.n	8015dbe <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8015db6:	687b      	ldr	r3, [r7, #4]
 8015db8:	695b      	ldr	r3, [r3, #20]
 8015dba:	089b      	lsrs	r3, r3, #2
 8015dbc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8015dbe:	687b      	ldr	r3, [r7, #4]
 8015dc0:	689b      	ldr	r3, [r3, #8]
 8015dc2:	2b00      	cmp	r3, #0
 8015dc4:	d00e      	beq.n	8015de4 <osThreadNew+0xa8>
 8015dc6:	687b      	ldr	r3, [r7, #4]
 8015dc8:	68db      	ldr	r3, [r3, #12]
 8015dca:	2ba7      	cmp	r3, #167	@ 0xa7
 8015dcc:	d90a      	bls.n	8015de4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8015dce:	687b      	ldr	r3, [r7, #4]
 8015dd0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	d006      	beq.n	8015de4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	695b      	ldr	r3, [r3, #20]
 8015dda:	2b00      	cmp	r3, #0
 8015ddc:	d002      	beq.n	8015de4 <osThreadNew+0xa8>
        mem = 1;
 8015dde:	2301      	movs	r3, #1
 8015de0:	61bb      	str	r3, [r7, #24]
 8015de2:	e010      	b.n	8015e06 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8015de4:	687b      	ldr	r3, [r7, #4]
 8015de6:	689b      	ldr	r3, [r3, #8]
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	d10c      	bne.n	8015e06 <osThreadNew+0xca>
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	68db      	ldr	r3, [r3, #12]
 8015df0:	2b00      	cmp	r3, #0
 8015df2:	d108      	bne.n	8015e06 <osThreadNew+0xca>
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	691b      	ldr	r3, [r3, #16]
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	d104      	bne.n	8015e06 <osThreadNew+0xca>
          mem = 0;
 8015dfc:	2300      	movs	r3, #0
 8015dfe:	61bb      	str	r3, [r7, #24]
 8015e00:	e001      	b.n	8015e06 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8015e02:	2300      	movs	r3, #0
 8015e04:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8015e06:	69bb      	ldr	r3, [r7, #24]
 8015e08:	2b01      	cmp	r3, #1
 8015e0a:	d110      	bne.n	8015e2e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8015e10:	687a      	ldr	r2, [r7, #4]
 8015e12:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8015e14:	9202      	str	r2, [sp, #8]
 8015e16:	9301      	str	r3, [sp, #4]
 8015e18:	69fb      	ldr	r3, [r7, #28]
 8015e1a:	9300      	str	r3, [sp, #0]
 8015e1c:	68bb      	ldr	r3, [r7, #8]
 8015e1e:	6a3a      	ldr	r2, [r7, #32]
 8015e20:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015e22:	68f8      	ldr	r0, [r7, #12]
 8015e24:	f001 f87c 	bl	8016f20 <xTaskCreateStatic>
 8015e28:	4603      	mov	r3, r0
 8015e2a:	613b      	str	r3, [r7, #16]
 8015e2c:	e013      	b.n	8015e56 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8015e2e:	69bb      	ldr	r3, [r7, #24]
 8015e30:	2b00      	cmp	r3, #0
 8015e32:	d110      	bne.n	8015e56 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8015e34:	6a3b      	ldr	r3, [r7, #32]
 8015e36:	b29a      	uxth	r2, r3
 8015e38:	f107 0310 	add.w	r3, r7, #16
 8015e3c:	9301      	str	r3, [sp, #4]
 8015e3e:	69fb      	ldr	r3, [r7, #28]
 8015e40:	9300      	str	r3, [sp, #0]
 8015e42:	68bb      	ldr	r3, [r7, #8]
 8015e44:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015e46:	68f8      	ldr	r0, [r7, #12]
 8015e48:	f001 f8ca 	bl	8016fe0 <xTaskCreate>
 8015e4c:	4603      	mov	r3, r0
 8015e4e:	2b01      	cmp	r3, #1
 8015e50:	d001      	beq.n	8015e56 <osThreadNew+0x11a>
            hTask = NULL;
 8015e52:	2300      	movs	r3, #0
 8015e54:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8015e56:	693b      	ldr	r3, [r7, #16]
}
 8015e58:	4618      	mov	r0, r3
 8015e5a:	3728      	adds	r7, #40	@ 0x28
 8015e5c:	46bd      	mov	sp, r7
 8015e5e:	bd80      	pop	{r7, pc}

08015e60 <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8015e60:	b580      	push	{r7, lr}
 8015e62:	b086      	sub	sp, #24
 8015e64:	af00      	add	r7, sp, #0
 8015e66:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015e6c:	f3ef 8305 	mrs	r3, IPSR
 8015e70:	60fb      	str	r3, [r7, #12]
  return(result);
 8015e72:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	d003      	beq.n	8015e80 <osThreadSuspend+0x20>
    stat = osErrorISR;
 8015e78:	f06f 0305 	mvn.w	r3, #5
 8015e7c:	617b      	str	r3, [r7, #20]
 8015e7e:	e00b      	b.n	8015e98 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 8015e80:	693b      	ldr	r3, [r7, #16]
 8015e82:	2b00      	cmp	r3, #0
 8015e84:	d103      	bne.n	8015e8e <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 8015e86:	f06f 0303 	mvn.w	r3, #3
 8015e8a:	617b      	str	r3, [r7, #20]
 8015e8c:	e004      	b.n	8015e98 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 8015e8e:	2300      	movs	r3, #0
 8015e90:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 8015e92:	6938      	ldr	r0, [r7, #16]
 8015e94:	f001 fb14 	bl	80174c0 <vTaskSuspend>
  }

  return (stat);
 8015e98:	697b      	ldr	r3, [r7, #20]
}
 8015e9a:	4618      	mov	r0, r3
 8015e9c:	3718      	adds	r7, #24
 8015e9e:	46bd      	mov	sp, r7
 8015ea0:	bd80      	pop	{r7, pc}

08015ea2 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8015ea2:	b580      	push	{r7, lr}
 8015ea4:	b086      	sub	sp, #24
 8015ea6:	af00      	add	r7, sp, #0
 8015ea8:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8015eaa:	687b      	ldr	r3, [r7, #4]
 8015eac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015eae:	f3ef 8305 	mrs	r3, IPSR
 8015eb2:	60fb      	str	r3, [r7, #12]
  return(result);
 8015eb4:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015eb6:	2b00      	cmp	r3, #0
 8015eb8:	d003      	beq.n	8015ec2 <osThreadResume+0x20>
    stat = osErrorISR;
 8015eba:	f06f 0305 	mvn.w	r3, #5
 8015ebe:	617b      	str	r3, [r7, #20]
 8015ec0:	e00b      	b.n	8015eda <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 8015ec2:	693b      	ldr	r3, [r7, #16]
 8015ec4:	2b00      	cmp	r3, #0
 8015ec6:	d103      	bne.n	8015ed0 <osThreadResume+0x2e>
    stat = osErrorParameter;
 8015ec8:	f06f 0303 	mvn.w	r3, #3
 8015ecc:	617b      	str	r3, [r7, #20]
 8015ece:	e004      	b.n	8015eda <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 8015ed0:	2300      	movs	r3, #0
 8015ed2:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 8015ed4:	6938      	ldr	r0, [r7, #16]
 8015ed6:	f001 fb9b 	bl	8017610 <vTaskResume>
  }

  return (stat);
 8015eda:	697b      	ldr	r3, [r7, #20]
}
 8015edc:	4618      	mov	r0, r3
 8015ede:	3718      	adds	r7, #24
 8015ee0:	46bd      	mov	sp, r7
 8015ee2:	bd80      	pop	{r7, pc}

08015ee4 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8015ee4:	b580      	push	{r7, lr}
 8015ee6:	b086      	sub	sp, #24
 8015ee8:	af00      	add	r7, sp, #0
 8015eea:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8015eec:	687b      	ldr	r3, [r7, #4]
 8015eee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015ef0:	f3ef 8305 	mrs	r3, IPSR
 8015ef4:	60bb      	str	r3, [r7, #8]
  return(result);
 8015ef6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	d003      	beq.n	8015f04 <osThreadTerminate+0x20>
    stat = osErrorISR;
 8015efc:	f06f 0305 	mvn.w	r3, #5
 8015f00:	617b      	str	r3, [r7, #20]
 8015f02:	e017      	b.n	8015f34 <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 8015f04:	693b      	ldr	r3, [r7, #16]
 8015f06:	2b00      	cmp	r3, #0
 8015f08:	d103      	bne.n	8015f12 <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 8015f0a:	f06f 0303 	mvn.w	r3, #3
 8015f0e:	617b      	str	r3, [r7, #20]
 8015f10:	e010      	b.n	8015f34 <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 8015f12:	6938      	ldr	r0, [r7, #16]
 8015f14:	f001 fa6c 	bl	80173f0 <eTaskGetState>
 8015f18:	4603      	mov	r3, r0
 8015f1a:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 8015f1c:	7bfb      	ldrb	r3, [r7, #15]
 8015f1e:	2b04      	cmp	r3, #4
 8015f20:	d005      	beq.n	8015f2e <osThreadTerminate+0x4a>
      stat = osOK;
 8015f22:	2300      	movs	r3, #0
 8015f24:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 8015f26:	6938      	ldr	r0, [r7, #16]
 8015f28:	f001 f9b8 	bl	801729c <vTaskDelete>
 8015f2c:	e002      	b.n	8015f34 <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 8015f2e:	f06f 0302 	mvn.w	r3, #2
 8015f32:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 8015f34:	697b      	ldr	r3, [r7, #20]
}
 8015f36:	4618      	mov	r0, r3
 8015f38:	3718      	adds	r7, #24
 8015f3a:	46bd      	mov	sp, r7
 8015f3c:	bd80      	pop	{r7, pc}

08015f3e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8015f3e:	b580      	push	{r7, lr}
 8015f40:	b084      	sub	sp, #16
 8015f42:	af00      	add	r7, sp, #0
 8015f44:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015f46:	f3ef 8305 	mrs	r3, IPSR
 8015f4a:	60bb      	str	r3, [r7, #8]
  return(result);
 8015f4c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	d003      	beq.n	8015f5a <osDelay+0x1c>
    stat = osErrorISR;
 8015f52:	f06f 0305 	mvn.w	r3, #5
 8015f56:	60fb      	str	r3, [r7, #12]
 8015f58:	e007      	b.n	8015f6a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8015f5a:	2300      	movs	r3, #0
 8015f5c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8015f5e:	687b      	ldr	r3, [r7, #4]
 8015f60:	2b00      	cmp	r3, #0
 8015f62:	d002      	beq.n	8015f6a <osDelay+0x2c>
      vTaskDelay(ticks);
 8015f64:	6878      	ldr	r0, [r7, #4]
 8015f66:	f001 fa0d 	bl	8017384 <vTaskDelay>
    }
  }

  return (stat);
 8015f6a:	68fb      	ldr	r3, [r7, #12]
}
 8015f6c:	4618      	mov	r0, r3
 8015f6e:	3710      	adds	r7, #16
 8015f70:	46bd      	mov	sp, r7
 8015f72:	bd80      	pop	{r7, pc}

08015f74 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8015f74:	b480      	push	{r7}
 8015f76:	b085      	sub	sp, #20
 8015f78:	af00      	add	r7, sp, #0
 8015f7a:	60f8      	str	r0, [r7, #12]
 8015f7c:	60b9      	str	r1, [r7, #8]
 8015f7e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8015f80:	68fb      	ldr	r3, [r7, #12]
 8015f82:	4a07      	ldr	r2, [pc, #28]	@ (8015fa0 <vApplicationGetIdleTaskMemory+0x2c>)
 8015f84:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8015f86:	68bb      	ldr	r3, [r7, #8]
 8015f88:	4a06      	ldr	r2, [pc, #24]	@ (8015fa4 <vApplicationGetIdleTaskMemory+0x30>)
 8015f8a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8015f8c:	687b      	ldr	r3, [r7, #4]
 8015f8e:	2280      	movs	r2, #128	@ 0x80
 8015f90:	601a      	str	r2, [r3, #0]
}
 8015f92:	bf00      	nop
 8015f94:	3714      	adds	r7, #20
 8015f96:	46bd      	mov	sp, r7
 8015f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f9c:	4770      	bx	lr
 8015f9e:	bf00      	nop
 8015fa0:	240011d8 	.word	0x240011d8
 8015fa4:	24001280 	.word	0x24001280

08015fa8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8015fa8:	b480      	push	{r7}
 8015faa:	b085      	sub	sp, #20
 8015fac:	af00      	add	r7, sp, #0
 8015fae:	60f8      	str	r0, [r7, #12]
 8015fb0:	60b9      	str	r1, [r7, #8]
 8015fb2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8015fb4:	68fb      	ldr	r3, [r7, #12]
 8015fb6:	4a07      	ldr	r2, [pc, #28]	@ (8015fd4 <vApplicationGetTimerTaskMemory+0x2c>)
 8015fb8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8015fba:	68bb      	ldr	r3, [r7, #8]
 8015fbc:	4a06      	ldr	r2, [pc, #24]	@ (8015fd8 <vApplicationGetTimerTaskMemory+0x30>)
 8015fbe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8015fc6:	601a      	str	r2, [r3, #0]
}
 8015fc8:	bf00      	nop
 8015fca:	3714      	adds	r7, #20
 8015fcc:	46bd      	mov	sp, r7
 8015fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fd2:	4770      	bx	lr
 8015fd4:	24001480 	.word	0x24001480
 8015fd8:	24001528 	.word	0x24001528

08015fdc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8015fdc:	b480      	push	{r7}
 8015fde:	b083      	sub	sp, #12
 8015fe0:	af00      	add	r7, sp, #0
 8015fe2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015fe4:	687b      	ldr	r3, [r7, #4]
 8015fe6:	f103 0208 	add.w	r2, r3, #8
 8015fea:	687b      	ldr	r3, [r7, #4]
 8015fec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8015ff4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015ff6:	687b      	ldr	r3, [r7, #4]
 8015ff8:	f103 0208 	add.w	r2, r3, #8
 8015ffc:	687b      	ldr	r3, [r7, #4]
 8015ffe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	f103 0208 	add.w	r2, r3, #8
 8016006:	687b      	ldr	r3, [r7, #4]
 8016008:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	2200      	movs	r2, #0
 801600e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8016010:	bf00      	nop
 8016012:	370c      	adds	r7, #12
 8016014:	46bd      	mov	sp, r7
 8016016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801601a:	4770      	bx	lr

0801601c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801601c:	b480      	push	{r7}
 801601e:	b083      	sub	sp, #12
 8016020:	af00      	add	r7, sp, #0
 8016022:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8016024:	687b      	ldr	r3, [r7, #4]
 8016026:	2200      	movs	r2, #0
 8016028:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801602a:	bf00      	nop
 801602c:	370c      	adds	r7, #12
 801602e:	46bd      	mov	sp, r7
 8016030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016034:	4770      	bx	lr

08016036 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8016036:	b480      	push	{r7}
 8016038:	b085      	sub	sp, #20
 801603a:	af00      	add	r7, sp, #0
 801603c:	6078      	str	r0, [r7, #4]
 801603e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	685b      	ldr	r3, [r3, #4]
 8016044:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8016046:	683b      	ldr	r3, [r7, #0]
 8016048:	68fa      	ldr	r2, [r7, #12]
 801604a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801604c:	68fb      	ldr	r3, [r7, #12]
 801604e:	689a      	ldr	r2, [r3, #8]
 8016050:	683b      	ldr	r3, [r7, #0]
 8016052:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8016054:	68fb      	ldr	r3, [r7, #12]
 8016056:	689b      	ldr	r3, [r3, #8]
 8016058:	683a      	ldr	r2, [r7, #0]
 801605a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801605c:	68fb      	ldr	r3, [r7, #12]
 801605e:	683a      	ldr	r2, [r7, #0]
 8016060:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8016062:	683b      	ldr	r3, [r7, #0]
 8016064:	687a      	ldr	r2, [r7, #4]
 8016066:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8016068:	687b      	ldr	r3, [r7, #4]
 801606a:	681b      	ldr	r3, [r3, #0]
 801606c:	1c5a      	adds	r2, r3, #1
 801606e:	687b      	ldr	r3, [r7, #4]
 8016070:	601a      	str	r2, [r3, #0]
}
 8016072:	bf00      	nop
 8016074:	3714      	adds	r7, #20
 8016076:	46bd      	mov	sp, r7
 8016078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801607c:	4770      	bx	lr

0801607e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801607e:	b480      	push	{r7}
 8016080:	b085      	sub	sp, #20
 8016082:	af00      	add	r7, sp, #0
 8016084:	6078      	str	r0, [r7, #4]
 8016086:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8016088:	683b      	ldr	r3, [r7, #0]
 801608a:	681b      	ldr	r3, [r3, #0]
 801608c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801608e:	68bb      	ldr	r3, [r7, #8]
 8016090:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8016094:	d103      	bne.n	801609e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	691b      	ldr	r3, [r3, #16]
 801609a:	60fb      	str	r3, [r7, #12]
 801609c:	e00c      	b.n	80160b8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	3308      	adds	r3, #8
 80160a2:	60fb      	str	r3, [r7, #12]
 80160a4:	e002      	b.n	80160ac <vListInsert+0x2e>
 80160a6:	68fb      	ldr	r3, [r7, #12]
 80160a8:	685b      	ldr	r3, [r3, #4]
 80160aa:	60fb      	str	r3, [r7, #12]
 80160ac:	68fb      	ldr	r3, [r7, #12]
 80160ae:	685b      	ldr	r3, [r3, #4]
 80160b0:	681b      	ldr	r3, [r3, #0]
 80160b2:	68ba      	ldr	r2, [r7, #8]
 80160b4:	429a      	cmp	r2, r3
 80160b6:	d2f6      	bcs.n	80160a6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80160b8:	68fb      	ldr	r3, [r7, #12]
 80160ba:	685a      	ldr	r2, [r3, #4]
 80160bc:	683b      	ldr	r3, [r7, #0]
 80160be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80160c0:	683b      	ldr	r3, [r7, #0]
 80160c2:	685b      	ldr	r3, [r3, #4]
 80160c4:	683a      	ldr	r2, [r7, #0]
 80160c6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80160c8:	683b      	ldr	r3, [r7, #0]
 80160ca:	68fa      	ldr	r2, [r7, #12]
 80160cc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80160ce:	68fb      	ldr	r3, [r7, #12]
 80160d0:	683a      	ldr	r2, [r7, #0]
 80160d2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80160d4:	683b      	ldr	r3, [r7, #0]
 80160d6:	687a      	ldr	r2, [r7, #4]
 80160d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80160da:	687b      	ldr	r3, [r7, #4]
 80160dc:	681b      	ldr	r3, [r3, #0]
 80160de:	1c5a      	adds	r2, r3, #1
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	601a      	str	r2, [r3, #0]
}
 80160e4:	bf00      	nop
 80160e6:	3714      	adds	r7, #20
 80160e8:	46bd      	mov	sp, r7
 80160ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160ee:	4770      	bx	lr

080160f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80160f0:	b480      	push	{r7}
 80160f2:	b085      	sub	sp, #20
 80160f4:	af00      	add	r7, sp, #0
 80160f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80160f8:	687b      	ldr	r3, [r7, #4]
 80160fa:	691b      	ldr	r3, [r3, #16]
 80160fc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80160fe:	687b      	ldr	r3, [r7, #4]
 8016100:	685b      	ldr	r3, [r3, #4]
 8016102:	687a      	ldr	r2, [r7, #4]
 8016104:	6892      	ldr	r2, [r2, #8]
 8016106:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	689b      	ldr	r3, [r3, #8]
 801610c:	687a      	ldr	r2, [r7, #4]
 801610e:	6852      	ldr	r2, [r2, #4]
 8016110:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8016112:	68fb      	ldr	r3, [r7, #12]
 8016114:	685b      	ldr	r3, [r3, #4]
 8016116:	687a      	ldr	r2, [r7, #4]
 8016118:	429a      	cmp	r2, r3
 801611a:	d103      	bne.n	8016124 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	689a      	ldr	r2, [r3, #8]
 8016120:	68fb      	ldr	r3, [r7, #12]
 8016122:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	2200      	movs	r2, #0
 8016128:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801612a:	68fb      	ldr	r3, [r7, #12]
 801612c:	681b      	ldr	r3, [r3, #0]
 801612e:	1e5a      	subs	r2, r3, #1
 8016130:	68fb      	ldr	r3, [r7, #12]
 8016132:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8016134:	68fb      	ldr	r3, [r7, #12]
 8016136:	681b      	ldr	r3, [r3, #0]
}
 8016138:	4618      	mov	r0, r3
 801613a:	3714      	adds	r7, #20
 801613c:	46bd      	mov	sp, r7
 801613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016142:	4770      	bx	lr

08016144 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8016144:	b580      	push	{r7, lr}
 8016146:	b084      	sub	sp, #16
 8016148:	af00      	add	r7, sp, #0
 801614a:	6078      	str	r0, [r7, #4]
 801614c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801614e:	687b      	ldr	r3, [r7, #4]
 8016150:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8016152:	68fb      	ldr	r3, [r7, #12]
 8016154:	2b00      	cmp	r3, #0
 8016156:	d10b      	bne.n	8016170 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8016158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801615c:	f383 8811 	msr	BASEPRI, r3
 8016160:	f3bf 8f6f 	isb	sy
 8016164:	f3bf 8f4f 	dsb	sy
 8016168:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801616a:	bf00      	nop
 801616c:	bf00      	nop
 801616e:	e7fd      	b.n	801616c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8016170:	f002 fd82 	bl	8018c78 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016174:	68fb      	ldr	r3, [r7, #12]
 8016176:	681a      	ldr	r2, [r3, #0]
 8016178:	68fb      	ldr	r3, [r7, #12]
 801617a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801617c:	68f9      	ldr	r1, [r7, #12]
 801617e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8016180:	fb01 f303 	mul.w	r3, r1, r3
 8016184:	441a      	add	r2, r3
 8016186:	68fb      	ldr	r3, [r7, #12]
 8016188:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801618a:	68fb      	ldr	r3, [r7, #12]
 801618c:	2200      	movs	r2, #0
 801618e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8016190:	68fb      	ldr	r3, [r7, #12]
 8016192:	681a      	ldr	r2, [r3, #0]
 8016194:	68fb      	ldr	r3, [r7, #12]
 8016196:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016198:	68fb      	ldr	r3, [r7, #12]
 801619a:	681a      	ldr	r2, [r3, #0]
 801619c:	68fb      	ldr	r3, [r7, #12]
 801619e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80161a0:	3b01      	subs	r3, #1
 80161a2:	68f9      	ldr	r1, [r7, #12]
 80161a4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80161a6:	fb01 f303 	mul.w	r3, r1, r3
 80161aa:	441a      	add	r2, r3
 80161ac:	68fb      	ldr	r3, [r7, #12]
 80161ae:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80161b0:	68fb      	ldr	r3, [r7, #12]
 80161b2:	22ff      	movs	r2, #255	@ 0xff
 80161b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80161b8:	68fb      	ldr	r3, [r7, #12]
 80161ba:	22ff      	movs	r2, #255	@ 0xff
 80161bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80161c0:	683b      	ldr	r3, [r7, #0]
 80161c2:	2b00      	cmp	r3, #0
 80161c4:	d114      	bne.n	80161f0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80161c6:	68fb      	ldr	r3, [r7, #12]
 80161c8:	691b      	ldr	r3, [r3, #16]
 80161ca:	2b00      	cmp	r3, #0
 80161cc:	d01a      	beq.n	8016204 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80161ce:	68fb      	ldr	r3, [r7, #12]
 80161d0:	3310      	adds	r3, #16
 80161d2:	4618      	mov	r0, r3
 80161d4:	f001 fd1a 	bl	8017c0c <xTaskRemoveFromEventList>
 80161d8:	4603      	mov	r3, r0
 80161da:	2b00      	cmp	r3, #0
 80161dc:	d012      	beq.n	8016204 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80161de:	4b0d      	ldr	r3, [pc, #52]	@ (8016214 <xQueueGenericReset+0xd0>)
 80161e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80161e4:	601a      	str	r2, [r3, #0]
 80161e6:	f3bf 8f4f 	dsb	sy
 80161ea:	f3bf 8f6f 	isb	sy
 80161ee:	e009      	b.n	8016204 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80161f0:	68fb      	ldr	r3, [r7, #12]
 80161f2:	3310      	adds	r3, #16
 80161f4:	4618      	mov	r0, r3
 80161f6:	f7ff fef1 	bl	8015fdc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80161fa:	68fb      	ldr	r3, [r7, #12]
 80161fc:	3324      	adds	r3, #36	@ 0x24
 80161fe:	4618      	mov	r0, r3
 8016200:	f7ff feec 	bl	8015fdc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8016204:	f002 fd6a 	bl	8018cdc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8016208:	2301      	movs	r3, #1
}
 801620a:	4618      	mov	r0, r3
 801620c:	3710      	adds	r7, #16
 801620e:	46bd      	mov	sp, r7
 8016210:	bd80      	pop	{r7, pc}
 8016212:	bf00      	nop
 8016214:	e000ed04 	.word	0xe000ed04

08016218 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8016218:	b580      	push	{r7, lr}
 801621a:	b08e      	sub	sp, #56	@ 0x38
 801621c:	af02      	add	r7, sp, #8
 801621e:	60f8      	str	r0, [r7, #12]
 8016220:	60b9      	str	r1, [r7, #8]
 8016222:	607a      	str	r2, [r7, #4]
 8016224:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8016226:	68fb      	ldr	r3, [r7, #12]
 8016228:	2b00      	cmp	r3, #0
 801622a:	d10b      	bne.n	8016244 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 801622c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016230:	f383 8811 	msr	BASEPRI, r3
 8016234:	f3bf 8f6f 	isb	sy
 8016238:	f3bf 8f4f 	dsb	sy
 801623c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801623e:	bf00      	nop
 8016240:	bf00      	nop
 8016242:	e7fd      	b.n	8016240 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8016244:	683b      	ldr	r3, [r7, #0]
 8016246:	2b00      	cmp	r3, #0
 8016248:	d10b      	bne.n	8016262 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 801624a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801624e:	f383 8811 	msr	BASEPRI, r3
 8016252:	f3bf 8f6f 	isb	sy
 8016256:	f3bf 8f4f 	dsb	sy
 801625a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801625c:	bf00      	nop
 801625e:	bf00      	nop
 8016260:	e7fd      	b.n	801625e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8016262:	687b      	ldr	r3, [r7, #4]
 8016264:	2b00      	cmp	r3, #0
 8016266:	d002      	beq.n	801626e <xQueueGenericCreateStatic+0x56>
 8016268:	68bb      	ldr	r3, [r7, #8]
 801626a:	2b00      	cmp	r3, #0
 801626c:	d001      	beq.n	8016272 <xQueueGenericCreateStatic+0x5a>
 801626e:	2301      	movs	r3, #1
 8016270:	e000      	b.n	8016274 <xQueueGenericCreateStatic+0x5c>
 8016272:	2300      	movs	r3, #0
 8016274:	2b00      	cmp	r3, #0
 8016276:	d10b      	bne.n	8016290 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8016278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801627c:	f383 8811 	msr	BASEPRI, r3
 8016280:	f3bf 8f6f 	isb	sy
 8016284:	f3bf 8f4f 	dsb	sy
 8016288:	623b      	str	r3, [r7, #32]
}
 801628a:	bf00      	nop
 801628c:	bf00      	nop
 801628e:	e7fd      	b.n	801628c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8016290:	687b      	ldr	r3, [r7, #4]
 8016292:	2b00      	cmp	r3, #0
 8016294:	d102      	bne.n	801629c <xQueueGenericCreateStatic+0x84>
 8016296:	68bb      	ldr	r3, [r7, #8]
 8016298:	2b00      	cmp	r3, #0
 801629a:	d101      	bne.n	80162a0 <xQueueGenericCreateStatic+0x88>
 801629c:	2301      	movs	r3, #1
 801629e:	e000      	b.n	80162a2 <xQueueGenericCreateStatic+0x8a>
 80162a0:	2300      	movs	r3, #0
 80162a2:	2b00      	cmp	r3, #0
 80162a4:	d10b      	bne.n	80162be <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80162a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80162aa:	f383 8811 	msr	BASEPRI, r3
 80162ae:	f3bf 8f6f 	isb	sy
 80162b2:	f3bf 8f4f 	dsb	sy
 80162b6:	61fb      	str	r3, [r7, #28]
}
 80162b8:	bf00      	nop
 80162ba:	bf00      	nop
 80162bc:	e7fd      	b.n	80162ba <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80162be:	2350      	movs	r3, #80	@ 0x50
 80162c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80162c2:	697b      	ldr	r3, [r7, #20]
 80162c4:	2b50      	cmp	r3, #80	@ 0x50
 80162c6:	d00b      	beq.n	80162e0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80162c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80162cc:	f383 8811 	msr	BASEPRI, r3
 80162d0:	f3bf 8f6f 	isb	sy
 80162d4:	f3bf 8f4f 	dsb	sy
 80162d8:	61bb      	str	r3, [r7, #24]
}
 80162da:	bf00      	nop
 80162dc:	bf00      	nop
 80162de:	e7fd      	b.n	80162dc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80162e0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80162e2:	683b      	ldr	r3, [r7, #0]
 80162e4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80162e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80162e8:	2b00      	cmp	r3, #0
 80162ea:	d00d      	beq.n	8016308 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80162ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80162ee:	2201      	movs	r2, #1
 80162f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80162f4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80162f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80162fa:	9300      	str	r3, [sp, #0]
 80162fc:	4613      	mov	r3, r2
 80162fe:	687a      	ldr	r2, [r7, #4]
 8016300:	68b9      	ldr	r1, [r7, #8]
 8016302:	68f8      	ldr	r0, [r7, #12]
 8016304:	f000 f840 	bl	8016388 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8016308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 801630a:	4618      	mov	r0, r3
 801630c:	3730      	adds	r7, #48	@ 0x30
 801630e:	46bd      	mov	sp, r7
 8016310:	bd80      	pop	{r7, pc}

08016312 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8016312:	b580      	push	{r7, lr}
 8016314:	b08a      	sub	sp, #40	@ 0x28
 8016316:	af02      	add	r7, sp, #8
 8016318:	60f8      	str	r0, [r7, #12]
 801631a:	60b9      	str	r1, [r7, #8]
 801631c:	4613      	mov	r3, r2
 801631e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8016320:	68fb      	ldr	r3, [r7, #12]
 8016322:	2b00      	cmp	r3, #0
 8016324:	d10b      	bne.n	801633e <xQueueGenericCreate+0x2c>
	__asm volatile
 8016326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801632a:	f383 8811 	msr	BASEPRI, r3
 801632e:	f3bf 8f6f 	isb	sy
 8016332:	f3bf 8f4f 	dsb	sy
 8016336:	613b      	str	r3, [r7, #16]
}
 8016338:	bf00      	nop
 801633a:	bf00      	nop
 801633c:	e7fd      	b.n	801633a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801633e:	68fb      	ldr	r3, [r7, #12]
 8016340:	68ba      	ldr	r2, [r7, #8]
 8016342:	fb02 f303 	mul.w	r3, r2, r3
 8016346:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8016348:	69fb      	ldr	r3, [r7, #28]
 801634a:	3350      	adds	r3, #80	@ 0x50
 801634c:	4618      	mov	r0, r3
 801634e:	f002 fdb5 	bl	8018ebc <pvPortMalloc>
 8016352:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8016354:	69bb      	ldr	r3, [r7, #24]
 8016356:	2b00      	cmp	r3, #0
 8016358:	d011      	beq.n	801637e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801635a:	69bb      	ldr	r3, [r7, #24]
 801635c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801635e:	697b      	ldr	r3, [r7, #20]
 8016360:	3350      	adds	r3, #80	@ 0x50
 8016362:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8016364:	69bb      	ldr	r3, [r7, #24]
 8016366:	2200      	movs	r2, #0
 8016368:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801636c:	79fa      	ldrb	r2, [r7, #7]
 801636e:	69bb      	ldr	r3, [r7, #24]
 8016370:	9300      	str	r3, [sp, #0]
 8016372:	4613      	mov	r3, r2
 8016374:	697a      	ldr	r2, [r7, #20]
 8016376:	68b9      	ldr	r1, [r7, #8]
 8016378:	68f8      	ldr	r0, [r7, #12]
 801637a:	f000 f805 	bl	8016388 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801637e:	69bb      	ldr	r3, [r7, #24]
	}
 8016380:	4618      	mov	r0, r3
 8016382:	3720      	adds	r7, #32
 8016384:	46bd      	mov	sp, r7
 8016386:	bd80      	pop	{r7, pc}

08016388 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8016388:	b580      	push	{r7, lr}
 801638a:	b084      	sub	sp, #16
 801638c:	af00      	add	r7, sp, #0
 801638e:	60f8      	str	r0, [r7, #12]
 8016390:	60b9      	str	r1, [r7, #8]
 8016392:	607a      	str	r2, [r7, #4]
 8016394:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8016396:	68bb      	ldr	r3, [r7, #8]
 8016398:	2b00      	cmp	r3, #0
 801639a:	d103      	bne.n	80163a4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801639c:	69bb      	ldr	r3, [r7, #24]
 801639e:	69ba      	ldr	r2, [r7, #24]
 80163a0:	601a      	str	r2, [r3, #0]
 80163a2:	e002      	b.n	80163aa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80163a4:	69bb      	ldr	r3, [r7, #24]
 80163a6:	687a      	ldr	r2, [r7, #4]
 80163a8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80163aa:	69bb      	ldr	r3, [r7, #24]
 80163ac:	68fa      	ldr	r2, [r7, #12]
 80163ae:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80163b0:	69bb      	ldr	r3, [r7, #24]
 80163b2:	68ba      	ldr	r2, [r7, #8]
 80163b4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80163b6:	2101      	movs	r1, #1
 80163b8:	69b8      	ldr	r0, [r7, #24]
 80163ba:	f7ff fec3 	bl	8016144 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80163be:	69bb      	ldr	r3, [r7, #24]
 80163c0:	78fa      	ldrb	r2, [r7, #3]
 80163c2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80163c6:	bf00      	nop
 80163c8:	3710      	adds	r7, #16
 80163ca:	46bd      	mov	sp, r7
 80163cc:	bd80      	pop	{r7, pc}
	...

080163d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80163d0:	b580      	push	{r7, lr}
 80163d2:	b08e      	sub	sp, #56	@ 0x38
 80163d4:	af00      	add	r7, sp, #0
 80163d6:	60f8      	str	r0, [r7, #12]
 80163d8:	60b9      	str	r1, [r7, #8]
 80163da:	607a      	str	r2, [r7, #4]
 80163dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80163de:	2300      	movs	r3, #0
 80163e0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80163e2:	68fb      	ldr	r3, [r7, #12]
 80163e4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80163e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80163e8:	2b00      	cmp	r3, #0
 80163ea:	d10b      	bne.n	8016404 <xQueueGenericSend+0x34>
	__asm volatile
 80163ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80163f0:	f383 8811 	msr	BASEPRI, r3
 80163f4:	f3bf 8f6f 	isb	sy
 80163f8:	f3bf 8f4f 	dsb	sy
 80163fc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80163fe:	bf00      	nop
 8016400:	bf00      	nop
 8016402:	e7fd      	b.n	8016400 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016404:	68bb      	ldr	r3, [r7, #8]
 8016406:	2b00      	cmp	r3, #0
 8016408:	d103      	bne.n	8016412 <xQueueGenericSend+0x42>
 801640a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801640c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801640e:	2b00      	cmp	r3, #0
 8016410:	d101      	bne.n	8016416 <xQueueGenericSend+0x46>
 8016412:	2301      	movs	r3, #1
 8016414:	e000      	b.n	8016418 <xQueueGenericSend+0x48>
 8016416:	2300      	movs	r3, #0
 8016418:	2b00      	cmp	r3, #0
 801641a:	d10b      	bne.n	8016434 <xQueueGenericSend+0x64>
	__asm volatile
 801641c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016420:	f383 8811 	msr	BASEPRI, r3
 8016424:	f3bf 8f6f 	isb	sy
 8016428:	f3bf 8f4f 	dsb	sy
 801642c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801642e:	bf00      	nop
 8016430:	bf00      	nop
 8016432:	e7fd      	b.n	8016430 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016434:	683b      	ldr	r3, [r7, #0]
 8016436:	2b02      	cmp	r3, #2
 8016438:	d103      	bne.n	8016442 <xQueueGenericSend+0x72>
 801643a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801643c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801643e:	2b01      	cmp	r3, #1
 8016440:	d101      	bne.n	8016446 <xQueueGenericSend+0x76>
 8016442:	2301      	movs	r3, #1
 8016444:	e000      	b.n	8016448 <xQueueGenericSend+0x78>
 8016446:	2300      	movs	r3, #0
 8016448:	2b00      	cmp	r3, #0
 801644a:	d10b      	bne.n	8016464 <xQueueGenericSend+0x94>
	__asm volatile
 801644c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016450:	f383 8811 	msr	BASEPRI, r3
 8016454:	f3bf 8f6f 	isb	sy
 8016458:	f3bf 8f4f 	dsb	sy
 801645c:	623b      	str	r3, [r7, #32]
}
 801645e:	bf00      	nop
 8016460:	bf00      	nop
 8016462:	e7fd      	b.n	8016460 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016464:	f001 fd98 	bl	8017f98 <xTaskGetSchedulerState>
 8016468:	4603      	mov	r3, r0
 801646a:	2b00      	cmp	r3, #0
 801646c:	d102      	bne.n	8016474 <xQueueGenericSend+0xa4>
 801646e:	687b      	ldr	r3, [r7, #4]
 8016470:	2b00      	cmp	r3, #0
 8016472:	d101      	bne.n	8016478 <xQueueGenericSend+0xa8>
 8016474:	2301      	movs	r3, #1
 8016476:	e000      	b.n	801647a <xQueueGenericSend+0xaa>
 8016478:	2300      	movs	r3, #0
 801647a:	2b00      	cmp	r3, #0
 801647c:	d10b      	bne.n	8016496 <xQueueGenericSend+0xc6>
	__asm volatile
 801647e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016482:	f383 8811 	msr	BASEPRI, r3
 8016486:	f3bf 8f6f 	isb	sy
 801648a:	f3bf 8f4f 	dsb	sy
 801648e:	61fb      	str	r3, [r7, #28]
}
 8016490:	bf00      	nop
 8016492:	bf00      	nop
 8016494:	e7fd      	b.n	8016492 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016496:	f002 fbef 	bl	8018c78 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801649a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801649c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801649e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80164a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80164a2:	429a      	cmp	r2, r3
 80164a4:	d302      	bcc.n	80164ac <xQueueGenericSend+0xdc>
 80164a6:	683b      	ldr	r3, [r7, #0]
 80164a8:	2b02      	cmp	r3, #2
 80164aa:	d129      	bne.n	8016500 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80164ac:	683a      	ldr	r2, [r7, #0]
 80164ae:	68b9      	ldr	r1, [r7, #8]
 80164b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80164b2:	f000 fbc7 	bl	8016c44 <prvCopyDataToQueue>
 80164b6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80164b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80164ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80164bc:	2b00      	cmp	r3, #0
 80164be:	d010      	beq.n	80164e2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80164c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80164c2:	3324      	adds	r3, #36	@ 0x24
 80164c4:	4618      	mov	r0, r3
 80164c6:	f001 fba1 	bl	8017c0c <xTaskRemoveFromEventList>
 80164ca:	4603      	mov	r3, r0
 80164cc:	2b00      	cmp	r3, #0
 80164ce:	d013      	beq.n	80164f8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80164d0:	4b3f      	ldr	r3, [pc, #252]	@ (80165d0 <xQueueGenericSend+0x200>)
 80164d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80164d6:	601a      	str	r2, [r3, #0]
 80164d8:	f3bf 8f4f 	dsb	sy
 80164dc:	f3bf 8f6f 	isb	sy
 80164e0:	e00a      	b.n	80164f8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80164e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80164e4:	2b00      	cmp	r3, #0
 80164e6:	d007      	beq.n	80164f8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80164e8:	4b39      	ldr	r3, [pc, #228]	@ (80165d0 <xQueueGenericSend+0x200>)
 80164ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80164ee:	601a      	str	r2, [r3, #0]
 80164f0:	f3bf 8f4f 	dsb	sy
 80164f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80164f8:	f002 fbf0 	bl	8018cdc <vPortExitCritical>
				return pdPASS;
 80164fc:	2301      	movs	r3, #1
 80164fe:	e063      	b.n	80165c8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	2b00      	cmp	r3, #0
 8016504:	d103      	bne.n	801650e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8016506:	f002 fbe9 	bl	8018cdc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801650a:	2300      	movs	r3, #0
 801650c:	e05c      	b.n	80165c8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801650e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016510:	2b00      	cmp	r3, #0
 8016512:	d106      	bne.n	8016522 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016514:	f107 0314 	add.w	r3, r7, #20
 8016518:	4618      	mov	r0, r3
 801651a:	f001 fbdb 	bl	8017cd4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801651e:	2301      	movs	r3, #1
 8016520:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016522:	f002 fbdb 	bl	8018cdc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016526:	f001 f943 	bl	80177b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801652a:	f002 fba5 	bl	8018c78 <vPortEnterCritical>
 801652e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016530:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8016534:	b25b      	sxtb	r3, r3
 8016536:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801653a:	d103      	bne.n	8016544 <xQueueGenericSend+0x174>
 801653c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801653e:	2200      	movs	r2, #0
 8016540:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8016544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016546:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801654a:	b25b      	sxtb	r3, r3
 801654c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8016550:	d103      	bne.n	801655a <xQueueGenericSend+0x18a>
 8016552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016554:	2200      	movs	r2, #0
 8016556:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801655a:	f002 fbbf 	bl	8018cdc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801655e:	1d3a      	adds	r2, r7, #4
 8016560:	f107 0314 	add.w	r3, r7, #20
 8016564:	4611      	mov	r1, r2
 8016566:	4618      	mov	r0, r3
 8016568:	f001 fbca 	bl	8017d00 <xTaskCheckForTimeOut>
 801656c:	4603      	mov	r3, r0
 801656e:	2b00      	cmp	r3, #0
 8016570:	d124      	bne.n	80165bc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8016572:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016574:	f000 fc5e 	bl	8016e34 <prvIsQueueFull>
 8016578:	4603      	mov	r3, r0
 801657a:	2b00      	cmp	r3, #0
 801657c:	d018      	beq.n	80165b0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801657e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016580:	3310      	adds	r3, #16
 8016582:	687a      	ldr	r2, [r7, #4]
 8016584:	4611      	mov	r1, r2
 8016586:	4618      	mov	r0, r3
 8016588:	f001 faee 	bl	8017b68 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801658c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801658e:	f000 fbe9 	bl	8016d64 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8016592:	f001 f91b 	bl	80177cc <xTaskResumeAll>
 8016596:	4603      	mov	r3, r0
 8016598:	2b00      	cmp	r3, #0
 801659a:	f47f af7c 	bne.w	8016496 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 801659e:	4b0c      	ldr	r3, [pc, #48]	@ (80165d0 <xQueueGenericSend+0x200>)
 80165a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80165a4:	601a      	str	r2, [r3, #0]
 80165a6:	f3bf 8f4f 	dsb	sy
 80165aa:	f3bf 8f6f 	isb	sy
 80165ae:	e772      	b.n	8016496 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80165b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80165b2:	f000 fbd7 	bl	8016d64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80165b6:	f001 f909 	bl	80177cc <xTaskResumeAll>
 80165ba:	e76c      	b.n	8016496 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80165bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80165be:	f000 fbd1 	bl	8016d64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80165c2:	f001 f903 	bl	80177cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80165c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80165c8:	4618      	mov	r0, r3
 80165ca:	3738      	adds	r7, #56	@ 0x38
 80165cc:	46bd      	mov	sp, r7
 80165ce:	bd80      	pop	{r7, pc}
 80165d0:	e000ed04 	.word	0xe000ed04

080165d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80165d4:	b580      	push	{r7, lr}
 80165d6:	b090      	sub	sp, #64	@ 0x40
 80165d8:	af00      	add	r7, sp, #0
 80165da:	60f8      	str	r0, [r7, #12]
 80165dc:	60b9      	str	r1, [r7, #8]
 80165de:	607a      	str	r2, [r7, #4]
 80165e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80165e2:	68fb      	ldr	r3, [r7, #12]
 80165e4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80165e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80165e8:	2b00      	cmp	r3, #0
 80165ea:	d10b      	bne.n	8016604 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80165ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80165f0:	f383 8811 	msr	BASEPRI, r3
 80165f4:	f3bf 8f6f 	isb	sy
 80165f8:	f3bf 8f4f 	dsb	sy
 80165fc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80165fe:	bf00      	nop
 8016600:	bf00      	nop
 8016602:	e7fd      	b.n	8016600 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016604:	68bb      	ldr	r3, [r7, #8]
 8016606:	2b00      	cmp	r3, #0
 8016608:	d103      	bne.n	8016612 <xQueueGenericSendFromISR+0x3e>
 801660a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801660c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801660e:	2b00      	cmp	r3, #0
 8016610:	d101      	bne.n	8016616 <xQueueGenericSendFromISR+0x42>
 8016612:	2301      	movs	r3, #1
 8016614:	e000      	b.n	8016618 <xQueueGenericSendFromISR+0x44>
 8016616:	2300      	movs	r3, #0
 8016618:	2b00      	cmp	r3, #0
 801661a:	d10b      	bne.n	8016634 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 801661c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016620:	f383 8811 	msr	BASEPRI, r3
 8016624:	f3bf 8f6f 	isb	sy
 8016628:	f3bf 8f4f 	dsb	sy
 801662c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801662e:	bf00      	nop
 8016630:	bf00      	nop
 8016632:	e7fd      	b.n	8016630 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016634:	683b      	ldr	r3, [r7, #0]
 8016636:	2b02      	cmp	r3, #2
 8016638:	d103      	bne.n	8016642 <xQueueGenericSendFromISR+0x6e>
 801663a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801663c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801663e:	2b01      	cmp	r3, #1
 8016640:	d101      	bne.n	8016646 <xQueueGenericSendFromISR+0x72>
 8016642:	2301      	movs	r3, #1
 8016644:	e000      	b.n	8016648 <xQueueGenericSendFromISR+0x74>
 8016646:	2300      	movs	r3, #0
 8016648:	2b00      	cmp	r3, #0
 801664a:	d10b      	bne.n	8016664 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 801664c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016650:	f383 8811 	msr	BASEPRI, r3
 8016654:	f3bf 8f6f 	isb	sy
 8016658:	f3bf 8f4f 	dsb	sy
 801665c:	623b      	str	r3, [r7, #32]
}
 801665e:	bf00      	nop
 8016660:	bf00      	nop
 8016662:	e7fd      	b.n	8016660 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016664:	f002 fbe8 	bl	8018e38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8016668:	f3ef 8211 	mrs	r2, BASEPRI
 801666c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016670:	f383 8811 	msr	BASEPRI, r3
 8016674:	f3bf 8f6f 	isb	sy
 8016678:	f3bf 8f4f 	dsb	sy
 801667c:	61fa      	str	r2, [r7, #28]
 801667e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8016680:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016682:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016686:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801668a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801668c:	429a      	cmp	r2, r3
 801668e:	d302      	bcc.n	8016696 <xQueueGenericSendFromISR+0xc2>
 8016690:	683b      	ldr	r3, [r7, #0]
 8016692:	2b02      	cmp	r3, #2
 8016694:	d12f      	bne.n	80166f6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8016696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016698:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801669c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80166a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80166a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80166a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80166a6:	683a      	ldr	r2, [r7, #0]
 80166a8:	68b9      	ldr	r1, [r7, #8]
 80166aa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80166ac:	f000 faca 	bl	8016c44 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80166b0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80166b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80166b8:	d112      	bne.n	80166e0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80166ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80166bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80166be:	2b00      	cmp	r3, #0
 80166c0:	d016      	beq.n	80166f0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80166c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80166c4:	3324      	adds	r3, #36	@ 0x24
 80166c6:	4618      	mov	r0, r3
 80166c8:	f001 faa0 	bl	8017c0c <xTaskRemoveFromEventList>
 80166cc:	4603      	mov	r3, r0
 80166ce:	2b00      	cmp	r3, #0
 80166d0:	d00e      	beq.n	80166f0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80166d2:	687b      	ldr	r3, [r7, #4]
 80166d4:	2b00      	cmp	r3, #0
 80166d6:	d00b      	beq.n	80166f0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80166d8:	687b      	ldr	r3, [r7, #4]
 80166da:	2201      	movs	r2, #1
 80166dc:	601a      	str	r2, [r3, #0]
 80166de:	e007      	b.n	80166f0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80166e0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80166e4:	3301      	adds	r3, #1
 80166e6:	b2db      	uxtb	r3, r3
 80166e8:	b25a      	sxtb	r2, r3
 80166ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80166ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80166f0:	2301      	movs	r3, #1
 80166f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80166f4:	e001      	b.n	80166fa <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80166f6:	2300      	movs	r3, #0
 80166f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80166fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80166fc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80166fe:	697b      	ldr	r3, [r7, #20]
 8016700:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8016704:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016706:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8016708:	4618      	mov	r0, r3
 801670a:	3740      	adds	r7, #64	@ 0x40
 801670c:	46bd      	mov	sp, r7
 801670e:	bd80      	pop	{r7, pc}

08016710 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8016710:	b580      	push	{r7, lr}
 8016712:	b08e      	sub	sp, #56	@ 0x38
 8016714:	af00      	add	r7, sp, #0
 8016716:	6078      	str	r0, [r7, #4]
 8016718:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801671a:	687b      	ldr	r3, [r7, #4]
 801671c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801671e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016720:	2b00      	cmp	r3, #0
 8016722:	d10b      	bne.n	801673c <xQueueGiveFromISR+0x2c>
	__asm volatile
 8016724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016728:	f383 8811 	msr	BASEPRI, r3
 801672c:	f3bf 8f6f 	isb	sy
 8016730:	f3bf 8f4f 	dsb	sy
 8016734:	623b      	str	r3, [r7, #32]
}
 8016736:	bf00      	nop
 8016738:	bf00      	nop
 801673a:	e7fd      	b.n	8016738 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801673c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801673e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016740:	2b00      	cmp	r3, #0
 8016742:	d00b      	beq.n	801675c <xQueueGiveFromISR+0x4c>
	__asm volatile
 8016744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016748:	f383 8811 	msr	BASEPRI, r3
 801674c:	f3bf 8f6f 	isb	sy
 8016750:	f3bf 8f4f 	dsb	sy
 8016754:	61fb      	str	r3, [r7, #28]
}
 8016756:	bf00      	nop
 8016758:	bf00      	nop
 801675a:	e7fd      	b.n	8016758 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 801675c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801675e:	681b      	ldr	r3, [r3, #0]
 8016760:	2b00      	cmp	r3, #0
 8016762:	d103      	bne.n	801676c <xQueueGiveFromISR+0x5c>
 8016764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016766:	689b      	ldr	r3, [r3, #8]
 8016768:	2b00      	cmp	r3, #0
 801676a:	d101      	bne.n	8016770 <xQueueGiveFromISR+0x60>
 801676c:	2301      	movs	r3, #1
 801676e:	e000      	b.n	8016772 <xQueueGiveFromISR+0x62>
 8016770:	2300      	movs	r3, #0
 8016772:	2b00      	cmp	r3, #0
 8016774:	d10b      	bne.n	801678e <xQueueGiveFromISR+0x7e>
	__asm volatile
 8016776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801677a:	f383 8811 	msr	BASEPRI, r3
 801677e:	f3bf 8f6f 	isb	sy
 8016782:	f3bf 8f4f 	dsb	sy
 8016786:	61bb      	str	r3, [r7, #24]
}
 8016788:	bf00      	nop
 801678a:	bf00      	nop
 801678c:	e7fd      	b.n	801678a <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801678e:	f002 fb53 	bl	8018e38 <vPortValidateInterruptPriority>
	__asm volatile
 8016792:	f3ef 8211 	mrs	r2, BASEPRI
 8016796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801679a:	f383 8811 	msr	BASEPRI, r3
 801679e:	f3bf 8f6f 	isb	sy
 80167a2:	f3bf 8f4f 	dsb	sy
 80167a6:	617a      	str	r2, [r7, #20]
 80167a8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80167aa:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80167ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80167ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80167b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80167b2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80167b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80167b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80167b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80167ba:	429a      	cmp	r2, r3
 80167bc:	d22b      	bcs.n	8016816 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80167be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80167c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80167c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80167c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80167ca:	1c5a      	adds	r2, r3, #1
 80167cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80167ce:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80167d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80167d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80167d8:	d112      	bne.n	8016800 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80167da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80167dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80167de:	2b00      	cmp	r3, #0
 80167e0:	d016      	beq.n	8016810 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80167e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80167e4:	3324      	adds	r3, #36	@ 0x24
 80167e6:	4618      	mov	r0, r3
 80167e8:	f001 fa10 	bl	8017c0c <xTaskRemoveFromEventList>
 80167ec:	4603      	mov	r3, r0
 80167ee:	2b00      	cmp	r3, #0
 80167f0:	d00e      	beq.n	8016810 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80167f2:	683b      	ldr	r3, [r7, #0]
 80167f4:	2b00      	cmp	r3, #0
 80167f6:	d00b      	beq.n	8016810 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80167f8:	683b      	ldr	r3, [r7, #0]
 80167fa:	2201      	movs	r2, #1
 80167fc:	601a      	str	r2, [r3, #0]
 80167fe:	e007      	b.n	8016810 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8016800:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016804:	3301      	adds	r3, #1
 8016806:	b2db      	uxtb	r3, r3
 8016808:	b25a      	sxtb	r2, r3
 801680a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801680c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8016810:	2301      	movs	r3, #1
 8016812:	637b      	str	r3, [r7, #52]	@ 0x34
 8016814:	e001      	b.n	801681a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8016816:	2300      	movs	r3, #0
 8016818:	637b      	str	r3, [r7, #52]	@ 0x34
 801681a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801681c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801681e:	68fb      	ldr	r3, [r7, #12]
 8016820:	f383 8811 	msr	BASEPRI, r3
}
 8016824:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016826:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8016828:	4618      	mov	r0, r3
 801682a:	3738      	adds	r7, #56	@ 0x38
 801682c:	46bd      	mov	sp, r7
 801682e:	bd80      	pop	{r7, pc}

08016830 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8016830:	b580      	push	{r7, lr}
 8016832:	b08c      	sub	sp, #48	@ 0x30
 8016834:	af00      	add	r7, sp, #0
 8016836:	60f8      	str	r0, [r7, #12]
 8016838:	60b9      	str	r1, [r7, #8]
 801683a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801683c:	2300      	movs	r3, #0
 801683e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016840:	68fb      	ldr	r3, [r7, #12]
 8016842:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8016844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016846:	2b00      	cmp	r3, #0
 8016848:	d10b      	bne.n	8016862 <xQueueReceive+0x32>
	__asm volatile
 801684a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801684e:	f383 8811 	msr	BASEPRI, r3
 8016852:	f3bf 8f6f 	isb	sy
 8016856:	f3bf 8f4f 	dsb	sy
 801685a:	623b      	str	r3, [r7, #32]
}
 801685c:	bf00      	nop
 801685e:	bf00      	nop
 8016860:	e7fd      	b.n	801685e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016862:	68bb      	ldr	r3, [r7, #8]
 8016864:	2b00      	cmp	r3, #0
 8016866:	d103      	bne.n	8016870 <xQueueReceive+0x40>
 8016868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801686a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801686c:	2b00      	cmp	r3, #0
 801686e:	d101      	bne.n	8016874 <xQueueReceive+0x44>
 8016870:	2301      	movs	r3, #1
 8016872:	e000      	b.n	8016876 <xQueueReceive+0x46>
 8016874:	2300      	movs	r3, #0
 8016876:	2b00      	cmp	r3, #0
 8016878:	d10b      	bne.n	8016892 <xQueueReceive+0x62>
	__asm volatile
 801687a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801687e:	f383 8811 	msr	BASEPRI, r3
 8016882:	f3bf 8f6f 	isb	sy
 8016886:	f3bf 8f4f 	dsb	sy
 801688a:	61fb      	str	r3, [r7, #28]
}
 801688c:	bf00      	nop
 801688e:	bf00      	nop
 8016890:	e7fd      	b.n	801688e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016892:	f001 fb81 	bl	8017f98 <xTaskGetSchedulerState>
 8016896:	4603      	mov	r3, r0
 8016898:	2b00      	cmp	r3, #0
 801689a:	d102      	bne.n	80168a2 <xQueueReceive+0x72>
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	2b00      	cmp	r3, #0
 80168a0:	d101      	bne.n	80168a6 <xQueueReceive+0x76>
 80168a2:	2301      	movs	r3, #1
 80168a4:	e000      	b.n	80168a8 <xQueueReceive+0x78>
 80168a6:	2300      	movs	r3, #0
 80168a8:	2b00      	cmp	r3, #0
 80168aa:	d10b      	bne.n	80168c4 <xQueueReceive+0x94>
	__asm volatile
 80168ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80168b0:	f383 8811 	msr	BASEPRI, r3
 80168b4:	f3bf 8f6f 	isb	sy
 80168b8:	f3bf 8f4f 	dsb	sy
 80168bc:	61bb      	str	r3, [r7, #24]
}
 80168be:	bf00      	nop
 80168c0:	bf00      	nop
 80168c2:	e7fd      	b.n	80168c0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80168c4:	f002 f9d8 	bl	8018c78 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80168c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80168ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80168cc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80168ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80168d0:	2b00      	cmp	r3, #0
 80168d2:	d01f      	beq.n	8016914 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80168d4:	68b9      	ldr	r1, [r7, #8]
 80168d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80168d8:	f000 fa1e 	bl	8016d18 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80168dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80168de:	1e5a      	subs	r2, r3, #1
 80168e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80168e2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80168e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80168e6:	691b      	ldr	r3, [r3, #16]
 80168e8:	2b00      	cmp	r3, #0
 80168ea:	d00f      	beq.n	801690c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80168ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80168ee:	3310      	adds	r3, #16
 80168f0:	4618      	mov	r0, r3
 80168f2:	f001 f98b 	bl	8017c0c <xTaskRemoveFromEventList>
 80168f6:	4603      	mov	r3, r0
 80168f8:	2b00      	cmp	r3, #0
 80168fa:	d007      	beq.n	801690c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80168fc:	4b3c      	ldr	r3, [pc, #240]	@ (80169f0 <xQueueReceive+0x1c0>)
 80168fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016902:	601a      	str	r2, [r3, #0]
 8016904:	f3bf 8f4f 	dsb	sy
 8016908:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801690c:	f002 f9e6 	bl	8018cdc <vPortExitCritical>
				return pdPASS;
 8016910:	2301      	movs	r3, #1
 8016912:	e069      	b.n	80169e8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016914:	687b      	ldr	r3, [r7, #4]
 8016916:	2b00      	cmp	r3, #0
 8016918:	d103      	bne.n	8016922 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801691a:	f002 f9df 	bl	8018cdc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801691e:	2300      	movs	r3, #0
 8016920:	e062      	b.n	80169e8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016924:	2b00      	cmp	r3, #0
 8016926:	d106      	bne.n	8016936 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016928:	f107 0310 	add.w	r3, r7, #16
 801692c:	4618      	mov	r0, r3
 801692e:	f001 f9d1 	bl	8017cd4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016932:	2301      	movs	r3, #1
 8016934:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016936:	f002 f9d1 	bl	8018cdc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801693a:	f000 ff39 	bl	80177b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801693e:	f002 f99b 	bl	8018c78 <vPortEnterCritical>
 8016942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016944:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8016948:	b25b      	sxtb	r3, r3
 801694a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801694e:	d103      	bne.n	8016958 <xQueueReceive+0x128>
 8016950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016952:	2200      	movs	r2, #0
 8016954:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8016958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801695a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801695e:	b25b      	sxtb	r3, r3
 8016960:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8016964:	d103      	bne.n	801696e <xQueueReceive+0x13e>
 8016966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016968:	2200      	movs	r2, #0
 801696a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801696e:	f002 f9b5 	bl	8018cdc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016972:	1d3a      	adds	r2, r7, #4
 8016974:	f107 0310 	add.w	r3, r7, #16
 8016978:	4611      	mov	r1, r2
 801697a:	4618      	mov	r0, r3
 801697c:	f001 f9c0 	bl	8017d00 <xTaskCheckForTimeOut>
 8016980:	4603      	mov	r3, r0
 8016982:	2b00      	cmp	r3, #0
 8016984:	d123      	bne.n	80169ce <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016986:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016988:	f000 fa3e 	bl	8016e08 <prvIsQueueEmpty>
 801698c:	4603      	mov	r3, r0
 801698e:	2b00      	cmp	r3, #0
 8016990:	d017      	beq.n	80169c2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8016992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016994:	3324      	adds	r3, #36	@ 0x24
 8016996:	687a      	ldr	r2, [r7, #4]
 8016998:	4611      	mov	r1, r2
 801699a:	4618      	mov	r0, r3
 801699c:	f001 f8e4 	bl	8017b68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80169a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80169a2:	f000 f9df 	bl	8016d64 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80169a6:	f000 ff11 	bl	80177cc <xTaskResumeAll>
 80169aa:	4603      	mov	r3, r0
 80169ac:	2b00      	cmp	r3, #0
 80169ae:	d189      	bne.n	80168c4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80169b0:	4b0f      	ldr	r3, [pc, #60]	@ (80169f0 <xQueueReceive+0x1c0>)
 80169b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80169b6:	601a      	str	r2, [r3, #0]
 80169b8:	f3bf 8f4f 	dsb	sy
 80169bc:	f3bf 8f6f 	isb	sy
 80169c0:	e780      	b.n	80168c4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80169c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80169c4:	f000 f9ce 	bl	8016d64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80169c8:	f000 ff00 	bl	80177cc <xTaskResumeAll>
 80169cc:	e77a      	b.n	80168c4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80169ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80169d0:	f000 f9c8 	bl	8016d64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80169d4:	f000 fefa 	bl	80177cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80169d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80169da:	f000 fa15 	bl	8016e08 <prvIsQueueEmpty>
 80169de:	4603      	mov	r3, r0
 80169e0:	2b00      	cmp	r3, #0
 80169e2:	f43f af6f 	beq.w	80168c4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80169e6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80169e8:	4618      	mov	r0, r3
 80169ea:	3730      	adds	r7, #48	@ 0x30
 80169ec:	46bd      	mov	sp, r7
 80169ee:	bd80      	pop	{r7, pc}
 80169f0:	e000ed04 	.word	0xe000ed04

080169f4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80169f4:	b580      	push	{r7, lr}
 80169f6:	b08e      	sub	sp, #56	@ 0x38
 80169f8:	af00      	add	r7, sp, #0
 80169fa:	6078      	str	r0, [r7, #4]
 80169fc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80169fe:	2300      	movs	r3, #0
 8016a00:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016a02:	687b      	ldr	r3, [r7, #4]
 8016a04:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8016a06:	2300      	movs	r3, #0
 8016a08:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8016a0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016a0c:	2b00      	cmp	r3, #0
 8016a0e:	d10b      	bne.n	8016a28 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8016a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016a14:	f383 8811 	msr	BASEPRI, r3
 8016a18:	f3bf 8f6f 	isb	sy
 8016a1c:	f3bf 8f4f 	dsb	sy
 8016a20:	623b      	str	r3, [r7, #32]
}
 8016a22:	bf00      	nop
 8016a24:	bf00      	nop
 8016a26:	e7fd      	b.n	8016a24 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8016a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016a2c:	2b00      	cmp	r3, #0
 8016a2e:	d00b      	beq.n	8016a48 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8016a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016a34:	f383 8811 	msr	BASEPRI, r3
 8016a38:	f3bf 8f6f 	isb	sy
 8016a3c:	f3bf 8f4f 	dsb	sy
 8016a40:	61fb      	str	r3, [r7, #28]
}
 8016a42:	bf00      	nop
 8016a44:	bf00      	nop
 8016a46:	e7fd      	b.n	8016a44 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016a48:	f001 faa6 	bl	8017f98 <xTaskGetSchedulerState>
 8016a4c:	4603      	mov	r3, r0
 8016a4e:	2b00      	cmp	r3, #0
 8016a50:	d102      	bne.n	8016a58 <xQueueSemaphoreTake+0x64>
 8016a52:	683b      	ldr	r3, [r7, #0]
 8016a54:	2b00      	cmp	r3, #0
 8016a56:	d101      	bne.n	8016a5c <xQueueSemaphoreTake+0x68>
 8016a58:	2301      	movs	r3, #1
 8016a5a:	e000      	b.n	8016a5e <xQueueSemaphoreTake+0x6a>
 8016a5c:	2300      	movs	r3, #0
 8016a5e:	2b00      	cmp	r3, #0
 8016a60:	d10b      	bne.n	8016a7a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8016a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016a66:	f383 8811 	msr	BASEPRI, r3
 8016a6a:	f3bf 8f6f 	isb	sy
 8016a6e:	f3bf 8f4f 	dsb	sy
 8016a72:	61bb      	str	r3, [r7, #24]
}
 8016a74:	bf00      	nop
 8016a76:	bf00      	nop
 8016a78:	e7fd      	b.n	8016a76 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016a7a:	f002 f8fd 	bl	8018c78 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8016a7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016a80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016a82:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8016a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016a86:	2b00      	cmp	r3, #0
 8016a88:	d024      	beq.n	8016ad4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8016a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016a8c:	1e5a      	subs	r2, r3, #1
 8016a8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016a90:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016a92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016a94:	681b      	ldr	r3, [r3, #0]
 8016a96:	2b00      	cmp	r3, #0
 8016a98:	d104      	bne.n	8016aa4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8016a9a:	f001 fbf7 	bl	801828c <pvTaskIncrementMutexHeldCount>
 8016a9e:	4602      	mov	r2, r0
 8016aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016aa2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016aa6:	691b      	ldr	r3, [r3, #16]
 8016aa8:	2b00      	cmp	r3, #0
 8016aaa:	d00f      	beq.n	8016acc <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016aac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016aae:	3310      	adds	r3, #16
 8016ab0:	4618      	mov	r0, r3
 8016ab2:	f001 f8ab 	bl	8017c0c <xTaskRemoveFromEventList>
 8016ab6:	4603      	mov	r3, r0
 8016ab8:	2b00      	cmp	r3, #0
 8016aba:	d007      	beq.n	8016acc <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8016abc:	4b54      	ldr	r3, [pc, #336]	@ (8016c10 <xQueueSemaphoreTake+0x21c>)
 8016abe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016ac2:	601a      	str	r2, [r3, #0]
 8016ac4:	f3bf 8f4f 	dsb	sy
 8016ac8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8016acc:	f002 f906 	bl	8018cdc <vPortExitCritical>
				return pdPASS;
 8016ad0:	2301      	movs	r3, #1
 8016ad2:	e098      	b.n	8016c06 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016ad4:	683b      	ldr	r3, [r7, #0]
 8016ad6:	2b00      	cmp	r3, #0
 8016ad8:	d112      	bne.n	8016b00 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8016ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016adc:	2b00      	cmp	r3, #0
 8016ade:	d00b      	beq.n	8016af8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8016ae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016ae4:	f383 8811 	msr	BASEPRI, r3
 8016ae8:	f3bf 8f6f 	isb	sy
 8016aec:	f3bf 8f4f 	dsb	sy
 8016af0:	617b      	str	r3, [r7, #20]
}
 8016af2:	bf00      	nop
 8016af4:	bf00      	nop
 8016af6:	e7fd      	b.n	8016af4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8016af8:	f002 f8f0 	bl	8018cdc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8016afc:	2300      	movs	r3, #0
 8016afe:	e082      	b.n	8016c06 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016b00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016b02:	2b00      	cmp	r3, #0
 8016b04:	d106      	bne.n	8016b14 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016b06:	f107 030c 	add.w	r3, r7, #12
 8016b0a:	4618      	mov	r0, r3
 8016b0c:	f001 f8e2 	bl	8017cd4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016b10:	2301      	movs	r3, #1
 8016b12:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016b14:	f002 f8e2 	bl	8018cdc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016b18:	f000 fe4a 	bl	80177b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016b1c:	f002 f8ac 	bl	8018c78 <vPortEnterCritical>
 8016b20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016b22:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8016b26:	b25b      	sxtb	r3, r3
 8016b28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8016b2c:	d103      	bne.n	8016b36 <xQueueSemaphoreTake+0x142>
 8016b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016b30:	2200      	movs	r2, #0
 8016b32:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8016b36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016b38:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8016b3c:	b25b      	sxtb	r3, r3
 8016b3e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8016b42:	d103      	bne.n	8016b4c <xQueueSemaphoreTake+0x158>
 8016b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016b46:	2200      	movs	r2, #0
 8016b48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8016b4c:	f002 f8c6 	bl	8018cdc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016b50:	463a      	mov	r2, r7
 8016b52:	f107 030c 	add.w	r3, r7, #12
 8016b56:	4611      	mov	r1, r2
 8016b58:	4618      	mov	r0, r3
 8016b5a:	f001 f8d1 	bl	8017d00 <xTaskCheckForTimeOut>
 8016b5e:	4603      	mov	r3, r0
 8016b60:	2b00      	cmp	r3, #0
 8016b62:	d132      	bne.n	8016bca <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016b64:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8016b66:	f000 f94f 	bl	8016e08 <prvIsQueueEmpty>
 8016b6a:	4603      	mov	r3, r0
 8016b6c:	2b00      	cmp	r3, #0
 8016b6e:	d026      	beq.n	8016bbe <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016b72:	681b      	ldr	r3, [r3, #0]
 8016b74:	2b00      	cmp	r3, #0
 8016b76:	d109      	bne.n	8016b8c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8016b78:	f002 f87e 	bl	8018c78 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8016b7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016b7e:	689b      	ldr	r3, [r3, #8]
 8016b80:	4618      	mov	r0, r3
 8016b82:	f001 fa27 	bl	8017fd4 <xTaskPriorityInherit>
 8016b86:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8016b88:	f002 f8a8 	bl	8018cdc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8016b8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016b8e:	3324      	adds	r3, #36	@ 0x24
 8016b90:	683a      	ldr	r2, [r7, #0]
 8016b92:	4611      	mov	r1, r2
 8016b94:	4618      	mov	r0, r3
 8016b96:	f000 ffe7 	bl	8017b68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8016b9a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8016b9c:	f000 f8e2 	bl	8016d64 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8016ba0:	f000 fe14 	bl	80177cc <xTaskResumeAll>
 8016ba4:	4603      	mov	r3, r0
 8016ba6:	2b00      	cmp	r3, #0
 8016ba8:	f47f af67 	bne.w	8016a7a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8016bac:	4b18      	ldr	r3, [pc, #96]	@ (8016c10 <xQueueSemaphoreTake+0x21c>)
 8016bae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016bb2:	601a      	str	r2, [r3, #0]
 8016bb4:	f3bf 8f4f 	dsb	sy
 8016bb8:	f3bf 8f6f 	isb	sy
 8016bbc:	e75d      	b.n	8016a7a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8016bbe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8016bc0:	f000 f8d0 	bl	8016d64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016bc4:	f000 fe02 	bl	80177cc <xTaskResumeAll>
 8016bc8:	e757      	b.n	8016a7a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8016bca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8016bcc:	f000 f8ca 	bl	8016d64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016bd0:	f000 fdfc 	bl	80177cc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016bd4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8016bd6:	f000 f917 	bl	8016e08 <prvIsQueueEmpty>
 8016bda:	4603      	mov	r3, r0
 8016bdc:	2b00      	cmp	r3, #0
 8016bde:	f43f af4c 	beq.w	8016a7a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8016be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016be4:	2b00      	cmp	r3, #0
 8016be6:	d00d      	beq.n	8016c04 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8016be8:	f002 f846 	bl	8018c78 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8016bec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8016bee:	f000 f811 	bl	8016c14 <prvGetDisinheritPriorityAfterTimeout>
 8016bf2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8016bf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016bf6:	689b      	ldr	r3, [r3, #8]
 8016bf8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8016bfa:	4618      	mov	r0, r3
 8016bfc:	f001 fac2 	bl	8018184 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8016c00:	f002 f86c 	bl	8018cdc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8016c04:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8016c06:	4618      	mov	r0, r3
 8016c08:	3738      	adds	r7, #56	@ 0x38
 8016c0a:	46bd      	mov	sp, r7
 8016c0c:	bd80      	pop	{r7, pc}
 8016c0e:	bf00      	nop
 8016c10:	e000ed04 	.word	0xe000ed04

08016c14 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8016c14:	b480      	push	{r7}
 8016c16:	b085      	sub	sp, #20
 8016c18:	af00      	add	r7, sp, #0
 8016c1a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8016c1c:	687b      	ldr	r3, [r7, #4]
 8016c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016c20:	2b00      	cmp	r3, #0
 8016c22:	d006      	beq.n	8016c32 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016c28:	681b      	ldr	r3, [r3, #0]
 8016c2a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8016c2e:	60fb      	str	r3, [r7, #12]
 8016c30:	e001      	b.n	8016c36 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8016c32:	2300      	movs	r3, #0
 8016c34:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8016c36:	68fb      	ldr	r3, [r7, #12]
	}
 8016c38:	4618      	mov	r0, r3
 8016c3a:	3714      	adds	r7, #20
 8016c3c:	46bd      	mov	sp, r7
 8016c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c42:	4770      	bx	lr

08016c44 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8016c44:	b580      	push	{r7, lr}
 8016c46:	b086      	sub	sp, #24
 8016c48:	af00      	add	r7, sp, #0
 8016c4a:	60f8      	str	r0, [r7, #12]
 8016c4c:	60b9      	str	r1, [r7, #8]
 8016c4e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8016c50:	2300      	movs	r3, #0
 8016c52:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016c54:	68fb      	ldr	r3, [r7, #12]
 8016c56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016c58:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8016c5a:	68fb      	ldr	r3, [r7, #12]
 8016c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016c5e:	2b00      	cmp	r3, #0
 8016c60:	d10d      	bne.n	8016c7e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016c62:	68fb      	ldr	r3, [r7, #12]
 8016c64:	681b      	ldr	r3, [r3, #0]
 8016c66:	2b00      	cmp	r3, #0
 8016c68:	d14d      	bne.n	8016d06 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8016c6a:	68fb      	ldr	r3, [r7, #12]
 8016c6c:	689b      	ldr	r3, [r3, #8]
 8016c6e:	4618      	mov	r0, r3
 8016c70:	f001 fa18 	bl	80180a4 <xTaskPriorityDisinherit>
 8016c74:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8016c76:	68fb      	ldr	r3, [r7, #12]
 8016c78:	2200      	movs	r2, #0
 8016c7a:	609a      	str	r2, [r3, #8]
 8016c7c:	e043      	b.n	8016d06 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8016c7e:	687b      	ldr	r3, [r7, #4]
 8016c80:	2b00      	cmp	r3, #0
 8016c82:	d119      	bne.n	8016cb8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8016c84:	68fb      	ldr	r3, [r7, #12]
 8016c86:	6858      	ldr	r0, [r3, #4]
 8016c88:	68fb      	ldr	r3, [r7, #12]
 8016c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016c8c:	461a      	mov	r2, r3
 8016c8e:	68b9      	ldr	r1, [r7, #8]
 8016c90:	f004 fab7 	bl	801b202 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8016c94:	68fb      	ldr	r3, [r7, #12]
 8016c96:	685a      	ldr	r2, [r3, #4]
 8016c98:	68fb      	ldr	r3, [r7, #12]
 8016c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016c9c:	441a      	add	r2, r3
 8016c9e:	68fb      	ldr	r3, [r7, #12]
 8016ca0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8016ca2:	68fb      	ldr	r3, [r7, #12]
 8016ca4:	685a      	ldr	r2, [r3, #4]
 8016ca6:	68fb      	ldr	r3, [r7, #12]
 8016ca8:	689b      	ldr	r3, [r3, #8]
 8016caa:	429a      	cmp	r2, r3
 8016cac:	d32b      	bcc.n	8016d06 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8016cae:	68fb      	ldr	r3, [r7, #12]
 8016cb0:	681a      	ldr	r2, [r3, #0]
 8016cb2:	68fb      	ldr	r3, [r7, #12]
 8016cb4:	605a      	str	r2, [r3, #4]
 8016cb6:	e026      	b.n	8016d06 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8016cb8:	68fb      	ldr	r3, [r7, #12]
 8016cba:	68d8      	ldr	r0, [r3, #12]
 8016cbc:	68fb      	ldr	r3, [r7, #12]
 8016cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016cc0:	461a      	mov	r2, r3
 8016cc2:	68b9      	ldr	r1, [r7, #8]
 8016cc4:	f004 fa9d 	bl	801b202 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8016cc8:	68fb      	ldr	r3, [r7, #12]
 8016cca:	68da      	ldr	r2, [r3, #12]
 8016ccc:	68fb      	ldr	r3, [r7, #12]
 8016cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016cd0:	425b      	negs	r3, r3
 8016cd2:	441a      	add	r2, r3
 8016cd4:	68fb      	ldr	r3, [r7, #12]
 8016cd6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8016cd8:	68fb      	ldr	r3, [r7, #12]
 8016cda:	68da      	ldr	r2, [r3, #12]
 8016cdc:	68fb      	ldr	r3, [r7, #12]
 8016cde:	681b      	ldr	r3, [r3, #0]
 8016ce0:	429a      	cmp	r2, r3
 8016ce2:	d207      	bcs.n	8016cf4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8016ce4:	68fb      	ldr	r3, [r7, #12]
 8016ce6:	689a      	ldr	r2, [r3, #8]
 8016ce8:	68fb      	ldr	r3, [r7, #12]
 8016cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016cec:	425b      	negs	r3, r3
 8016cee:	441a      	add	r2, r3
 8016cf0:	68fb      	ldr	r3, [r7, #12]
 8016cf2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8016cf4:	687b      	ldr	r3, [r7, #4]
 8016cf6:	2b02      	cmp	r3, #2
 8016cf8:	d105      	bne.n	8016d06 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016cfa:	693b      	ldr	r3, [r7, #16]
 8016cfc:	2b00      	cmp	r3, #0
 8016cfe:	d002      	beq.n	8016d06 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8016d00:	693b      	ldr	r3, [r7, #16]
 8016d02:	3b01      	subs	r3, #1
 8016d04:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016d06:	693b      	ldr	r3, [r7, #16]
 8016d08:	1c5a      	adds	r2, r3, #1
 8016d0a:	68fb      	ldr	r3, [r7, #12]
 8016d0c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8016d0e:	697b      	ldr	r3, [r7, #20]
}
 8016d10:	4618      	mov	r0, r3
 8016d12:	3718      	adds	r7, #24
 8016d14:	46bd      	mov	sp, r7
 8016d16:	bd80      	pop	{r7, pc}

08016d18 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8016d18:	b580      	push	{r7, lr}
 8016d1a:	b082      	sub	sp, #8
 8016d1c:	af00      	add	r7, sp, #0
 8016d1e:	6078      	str	r0, [r7, #4]
 8016d20:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8016d22:	687b      	ldr	r3, [r7, #4]
 8016d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016d26:	2b00      	cmp	r3, #0
 8016d28:	d018      	beq.n	8016d5c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8016d2a:	687b      	ldr	r3, [r7, #4]
 8016d2c:	68da      	ldr	r2, [r3, #12]
 8016d2e:	687b      	ldr	r3, [r7, #4]
 8016d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016d32:	441a      	add	r2, r3
 8016d34:	687b      	ldr	r3, [r7, #4]
 8016d36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8016d38:	687b      	ldr	r3, [r7, #4]
 8016d3a:	68da      	ldr	r2, [r3, #12]
 8016d3c:	687b      	ldr	r3, [r7, #4]
 8016d3e:	689b      	ldr	r3, [r3, #8]
 8016d40:	429a      	cmp	r2, r3
 8016d42:	d303      	bcc.n	8016d4c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8016d44:	687b      	ldr	r3, [r7, #4]
 8016d46:	681a      	ldr	r2, [r3, #0]
 8016d48:	687b      	ldr	r3, [r7, #4]
 8016d4a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8016d4c:	687b      	ldr	r3, [r7, #4]
 8016d4e:	68d9      	ldr	r1, [r3, #12]
 8016d50:	687b      	ldr	r3, [r7, #4]
 8016d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016d54:	461a      	mov	r2, r3
 8016d56:	6838      	ldr	r0, [r7, #0]
 8016d58:	f004 fa53 	bl	801b202 <memcpy>
	}
}
 8016d5c:	bf00      	nop
 8016d5e:	3708      	adds	r7, #8
 8016d60:	46bd      	mov	sp, r7
 8016d62:	bd80      	pop	{r7, pc}

08016d64 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8016d64:	b580      	push	{r7, lr}
 8016d66:	b084      	sub	sp, #16
 8016d68:	af00      	add	r7, sp, #0
 8016d6a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8016d6c:	f001 ff84 	bl	8018c78 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8016d70:	687b      	ldr	r3, [r7, #4]
 8016d72:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8016d76:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8016d78:	e011      	b.n	8016d9e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016d7a:	687b      	ldr	r3, [r7, #4]
 8016d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016d7e:	2b00      	cmp	r3, #0
 8016d80:	d012      	beq.n	8016da8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016d82:	687b      	ldr	r3, [r7, #4]
 8016d84:	3324      	adds	r3, #36	@ 0x24
 8016d86:	4618      	mov	r0, r3
 8016d88:	f000 ff40 	bl	8017c0c <xTaskRemoveFromEventList>
 8016d8c:	4603      	mov	r3, r0
 8016d8e:	2b00      	cmp	r3, #0
 8016d90:	d001      	beq.n	8016d96 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8016d92:	f001 f819 	bl	8017dc8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8016d96:	7bfb      	ldrb	r3, [r7, #15]
 8016d98:	3b01      	subs	r3, #1
 8016d9a:	b2db      	uxtb	r3, r3
 8016d9c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8016d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016da2:	2b00      	cmp	r3, #0
 8016da4:	dce9      	bgt.n	8016d7a <prvUnlockQueue+0x16>
 8016da6:	e000      	b.n	8016daa <prvUnlockQueue+0x46>
					break;
 8016da8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8016daa:	687b      	ldr	r3, [r7, #4]
 8016dac:	22ff      	movs	r2, #255	@ 0xff
 8016dae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8016db2:	f001 ff93 	bl	8018cdc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8016db6:	f001 ff5f 	bl	8018c78 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8016dba:	687b      	ldr	r3, [r7, #4]
 8016dbc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8016dc0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8016dc2:	e011      	b.n	8016de8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016dc4:	687b      	ldr	r3, [r7, #4]
 8016dc6:	691b      	ldr	r3, [r3, #16]
 8016dc8:	2b00      	cmp	r3, #0
 8016dca:	d012      	beq.n	8016df2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	3310      	adds	r3, #16
 8016dd0:	4618      	mov	r0, r3
 8016dd2:	f000 ff1b 	bl	8017c0c <xTaskRemoveFromEventList>
 8016dd6:	4603      	mov	r3, r0
 8016dd8:	2b00      	cmp	r3, #0
 8016dda:	d001      	beq.n	8016de0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8016ddc:	f000 fff4 	bl	8017dc8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8016de0:	7bbb      	ldrb	r3, [r7, #14]
 8016de2:	3b01      	subs	r3, #1
 8016de4:	b2db      	uxtb	r3, r3
 8016de6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8016de8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016dec:	2b00      	cmp	r3, #0
 8016dee:	dce9      	bgt.n	8016dc4 <prvUnlockQueue+0x60>
 8016df0:	e000      	b.n	8016df4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8016df2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8016df4:	687b      	ldr	r3, [r7, #4]
 8016df6:	22ff      	movs	r2, #255	@ 0xff
 8016df8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8016dfc:	f001 ff6e 	bl	8018cdc <vPortExitCritical>
}
 8016e00:	bf00      	nop
 8016e02:	3710      	adds	r7, #16
 8016e04:	46bd      	mov	sp, r7
 8016e06:	bd80      	pop	{r7, pc}

08016e08 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8016e08:	b580      	push	{r7, lr}
 8016e0a:	b084      	sub	sp, #16
 8016e0c:	af00      	add	r7, sp, #0
 8016e0e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8016e10:	f001 ff32 	bl	8018c78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8016e14:	687b      	ldr	r3, [r7, #4]
 8016e16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016e18:	2b00      	cmp	r3, #0
 8016e1a:	d102      	bne.n	8016e22 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8016e1c:	2301      	movs	r3, #1
 8016e1e:	60fb      	str	r3, [r7, #12]
 8016e20:	e001      	b.n	8016e26 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8016e22:	2300      	movs	r3, #0
 8016e24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8016e26:	f001 ff59 	bl	8018cdc <vPortExitCritical>

	return xReturn;
 8016e2a:	68fb      	ldr	r3, [r7, #12]
}
 8016e2c:	4618      	mov	r0, r3
 8016e2e:	3710      	adds	r7, #16
 8016e30:	46bd      	mov	sp, r7
 8016e32:	bd80      	pop	{r7, pc}

08016e34 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8016e34:	b580      	push	{r7, lr}
 8016e36:	b084      	sub	sp, #16
 8016e38:	af00      	add	r7, sp, #0
 8016e3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8016e3c:	f001 ff1c 	bl	8018c78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8016e40:	687b      	ldr	r3, [r7, #4]
 8016e42:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016e44:	687b      	ldr	r3, [r7, #4]
 8016e46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016e48:	429a      	cmp	r2, r3
 8016e4a:	d102      	bne.n	8016e52 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8016e4c:	2301      	movs	r3, #1
 8016e4e:	60fb      	str	r3, [r7, #12]
 8016e50:	e001      	b.n	8016e56 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8016e52:	2300      	movs	r3, #0
 8016e54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8016e56:	f001 ff41 	bl	8018cdc <vPortExitCritical>

	return xReturn;
 8016e5a:	68fb      	ldr	r3, [r7, #12]
}
 8016e5c:	4618      	mov	r0, r3
 8016e5e:	3710      	adds	r7, #16
 8016e60:	46bd      	mov	sp, r7
 8016e62:	bd80      	pop	{r7, pc}

08016e64 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8016e64:	b480      	push	{r7}
 8016e66:	b085      	sub	sp, #20
 8016e68:	af00      	add	r7, sp, #0
 8016e6a:	6078      	str	r0, [r7, #4]
 8016e6c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016e6e:	2300      	movs	r3, #0
 8016e70:	60fb      	str	r3, [r7, #12]
 8016e72:	e014      	b.n	8016e9e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8016e74:	4a0f      	ldr	r2, [pc, #60]	@ (8016eb4 <vQueueAddToRegistry+0x50>)
 8016e76:	68fb      	ldr	r3, [r7, #12]
 8016e78:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8016e7c:	2b00      	cmp	r3, #0
 8016e7e:	d10b      	bne.n	8016e98 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8016e80:	490c      	ldr	r1, [pc, #48]	@ (8016eb4 <vQueueAddToRegistry+0x50>)
 8016e82:	68fb      	ldr	r3, [r7, #12]
 8016e84:	683a      	ldr	r2, [r7, #0]
 8016e86:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8016e8a:	4a0a      	ldr	r2, [pc, #40]	@ (8016eb4 <vQueueAddToRegistry+0x50>)
 8016e8c:	68fb      	ldr	r3, [r7, #12]
 8016e8e:	00db      	lsls	r3, r3, #3
 8016e90:	4413      	add	r3, r2
 8016e92:	687a      	ldr	r2, [r7, #4]
 8016e94:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8016e96:	e006      	b.n	8016ea6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016e98:	68fb      	ldr	r3, [r7, #12]
 8016e9a:	3301      	adds	r3, #1
 8016e9c:	60fb      	str	r3, [r7, #12]
 8016e9e:	68fb      	ldr	r3, [r7, #12]
 8016ea0:	2b07      	cmp	r3, #7
 8016ea2:	d9e7      	bls.n	8016e74 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8016ea4:	bf00      	nop
 8016ea6:	bf00      	nop
 8016ea8:	3714      	adds	r7, #20
 8016eaa:	46bd      	mov	sp, r7
 8016eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016eb0:	4770      	bx	lr
 8016eb2:	bf00      	nop
 8016eb4:	24001928 	.word	0x24001928

08016eb8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8016eb8:	b580      	push	{r7, lr}
 8016eba:	b086      	sub	sp, #24
 8016ebc:	af00      	add	r7, sp, #0
 8016ebe:	60f8      	str	r0, [r7, #12]
 8016ec0:	60b9      	str	r1, [r7, #8]
 8016ec2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8016ec4:	68fb      	ldr	r3, [r7, #12]
 8016ec6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8016ec8:	f001 fed6 	bl	8018c78 <vPortEnterCritical>
 8016ecc:	697b      	ldr	r3, [r7, #20]
 8016ece:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8016ed2:	b25b      	sxtb	r3, r3
 8016ed4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8016ed8:	d103      	bne.n	8016ee2 <vQueueWaitForMessageRestricted+0x2a>
 8016eda:	697b      	ldr	r3, [r7, #20]
 8016edc:	2200      	movs	r2, #0
 8016ede:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8016ee2:	697b      	ldr	r3, [r7, #20]
 8016ee4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8016ee8:	b25b      	sxtb	r3, r3
 8016eea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8016eee:	d103      	bne.n	8016ef8 <vQueueWaitForMessageRestricted+0x40>
 8016ef0:	697b      	ldr	r3, [r7, #20]
 8016ef2:	2200      	movs	r2, #0
 8016ef4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8016ef8:	f001 fef0 	bl	8018cdc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8016efc:	697b      	ldr	r3, [r7, #20]
 8016efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016f00:	2b00      	cmp	r3, #0
 8016f02:	d106      	bne.n	8016f12 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8016f04:	697b      	ldr	r3, [r7, #20]
 8016f06:	3324      	adds	r3, #36	@ 0x24
 8016f08:	687a      	ldr	r2, [r7, #4]
 8016f0a:	68b9      	ldr	r1, [r7, #8]
 8016f0c:	4618      	mov	r0, r3
 8016f0e:	f000 fe51 	bl	8017bb4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8016f12:	6978      	ldr	r0, [r7, #20]
 8016f14:	f7ff ff26 	bl	8016d64 <prvUnlockQueue>
	}
 8016f18:	bf00      	nop
 8016f1a:	3718      	adds	r7, #24
 8016f1c:	46bd      	mov	sp, r7
 8016f1e:	bd80      	pop	{r7, pc}

08016f20 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8016f20:	b580      	push	{r7, lr}
 8016f22:	b08e      	sub	sp, #56	@ 0x38
 8016f24:	af04      	add	r7, sp, #16
 8016f26:	60f8      	str	r0, [r7, #12]
 8016f28:	60b9      	str	r1, [r7, #8]
 8016f2a:	607a      	str	r2, [r7, #4]
 8016f2c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8016f2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016f30:	2b00      	cmp	r3, #0
 8016f32:	d10b      	bne.n	8016f4c <xTaskCreateStatic+0x2c>
	__asm volatile
 8016f34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016f38:	f383 8811 	msr	BASEPRI, r3
 8016f3c:	f3bf 8f6f 	isb	sy
 8016f40:	f3bf 8f4f 	dsb	sy
 8016f44:	623b      	str	r3, [r7, #32]
}
 8016f46:	bf00      	nop
 8016f48:	bf00      	nop
 8016f4a:	e7fd      	b.n	8016f48 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8016f4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016f4e:	2b00      	cmp	r3, #0
 8016f50:	d10b      	bne.n	8016f6a <xTaskCreateStatic+0x4a>
	__asm volatile
 8016f52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016f56:	f383 8811 	msr	BASEPRI, r3
 8016f5a:	f3bf 8f6f 	isb	sy
 8016f5e:	f3bf 8f4f 	dsb	sy
 8016f62:	61fb      	str	r3, [r7, #28]
}
 8016f64:	bf00      	nop
 8016f66:	bf00      	nop
 8016f68:	e7fd      	b.n	8016f66 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8016f6a:	23a8      	movs	r3, #168	@ 0xa8
 8016f6c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8016f6e:	693b      	ldr	r3, [r7, #16]
 8016f70:	2ba8      	cmp	r3, #168	@ 0xa8
 8016f72:	d00b      	beq.n	8016f8c <xTaskCreateStatic+0x6c>
	__asm volatile
 8016f74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016f78:	f383 8811 	msr	BASEPRI, r3
 8016f7c:	f3bf 8f6f 	isb	sy
 8016f80:	f3bf 8f4f 	dsb	sy
 8016f84:	61bb      	str	r3, [r7, #24]
}
 8016f86:	bf00      	nop
 8016f88:	bf00      	nop
 8016f8a:	e7fd      	b.n	8016f88 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8016f8c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8016f8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016f90:	2b00      	cmp	r3, #0
 8016f92:	d01e      	beq.n	8016fd2 <xTaskCreateStatic+0xb2>
 8016f94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016f96:	2b00      	cmp	r3, #0
 8016f98:	d01b      	beq.n	8016fd2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8016f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016f9c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8016f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016fa0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8016fa2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8016fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016fa6:	2202      	movs	r2, #2
 8016fa8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8016fac:	2300      	movs	r3, #0
 8016fae:	9303      	str	r3, [sp, #12]
 8016fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016fb2:	9302      	str	r3, [sp, #8]
 8016fb4:	f107 0314 	add.w	r3, r7, #20
 8016fb8:	9301      	str	r3, [sp, #4]
 8016fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016fbc:	9300      	str	r3, [sp, #0]
 8016fbe:	683b      	ldr	r3, [r7, #0]
 8016fc0:	687a      	ldr	r2, [r7, #4]
 8016fc2:	68b9      	ldr	r1, [r7, #8]
 8016fc4:	68f8      	ldr	r0, [r7, #12]
 8016fc6:	f000 f851 	bl	801706c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016fca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016fcc:	f000 f8f6 	bl	80171bc <prvAddNewTaskToReadyList>
 8016fd0:	e001      	b.n	8016fd6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8016fd2:	2300      	movs	r3, #0
 8016fd4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8016fd6:	697b      	ldr	r3, [r7, #20]
	}
 8016fd8:	4618      	mov	r0, r3
 8016fda:	3728      	adds	r7, #40	@ 0x28
 8016fdc:	46bd      	mov	sp, r7
 8016fde:	bd80      	pop	{r7, pc}

08016fe0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8016fe0:	b580      	push	{r7, lr}
 8016fe2:	b08c      	sub	sp, #48	@ 0x30
 8016fe4:	af04      	add	r7, sp, #16
 8016fe6:	60f8      	str	r0, [r7, #12]
 8016fe8:	60b9      	str	r1, [r7, #8]
 8016fea:	603b      	str	r3, [r7, #0]
 8016fec:	4613      	mov	r3, r2
 8016fee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8016ff0:	88fb      	ldrh	r3, [r7, #6]
 8016ff2:	009b      	lsls	r3, r3, #2
 8016ff4:	4618      	mov	r0, r3
 8016ff6:	f001 ff61 	bl	8018ebc <pvPortMalloc>
 8016ffa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8016ffc:	697b      	ldr	r3, [r7, #20]
 8016ffe:	2b00      	cmp	r3, #0
 8017000:	d00e      	beq.n	8017020 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8017002:	20a8      	movs	r0, #168	@ 0xa8
 8017004:	f001 ff5a 	bl	8018ebc <pvPortMalloc>
 8017008:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801700a:	69fb      	ldr	r3, [r7, #28]
 801700c:	2b00      	cmp	r3, #0
 801700e:	d003      	beq.n	8017018 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8017010:	69fb      	ldr	r3, [r7, #28]
 8017012:	697a      	ldr	r2, [r7, #20]
 8017014:	631a      	str	r2, [r3, #48]	@ 0x30
 8017016:	e005      	b.n	8017024 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8017018:	6978      	ldr	r0, [r7, #20]
 801701a:	f002 f81d 	bl	8019058 <vPortFree>
 801701e:	e001      	b.n	8017024 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8017020:	2300      	movs	r3, #0
 8017022:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8017024:	69fb      	ldr	r3, [r7, #28]
 8017026:	2b00      	cmp	r3, #0
 8017028:	d017      	beq.n	801705a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801702a:	69fb      	ldr	r3, [r7, #28]
 801702c:	2200      	movs	r2, #0
 801702e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8017032:	88fa      	ldrh	r2, [r7, #6]
 8017034:	2300      	movs	r3, #0
 8017036:	9303      	str	r3, [sp, #12]
 8017038:	69fb      	ldr	r3, [r7, #28]
 801703a:	9302      	str	r3, [sp, #8]
 801703c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801703e:	9301      	str	r3, [sp, #4]
 8017040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017042:	9300      	str	r3, [sp, #0]
 8017044:	683b      	ldr	r3, [r7, #0]
 8017046:	68b9      	ldr	r1, [r7, #8]
 8017048:	68f8      	ldr	r0, [r7, #12]
 801704a:	f000 f80f 	bl	801706c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801704e:	69f8      	ldr	r0, [r7, #28]
 8017050:	f000 f8b4 	bl	80171bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8017054:	2301      	movs	r3, #1
 8017056:	61bb      	str	r3, [r7, #24]
 8017058:	e002      	b.n	8017060 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801705a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801705e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8017060:	69bb      	ldr	r3, [r7, #24]
	}
 8017062:	4618      	mov	r0, r3
 8017064:	3720      	adds	r7, #32
 8017066:	46bd      	mov	sp, r7
 8017068:	bd80      	pop	{r7, pc}
	...

0801706c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801706c:	b580      	push	{r7, lr}
 801706e:	b088      	sub	sp, #32
 8017070:	af00      	add	r7, sp, #0
 8017072:	60f8      	str	r0, [r7, #12]
 8017074:	60b9      	str	r1, [r7, #8]
 8017076:	607a      	str	r2, [r7, #4]
 8017078:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801707a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801707c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801707e:	687b      	ldr	r3, [r7, #4]
 8017080:	009b      	lsls	r3, r3, #2
 8017082:	461a      	mov	r2, r3
 8017084:	21a5      	movs	r1, #165	@ 0xa5
 8017086:	f003 ffbf 	bl	801b008 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801708a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801708c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801708e:	6879      	ldr	r1, [r7, #4]
 8017090:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8017094:	440b      	add	r3, r1
 8017096:	009b      	lsls	r3, r3, #2
 8017098:	4413      	add	r3, r2
 801709a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801709c:	69bb      	ldr	r3, [r7, #24]
 801709e:	f023 0307 	bic.w	r3, r3, #7
 80170a2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80170a4:	69bb      	ldr	r3, [r7, #24]
 80170a6:	f003 0307 	and.w	r3, r3, #7
 80170aa:	2b00      	cmp	r3, #0
 80170ac:	d00b      	beq.n	80170c6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80170ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80170b2:	f383 8811 	msr	BASEPRI, r3
 80170b6:	f3bf 8f6f 	isb	sy
 80170ba:	f3bf 8f4f 	dsb	sy
 80170be:	617b      	str	r3, [r7, #20]
}
 80170c0:	bf00      	nop
 80170c2:	bf00      	nop
 80170c4:	e7fd      	b.n	80170c2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80170c6:	68bb      	ldr	r3, [r7, #8]
 80170c8:	2b00      	cmp	r3, #0
 80170ca:	d01f      	beq.n	801710c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80170cc:	2300      	movs	r3, #0
 80170ce:	61fb      	str	r3, [r7, #28]
 80170d0:	e012      	b.n	80170f8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80170d2:	68ba      	ldr	r2, [r7, #8]
 80170d4:	69fb      	ldr	r3, [r7, #28]
 80170d6:	4413      	add	r3, r2
 80170d8:	7819      	ldrb	r1, [r3, #0]
 80170da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80170dc:	69fb      	ldr	r3, [r7, #28]
 80170de:	4413      	add	r3, r2
 80170e0:	3334      	adds	r3, #52	@ 0x34
 80170e2:	460a      	mov	r2, r1
 80170e4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80170e6:	68ba      	ldr	r2, [r7, #8]
 80170e8:	69fb      	ldr	r3, [r7, #28]
 80170ea:	4413      	add	r3, r2
 80170ec:	781b      	ldrb	r3, [r3, #0]
 80170ee:	2b00      	cmp	r3, #0
 80170f0:	d006      	beq.n	8017100 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80170f2:	69fb      	ldr	r3, [r7, #28]
 80170f4:	3301      	adds	r3, #1
 80170f6:	61fb      	str	r3, [r7, #28]
 80170f8:	69fb      	ldr	r3, [r7, #28]
 80170fa:	2b0f      	cmp	r3, #15
 80170fc:	d9e9      	bls.n	80170d2 <prvInitialiseNewTask+0x66>
 80170fe:	e000      	b.n	8017102 <prvInitialiseNewTask+0x96>
			{
				break;
 8017100:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8017102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017104:	2200      	movs	r2, #0
 8017106:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801710a:	e003      	b.n	8017114 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801710c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801710e:	2200      	movs	r2, #0
 8017110:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8017114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017116:	2b37      	cmp	r3, #55	@ 0x37
 8017118:	d901      	bls.n	801711e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801711a:	2337      	movs	r3, #55	@ 0x37
 801711c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801711e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017120:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017122:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8017124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017126:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017128:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801712a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801712c:	2200      	movs	r2, #0
 801712e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8017130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017132:	3304      	adds	r3, #4
 8017134:	4618      	mov	r0, r3
 8017136:	f7fe ff71 	bl	801601c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801713a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801713c:	3318      	adds	r3, #24
 801713e:	4618      	mov	r0, r3
 8017140:	f7fe ff6c 	bl	801601c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8017144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017146:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017148:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801714a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801714c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8017150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017152:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8017154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017156:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017158:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801715a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801715c:	2200      	movs	r2, #0
 801715e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8017162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017164:	2200      	movs	r2, #0
 8017166:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801716a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801716c:	3354      	adds	r3, #84	@ 0x54
 801716e:	224c      	movs	r2, #76	@ 0x4c
 8017170:	2100      	movs	r1, #0
 8017172:	4618      	mov	r0, r3
 8017174:	f003 ff48 	bl	801b008 <memset>
 8017178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801717a:	4a0d      	ldr	r2, [pc, #52]	@ (80171b0 <prvInitialiseNewTask+0x144>)
 801717c:	659a      	str	r2, [r3, #88]	@ 0x58
 801717e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017180:	4a0c      	ldr	r2, [pc, #48]	@ (80171b4 <prvInitialiseNewTask+0x148>)
 8017182:	65da      	str	r2, [r3, #92]	@ 0x5c
 8017184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017186:	4a0c      	ldr	r2, [pc, #48]	@ (80171b8 <prvInitialiseNewTask+0x14c>)
 8017188:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801718a:	683a      	ldr	r2, [r7, #0]
 801718c:	68f9      	ldr	r1, [r7, #12]
 801718e:	69b8      	ldr	r0, [r7, #24]
 8017190:	f001 fc3e 	bl	8018a10 <pxPortInitialiseStack>
 8017194:	4602      	mov	r2, r0
 8017196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017198:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801719a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801719c:	2b00      	cmp	r3, #0
 801719e:	d002      	beq.n	80171a6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80171a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80171a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80171a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80171a6:	bf00      	nop
 80171a8:	3720      	adds	r7, #32
 80171aa:	46bd      	mov	sp, r7
 80171ac:	bd80      	pop	{r7, pc}
 80171ae:	bf00      	nop
 80171b0:	24005bbc 	.word	0x24005bbc
 80171b4:	24005c24 	.word	0x24005c24
 80171b8:	24005c8c 	.word	0x24005c8c

080171bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80171bc:	b580      	push	{r7, lr}
 80171be:	b082      	sub	sp, #8
 80171c0:	af00      	add	r7, sp, #0
 80171c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80171c4:	f001 fd58 	bl	8018c78 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80171c8:	4b2d      	ldr	r3, [pc, #180]	@ (8017280 <prvAddNewTaskToReadyList+0xc4>)
 80171ca:	681b      	ldr	r3, [r3, #0]
 80171cc:	3301      	adds	r3, #1
 80171ce:	4a2c      	ldr	r2, [pc, #176]	@ (8017280 <prvAddNewTaskToReadyList+0xc4>)
 80171d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80171d2:	4b2c      	ldr	r3, [pc, #176]	@ (8017284 <prvAddNewTaskToReadyList+0xc8>)
 80171d4:	681b      	ldr	r3, [r3, #0]
 80171d6:	2b00      	cmp	r3, #0
 80171d8:	d109      	bne.n	80171ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80171da:	4a2a      	ldr	r2, [pc, #168]	@ (8017284 <prvAddNewTaskToReadyList+0xc8>)
 80171dc:	687b      	ldr	r3, [r7, #4]
 80171de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80171e0:	4b27      	ldr	r3, [pc, #156]	@ (8017280 <prvAddNewTaskToReadyList+0xc4>)
 80171e2:	681b      	ldr	r3, [r3, #0]
 80171e4:	2b01      	cmp	r3, #1
 80171e6:	d110      	bne.n	801720a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80171e8:	f000 fe12 	bl	8017e10 <prvInitialiseTaskLists>
 80171ec:	e00d      	b.n	801720a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80171ee:	4b26      	ldr	r3, [pc, #152]	@ (8017288 <prvAddNewTaskToReadyList+0xcc>)
 80171f0:	681b      	ldr	r3, [r3, #0]
 80171f2:	2b00      	cmp	r3, #0
 80171f4:	d109      	bne.n	801720a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80171f6:	4b23      	ldr	r3, [pc, #140]	@ (8017284 <prvAddNewTaskToReadyList+0xc8>)
 80171f8:	681b      	ldr	r3, [r3, #0]
 80171fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80171fc:	687b      	ldr	r3, [r7, #4]
 80171fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017200:	429a      	cmp	r2, r3
 8017202:	d802      	bhi.n	801720a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8017204:	4a1f      	ldr	r2, [pc, #124]	@ (8017284 <prvAddNewTaskToReadyList+0xc8>)
 8017206:	687b      	ldr	r3, [r7, #4]
 8017208:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801720a:	4b20      	ldr	r3, [pc, #128]	@ (801728c <prvAddNewTaskToReadyList+0xd0>)
 801720c:	681b      	ldr	r3, [r3, #0]
 801720e:	3301      	adds	r3, #1
 8017210:	4a1e      	ldr	r2, [pc, #120]	@ (801728c <prvAddNewTaskToReadyList+0xd0>)
 8017212:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8017214:	4b1d      	ldr	r3, [pc, #116]	@ (801728c <prvAddNewTaskToReadyList+0xd0>)
 8017216:	681a      	ldr	r2, [r3, #0]
 8017218:	687b      	ldr	r3, [r7, #4]
 801721a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801721c:	687b      	ldr	r3, [r7, #4]
 801721e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017220:	4b1b      	ldr	r3, [pc, #108]	@ (8017290 <prvAddNewTaskToReadyList+0xd4>)
 8017222:	681b      	ldr	r3, [r3, #0]
 8017224:	429a      	cmp	r2, r3
 8017226:	d903      	bls.n	8017230 <prvAddNewTaskToReadyList+0x74>
 8017228:	687b      	ldr	r3, [r7, #4]
 801722a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801722c:	4a18      	ldr	r2, [pc, #96]	@ (8017290 <prvAddNewTaskToReadyList+0xd4>)
 801722e:	6013      	str	r3, [r2, #0]
 8017230:	687b      	ldr	r3, [r7, #4]
 8017232:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017234:	4613      	mov	r3, r2
 8017236:	009b      	lsls	r3, r3, #2
 8017238:	4413      	add	r3, r2
 801723a:	009b      	lsls	r3, r3, #2
 801723c:	4a15      	ldr	r2, [pc, #84]	@ (8017294 <prvAddNewTaskToReadyList+0xd8>)
 801723e:	441a      	add	r2, r3
 8017240:	687b      	ldr	r3, [r7, #4]
 8017242:	3304      	adds	r3, #4
 8017244:	4619      	mov	r1, r3
 8017246:	4610      	mov	r0, r2
 8017248:	f7fe fef5 	bl	8016036 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801724c:	f001 fd46 	bl	8018cdc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8017250:	4b0d      	ldr	r3, [pc, #52]	@ (8017288 <prvAddNewTaskToReadyList+0xcc>)
 8017252:	681b      	ldr	r3, [r3, #0]
 8017254:	2b00      	cmp	r3, #0
 8017256:	d00e      	beq.n	8017276 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8017258:	4b0a      	ldr	r3, [pc, #40]	@ (8017284 <prvAddNewTaskToReadyList+0xc8>)
 801725a:	681b      	ldr	r3, [r3, #0]
 801725c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801725e:	687b      	ldr	r3, [r7, #4]
 8017260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017262:	429a      	cmp	r2, r3
 8017264:	d207      	bcs.n	8017276 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8017266:	4b0c      	ldr	r3, [pc, #48]	@ (8017298 <prvAddNewTaskToReadyList+0xdc>)
 8017268:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801726c:	601a      	str	r2, [r3, #0]
 801726e:	f3bf 8f4f 	dsb	sy
 8017272:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017276:	bf00      	nop
 8017278:	3708      	adds	r7, #8
 801727a:	46bd      	mov	sp, r7
 801727c:	bd80      	pop	{r7, pc}
 801727e:	bf00      	nop
 8017280:	24001e3c 	.word	0x24001e3c
 8017284:	24001968 	.word	0x24001968
 8017288:	24001e48 	.word	0x24001e48
 801728c:	24001e58 	.word	0x24001e58
 8017290:	24001e44 	.word	0x24001e44
 8017294:	2400196c 	.word	0x2400196c
 8017298:	e000ed04 	.word	0xe000ed04

0801729c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 801729c:	b580      	push	{r7, lr}
 801729e:	b084      	sub	sp, #16
 80172a0:	af00      	add	r7, sp, #0
 80172a2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80172a4:	f001 fce8 	bl	8018c78 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80172a8:	687b      	ldr	r3, [r7, #4]
 80172aa:	2b00      	cmp	r3, #0
 80172ac:	d102      	bne.n	80172b4 <vTaskDelete+0x18>
 80172ae:	4b2d      	ldr	r3, [pc, #180]	@ (8017364 <vTaskDelete+0xc8>)
 80172b0:	681b      	ldr	r3, [r3, #0]
 80172b2:	e000      	b.n	80172b6 <vTaskDelete+0x1a>
 80172b4:	687b      	ldr	r3, [r7, #4]
 80172b6:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80172b8:	68fb      	ldr	r3, [r7, #12]
 80172ba:	3304      	adds	r3, #4
 80172bc:	4618      	mov	r0, r3
 80172be:	f7fe ff17 	bl	80160f0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80172c2:	68fb      	ldr	r3, [r7, #12]
 80172c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80172c6:	2b00      	cmp	r3, #0
 80172c8:	d004      	beq.n	80172d4 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80172ca:	68fb      	ldr	r3, [r7, #12]
 80172cc:	3318      	adds	r3, #24
 80172ce:	4618      	mov	r0, r3
 80172d0:	f7fe ff0e 	bl	80160f0 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80172d4:	4b24      	ldr	r3, [pc, #144]	@ (8017368 <vTaskDelete+0xcc>)
 80172d6:	681b      	ldr	r3, [r3, #0]
 80172d8:	3301      	adds	r3, #1
 80172da:	4a23      	ldr	r2, [pc, #140]	@ (8017368 <vTaskDelete+0xcc>)
 80172dc:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80172de:	4b21      	ldr	r3, [pc, #132]	@ (8017364 <vTaskDelete+0xc8>)
 80172e0:	681b      	ldr	r3, [r3, #0]
 80172e2:	68fa      	ldr	r2, [r7, #12]
 80172e4:	429a      	cmp	r2, r3
 80172e6:	d10b      	bne.n	8017300 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80172e8:	68fb      	ldr	r3, [r7, #12]
 80172ea:	3304      	adds	r3, #4
 80172ec:	4619      	mov	r1, r3
 80172ee:	481f      	ldr	r0, [pc, #124]	@ (801736c <vTaskDelete+0xd0>)
 80172f0:	f7fe fea1 	bl	8016036 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80172f4:	4b1e      	ldr	r3, [pc, #120]	@ (8017370 <vTaskDelete+0xd4>)
 80172f6:	681b      	ldr	r3, [r3, #0]
 80172f8:	3301      	adds	r3, #1
 80172fa:	4a1d      	ldr	r2, [pc, #116]	@ (8017370 <vTaskDelete+0xd4>)
 80172fc:	6013      	str	r3, [r2, #0]
 80172fe:	e009      	b.n	8017314 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8017300:	4b1c      	ldr	r3, [pc, #112]	@ (8017374 <vTaskDelete+0xd8>)
 8017302:	681b      	ldr	r3, [r3, #0]
 8017304:	3b01      	subs	r3, #1
 8017306:	4a1b      	ldr	r2, [pc, #108]	@ (8017374 <vTaskDelete+0xd8>)
 8017308:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 801730a:	68f8      	ldr	r0, [r7, #12]
 801730c:	f000 fdee 	bl	8017eec <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8017310:	f000 fe22 	bl	8017f58 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8017314:	f001 fce2 	bl	8018cdc <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8017318:	4b17      	ldr	r3, [pc, #92]	@ (8017378 <vTaskDelete+0xdc>)
 801731a:	681b      	ldr	r3, [r3, #0]
 801731c:	2b00      	cmp	r3, #0
 801731e:	d01c      	beq.n	801735a <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 8017320:	4b10      	ldr	r3, [pc, #64]	@ (8017364 <vTaskDelete+0xc8>)
 8017322:	681b      	ldr	r3, [r3, #0]
 8017324:	68fa      	ldr	r2, [r7, #12]
 8017326:	429a      	cmp	r2, r3
 8017328:	d117      	bne.n	801735a <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 801732a:	4b14      	ldr	r3, [pc, #80]	@ (801737c <vTaskDelete+0xe0>)
 801732c:	681b      	ldr	r3, [r3, #0]
 801732e:	2b00      	cmp	r3, #0
 8017330:	d00b      	beq.n	801734a <vTaskDelete+0xae>
	__asm volatile
 8017332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017336:	f383 8811 	msr	BASEPRI, r3
 801733a:	f3bf 8f6f 	isb	sy
 801733e:	f3bf 8f4f 	dsb	sy
 8017342:	60bb      	str	r3, [r7, #8]
}
 8017344:	bf00      	nop
 8017346:	bf00      	nop
 8017348:	e7fd      	b.n	8017346 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 801734a:	4b0d      	ldr	r3, [pc, #52]	@ (8017380 <vTaskDelete+0xe4>)
 801734c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017350:	601a      	str	r2, [r3, #0]
 8017352:	f3bf 8f4f 	dsb	sy
 8017356:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801735a:	bf00      	nop
 801735c:	3710      	adds	r7, #16
 801735e:	46bd      	mov	sp, r7
 8017360:	bd80      	pop	{r7, pc}
 8017362:	bf00      	nop
 8017364:	24001968 	.word	0x24001968
 8017368:	24001e58 	.word	0x24001e58
 801736c:	24001e10 	.word	0x24001e10
 8017370:	24001e24 	.word	0x24001e24
 8017374:	24001e3c 	.word	0x24001e3c
 8017378:	24001e48 	.word	0x24001e48
 801737c:	24001e64 	.word	0x24001e64
 8017380:	e000ed04 	.word	0xe000ed04

08017384 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8017384:	b580      	push	{r7, lr}
 8017386:	b084      	sub	sp, #16
 8017388:	af00      	add	r7, sp, #0
 801738a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801738c:	2300      	movs	r3, #0
 801738e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8017390:	687b      	ldr	r3, [r7, #4]
 8017392:	2b00      	cmp	r3, #0
 8017394:	d018      	beq.n	80173c8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8017396:	4b14      	ldr	r3, [pc, #80]	@ (80173e8 <vTaskDelay+0x64>)
 8017398:	681b      	ldr	r3, [r3, #0]
 801739a:	2b00      	cmp	r3, #0
 801739c:	d00b      	beq.n	80173b6 <vTaskDelay+0x32>
	__asm volatile
 801739e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80173a2:	f383 8811 	msr	BASEPRI, r3
 80173a6:	f3bf 8f6f 	isb	sy
 80173aa:	f3bf 8f4f 	dsb	sy
 80173ae:	60bb      	str	r3, [r7, #8]
}
 80173b0:	bf00      	nop
 80173b2:	bf00      	nop
 80173b4:	e7fd      	b.n	80173b2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80173b6:	f000 f9fb 	bl	80177b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80173ba:	2100      	movs	r1, #0
 80173bc:	6878      	ldr	r0, [r7, #4]
 80173be:	f000 ff79 	bl	80182b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80173c2:	f000 fa03 	bl	80177cc <xTaskResumeAll>
 80173c6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80173c8:	68fb      	ldr	r3, [r7, #12]
 80173ca:	2b00      	cmp	r3, #0
 80173cc:	d107      	bne.n	80173de <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80173ce:	4b07      	ldr	r3, [pc, #28]	@ (80173ec <vTaskDelay+0x68>)
 80173d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80173d4:	601a      	str	r2, [r3, #0]
 80173d6:	f3bf 8f4f 	dsb	sy
 80173da:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80173de:	bf00      	nop
 80173e0:	3710      	adds	r7, #16
 80173e2:	46bd      	mov	sp, r7
 80173e4:	bd80      	pop	{r7, pc}
 80173e6:	bf00      	nop
 80173e8:	24001e64 	.word	0x24001e64
 80173ec:	e000ed04 	.word	0xe000ed04

080173f0 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 80173f0:	b580      	push	{r7, lr}
 80173f2:	b088      	sub	sp, #32
 80173f4:	af00      	add	r7, sp, #0
 80173f6:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 80173f8:	687b      	ldr	r3, [r7, #4]
 80173fa:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 80173fc:	69bb      	ldr	r3, [r7, #24]
 80173fe:	2b00      	cmp	r3, #0
 8017400:	d10b      	bne.n	801741a <eTaskGetState+0x2a>
	__asm volatile
 8017402:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017406:	f383 8811 	msr	BASEPRI, r3
 801740a:	f3bf 8f6f 	isb	sy
 801740e:	f3bf 8f4f 	dsb	sy
 8017412:	60bb      	str	r3, [r7, #8]
}
 8017414:	bf00      	nop
 8017416:	bf00      	nop
 8017418:	e7fd      	b.n	8017416 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 801741a:	4b24      	ldr	r3, [pc, #144]	@ (80174ac <eTaskGetState+0xbc>)
 801741c:	681b      	ldr	r3, [r3, #0]
 801741e:	69ba      	ldr	r2, [r7, #24]
 8017420:	429a      	cmp	r2, r3
 8017422:	d102      	bne.n	801742a <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8017424:	2300      	movs	r3, #0
 8017426:	77fb      	strb	r3, [r7, #31]
 8017428:	e03a      	b.n	80174a0 <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 801742a:	f001 fc25 	bl	8018c78 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 801742e:	69bb      	ldr	r3, [r7, #24]
 8017430:	695b      	ldr	r3, [r3, #20]
 8017432:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8017434:	4b1e      	ldr	r3, [pc, #120]	@ (80174b0 <eTaskGetState+0xc0>)
 8017436:	681b      	ldr	r3, [r3, #0]
 8017438:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 801743a:	4b1e      	ldr	r3, [pc, #120]	@ (80174b4 <eTaskGetState+0xc4>)
 801743c:	681b      	ldr	r3, [r3, #0]
 801743e:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8017440:	f001 fc4c 	bl	8018cdc <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8017444:	697a      	ldr	r2, [r7, #20]
 8017446:	693b      	ldr	r3, [r7, #16]
 8017448:	429a      	cmp	r2, r3
 801744a:	d003      	beq.n	8017454 <eTaskGetState+0x64>
 801744c:	697a      	ldr	r2, [r7, #20]
 801744e:	68fb      	ldr	r3, [r7, #12]
 8017450:	429a      	cmp	r2, r3
 8017452:	d102      	bne.n	801745a <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8017454:	2302      	movs	r3, #2
 8017456:	77fb      	strb	r3, [r7, #31]
 8017458:	e022      	b.n	80174a0 <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 801745a:	697b      	ldr	r3, [r7, #20]
 801745c:	4a16      	ldr	r2, [pc, #88]	@ (80174b8 <eTaskGetState+0xc8>)
 801745e:	4293      	cmp	r3, r2
 8017460:	d112      	bne.n	8017488 <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8017462:	69bb      	ldr	r3, [r7, #24]
 8017464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017466:	2b00      	cmp	r3, #0
 8017468:	d10b      	bne.n	8017482 <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 801746a:	69bb      	ldr	r3, [r7, #24]
 801746c:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8017470:	b2db      	uxtb	r3, r3
 8017472:	2b01      	cmp	r3, #1
 8017474:	d102      	bne.n	801747c <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 8017476:	2302      	movs	r3, #2
 8017478:	77fb      	strb	r3, [r7, #31]
 801747a:	e011      	b.n	80174a0 <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 801747c:	2303      	movs	r3, #3
 801747e:	77fb      	strb	r3, [r7, #31]
 8017480:	e00e      	b.n	80174a0 <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8017482:	2302      	movs	r3, #2
 8017484:	77fb      	strb	r3, [r7, #31]
 8017486:	e00b      	b.n	80174a0 <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8017488:	697b      	ldr	r3, [r7, #20]
 801748a:	4a0c      	ldr	r2, [pc, #48]	@ (80174bc <eTaskGetState+0xcc>)
 801748c:	4293      	cmp	r3, r2
 801748e:	d002      	beq.n	8017496 <eTaskGetState+0xa6>
 8017490:	697b      	ldr	r3, [r7, #20]
 8017492:	2b00      	cmp	r3, #0
 8017494:	d102      	bne.n	801749c <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8017496:	2304      	movs	r3, #4
 8017498:	77fb      	strb	r3, [r7, #31]
 801749a:	e001      	b.n	80174a0 <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 801749c:	2301      	movs	r3, #1
 801749e:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 80174a0:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80174a2:	4618      	mov	r0, r3
 80174a4:	3720      	adds	r7, #32
 80174a6:	46bd      	mov	sp, r7
 80174a8:	bd80      	pop	{r7, pc}
 80174aa:	bf00      	nop
 80174ac:	24001968 	.word	0x24001968
 80174b0:	24001df4 	.word	0x24001df4
 80174b4:	24001df8 	.word	0x24001df8
 80174b8:	24001e28 	.word	0x24001e28
 80174bc:	24001e10 	.word	0x24001e10

080174c0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80174c0:	b580      	push	{r7, lr}
 80174c2:	b084      	sub	sp, #16
 80174c4:	af00      	add	r7, sp, #0
 80174c6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80174c8:	f001 fbd6 	bl	8018c78 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80174cc:	687b      	ldr	r3, [r7, #4]
 80174ce:	2b00      	cmp	r3, #0
 80174d0:	d102      	bne.n	80174d8 <vTaskSuspend+0x18>
 80174d2:	4b30      	ldr	r3, [pc, #192]	@ (8017594 <vTaskSuspend+0xd4>)
 80174d4:	681b      	ldr	r3, [r3, #0]
 80174d6:	e000      	b.n	80174da <vTaskSuspend+0x1a>
 80174d8:	687b      	ldr	r3, [r7, #4]
 80174da:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80174dc:	68fb      	ldr	r3, [r7, #12]
 80174de:	3304      	adds	r3, #4
 80174e0:	4618      	mov	r0, r3
 80174e2:	f7fe fe05 	bl	80160f0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80174e6:	68fb      	ldr	r3, [r7, #12]
 80174e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80174ea:	2b00      	cmp	r3, #0
 80174ec:	d004      	beq.n	80174f8 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80174ee:	68fb      	ldr	r3, [r7, #12]
 80174f0:	3318      	adds	r3, #24
 80174f2:	4618      	mov	r0, r3
 80174f4:	f7fe fdfc 	bl	80160f0 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80174f8:	68fb      	ldr	r3, [r7, #12]
 80174fa:	3304      	adds	r3, #4
 80174fc:	4619      	mov	r1, r3
 80174fe:	4826      	ldr	r0, [pc, #152]	@ (8017598 <vTaskSuspend+0xd8>)
 8017500:	f7fe fd99 	bl	8016036 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8017504:	68fb      	ldr	r3, [r7, #12]
 8017506:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 801750a:	b2db      	uxtb	r3, r3
 801750c:	2b01      	cmp	r3, #1
 801750e:	d103      	bne.n	8017518 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8017510:	68fb      	ldr	r3, [r7, #12]
 8017512:	2200      	movs	r2, #0
 8017514:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8017518:	f001 fbe0 	bl	8018cdc <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 801751c:	4b1f      	ldr	r3, [pc, #124]	@ (801759c <vTaskSuspend+0xdc>)
 801751e:	681b      	ldr	r3, [r3, #0]
 8017520:	2b00      	cmp	r3, #0
 8017522:	d005      	beq.n	8017530 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8017524:	f001 fba8 	bl	8018c78 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8017528:	f000 fd16 	bl	8017f58 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 801752c:	f001 fbd6 	bl	8018cdc <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8017530:	4b18      	ldr	r3, [pc, #96]	@ (8017594 <vTaskSuspend+0xd4>)
 8017532:	681b      	ldr	r3, [r3, #0]
 8017534:	68fa      	ldr	r2, [r7, #12]
 8017536:	429a      	cmp	r2, r3
 8017538:	d128      	bne.n	801758c <vTaskSuspend+0xcc>
		{
			if( xSchedulerRunning != pdFALSE )
 801753a:	4b18      	ldr	r3, [pc, #96]	@ (801759c <vTaskSuspend+0xdc>)
 801753c:	681b      	ldr	r3, [r3, #0]
 801753e:	2b00      	cmp	r3, #0
 8017540:	d018      	beq.n	8017574 <vTaskSuspend+0xb4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8017542:	4b17      	ldr	r3, [pc, #92]	@ (80175a0 <vTaskSuspend+0xe0>)
 8017544:	681b      	ldr	r3, [r3, #0]
 8017546:	2b00      	cmp	r3, #0
 8017548:	d00b      	beq.n	8017562 <vTaskSuspend+0xa2>
	__asm volatile
 801754a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801754e:	f383 8811 	msr	BASEPRI, r3
 8017552:	f3bf 8f6f 	isb	sy
 8017556:	f3bf 8f4f 	dsb	sy
 801755a:	60bb      	str	r3, [r7, #8]
}
 801755c:	bf00      	nop
 801755e:	bf00      	nop
 8017560:	e7fd      	b.n	801755e <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8017562:	4b10      	ldr	r3, [pc, #64]	@ (80175a4 <vTaskSuspend+0xe4>)
 8017564:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017568:	601a      	str	r2, [r3, #0]
 801756a:	f3bf 8f4f 	dsb	sy
 801756e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8017572:	e00b      	b.n	801758c <vTaskSuspend+0xcc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8017574:	4b08      	ldr	r3, [pc, #32]	@ (8017598 <vTaskSuspend+0xd8>)
 8017576:	681a      	ldr	r2, [r3, #0]
 8017578:	4b0b      	ldr	r3, [pc, #44]	@ (80175a8 <vTaskSuspend+0xe8>)
 801757a:	681b      	ldr	r3, [r3, #0]
 801757c:	429a      	cmp	r2, r3
 801757e:	d103      	bne.n	8017588 <vTaskSuspend+0xc8>
					pxCurrentTCB = NULL;
 8017580:	4b04      	ldr	r3, [pc, #16]	@ (8017594 <vTaskSuspend+0xd4>)
 8017582:	2200      	movs	r2, #0
 8017584:	601a      	str	r2, [r3, #0]
	}
 8017586:	e001      	b.n	801758c <vTaskSuspend+0xcc>
					vTaskSwitchContext();
 8017588:	f000 fa88 	bl	8017a9c <vTaskSwitchContext>
	}
 801758c:	bf00      	nop
 801758e:	3710      	adds	r7, #16
 8017590:	46bd      	mov	sp, r7
 8017592:	bd80      	pop	{r7, pc}
 8017594:	24001968 	.word	0x24001968
 8017598:	24001e28 	.word	0x24001e28
 801759c:	24001e48 	.word	0x24001e48
 80175a0:	24001e64 	.word	0x24001e64
 80175a4:	e000ed04 	.word	0xe000ed04
 80175a8:	24001e3c 	.word	0x24001e3c

080175ac <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80175ac:	b480      	push	{r7}
 80175ae:	b087      	sub	sp, #28
 80175b0:	af00      	add	r7, sp, #0
 80175b2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80175b4:	2300      	movs	r3, #0
 80175b6:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 80175b8:	687b      	ldr	r3, [r7, #4]
 80175ba:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80175bc:	687b      	ldr	r3, [r7, #4]
 80175be:	2b00      	cmp	r3, #0
 80175c0:	d10b      	bne.n	80175da <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 80175c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80175c6:	f383 8811 	msr	BASEPRI, r3
 80175ca:	f3bf 8f6f 	isb	sy
 80175ce:	f3bf 8f4f 	dsb	sy
 80175d2:	60fb      	str	r3, [r7, #12]
}
 80175d4:	bf00      	nop
 80175d6:	bf00      	nop
 80175d8:	e7fd      	b.n	80175d6 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80175da:	693b      	ldr	r3, [r7, #16]
 80175dc:	695b      	ldr	r3, [r3, #20]
 80175de:	4a0a      	ldr	r2, [pc, #40]	@ (8017608 <prvTaskIsTaskSuspended+0x5c>)
 80175e0:	4293      	cmp	r3, r2
 80175e2:	d10a      	bne.n	80175fa <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80175e4:	693b      	ldr	r3, [r7, #16]
 80175e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80175e8:	4a08      	ldr	r2, [pc, #32]	@ (801760c <prvTaskIsTaskSuspended+0x60>)
 80175ea:	4293      	cmp	r3, r2
 80175ec:	d005      	beq.n	80175fa <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80175ee:	693b      	ldr	r3, [r7, #16]
 80175f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80175f2:	2b00      	cmp	r3, #0
 80175f4:	d101      	bne.n	80175fa <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 80175f6:	2301      	movs	r3, #1
 80175f8:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80175fa:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80175fc:	4618      	mov	r0, r3
 80175fe:	371c      	adds	r7, #28
 8017600:	46bd      	mov	sp, r7
 8017602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017606:	4770      	bx	lr
 8017608:	24001e28 	.word	0x24001e28
 801760c:	24001dfc 	.word	0x24001dfc

08017610 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8017610:	b580      	push	{r7, lr}
 8017612:	b084      	sub	sp, #16
 8017614:	af00      	add	r7, sp, #0
 8017616:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8017618:	687b      	ldr	r3, [r7, #4]
 801761a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 801761c:	687b      	ldr	r3, [r7, #4]
 801761e:	2b00      	cmp	r3, #0
 8017620:	d10b      	bne.n	801763a <vTaskResume+0x2a>
	__asm volatile
 8017622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017626:	f383 8811 	msr	BASEPRI, r3
 801762a:	f3bf 8f6f 	isb	sy
 801762e:	f3bf 8f4f 	dsb	sy
 8017632:	60bb      	str	r3, [r7, #8]
}
 8017634:	bf00      	nop
 8017636:	bf00      	nop
 8017638:	e7fd      	b.n	8017636 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 801763a:	4b21      	ldr	r3, [pc, #132]	@ (80176c0 <vTaskResume+0xb0>)
 801763c:	681b      	ldr	r3, [r3, #0]
 801763e:	68fa      	ldr	r2, [r7, #12]
 8017640:	429a      	cmp	r2, r3
 8017642:	d038      	beq.n	80176b6 <vTaskResume+0xa6>
 8017644:	68fb      	ldr	r3, [r7, #12]
 8017646:	2b00      	cmp	r3, #0
 8017648:	d035      	beq.n	80176b6 <vTaskResume+0xa6>
		{
			taskENTER_CRITICAL();
 801764a:	f001 fb15 	bl	8018c78 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 801764e:	68f8      	ldr	r0, [r7, #12]
 8017650:	f7ff ffac 	bl	80175ac <prvTaskIsTaskSuspended>
 8017654:	4603      	mov	r3, r0
 8017656:	2b00      	cmp	r3, #0
 8017658:	d02b      	beq.n	80176b2 <vTaskResume+0xa2>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 801765a:	68fb      	ldr	r3, [r7, #12]
 801765c:	3304      	adds	r3, #4
 801765e:	4618      	mov	r0, r3
 8017660:	f7fe fd46 	bl	80160f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8017664:	68fb      	ldr	r3, [r7, #12]
 8017666:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017668:	4b16      	ldr	r3, [pc, #88]	@ (80176c4 <vTaskResume+0xb4>)
 801766a:	681b      	ldr	r3, [r3, #0]
 801766c:	429a      	cmp	r2, r3
 801766e:	d903      	bls.n	8017678 <vTaskResume+0x68>
 8017670:	68fb      	ldr	r3, [r7, #12]
 8017672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017674:	4a13      	ldr	r2, [pc, #76]	@ (80176c4 <vTaskResume+0xb4>)
 8017676:	6013      	str	r3, [r2, #0]
 8017678:	68fb      	ldr	r3, [r7, #12]
 801767a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801767c:	4613      	mov	r3, r2
 801767e:	009b      	lsls	r3, r3, #2
 8017680:	4413      	add	r3, r2
 8017682:	009b      	lsls	r3, r3, #2
 8017684:	4a10      	ldr	r2, [pc, #64]	@ (80176c8 <vTaskResume+0xb8>)
 8017686:	441a      	add	r2, r3
 8017688:	68fb      	ldr	r3, [r7, #12]
 801768a:	3304      	adds	r3, #4
 801768c:	4619      	mov	r1, r3
 801768e:	4610      	mov	r0, r2
 8017690:	f7fe fcd1 	bl	8016036 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017694:	68fb      	ldr	r3, [r7, #12]
 8017696:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017698:	4b09      	ldr	r3, [pc, #36]	@ (80176c0 <vTaskResume+0xb0>)
 801769a:	681b      	ldr	r3, [r3, #0]
 801769c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801769e:	429a      	cmp	r2, r3
 80176a0:	d307      	bcc.n	80176b2 <vTaskResume+0xa2>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 80176a2:	4b0a      	ldr	r3, [pc, #40]	@ (80176cc <vTaskResume+0xbc>)
 80176a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80176a8:	601a      	str	r2, [r3, #0]
 80176aa:	f3bf 8f4f 	dsb	sy
 80176ae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 80176b2:	f001 fb13 	bl	8018cdc <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80176b6:	bf00      	nop
 80176b8:	3710      	adds	r7, #16
 80176ba:	46bd      	mov	sp, r7
 80176bc:	bd80      	pop	{r7, pc}
 80176be:	bf00      	nop
 80176c0:	24001968 	.word	0x24001968
 80176c4:	24001e44 	.word	0x24001e44
 80176c8:	2400196c 	.word	0x2400196c
 80176cc:	e000ed04 	.word	0xe000ed04

080176d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80176d0:	b580      	push	{r7, lr}
 80176d2:	b08a      	sub	sp, #40	@ 0x28
 80176d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80176d6:	2300      	movs	r3, #0
 80176d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80176da:	2300      	movs	r3, #0
 80176dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80176de:	463a      	mov	r2, r7
 80176e0:	1d39      	adds	r1, r7, #4
 80176e2:	f107 0308 	add.w	r3, r7, #8
 80176e6:	4618      	mov	r0, r3
 80176e8:	f7fe fc44 	bl	8015f74 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80176ec:	6839      	ldr	r1, [r7, #0]
 80176ee:	687b      	ldr	r3, [r7, #4]
 80176f0:	68ba      	ldr	r2, [r7, #8]
 80176f2:	9202      	str	r2, [sp, #8]
 80176f4:	9301      	str	r3, [sp, #4]
 80176f6:	2300      	movs	r3, #0
 80176f8:	9300      	str	r3, [sp, #0]
 80176fa:	2300      	movs	r3, #0
 80176fc:	460a      	mov	r2, r1
 80176fe:	4924      	ldr	r1, [pc, #144]	@ (8017790 <vTaskStartScheduler+0xc0>)
 8017700:	4824      	ldr	r0, [pc, #144]	@ (8017794 <vTaskStartScheduler+0xc4>)
 8017702:	f7ff fc0d 	bl	8016f20 <xTaskCreateStatic>
 8017706:	4603      	mov	r3, r0
 8017708:	4a23      	ldr	r2, [pc, #140]	@ (8017798 <vTaskStartScheduler+0xc8>)
 801770a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801770c:	4b22      	ldr	r3, [pc, #136]	@ (8017798 <vTaskStartScheduler+0xc8>)
 801770e:	681b      	ldr	r3, [r3, #0]
 8017710:	2b00      	cmp	r3, #0
 8017712:	d002      	beq.n	801771a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8017714:	2301      	movs	r3, #1
 8017716:	617b      	str	r3, [r7, #20]
 8017718:	e001      	b.n	801771e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801771a:	2300      	movs	r3, #0
 801771c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801771e:	697b      	ldr	r3, [r7, #20]
 8017720:	2b01      	cmp	r3, #1
 8017722:	d102      	bne.n	801772a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8017724:	f000 fe1a 	bl	801835c <xTimerCreateTimerTask>
 8017728:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801772a:	697b      	ldr	r3, [r7, #20]
 801772c:	2b01      	cmp	r3, #1
 801772e:	d11b      	bne.n	8017768 <vTaskStartScheduler+0x98>
	__asm volatile
 8017730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017734:	f383 8811 	msr	BASEPRI, r3
 8017738:	f3bf 8f6f 	isb	sy
 801773c:	f3bf 8f4f 	dsb	sy
 8017740:	613b      	str	r3, [r7, #16]
}
 8017742:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8017744:	4b15      	ldr	r3, [pc, #84]	@ (801779c <vTaskStartScheduler+0xcc>)
 8017746:	681b      	ldr	r3, [r3, #0]
 8017748:	3354      	adds	r3, #84	@ 0x54
 801774a:	4a15      	ldr	r2, [pc, #84]	@ (80177a0 <vTaskStartScheduler+0xd0>)
 801774c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801774e:	4b15      	ldr	r3, [pc, #84]	@ (80177a4 <vTaskStartScheduler+0xd4>)
 8017750:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017754:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8017756:	4b14      	ldr	r3, [pc, #80]	@ (80177a8 <vTaskStartScheduler+0xd8>)
 8017758:	2201      	movs	r2, #1
 801775a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801775c:	4b13      	ldr	r3, [pc, #76]	@ (80177ac <vTaskStartScheduler+0xdc>)
 801775e:	2200      	movs	r2, #0
 8017760:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8017762:	f001 f9e5 	bl	8018b30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8017766:	e00f      	b.n	8017788 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8017768:	697b      	ldr	r3, [r7, #20]
 801776a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801776e:	d10b      	bne.n	8017788 <vTaskStartScheduler+0xb8>
	__asm volatile
 8017770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017774:	f383 8811 	msr	BASEPRI, r3
 8017778:	f3bf 8f6f 	isb	sy
 801777c:	f3bf 8f4f 	dsb	sy
 8017780:	60fb      	str	r3, [r7, #12]
}
 8017782:	bf00      	nop
 8017784:	bf00      	nop
 8017786:	e7fd      	b.n	8017784 <vTaskStartScheduler+0xb4>
}
 8017788:	bf00      	nop
 801778a:	3718      	adds	r7, #24
 801778c:	46bd      	mov	sp, r7
 801778e:	bd80      	pop	{r7, pc}
 8017790:	0801f830 	.word	0x0801f830
 8017794:	08017de1 	.word	0x08017de1
 8017798:	24001e60 	.word	0x24001e60
 801779c:	24001968 	.word	0x24001968
 80177a0:	240001a4 	.word	0x240001a4
 80177a4:	24001e5c 	.word	0x24001e5c
 80177a8:	24001e48 	.word	0x24001e48
 80177ac:	24001e40 	.word	0x24001e40

080177b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80177b0:	b480      	push	{r7}
 80177b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80177b4:	4b04      	ldr	r3, [pc, #16]	@ (80177c8 <vTaskSuspendAll+0x18>)
 80177b6:	681b      	ldr	r3, [r3, #0]
 80177b8:	3301      	adds	r3, #1
 80177ba:	4a03      	ldr	r2, [pc, #12]	@ (80177c8 <vTaskSuspendAll+0x18>)
 80177bc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80177be:	bf00      	nop
 80177c0:	46bd      	mov	sp, r7
 80177c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177c6:	4770      	bx	lr
 80177c8:	24001e64 	.word	0x24001e64

080177cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80177cc:	b580      	push	{r7, lr}
 80177ce:	b084      	sub	sp, #16
 80177d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80177d2:	2300      	movs	r3, #0
 80177d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80177d6:	2300      	movs	r3, #0
 80177d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80177da:	4b42      	ldr	r3, [pc, #264]	@ (80178e4 <xTaskResumeAll+0x118>)
 80177dc:	681b      	ldr	r3, [r3, #0]
 80177de:	2b00      	cmp	r3, #0
 80177e0:	d10b      	bne.n	80177fa <xTaskResumeAll+0x2e>
	__asm volatile
 80177e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80177e6:	f383 8811 	msr	BASEPRI, r3
 80177ea:	f3bf 8f6f 	isb	sy
 80177ee:	f3bf 8f4f 	dsb	sy
 80177f2:	603b      	str	r3, [r7, #0]
}
 80177f4:	bf00      	nop
 80177f6:	bf00      	nop
 80177f8:	e7fd      	b.n	80177f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80177fa:	f001 fa3d 	bl	8018c78 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80177fe:	4b39      	ldr	r3, [pc, #228]	@ (80178e4 <xTaskResumeAll+0x118>)
 8017800:	681b      	ldr	r3, [r3, #0]
 8017802:	3b01      	subs	r3, #1
 8017804:	4a37      	ldr	r2, [pc, #220]	@ (80178e4 <xTaskResumeAll+0x118>)
 8017806:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017808:	4b36      	ldr	r3, [pc, #216]	@ (80178e4 <xTaskResumeAll+0x118>)
 801780a:	681b      	ldr	r3, [r3, #0]
 801780c:	2b00      	cmp	r3, #0
 801780e:	d162      	bne.n	80178d6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8017810:	4b35      	ldr	r3, [pc, #212]	@ (80178e8 <xTaskResumeAll+0x11c>)
 8017812:	681b      	ldr	r3, [r3, #0]
 8017814:	2b00      	cmp	r3, #0
 8017816:	d05e      	beq.n	80178d6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8017818:	e02f      	b.n	801787a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801781a:	4b34      	ldr	r3, [pc, #208]	@ (80178ec <xTaskResumeAll+0x120>)
 801781c:	68db      	ldr	r3, [r3, #12]
 801781e:	68db      	ldr	r3, [r3, #12]
 8017820:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017822:	68fb      	ldr	r3, [r7, #12]
 8017824:	3318      	adds	r3, #24
 8017826:	4618      	mov	r0, r3
 8017828:	f7fe fc62 	bl	80160f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801782c:	68fb      	ldr	r3, [r7, #12]
 801782e:	3304      	adds	r3, #4
 8017830:	4618      	mov	r0, r3
 8017832:	f7fe fc5d 	bl	80160f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8017836:	68fb      	ldr	r3, [r7, #12]
 8017838:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801783a:	4b2d      	ldr	r3, [pc, #180]	@ (80178f0 <xTaskResumeAll+0x124>)
 801783c:	681b      	ldr	r3, [r3, #0]
 801783e:	429a      	cmp	r2, r3
 8017840:	d903      	bls.n	801784a <xTaskResumeAll+0x7e>
 8017842:	68fb      	ldr	r3, [r7, #12]
 8017844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017846:	4a2a      	ldr	r2, [pc, #168]	@ (80178f0 <xTaskResumeAll+0x124>)
 8017848:	6013      	str	r3, [r2, #0]
 801784a:	68fb      	ldr	r3, [r7, #12]
 801784c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801784e:	4613      	mov	r3, r2
 8017850:	009b      	lsls	r3, r3, #2
 8017852:	4413      	add	r3, r2
 8017854:	009b      	lsls	r3, r3, #2
 8017856:	4a27      	ldr	r2, [pc, #156]	@ (80178f4 <xTaskResumeAll+0x128>)
 8017858:	441a      	add	r2, r3
 801785a:	68fb      	ldr	r3, [r7, #12]
 801785c:	3304      	adds	r3, #4
 801785e:	4619      	mov	r1, r3
 8017860:	4610      	mov	r0, r2
 8017862:	f7fe fbe8 	bl	8016036 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017866:	68fb      	ldr	r3, [r7, #12]
 8017868:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801786a:	4b23      	ldr	r3, [pc, #140]	@ (80178f8 <xTaskResumeAll+0x12c>)
 801786c:	681b      	ldr	r3, [r3, #0]
 801786e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017870:	429a      	cmp	r2, r3
 8017872:	d302      	bcc.n	801787a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8017874:	4b21      	ldr	r3, [pc, #132]	@ (80178fc <xTaskResumeAll+0x130>)
 8017876:	2201      	movs	r2, #1
 8017878:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801787a:	4b1c      	ldr	r3, [pc, #112]	@ (80178ec <xTaskResumeAll+0x120>)
 801787c:	681b      	ldr	r3, [r3, #0]
 801787e:	2b00      	cmp	r3, #0
 8017880:	d1cb      	bne.n	801781a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8017882:	68fb      	ldr	r3, [r7, #12]
 8017884:	2b00      	cmp	r3, #0
 8017886:	d001      	beq.n	801788c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8017888:	f000 fb66 	bl	8017f58 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801788c:	4b1c      	ldr	r3, [pc, #112]	@ (8017900 <xTaskResumeAll+0x134>)
 801788e:	681b      	ldr	r3, [r3, #0]
 8017890:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8017892:	687b      	ldr	r3, [r7, #4]
 8017894:	2b00      	cmp	r3, #0
 8017896:	d010      	beq.n	80178ba <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8017898:	f000 f846 	bl	8017928 <xTaskIncrementTick>
 801789c:	4603      	mov	r3, r0
 801789e:	2b00      	cmp	r3, #0
 80178a0:	d002      	beq.n	80178a8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80178a2:	4b16      	ldr	r3, [pc, #88]	@ (80178fc <xTaskResumeAll+0x130>)
 80178a4:	2201      	movs	r2, #1
 80178a6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80178a8:	687b      	ldr	r3, [r7, #4]
 80178aa:	3b01      	subs	r3, #1
 80178ac:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80178ae:	687b      	ldr	r3, [r7, #4]
 80178b0:	2b00      	cmp	r3, #0
 80178b2:	d1f1      	bne.n	8017898 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80178b4:	4b12      	ldr	r3, [pc, #72]	@ (8017900 <xTaskResumeAll+0x134>)
 80178b6:	2200      	movs	r2, #0
 80178b8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80178ba:	4b10      	ldr	r3, [pc, #64]	@ (80178fc <xTaskResumeAll+0x130>)
 80178bc:	681b      	ldr	r3, [r3, #0]
 80178be:	2b00      	cmp	r3, #0
 80178c0:	d009      	beq.n	80178d6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80178c2:	2301      	movs	r3, #1
 80178c4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80178c6:	4b0f      	ldr	r3, [pc, #60]	@ (8017904 <xTaskResumeAll+0x138>)
 80178c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80178cc:	601a      	str	r2, [r3, #0]
 80178ce:	f3bf 8f4f 	dsb	sy
 80178d2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80178d6:	f001 fa01 	bl	8018cdc <vPortExitCritical>

	return xAlreadyYielded;
 80178da:	68bb      	ldr	r3, [r7, #8]
}
 80178dc:	4618      	mov	r0, r3
 80178de:	3710      	adds	r7, #16
 80178e0:	46bd      	mov	sp, r7
 80178e2:	bd80      	pop	{r7, pc}
 80178e4:	24001e64 	.word	0x24001e64
 80178e8:	24001e3c 	.word	0x24001e3c
 80178ec:	24001dfc 	.word	0x24001dfc
 80178f0:	24001e44 	.word	0x24001e44
 80178f4:	2400196c 	.word	0x2400196c
 80178f8:	24001968 	.word	0x24001968
 80178fc:	24001e50 	.word	0x24001e50
 8017900:	24001e4c 	.word	0x24001e4c
 8017904:	e000ed04 	.word	0xe000ed04

08017908 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8017908:	b480      	push	{r7}
 801790a:	b083      	sub	sp, #12
 801790c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801790e:	4b05      	ldr	r3, [pc, #20]	@ (8017924 <xTaskGetTickCount+0x1c>)
 8017910:	681b      	ldr	r3, [r3, #0]
 8017912:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8017914:	687b      	ldr	r3, [r7, #4]
}
 8017916:	4618      	mov	r0, r3
 8017918:	370c      	adds	r7, #12
 801791a:	46bd      	mov	sp, r7
 801791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017920:	4770      	bx	lr
 8017922:	bf00      	nop
 8017924:	24001e40 	.word	0x24001e40

08017928 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8017928:	b580      	push	{r7, lr}
 801792a:	b086      	sub	sp, #24
 801792c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801792e:	2300      	movs	r3, #0
 8017930:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017932:	4b4f      	ldr	r3, [pc, #316]	@ (8017a70 <xTaskIncrementTick+0x148>)
 8017934:	681b      	ldr	r3, [r3, #0]
 8017936:	2b00      	cmp	r3, #0
 8017938:	f040 8090 	bne.w	8017a5c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801793c:	4b4d      	ldr	r3, [pc, #308]	@ (8017a74 <xTaskIncrementTick+0x14c>)
 801793e:	681b      	ldr	r3, [r3, #0]
 8017940:	3301      	adds	r3, #1
 8017942:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8017944:	4a4b      	ldr	r2, [pc, #300]	@ (8017a74 <xTaskIncrementTick+0x14c>)
 8017946:	693b      	ldr	r3, [r7, #16]
 8017948:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801794a:	693b      	ldr	r3, [r7, #16]
 801794c:	2b00      	cmp	r3, #0
 801794e:	d121      	bne.n	8017994 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8017950:	4b49      	ldr	r3, [pc, #292]	@ (8017a78 <xTaskIncrementTick+0x150>)
 8017952:	681b      	ldr	r3, [r3, #0]
 8017954:	681b      	ldr	r3, [r3, #0]
 8017956:	2b00      	cmp	r3, #0
 8017958:	d00b      	beq.n	8017972 <xTaskIncrementTick+0x4a>
	__asm volatile
 801795a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801795e:	f383 8811 	msr	BASEPRI, r3
 8017962:	f3bf 8f6f 	isb	sy
 8017966:	f3bf 8f4f 	dsb	sy
 801796a:	603b      	str	r3, [r7, #0]
}
 801796c:	bf00      	nop
 801796e:	bf00      	nop
 8017970:	e7fd      	b.n	801796e <xTaskIncrementTick+0x46>
 8017972:	4b41      	ldr	r3, [pc, #260]	@ (8017a78 <xTaskIncrementTick+0x150>)
 8017974:	681b      	ldr	r3, [r3, #0]
 8017976:	60fb      	str	r3, [r7, #12]
 8017978:	4b40      	ldr	r3, [pc, #256]	@ (8017a7c <xTaskIncrementTick+0x154>)
 801797a:	681b      	ldr	r3, [r3, #0]
 801797c:	4a3e      	ldr	r2, [pc, #248]	@ (8017a78 <xTaskIncrementTick+0x150>)
 801797e:	6013      	str	r3, [r2, #0]
 8017980:	4a3e      	ldr	r2, [pc, #248]	@ (8017a7c <xTaskIncrementTick+0x154>)
 8017982:	68fb      	ldr	r3, [r7, #12]
 8017984:	6013      	str	r3, [r2, #0]
 8017986:	4b3e      	ldr	r3, [pc, #248]	@ (8017a80 <xTaskIncrementTick+0x158>)
 8017988:	681b      	ldr	r3, [r3, #0]
 801798a:	3301      	adds	r3, #1
 801798c:	4a3c      	ldr	r2, [pc, #240]	@ (8017a80 <xTaskIncrementTick+0x158>)
 801798e:	6013      	str	r3, [r2, #0]
 8017990:	f000 fae2 	bl	8017f58 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8017994:	4b3b      	ldr	r3, [pc, #236]	@ (8017a84 <xTaskIncrementTick+0x15c>)
 8017996:	681b      	ldr	r3, [r3, #0]
 8017998:	693a      	ldr	r2, [r7, #16]
 801799a:	429a      	cmp	r2, r3
 801799c:	d349      	bcc.n	8017a32 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801799e:	4b36      	ldr	r3, [pc, #216]	@ (8017a78 <xTaskIncrementTick+0x150>)
 80179a0:	681b      	ldr	r3, [r3, #0]
 80179a2:	681b      	ldr	r3, [r3, #0]
 80179a4:	2b00      	cmp	r3, #0
 80179a6:	d104      	bne.n	80179b2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80179a8:	4b36      	ldr	r3, [pc, #216]	@ (8017a84 <xTaskIncrementTick+0x15c>)
 80179aa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80179ae:	601a      	str	r2, [r3, #0]
					break;
 80179b0:	e03f      	b.n	8017a32 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80179b2:	4b31      	ldr	r3, [pc, #196]	@ (8017a78 <xTaskIncrementTick+0x150>)
 80179b4:	681b      	ldr	r3, [r3, #0]
 80179b6:	68db      	ldr	r3, [r3, #12]
 80179b8:	68db      	ldr	r3, [r3, #12]
 80179ba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80179bc:	68bb      	ldr	r3, [r7, #8]
 80179be:	685b      	ldr	r3, [r3, #4]
 80179c0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80179c2:	693a      	ldr	r2, [r7, #16]
 80179c4:	687b      	ldr	r3, [r7, #4]
 80179c6:	429a      	cmp	r2, r3
 80179c8:	d203      	bcs.n	80179d2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80179ca:	4a2e      	ldr	r2, [pc, #184]	@ (8017a84 <xTaskIncrementTick+0x15c>)
 80179cc:	687b      	ldr	r3, [r7, #4]
 80179ce:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80179d0:	e02f      	b.n	8017a32 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80179d2:	68bb      	ldr	r3, [r7, #8]
 80179d4:	3304      	adds	r3, #4
 80179d6:	4618      	mov	r0, r3
 80179d8:	f7fe fb8a 	bl	80160f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80179dc:	68bb      	ldr	r3, [r7, #8]
 80179de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80179e0:	2b00      	cmp	r3, #0
 80179e2:	d004      	beq.n	80179ee <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80179e4:	68bb      	ldr	r3, [r7, #8]
 80179e6:	3318      	adds	r3, #24
 80179e8:	4618      	mov	r0, r3
 80179ea:	f7fe fb81 	bl	80160f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80179ee:	68bb      	ldr	r3, [r7, #8]
 80179f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80179f2:	4b25      	ldr	r3, [pc, #148]	@ (8017a88 <xTaskIncrementTick+0x160>)
 80179f4:	681b      	ldr	r3, [r3, #0]
 80179f6:	429a      	cmp	r2, r3
 80179f8:	d903      	bls.n	8017a02 <xTaskIncrementTick+0xda>
 80179fa:	68bb      	ldr	r3, [r7, #8]
 80179fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80179fe:	4a22      	ldr	r2, [pc, #136]	@ (8017a88 <xTaskIncrementTick+0x160>)
 8017a00:	6013      	str	r3, [r2, #0]
 8017a02:	68bb      	ldr	r3, [r7, #8]
 8017a04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017a06:	4613      	mov	r3, r2
 8017a08:	009b      	lsls	r3, r3, #2
 8017a0a:	4413      	add	r3, r2
 8017a0c:	009b      	lsls	r3, r3, #2
 8017a0e:	4a1f      	ldr	r2, [pc, #124]	@ (8017a8c <xTaskIncrementTick+0x164>)
 8017a10:	441a      	add	r2, r3
 8017a12:	68bb      	ldr	r3, [r7, #8]
 8017a14:	3304      	adds	r3, #4
 8017a16:	4619      	mov	r1, r3
 8017a18:	4610      	mov	r0, r2
 8017a1a:	f7fe fb0c 	bl	8016036 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017a1e:	68bb      	ldr	r3, [r7, #8]
 8017a20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017a22:	4b1b      	ldr	r3, [pc, #108]	@ (8017a90 <xTaskIncrementTick+0x168>)
 8017a24:	681b      	ldr	r3, [r3, #0]
 8017a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017a28:	429a      	cmp	r2, r3
 8017a2a:	d3b8      	bcc.n	801799e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8017a2c:	2301      	movs	r3, #1
 8017a2e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017a30:	e7b5      	b.n	801799e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8017a32:	4b17      	ldr	r3, [pc, #92]	@ (8017a90 <xTaskIncrementTick+0x168>)
 8017a34:	681b      	ldr	r3, [r3, #0]
 8017a36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017a38:	4914      	ldr	r1, [pc, #80]	@ (8017a8c <xTaskIncrementTick+0x164>)
 8017a3a:	4613      	mov	r3, r2
 8017a3c:	009b      	lsls	r3, r3, #2
 8017a3e:	4413      	add	r3, r2
 8017a40:	009b      	lsls	r3, r3, #2
 8017a42:	440b      	add	r3, r1
 8017a44:	681b      	ldr	r3, [r3, #0]
 8017a46:	2b01      	cmp	r3, #1
 8017a48:	d901      	bls.n	8017a4e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8017a4a:	2301      	movs	r3, #1
 8017a4c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8017a4e:	4b11      	ldr	r3, [pc, #68]	@ (8017a94 <xTaskIncrementTick+0x16c>)
 8017a50:	681b      	ldr	r3, [r3, #0]
 8017a52:	2b00      	cmp	r3, #0
 8017a54:	d007      	beq.n	8017a66 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8017a56:	2301      	movs	r3, #1
 8017a58:	617b      	str	r3, [r7, #20]
 8017a5a:	e004      	b.n	8017a66 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8017a5c:	4b0e      	ldr	r3, [pc, #56]	@ (8017a98 <xTaskIncrementTick+0x170>)
 8017a5e:	681b      	ldr	r3, [r3, #0]
 8017a60:	3301      	adds	r3, #1
 8017a62:	4a0d      	ldr	r2, [pc, #52]	@ (8017a98 <xTaskIncrementTick+0x170>)
 8017a64:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8017a66:	697b      	ldr	r3, [r7, #20]
}
 8017a68:	4618      	mov	r0, r3
 8017a6a:	3718      	adds	r7, #24
 8017a6c:	46bd      	mov	sp, r7
 8017a6e:	bd80      	pop	{r7, pc}
 8017a70:	24001e64 	.word	0x24001e64
 8017a74:	24001e40 	.word	0x24001e40
 8017a78:	24001df4 	.word	0x24001df4
 8017a7c:	24001df8 	.word	0x24001df8
 8017a80:	24001e54 	.word	0x24001e54
 8017a84:	24001e5c 	.word	0x24001e5c
 8017a88:	24001e44 	.word	0x24001e44
 8017a8c:	2400196c 	.word	0x2400196c
 8017a90:	24001968 	.word	0x24001968
 8017a94:	24001e50 	.word	0x24001e50
 8017a98:	24001e4c 	.word	0x24001e4c

08017a9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8017a9c:	b480      	push	{r7}
 8017a9e:	b085      	sub	sp, #20
 8017aa0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8017aa2:	4b2b      	ldr	r3, [pc, #172]	@ (8017b50 <vTaskSwitchContext+0xb4>)
 8017aa4:	681b      	ldr	r3, [r3, #0]
 8017aa6:	2b00      	cmp	r3, #0
 8017aa8:	d003      	beq.n	8017ab2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8017aaa:	4b2a      	ldr	r3, [pc, #168]	@ (8017b54 <vTaskSwitchContext+0xb8>)
 8017aac:	2201      	movs	r2, #1
 8017aae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8017ab0:	e047      	b.n	8017b42 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8017ab2:	4b28      	ldr	r3, [pc, #160]	@ (8017b54 <vTaskSwitchContext+0xb8>)
 8017ab4:	2200      	movs	r2, #0
 8017ab6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017ab8:	4b27      	ldr	r3, [pc, #156]	@ (8017b58 <vTaskSwitchContext+0xbc>)
 8017aba:	681b      	ldr	r3, [r3, #0]
 8017abc:	60fb      	str	r3, [r7, #12]
 8017abe:	e011      	b.n	8017ae4 <vTaskSwitchContext+0x48>
 8017ac0:	68fb      	ldr	r3, [r7, #12]
 8017ac2:	2b00      	cmp	r3, #0
 8017ac4:	d10b      	bne.n	8017ade <vTaskSwitchContext+0x42>
	__asm volatile
 8017ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017aca:	f383 8811 	msr	BASEPRI, r3
 8017ace:	f3bf 8f6f 	isb	sy
 8017ad2:	f3bf 8f4f 	dsb	sy
 8017ad6:	607b      	str	r3, [r7, #4]
}
 8017ad8:	bf00      	nop
 8017ada:	bf00      	nop
 8017adc:	e7fd      	b.n	8017ada <vTaskSwitchContext+0x3e>
 8017ade:	68fb      	ldr	r3, [r7, #12]
 8017ae0:	3b01      	subs	r3, #1
 8017ae2:	60fb      	str	r3, [r7, #12]
 8017ae4:	491d      	ldr	r1, [pc, #116]	@ (8017b5c <vTaskSwitchContext+0xc0>)
 8017ae6:	68fa      	ldr	r2, [r7, #12]
 8017ae8:	4613      	mov	r3, r2
 8017aea:	009b      	lsls	r3, r3, #2
 8017aec:	4413      	add	r3, r2
 8017aee:	009b      	lsls	r3, r3, #2
 8017af0:	440b      	add	r3, r1
 8017af2:	681b      	ldr	r3, [r3, #0]
 8017af4:	2b00      	cmp	r3, #0
 8017af6:	d0e3      	beq.n	8017ac0 <vTaskSwitchContext+0x24>
 8017af8:	68fa      	ldr	r2, [r7, #12]
 8017afa:	4613      	mov	r3, r2
 8017afc:	009b      	lsls	r3, r3, #2
 8017afe:	4413      	add	r3, r2
 8017b00:	009b      	lsls	r3, r3, #2
 8017b02:	4a16      	ldr	r2, [pc, #88]	@ (8017b5c <vTaskSwitchContext+0xc0>)
 8017b04:	4413      	add	r3, r2
 8017b06:	60bb      	str	r3, [r7, #8]
 8017b08:	68bb      	ldr	r3, [r7, #8]
 8017b0a:	685b      	ldr	r3, [r3, #4]
 8017b0c:	685a      	ldr	r2, [r3, #4]
 8017b0e:	68bb      	ldr	r3, [r7, #8]
 8017b10:	605a      	str	r2, [r3, #4]
 8017b12:	68bb      	ldr	r3, [r7, #8]
 8017b14:	685a      	ldr	r2, [r3, #4]
 8017b16:	68bb      	ldr	r3, [r7, #8]
 8017b18:	3308      	adds	r3, #8
 8017b1a:	429a      	cmp	r2, r3
 8017b1c:	d104      	bne.n	8017b28 <vTaskSwitchContext+0x8c>
 8017b1e:	68bb      	ldr	r3, [r7, #8]
 8017b20:	685b      	ldr	r3, [r3, #4]
 8017b22:	685a      	ldr	r2, [r3, #4]
 8017b24:	68bb      	ldr	r3, [r7, #8]
 8017b26:	605a      	str	r2, [r3, #4]
 8017b28:	68bb      	ldr	r3, [r7, #8]
 8017b2a:	685b      	ldr	r3, [r3, #4]
 8017b2c:	68db      	ldr	r3, [r3, #12]
 8017b2e:	4a0c      	ldr	r2, [pc, #48]	@ (8017b60 <vTaskSwitchContext+0xc4>)
 8017b30:	6013      	str	r3, [r2, #0]
 8017b32:	4a09      	ldr	r2, [pc, #36]	@ (8017b58 <vTaskSwitchContext+0xbc>)
 8017b34:	68fb      	ldr	r3, [r7, #12]
 8017b36:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8017b38:	4b09      	ldr	r3, [pc, #36]	@ (8017b60 <vTaskSwitchContext+0xc4>)
 8017b3a:	681b      	ldr	r3, [r3, #0]
 8017b3c:	3354      	adds	r3, #84	@ 0x54
 8017b3e:	4a09      	ldr	r2, [pc, #36]	@ (8017b64 <vTaskSwitchContext+0xc8>)
 8017b40:	6013      	str	r3, [r2, #0]
}
 8017b42:	bf00      	nop
 8017b44:	3714      	adds	r7, #20
 8017b46:	46bd      	mov	sp, r7
 8017b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b4c:	4770      	bx	lr
 8017b4e:	bf00      	nop
 8017b50:	24001e64 	.word	0x24001e64
 8017b54:	24001e50 	.word	0x24001e50
 8017b58:	24001e44 	.word	0x24001e44
 8017b5c:	2400196c 	.word	0x2400196c
 8017b60:	24001968 	.word	0x24001968
 8017b64:	240001a4 	.word	0x240001a4

08017b68 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8017b68:	b580      	push	{r7, lr}
 8017b6a:	b084      	sub	sp, #16
 8017b6c:	af00      	add	r7, sp, #0
 8017b6e:	6078      	str	r0, [r7, #4]
 8017b70:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8017b72:	687b      	ldr	r3, [r7, #4]
 8017b74:	2b00      	cmp	r3, #0
 8017b76:	d10b      	bne.n	8017b90 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8017b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017b7c:	f383 8811 	msr	BASEPRI, r3
 8017b80:	f3bf 8f6f 	isb	sy
 8017b84:	f3bf 8f4f 	dsb	sy
 8017b88:	60fb      	str	r3, [r7, #12]
}
 8017b8a:	bf00      	nop
 8017b8c:	bf00      	nop
 8017b8e:	e7fd      	b.n	8017b8c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017b90:	4b07      	ldr	r3, [pc, #28]	@ (8017bb0 <vTaskPlaceOnEventList+0x48>)
 8017b92:	681b      	ldr	r3, [r3, #0]
 8017b94:	3318      	adds	r3, #24
 8017b96:	4619      	mov	r1, r3
 8017b98:	6878      	ldr	r0, [r7, #4]
 8017b9a:	f7fe fa70 	bl	801607e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8017b9e:	2101      	movs	r1, #1
 8017ba0:	6838      	ldr	r0, [r7, #0]
 8017ba2:	f000 fb87 	bl	80182b4 <prvAddCurrentTaskToDelayedList>
}
 8017ba6:	bf00      	nop
 8017ba8:	3710      	adds	r7, #16
 8017baa:	46bd      	mov	sp, r7
 8017bac:	bd80      	pop	{r7, pc}
 8017bae:	bf00      	nop
 8017bb0:	24001968 	.word	0x24001968

08017bb4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8017bb4:	b580      	push	{r7, lr}
 8017bb6:	b086      	sub	sp, #24
 8017bb8:	af00      	add	r7, sp, #0
 8017bba:	60f8      	str	r0, [r7, #12]
 8017bbc:	60b9      	str	r1, [r7, #8]
 8017bbe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8017bc0:	68fb      	ldr	r3, [r7, #12]
 8017bc2:	2b00      	cmp	r3, #0
 8017bc4:	d10b      	bne.n	8017bde <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8017bc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017bca:	f383 8811 	msr	BASEPRI, r3
 8017bce:	f3bf 8f6f 	isb	sy
 8017bd2:	f3bf 8f4f 	dsb	sy
 8017bd6:	617b      	str	r3, [r7, #20]
}
 8017bd8:	bf00      	nop
 8017bda:	bf00      	nop
 8017bdc:	e7fd      	b.n	8017bda <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017bde:	4b0a      	ldr	r3, [pc, #40]	@ (8017c08 <vTaskPlaceOnEventListRestricted+0x54>)
 8017be0:	681b      	ldr	r3, [r3, #0]
 8017be2:	3318      	adds	r3, #24
 8017be4:	4619      	mov	r1, r3
 8017be6:	68f8      	ldr	r0, [r7, #12]
 8017be8:	f7fe fa25 	bl	8016036 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8017bec:	687b      	ldr	r3, [r7, #4]
 8017bee:	2b00      	cmp	r3, #0
 8017bf0:	d002      	beq.n	8017bf8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8017bf2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017bf6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8017bf8:	6879      	ldr	r1, [r7, #4]
 8017bfa:	68b8      	ldr	r0, [r7, #8]
 8017bfc:	f000 fb5a 	bl	80182b4 <prvAddCurrentTaskToDelayedList>
	}
 8017c00:	bf00      	nop
 8017c02:	3718      	adds	r7, #24
 8017c04:	46bd      	mov	sp, r7
 8017c06:	bd80      	pop	{r7, pc}
 8017c08:	24001968 	.word	0x24001968

08017c0c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8017c0c:	b580      	push	{r7, lr}
 8017c0e:	b086      	sub	sp, #24
 8017c10:	af00      	add	r7, sp, #0
 8017c12:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017c14:	687b      	ldr	r3, [r7, #4]
 8017c16:	68db      	ldr	r3, [r3, #12]
 8017c18:	68db      	ldr	r3, [r3, #12]
 8017c1a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8017c1c:	693b      	ldr	r3, [r7, #16]
 8017c1e:	2b00      	cmp	r3, #0
 8017c20:	d10b      	bne.n	8017c3a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8017c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017c26:	f383 8811 	msr	BASEPRI, r3
 8017c2a:	f3bf 8f6f 	isb	sy
 8017c2e:	f3bf 8f4f 	dsb	sy
 8017c32:	60fb      	str	r3, [r7, #12]
}
 8017c34:	bf00      	nop
 8017c36:	bf00      	nop
 8017c38:	e7fd      	b.n	8017c36 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8017c3a:	693b      	ldr	r3, [r7, #16]
 8017c3c:	3318      	adds	r3, #24
 8017c3e:	4618      	mov	r0, r3
 8017c40:	f7fe fa56 	bl	80160f0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017c44:	4b1d      	ldr	r3, [pc, #116]	@ (8017cbc <xTaskRemoveFromEventList+0xb0>)
 8017c46:	681b      	ldr	r3, [r3, #0]
 8017c48:	2b00      	cmp	r3, #0
 8017c4a:	d11d      	bne.n	8017c88 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8017c4c:	693b      	ldr	r3, [r7, #16]
 8017c4e:	3304      	adds	r3, #4
 8017c50:	4618      	mov	r0, r3
 8017c52:	f7fe fa4d 	bl	80160f0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8017c56:	693b      	ldr	r3, [r7, #16]
 8017c58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017c5a:	4b19      	ldr	r3, [pc, #100]	@ (8017cc0 <xTaskRemoveFromEventList+0xb4>)
 8017c5c:	681b      	ldr	r3, [r3, #0]
 8017c5e:	429a      	cmp	r2, r3
 8017c60:	d903      	bls.n	8017c6a <xTaskRemoveFromEventList+0x5e>
 8017c62:	693b      	ldr	r3, [r7, #16]
 8017c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017c66:	4a16      	ldr	r2, [pc, #88]	@ (8017cc0 <xTaskRemoveFromEventList+0xb4>)
 8017c68:	6013      	str	r3, [r2, #0]
 8017c6a:	693b      	ldr	r3, [r7, #16]
 8017c6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017c6e:	4613      	mov	r3, r2
 8017c70:	009b      	lsls	r3, r3, #2
 8017c72:	4413      	add	r3, r2
 8017c74:	009b      	lsls	r3, r3, #2
 8017c76:	4a13      	ldr	r2, [pc, #76]	@ (8017cc4 <xTaskRemoveFromEventList+0xb8>)
 8017c78:	441a      	add	r2, r3
 8017c7a:	693b      	ldr	r3, [r7, #16]
 8017c7c:	3304      	adds	r3, #4
 8017c7e:	4619      	mov	r1, r3
 8017c80:	4610      	mov	r0, r2
 8017c82:	f7fe f9d8 	bl	8016036 <vListInsertEnd>
 8017c86:	e005      	b.n	8017c94 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8017c88:	693b      	ldr	r3, [r7, #16]
 8017c8a:	3318      	adds	r3, #24
 8017c8c:	4619      	mov	r1, r3
 8017c8e:	480e      	ldr	r0, [pc, #56]	@ (8017cc8 <xTaskRemoveFromEventList+0xbc>)
 8017c90:	f7fe f9d1 	bl	8016036 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8017c94:	693b      	ldr	r3, [r7, #16]
 8017c96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017c98:	4b0c      	ldr	r3, [pc, #48]	@ (8017ccc <xTaskRemoveFromEventList+0xc0>)
 8017c9a:	681b      	ldr	r3, [r3, #0]
 8017c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017c9e:	429a      	cmp	r2, r3
 8017ca0:	d905      	bls.n	8017cae <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8017ca2:	2301      	movs	r3, #1
 8017ca4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8017ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8017cd0 <xTaskRemoveFromEventList+0xc4>)
 8017ca8:	2201      	movs	r2, #1
 8017caa:	601a      	str	r2, [r3, #0]
 8017cac:	e001      	b.n	8017cb2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8017cae:	2300      	movs	r3, #0
 8017cb0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8017cb2:	697b      	ldr	r3, [r7, #20]
}
 8017cb4:	4618      	mov	r0, r3
 8017cb6:	3718      	adds	r7, #24
 8017cb8:	46bd      	mov	sp, r7
 8017cba:	bd80      	pop	{r7, pc}
 8017cbc:	24001e64 	.word	0x24001e64
 8017cc0:	24001e44 	.word	0x24001e44
 8017cc4:	2400196c 	.word	0x2400196c
 8017cc8:	24001dfc 	.word	0x24001dfc
 8017ccc:	24001968 	.word	0x24001968
 8017cd0:	24001e50 	.word	0x24001e50

08017cd4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8017cd4:	b480      	push	{r7}
 8017cd6:	b083      	sub	sp, #12
 8017cd8:	af00      	add	r7, sp, #0
 8017cda:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8017cdc:	4b06      	ldr	r3, [pc, #24]	@ (8017cf8 <vTaskInternalSetTimeOutState+0x24>)
 8017cde:	681a      	ldr	r2, [r3, #0]
 8017ce0:	687b      	ldr	r3, [r7, #4]
 8017ce2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8017ce4:	4b05      	ldr	r3, [pc, #20]	@ (8017cfc <vTaskInternalSetTimeOutState+0x28>)
 8017ce6:	681a      	ldr	r2, [r3, #0]
 8017ce8:	687b      	ldr	r3, [r7, #4]
 8017cea:	605a      	str	r2, [r3, #4]
}
 8017cec:	bf00      	nop
 8017cee:	370c      	adds	r7, #12
 8017cf0:	46bd      	mov	sp, r7
 8017cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cf6:	4770      	bx	lr
 8017cf8:	24001e54 	.word	0x24001e54
 8017cfc:	24001e40 	.word	0x24001e40

08017d00 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8017d00:	b580      	push	{r7, lr}
 8017d02:	b088      	sub	sp, #32
 8017d04:	af00      	add	r7, sp, #0
 8017d06:	6078      	str	r0, [r7, #4]
 8017d08:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8017d0a:	687b      	ldr	r3, [r7, #4]
 8017d0c:	2b00      	cmp	r3, #0
 8017d0e:	d10b      	bne.n	8017d28 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8017d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017d14:	f383 8811 	msr	BASEPRI, r3
 8017d18:	f3bf 8f6f 	isb	sy
 8017d1c:	f3bf 8f4f 	dsb	sy
 8017d20:	613b      	str	r3, [r7, #16]
}
 8017d22:	bf00      	nop
 8017d24:	bf00      	nop
 8017d26:	e7fd      	b.n	8017d24 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8017d28:	683b      	ldr	r3, [r7, #0]
 8017d2a:	2b00      	cmp	r3, #0
 8017d2c:	d10b      	bne.n	8017d46 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8017d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017d32:	f383 8811 	msr	BASEPRI, r3
 8017d36:	f3bf 8f6f 	isb	sy
 8017d3a:	f3bf 8f4f 	dsb	sy
 8017d3e:	60fb      	str	r3, [r7, #12]
}
 8017d40:	bf00      	nop
 8017d42:	bf00      	nop
 8017d44:	e7fd      	b.n	8017d42 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8017d46:	f000 ff97 	bl	8018c78 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8017d4a:	4b1d      	ldr	r3, [pc, #116]	@ (8017dc0 <xTaskCheckForTimeOut+0xc0>)
 8017d4c:	681b      	ldr	r3, [r3, #0]
 8017d4e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8017d50:	687b      	ldr	r3, [r7, #4]
 8017d52:	685b      	ldr	r3, [r3, #4]
 8017d54:	69ba      	ldr	r2, [r7, #24]
 8017d56:	1ad3      	subs	r3, r2, r3
 8017d58:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8017d5a:	683b      	ldr	r3, [r7, #0]
 8017d5c:	681b      	ldr	r3, [r3, #0]
 8017d5e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8017d62:	d102      	bne.n	8017d6a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8017d64:	2300      	movs	r3, #0
 8017d66:	61fb      	str	r3, [r7, #28]
 8017d68:	e023      	b.n	8017db2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8017d6a:	687b      	ldr	r3, [r7, #4]
 8017d6c:	681a      	ldr	r2, [r3, #0]
 8017d6e:	4b15      	ldr	r3, [pc, #84]	@ (8017dc4 <xTaskCheckForTimeOut+0xc4>)
 8017d70:	681b      	ldr	r3, [r3, #0]
 8017d72:	429a      	cmp	r2, r3
 8017d74:	d007      	beq.n	8017d86 <xTaskCheckForTimeOut+0x86>
 8017d76:	687b      	ldr	r3, [r7, #4]
 8017d78:	685b      	ldr	r3, [r3, #4]
 8017d7a:	69ba      	ldr	r2, [r7, #24]
 8017d7c:	429a      	cmp	r2, r3
 8017d7e:	d302      	bcc.n	8017d86 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8017d80:	2301      	movs	r3, #1
 8017d82:	61fb      	str	r3, [r7, #28]
 8017d84:	e015      	b.n	8017db2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8017d86:	683b      	ldr	r3, [r7, #0]
 8017d88:	681b      	ldr	r3, [r3, #0]
 8017d8a:	697a      	ldr	r2, [r7, #20]
 8017d8c:	429a      	cmp	r2, r3
 8017d8e:	d20b      	bcs.n	8017da8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8017d90:	683b      	ldr	r3, [r7, #0]
 8017d92:	681a      	ldr	r2, [r3, #0]
 8017d94:	697b      	ldr	r3, [r7, #20]
 8017d96:	1ad2      	subs	r2, r2, r3
 8017d98:	683b      	ldr	r3, [r7, #0]
 8017d9a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8017d9c:	6878      	ldr	r0, [r7, #4]
 8017d9e:	f7ff ff99 	bl	8017cd4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8017da2:	2300      	movs	r3, #0
 8017da4:	61fb      	str	r3, [r7, #28]
 8017da6:	e004      	b.n	8017db2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8017da8:	683b      	ldr	r3, [r7, #0]
 8017daa:	2200      	movs	r2, #0
 8017dac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8017dae:	2301      	movs	r3, #1
 8017db0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8017db2:	f000 ff93 	bl	8018cdc <vPortExitCritical>

	return xReturn;
 8017db6:	69fb      	ldr	r3, [r7, #28]
}
 8017db8:	4618      	mov	r0, r3
 8017dba:	3720      	adds	r7, #32
 8017dbc:	46bd      	mov	sp, r7
 8017dbe:	bd80      	pop	{r7, pc}
 8017dc0:	24001e40 	.word	0x24001e40
 8017dc4:	24001e54 	.word	0x24001e54

08017dc8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8017dc8:	b480      	push	{r7}
 8017dca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8017dcc:	4b03      	ldr	r3, [pc, #12]	@ (8017ddc <vTaskMissedYield+0x14>)
 8017dce:	2201      	movs	r2, #1
 8017dd0:	601a      	str	r2, [r3, #0]
}
 8017dd2:	bf00      	nop
 8017dd4:	46bd      	mov	sp, r7
 8017dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dda:	4770      	bx	lr
 8017ddc:	24001e50 	.word	0x24001e50

08017de0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8017de0:	b580      	push	{r7, lr}
 8017de2:	b082      	sub	sp, #8
 8017de4:	af00      	add	r7, sp, #0
 8017de6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8017de8:	f000 f852 	bl	8017e90 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8017dec:	4b06      	ldr	r3, [pc, #24]	@ (8017e08 <prvIdleTask+0x28>)
 8017dee:	681b      	ldr	r3, [r3, #0]
 8017df0:	2b01      	cmp	r3, #1
 8017df2:	d9f9      	bls.n	8017de8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8017df4:	4b05      	ldr	r3, [pc, #20]	@ (8017e0c <prvIdleTask+0x2c>)
 8017df6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017dfa:	601a      	str	r2, [r3, #0]
 8017dfc:	f3bf 8f4f 	dsb	sy
 8017e00:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8017e04:	e7f0      	b.n	8017de8 <prvIdleTask+0x8>
 8017e06:	bf00      	nop
 8017e08:	2400196c 	.word	0x2400196c
 8017e0c:	e000ed04 	.word	0xe000ed04

08017e10 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8017e10:	b580      	push	{r7, lr}
 8017e12:	b082      	sub	sp, #8
 8017e14:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017e16:	2300      	movs	r3, #0
 8017e18:	607b      	str	r3, [r7, #4]
 8017e1a:	e00c      	b.n	8017e36 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8017e1c:	687a      	ldr	r2, [r7, #4]
 8017e1e:	4613      	mov	r3, r2
 8017e20:	009b      	lsls	r3, r3, #2
 8017e22:	4413      	add	r3, r2
 8017e24:	009b      	lsls	r3, r3, #2
 8017e26:	4a12      	ldr	r2, [pc, #72]	@ (8017e70 <prvInitialiseTaskLists+0x60>)
 8017e28:	4413      	add	r3, r2
 8017e2a:	4618      	mov	r0, r3
 8017e2c:	f7fe f8d6 	bl	8015fdc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017e30:	687b      	ldr	r3, [r7, #4]
 8017e32:	3301      	adds	r3, #1
 8017e34:	607b      	str	r3, [r7, #4]
 8017e36:	687b      	ldr	r3, [r7, #4]
 8017e38:	2b37      	cmp	r3, #55	@ 0x37
 8017e3a:	d9ef      	bls.n	8017e1c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8017e3c:	480d      	ldr	r0, [pc, #52]	@ (8017e74 <prvInitialiseTaskLists+0x64>)
 8017e3e:	f7fe f8cd 	bl	8015fdc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8017e42:	480d      	ldr	r0, [pc, #52]	@ (8017e78 <prvInitialiseTaskLists+0x68>)
 8017e44:	f7fe f8ca 	bl	8015fdc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8017e48:	480c      	ldr	r0, [pc, #48]	@ (8017e7c <prvInitialiseTaskLists+0x6c>)
 8017e4a:	f7fe f8c7 	bl	8015fdc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8017e4e:	480c      	ldr	r0, [pc, #48]	@ (8017e80 <prvInitialiseTaskLists+0x70>)
 8017e50:	f7fe f8c4 	bl	8015fdc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8017e54:	480b      	ldr	r0, [pc, #44]	@ (8017e84 <prvInitialiseTaskLists+0x74>)
 8017e56:	f7fe f8c1 	bl	8015fdc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8017e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8017e88 <prvInitialiseTaskLists+0x78>)
 8017e5c:	4a05      	ldr	r2, [pc, #20]	@ (8017e74 <prvInitialiseTaskLists+0x64>)
 8017e5e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8017e60:	4b0a      	ldr	r3, [pc, #40]	@ (8017e8c <prvInitialiseTaskLists+0x7c>)
 8017e62:	4a05      	ldr	r2, [pc, #20]	@ (8017e78 <prvInitialiseTaskLists+0x68>)
 8017e64:	601a      	str	r2, [r3, #0]
}
 8017e66:	bf00      	nop
 8017e68:	3708      	adds	r7, #8
 8017e6a:	46bd      	mov	sp, r7
 8017e6c:	bd80      	pop	{r7, pc}
 8017e6e:	bf00      	nop
 8017e70:	2400196c 	.word	0x2400196c
 8017e74:	24001dcc 	.word	0x24001dcc
 8017e78:	24001de0 	.word	0x24001de0
 8017e7c:	24001dfc 	.word	0x24001dfc
 8017e80:	24001e10 	.word	0x24001e10
 8017e84:	24001e28 	.word	0x24001e28
 8017e88:	24001df4 	.word	0x24001df4
 8017e8c:	24001df8 	.word	0x24001df8

08017e90 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8017e90:	b580      	push	{r7, lr}
 8017e92:	b082      	sub	sp, #8
 8017e94:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8017e96:	e019      	b.n	8017ecc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8017e98:	f000 feee 	bl	8018c78 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017e9c:	4b10      	ldr	r3, [pc, #64]	@ (8017ee0 <prvCheckTasksWaitingTermination+0x50>)
 8017e9e:	68db      	ldr	r3, [r3, #12]
 8017ea0:	68db      	ldr	r3, [r3, #12]
 8017ea2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017ea4:	687b      	ldr	r3, [r7, #4]
 8017ea6:	3304      	adds	r3, #4
 8017ea8:	4618      	mov	r0, r3
 8017eaa:	f7fe f921 	bl	80160f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8017eae:	4b0d      	ldr	r3, [pc, #52]	@ (8017ee4 <prvCheckTasksWaitingTermination+0x54>)
 8017eb0:	681b      	ldr	r3, [r3, #0]
 8017eb2:	3b01      	subs	r3, #1
 8017eb4:	4a0b      	ldr	r2, [pc, #44]	@ (8017ee4 <prvCheckTasksWaitingTermination+0x54>)
 8017eb6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8017eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8017ee8 <prvCheckTasksWaitingTermination+0x58>)
 8017eba:	681b      	ldr	r3, [r3, #0]
 8017ebc:	3b01      	subs	r3, #1
 8017ebe:	4a0a      	ldr	r2, [pc, #40]	@ (8017ee8 <prvCheckTasksWaitingTermination+0x58>)
 8017ec0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8017ec2:	f000 ff0b 	bl	8018cdc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8017ec6:	6878      	ldr	r0, [r7, #4]
 8017ec8:	f000 f810 	bl	8017eec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8017ecc:	4b06      	ldr	r3, [pc, #24]	@ (8017ee8 <prvCheckTasksWaitingTermination+0x58>)
 8017ece:	681b      	ldr	r3, [r3, #0]
 8017ed0:	2b00      	cmp	r3, #0
 8017ed2:	d1e1      	bne.n	8017e98 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8017ed4:	bf00      	nop
 8017ed6:	bf00      	nop
 8017ed8:	3708      	adds	r7, #8
 8017eda:	46bd      	mov	sp, r7
 8017edc:	bd80      	pop	{r7, pc}
 8017ede:	bf00      	nop
 8017ee0:	24001e10 	.word	0x24001e10
 8017ee4:	24001e3c 	.word	0x24001e3c
 8017ee8:	24001e24 	.word	0x24001e24

08017eec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8017eec:	b580      	push	{r7, lr}
 8017eee:	b084      	sub	sp, #16
 8017ef0:	af00      	add	r7, sp, #0
 8017ef2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8017ef4:	687b      	ldr	r3, [r7, #4]
 8017ef6:	3354      	adds	r3, #84	@ 0x54
 8017ef8:	4618      	mov	r0, r3
 8017efa:	f003 f8c1 	bl	801b080 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8017efe:	687b      	ldr	r3, [r7, #4]
 8017f00:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8017f04:	2b00      	cmp	r3, #0
 8017f06:	d108      	bne.n	8017f1a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8017f08:	687b      	ldr	r3, [r7, #4]
 8017f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017f0c:	4618      	mov	r0, r3
 8017f0e:	f001 f8a3 	bl	8019058 <vPortFree>
				vPortFree( pxTCB );
 8017f12:	6878      	ldr	r0, [r7, #4]
 8017f14:	f001 f8a0 	bl	8019058 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8017f18:	e019      	b.n	8017f4e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8017f1a:	687b      	ldr	r3, [r7, #4]
 8017f1c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8017f20:	2b01      	cmp	r3, #1
 8017f22:	d103      	bne.n	8017f2c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8017f24:	6878      	ldr	r0, [r7, #4]
 8017f26:	f001 f897 	bl	8019058 <vPortFree>
	}
 8017f2a:	e010      	b.n	8017f4e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8017f2c:	687b      	ldr	r3, [r7, #4]
 8017f2e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8017f32:	2b02      	cmp	r3, #2
 8017f34:	d00b      	beq.n	8017f4e <prvDeleteTCB+0x62>
	__asm volatile
 8017f36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017f3a:	f383 8811 	msr	BASEPRI, r3
 8017f3e:	f3bf 8f6f 	isb	sy
 8017f42:	f3bf 8f4f 	dsb	sy
 8017f46:	60fb      	str	r3, [r7, #12]
}
 8017f48:	bf00      	nop
 8017f4a:	bf00      	nop
 8017f4c:	e7fd      	b.n	8017f4a <prvDeleteTCB+0x5e>
	}
 8017f4e:	bf00      	nop
 8017f50:	3710      	adds	r7, #16
 8017f52:	46bd      	mov	sp, r7
 8017f54:	bd80      	pop	{r7, pc}
	...

08017f58 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8017f58:	b480      	push	{r7}
 8017f5a:	b083      	sub	sp, #12
 8017f5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017f5e:	4b0c      	ldr	r3, [pc, #48]	@ (8017f90 <prvResetNextTaskUnblockTime+0x38>)
 8017f60:	681b      	ldr	r3, [r3, #0]
 8017f62:	681b      	ldr	r3, [r3, #0]
 8017f64:	2b00      	cmp	r3, #0
 8017f66:	d104      	bne.n	8017f72 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8017f68:	4b0a      	ldr	r3, [pc, #40]	@ (8017f94 <prvResetNextTaskUnblockTime+0x3c>)
 8017f6a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017f6e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8017f70:	e008      	b.n	8017f84 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017f72:	4b07      	ldr	r3, [pc, #28]	@ (8017f90 <prvResetNextTaskUnblockTime+0x38>)
 8017f74:	681b      	ldr	r3, [r3, #0]
 8017f76:	68db      	ldr	r3, [r3, #12]
 8017f78:	68db      	ldr	r3, [r3, #12]
 8017f7a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8017f7c:	687b      	ldr	r3, [r7, #4]
 8017f7e:	685b      	ldr	r3, [r3, #4]
 8017f80:	4a04      	ldr	r2, [pc, #16]	@ (8017f94 <prvResetNextTaskUnblockTime+0x3c>)
 8017f82:	6013      	str	r3, [r2, #0]
}
 8017f84:	bf00      	nop
 8017f86:	370c      	adds	r7, #12
 8017f88:	46bd      	mov	sp, r7
 8017f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f8e:	4770      	bx	lr
 8017f90:	24001df4 	.word	0x24001df4
 8017f94:	24001e5c 	.word	0x24001e5c

08017f98 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8017f98:	b480      	push	{r7}
 8017f9a:	b083      	sub	sp, #12
 8017f9c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8017f9e:	4b0b      	ldr	r3, [pc, #44]	@ (8017fcc <xTaskGetSchedulerState+0x34>)
 8017fa0:	681b      	ldr	r3, [r3, #0]
 8017fa2:	2b00      	cmp	r3, #0
 8017fa4:	d102      	bne.n	8017fac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8017fa6:	2301      	movs	r3, #1
 8017fa8:	607b      	str	r3, [r7, #4]
 8017faa:	e008      	b.n	8017fbe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017fac:	4b08      	ldr	r3, [pc, #32]	@ (8017fd0 <xTaskGetSchedulerState+0x38>)
 8017fae:	681b      	ldr	r3, [r3, #0]
 8017fb0:	2b00      	cmp	r3, #0
 8017fb2:	d102      	bne.n	8017fba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8017fb4:	2302      	movs	r3, #2
 8017fb6:	607b      	str	r3, [r7, #4]
 8017fb8:	e001      	b.n	8017fbe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8017fba:	2300      	movs	r3, #0
 8017fbc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8017fbe:	687b      	ldr	r3, [r7, #4]
	}
 8017fc0:	4618      	mov	r0, r3
 8017fc2:	370c      	adds	r7, #12
 8017fc4:	46bd      	mov	sp, r7
 8017fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fca:	4770      	bx	lr
 8017fcc:	24001e48 	.word	0x24001e48
 8017fd0:	24001e64 	.word	0x24001e64

08017fd4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8017fd4:	b580      	push	{r7, lr}
 8017fd6:	b084      	sub	sp, #16
 8017fd8:	af00      	add	r7, sp, #0
 8017fda:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8017fdc:	687b      	ldr	r3, [r7, #4]
 8017fde:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8017fe0:	2300      	movs	r3, #0
 8017fe2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8017fe4:	687b      	ldr	r3, [r7, #4]
 8017fe6:	2b00      	cmp	r3, #0
 8017fe8:	d051      	beq.n	801808e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8017fea:	68bb      	ldr	r3, [r7, #8]
 8017fec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017fee:	4b2a      	ldr	r3, [pc, #168]	@ (8018098 <xTaskPriorityInherit+0xc4>)
 8017ff0:	681b      	ldr	r3, [r3, #0]
 8017ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017ff4:	429a      	cmp	r2, r3
 8017ff6:	d241      	bcs.n	801807c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8017ff8:	68bb      	ldr	r3, [r7, #8]
 8017ffa:	699b      	ldr	r3, [r3, #24]
 8017ffc:	2b00      	cmp	r3, #0
 8017ffe:	db06      	blt.n	801800e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018000:	4b25      	ldr	r3, [pc, #148]	@ (8018098 <xTaskPriorityInherit+0xc4>)
 8018002:	681b      	ldr	r3, [r3, #0]
 8018004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018006:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801800a:	68bb      	ldr	r3, [r7, #8]
 801800c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801800e:	68bb      	ldr	r3, [r7, #8]
 8018010:	6959      	ldr	r1, [r3, #20]
 8018012:	68bb      	ldr	r3, [r7, #8]
 8018014:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018016:	4613      	mov	r3, r2
 8018018:	009b      	lsls	r3, r3, #2
 801801a:	4413      	add	r3, r2
 801801c:	009b      	lsls	r3, r3, #2
 801801e:	4a1f      	ldr	r2, [pc, #124]	@ (801809c <xTaskPriorityInherit+0xc8>)
 8018020:	4413      	add	r3, r2
 8018022:	4299      	cmp	r1, r3
 8018024:	d122      	bne.n	801806c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018026:	68bb      	ldr	r3, [r7, #8]
 8018028:	3304      	adds	r3, #4
 801802a:	4618      	mov	r0, r3
 801802c:	f7fe f860 	bl	80160f0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8018030:	4b19      	ldr	r3, [pc, #100]	@ (8018098 <xTaskPriorityInherit+0xc4>)
 8018032:	681b      	ldr	r3, [r3, #0]
 8018034:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018036:	68bb      	ldr	r3, [r7, #8]
 8018038:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801803a:	68bb      	ldr	r3, [r7, #8]
 801803c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801803e:	4b18      	ldr	r3, [pc, #96]	@ (80180a0 <xTaskPriorityInherit+0xcc>)
 8018040:	681b      	ldr	r3, [r3, #0]
 8018042:	429a      	cmp	r2, r3
 8018044:	d903      	bls.n	801804e <xTaskPriorityInherit+0x7a>
 8018046:	68bb      	ldr	r3, [r7, #8]
 8018048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801804a:	4a15      	ldr	r2, [pc, #84]	@ (80180a0 <xTaskPriorityInherit+0xcc>)
 801804c:	6013      	str	r3, [r2, #0]
 801804e:	68bb      	ldr	r3, [r7, #8]
 8018050:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018052:	4613      	mov	r3, r2
 8018054:	009b      	lsls	r3, r3, #2
 8018056:	4413      	add	r3, r2
 8018058:	009b      	lsls	r3, r3, #2
 801805a:	4a10      	ldr	r2, [pc, #64]	@ (801809c <xTaskPriorityInherit+0xc8>)
 801805c:	441a      	add	r2, r3
 801805e:	68bb      	ldr	r3, [r7, #8]
 8018060:	3304      	adds	r3, #4
 8018062:	4619      	mov	r1, r3
 8018064:	4610      	mov	r0, r2
 8018066:	f7fd ffe6 	bl	8016036 <vListInsertEnd>
 801806a:	e004      	b.n	8018076 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801806c:	4b0a      	ldr	r3, [pc, #40]	@ (8018098 <xTaskPriorityInherit+0xc4>)
 801806e:	681b      	ldr	r3, [r3, #0]
 8018070:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018072:	68bb      	ldr	r3, [r7, #8]
 8018074:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8018076:	2301      	movs	r3, #1
 8018078:	60fb      	str	r3, [r7, #12]
 801807a:	e008      	b.n	801808e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801807c:	68bb      	ldr	r3, [r7, #8]
 801807e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8018080:	4b05      	ldr	r3, [pc, #20]	@ (8018098 <xTaskPriorityInherit+0xc4>)
 8018082:	681b      	ldr	r3, [r3, #0]
 8018084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018086:	429a      	cmp	r2, r3
 8018088:	d201      	bcs.n	801808e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801808a:	2301      	movs	r3, #1
 801808c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801808e:	68fb      	ldr	r3, [r7, #12]
	}
 8018090:	4618      	mov	r0, r3
 8018092:	3710      	adds	r7, #16
 8018094:	46bd      	mov	sp, r7
 8018096:	bd80      	pop	{r7, pc}
 8018098:	24001968 	.word	0x24001968
 801809c:	2400196c 	.word	0x2400196c
 80180a0:	24001e44 	.word	0x24001e44

080180a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80180a4:	b580      	push	{r7, lr}
 80180a6:	b086      	sub	sp, #24
 80180a8:	af00      	add	r7, sp, #0
 80180aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80180ac:	687b      	ldr	r3, [r7, #4]
 80180ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80180b0:	2300      	movs	r3, #0
 80180b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80180b4:	687b      	ldr	r3, [r7, #4]
 80180b6:	2b00      	cmp	r3, #0
 80180b8:	d058      	beq.n	801816c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80180ba:	4b2f      	ldr	r3, [pc, #188]	@ (8018178 <xTaskPriorityDisinherit+0xd4>)
 80180bc:	681b      	ldr	r3, [r3, #0]
 80180be:	693a      	ldr	r2, [r7, #16]
 80180c0:	429a      	cmp	r2, r3
 80180c2:	d00b      	beq.n	80180dc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80180c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80180c8:	f383 8811 	msr	BASEPRI, r3
 80180cc:	f3bf 8f6f 	isb	sy
 80180d0:	f3bf 8f4f 	dsb	sy
 80180d4:	60fb      	str	r3, [r7, #12]
}
 80180d6:	bf00      	nop
 80180d8:	bf00      	nop
 80180da:	e7fd      	b.n	80180d8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80180dc:	693b      	ldr	r3, [r7, #16]
 80180de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80180e0:	2b00      	cmp	r3, #0
 80180e2:	d10b      	bne.n	80180fc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80180e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80180e8:	f383 8811 	msr	BASEPRI, r3
 80180ec:	f3bf 8f6f 	isb	sy
 80180f0:	f3bf 8f4f 	dsb	sy
 80180f4:	60bb      	str	r3, [r7, #8]
}
 80180f6:	bf00      	nop
 80180f8:	bf00      	nop
 80180fa:	e7fd      	b.n	80180f8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80180fc:	693b      	ldr	r3, [r7, #16]
 80180fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018100:	1e5a      	subs	r2, r3, #1
 8018102:	693b      	ldr	r3, [r7, #16]
 8018104:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8018106:	693b      	ldr	r3, [r7, #16]
 8018108:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801810a:	693b      	ldr	r3, [r7, #16]
 801810c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801810e:	429a      	cmp	r2, r3
 8018110:	d02c      	beq.n	801816c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8018112:	693b      	ldr	r3, [r7, #16]
 8018114:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018116:	2b00      	cmp	r3, #0
 8018118:	d128      	bne.n	801816c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801811a:	693b      	ldr	r3, [r7, #16]
 801811c:	3304      	adds	r3, #4
 801811e:	4618      	mov	r0, r3
 8018120:	f7fd ffe6 	bl	80160f0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8018124:	693b      	ldr	r3, [r7, #16]
 8018126:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8018128:	693b      	ldr	r3, [r7, #16]
 801812a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801812c:	693b      	ldr	r3, [r7, #16]
 801812e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018130:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8018134:	693b      	ldr	r3, [r7, #16]
 8018136:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8018138:	693b      	ldr	r3, [r7, #16]
 801813a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801813c:	4b0f      	ldr	r3, [pc, #60]	@ (801817c <xTaskPriorityDisinherit+0xd8>)
 801813e:	681b      	ldr	r3, [r3, #0]
 8018140:	429a      	cmp	r2, r3
 8018142:	d903      	bls.n	801814c <xTaskPriorityDisinherit+0xa8>
 8018144:	693b      	ldr	r3, [r7, #16]
 8018146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018148:	4a0c      	ldr	r2, [pc, #48]	@ (801817c <xTaskPriorityDisinherit+0xd8>)
 801814a:	6013      	str	r3, [r2, #0]
 801814c:	693b      	ldr	r3, [r7, #16]
 801814e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018150:	4613      	mov	r3, r2
 8018152:	009b      	lsls	r3, r3, #2
 8018154:	4413      	add	r3, r2
 8018156:	009b      	lsls	r3, r3, #2
 8018158:	4a09      	ldr	r2, [pc, #36]	@ (8018180 <xTaskPriorityDisinherit+0xdc>)
 801815a:	441a      	add	r2, r3
 801815c:	693b      	ldr	r3, [r7, #16]
 801815e:	3304      	adds	r3, #4
 8018160:	4619      	mov	r1, r3
 8018162:	4610      	mov	r0, r2
 8018164:	f7fd ff67 	bl	8016036 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8018168:	2301      	movs	r3, #1
 801816a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801816c:	697b      	ldr	r3, [r7, #20]
	}
 801816e:	4618      	mov	r0, r3
 8018170:	3718      	adds	r7, #24
 8018172:	46bd      	mov	sp, r7
 8018174:	bd80      	pop	{r7, pc}
 8018176:	bf00      	nop
 8018178:	24001968 	.word	0x24001968
 801817c:	24001e44 	.word	0x24001e44
 8018180:	2400196c 	.word	0x2400196c

08018184 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8018184:	b580      	push	{r7, lr}
 8018186:	b088      	sub	sp, #32
 8018188:	af00      	add	r7, sp, #0
 801818a:	6078      	str	r0, [r7, #4]
 801818c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801818e:	687b      	ldr	r3, [r7, #4]
 8018190:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8018192:	2301      	movs	r3, #1
 8018194:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8018196:	687b      	ldr	r3, [r7, #4]
 8018198:	2b00      	cmp	r3, #0
 801819a:	d06c      	beq.n	8018276 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801819c:	69bb      	ldr	r3, [r7, #24]
 801819e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80181a0:	2b00      	cmp	r3, #0
 80181a2:	d10b      	bne.n	80181bc <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80181a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80181a8:	f383 8811 	msr	BASEPRI, r3
 80181ac:	f3bf 8f6f 	isb	sy
 80181b0:	f3bf 8f4f 	dsb	sy
 80181b4:	60fb      	str	r3, [r7, #12]
}
 80181b6:	bf00      	nop
 80181b8:	bf00      	nop
 80181ba:	e7fd      	b.n	80181b8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80181bc:	69bb      	ldr	r3, [r7, #24]
 80181be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80181c0:	683a      	ldr	r2, [r7, #0]
 80181c2:	429a      	cmp	r2, r3
 80181c4:	d902      	bls.n	80181cc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80181c6:	683b      	ldr	r3, [r7, #0]
 80181c8:	61fb      	str	r3, [r7, #28]
 80181ca:	e002      	b.n	80181d2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80181cc:	69bb      	ldr	r3, [r7, #24]
 80181ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80181d0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80181d2:	69bb      	ldr	r3, [r7, #24]
 80181d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80181d6:	69fa      	ldr	r2, [r7, #28]
 80181d8:	429a      	cmp	r2, r3
 80181da:	d04c      	beq.n	8018276 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80181dc:	69bb      	ldr	r3, [r7, #24]
 80181de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80181e0:	697a      	ldr	r2, [r7, #20]
 80181e2:	429a      	cmp	r2, r3
 80181e4:	d147      	bne.n	8018276 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80181e6:	4b26      	ldr	r3, [pc, #152]	@ (8018280 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80181e8:	681b      	ldr	r3, [r3, #0]
 80181ea:	69ba      	ldr	r2, [r7, #24]
 80181ec:	429a      	cmp	r2, r3
 80181ee:	d10b      	bne.n	8018208 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80181f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80181f4:	f383 8811 	msr	BASEPRI, r3
 80181f8:	f3bf 8f6f 	isb	sy
 80181fc:	f3bf 8f4f 	dsb	sy
 8018200:	60bb      	str	r3, [r7, #8]
}
 8018202:	bf00      	nop
 8018204:	bf00      	nop
 8018206:	e7fd      	b.n	8018204 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8018208:	69bb      	ldr	r3, [r7, #24]
 801820a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801820c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801820e:	69bb      	ldr	r3, [r7, #24]
 8018210:	69fa      	ldr	r2, [r7, #28]
 8018212:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8018214:	69bb      	ldr	r3, [r7, #24]
 8018216:	699b      	ldr	r3, [r3, #24]
 8018218:	2b00      	cmp	r3, #0
 801821a:	db04      	blt.n	8018226 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801821c:	69fb      	ldr	r3, [r7, #28]
 801821e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8018222:	69bb      	ldr	r3, [r7, #24]
 8018224:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8018226:	69bb      	ldr	r3, [r7, #24]
 8018228:	6959      	ldr	r1, [r3, #20]
 801822a:	693a      	ldr	r2, [r7, #16]
 801822c:	4613      	mov	r3, r2
 801822e:	009b      	lsls	r3, r3, #2
 8018230:	4413      	add	r3, r2
 8018232:	009b      	lsls	r3, r3, #2
 8018234:	4a13      	ldr	r2, [pc, #76]	@ (8018284 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8018236:	4413      	add	r3, r2
 8018238:	4299      	cmp	r1, r3
 801823a:	d11c      	bne.n	8018276 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801823c:	69bb      	ldr	r3, [r7, #24]
 801823e:	3304      	adds	r3, #4
 8018240:	4618      	mov	r0, r3
 8018242:	f7fd ff55 	bl	80160f0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8018246:	69bb      	ldr	r3, [r7, #24]
 8018248:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801824a:	4b0f      	ldr	r3, [pc, #60]	@ (8018288 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 801824c:	681b      	ldr	r3, [r3, #0]
 801824e:	429a      	cmp	r2, r3
 8018250:	d903      	bls.n	801825a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8018252:	69bb      	ldr	r3, [r7, #24]
 8018254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018256:	4a0c      	ldr	r2, [pc, #48]	@ (8018288 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8018258:	6013      	str	r3, [r2, #0]
 801825a:	69bb      	ldr	r3, [r7, #24]
 801825c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801825e:	4613      	mov	r3, r2
 8018260:	009b      	lsls	r3, r3, #2
 8018262:	4413      	add	r3, r2
 8018264:	009b      	lsls	r3, r3, #2
 8018266:	4a07      	ldr	r2, [pc, #28]	@ (8018284 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8018268:	441a      	add	r2, r3
 801826a:	69bb      	ldr	r3, [r7, #24]
 801826c:	3304      	adds	r3, #4
 801826e:	4619      	mov	r1, r3
 8018270:	4610      	mov	r0, r2
 8018272:	f7fd fee0 	bl	8016036 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018276:	bf00      	nop
 8018278:	3720      	adds	r7, #32
 801827a:	46bd      	mov	sp, r7
 801827c:	bd80      	pop	{r7, pc}
 801827e:	bf00      	nop
 8018280:	24001968 	.word	0x24001968
 8018284:	2400196c 	.word	0x2400196c
 8018288:	24001e44 	.word	0x24001e44

0801828c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801828c:	b480      	push	{r7}
 801828e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8018290:	4b07      	ldr	r3, [pc, #28]	@ (80182b0 <pvTaskIncrementMutexHeldCount+0x24>)
 8018292:	681b      	ldr	r3, [r3, #0]
 8018294:	2b00      	cmp	r3, #0
 8018296:	d004      	beq.n	80182a2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8018298:	4b05      	ldr	r3, [pc, #20]	@ (80182b0 <pvTaskIncrementMutexHeldCount+0x24>)
 801829a:	681b      	ldr	r3, [r3, #0]
 801829c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801829e:	3201      	adds	r2, #1
 80182a0:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80182a2:	4b03      	ldr	r3, [pc, #12]	@ (80182b0 <pvTaskIncrementMutexHeldCount+0x24>)
 80182a4:	681b      	ldr	r3, [r3, #0]
	}
 80182a6:	4618      	mov	r0, r3
 80182a8:	46bd      	mov	sp, r7
 80182aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182ae:	4770      	bx	lr
 80182b0:	24001968 	.word	0x24001968

080182b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80182b4:	b580      	push	{r7, lr}
 80182b6:	b084      	sub	sp, #16
 80182b8:	af00      	add	r7, sp, #0
 80182ba:	6078      	str	r0, [r7, #4]
 80182bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80182be:	4b21      	ldr	r3, [pc, #132]	@ (8018344 <prvAddCurrentTaskToDelayedList+0x90>)
 80182c0:	681b      	ldr	r3, [r3, #0]
 80182c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80182c4:	4b20      	ldr	r3, [pc, #128]	@ (8018348 <prvAddCurrentTaskToDelayedList+0x94>)
 80182c6:	681b      	ldr	r3, [r3, #0]
 80182c8:	3304      	adds	r3, #4
 80182ca:	4618      	mov	r0, r3
 80182cc:	f7fd ff10 	bl	80160f0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80182d0:	687b      	ldr	r3, [r7, #4]
 80182d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80182d6:	d10a      	bne.n	80182ee <prvAddCurrentTaskToDelayedList+0x3a>
 80182d8:	683b      	ldr	r3, [r7, #0]
 80182da:	2b00      	cmp	r3, #0
 80182dc:	d007      	beq.n	80182ee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80182de:	4b1a      	ldr	r3, [pc, #104]	@ (8018348 <prvAddCurrentTaskToDelayedList+0x94>)
 80182e0:	681b      	ldr	r3, [r3, #0]
 80182e2:	3304      	adds	r3, #4
 80182e4:	4619      	mov	r1, r3
 80182e6:	4819      	ldr	r0, [pc, #100]	@ (801834c <prvAddCurrentTaskToDelayedList+0x98>)
 80182e8:	f7fd fea5 	bl	8016036 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80182ec:	e026      	b.n	801833c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80182ee:	68fa      	ldr	r2, [r7, #12]
 80182f0:	687b      	ldr	r3, [r7, #4]
 80182f2:	4413      	add	r3, r2
 80182f4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80182f6:	4b14      	ldr	r3, [pc, #80]	@ (8018348 <prvAddCurrentTaskToDelayedList+0x94>)
 80182f8:	681b      	ldr	r3, [r3, #0]
 80182fa:	68ba      	ldr	r2, [r7, #8]
 80182fc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80182fe:	68ba      	ldr	r2, [r7, #8]
 8018300:	68fb      	ldr	r3, [r7, #12]
 8018302:	429a      	cmp	r2, r3
 8018304:	d209      	bcs.n	801831a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018306:	4b12      	ldr	r3, [pc, #72]	@ (8018350 <prvAddCurrentTaskToDelayedList+0x9c>)
 8018308:	681a      	ldr	r2, [r3, #0]
 801830a:	4b0f      	ldr	r3, [pc, #60]	@ (8018348 <prvAddCurrentTaskToDelayedList+0x94>)
 801830c:	681b      	ldr	r3, [r3, #0]
 801830e:	3304      	adds	r3, #4
 8018310:	4619      	mov	r1, r3
 8018312:	4610      	mov	r0, r2
 8018314:	f7fd feb3 	bl	801607e <vListInsert>
}
 8018318:	e010      	b.n	801833c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801831a:	4b0e      	ldr	r3, [pc, #56]	@ (8018354 <prvAddCurrentTaskToDelayedList+0xa0>)
 801831c:	681a      	ldr	r2, [r3, #0]
 801831e:	4b0a      	ldr	r3, [pc, #40]	@ (8018348 <prvAddCurrentTaskToDelayedList+0x94>)
 8018320:	681b      	ldr	r3, [r3, #0]
 8018322:	3304      	adds	r3, #4
 8018324:	4619      	mov	r1, r3
 8018326:	4610      	mov	r0, r2
 8018328:	f7fd fea9 	bl	801607e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801832c:	4b0a      	ldr	r3, [pc, #40]	@ (8018358 <prvAddCurrentTaskToDelayedList+0xa4>)
 801832e:	681b      	ldr	r3, [r3, #0]
 8018330:	68ba      	ldr	r2, [r7, #8]
 8018332:	429a      	cmp	r2, r3
 8018334:	d202      	bcs.n	801833c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8018336:	4a08      	ldr	r2, [pc, #32]	@ (8018358 <prvAddCurrentTaskToDelayedList+0xa4>)
 8018338:	68bb      	ldr	r3, [r7, #8]
 801833a:	6013      	str	r3, [r2, #0]
}
 801833c:	bf00      	nop
 801833e:	3710      	adds	r7, #16
 8018340:	46bd      	mov	sp, r7
 8018342:	bd80      	pop	{r7, pc}
 8018344:	24001e40 	.word	0x24001e40
 8018348:	24001968 	.word	0x24001968
 801834c:	24001e28 	.word	0x24001e28
 8018350:	24001df8 	.word	0x24001df8
 8018354:	24001df4 	.word	0x24001df4
 8018358:	24001e5c 	.word	0x24001e5c

0801835c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801835c:	b580      	push	{r7, lr}
 801835e:	b08a      	sub	sp, #40	@ 0x28
 8018360:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8018362:	2300      	movs	r3, #0
 8018364:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8018366:	f000 fb13 	bl	8018990 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801836a:	4b1d      	ldr	r3, [pc, #116]	@ (80183e0 <xTimerCreateTimerTask+0x84>)
 801836c:	681b      	ldr	r3, [r3, #0]
 801836e:	2b00      	cmp	r3, #0
 8018370:	d021      	beq.n	80183b6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8018372:	2300      	movs	r3, #0
 8018374:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8018376:	2300      	movs	r3, #0
 8018378:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801837a:	1d3a      	adds	r2, r7, #4
 801837c:	f107 0108 	add.w	r1, r7, #8
 8018380:	f107 030c 	add.w	r3, r7, #12
 8018384:	4618      	mov	r0, r3
 8018386:	f7fd fe0f 	bl	8015fa8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801838a:	6879      	ldr	r1, [r7, #4]
 801838c:	68bb      	ldr	r3, [r7, #8]
 801838e:	68fa      	ldr	r2, [r7, #12]
 8018390:	9202      	str	r2, [sp, #8]
 8018392:	9301      	str	r3, [sp, #4]
 8018394:	2302      	movs	r3, #2
 8018396:	9300      	str	r3, [sp, #0]
 8018398:	2300      	movs	r3, #0
 801839a:	460a      	mov	r2, r1
 801839c:	4911      	ldr	r1, [pc, #68]	@ (80183e4 <xTimerCreateTimerTask+0x88>)
 801839e:	4812      	ldr	r0, [pc, #72]	@ (80183e8 <xTimerCreateTimerTask+0x8c>)
 80183a0:	f7fe fdbe 	bl	8016f20 <xTaskCreateStatic>
 80183a4:	4603      	mov	r3, r0
 80183a6:	4a11      	ldr	r2, [pc, #68]	@ (80183ec <xTimerCreateTimerTask+0x90>)
 80183a8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80183aa:	4b10      	ldr	r3, [pc, #64]	@ (80183ec <xTimerCreateTimerTask+0x90>)
 80183ac:	681b      	ldr	r3, [r3, #0]
 80183ae:	2b00      	cmp	r3, #0
 80183b0:	d001      	beq.n	80183b6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80183b2:	2301      	movs	r3, #1
 80183b4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80183b6:	697b      	ldr	r3, [r7, #20]
 80183b8:	2b00      	cmp	r3, #0
 80183ba:	d10b      	bne.n	80183d4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80183bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80183c0:	f383 8811 	msr	BASEPRI, r3
 80183c4:	f3bf 8f6f 	isb	sy
 80183c8:	f3bf 8f4f 	dsb	sy
 80183cc:	613b      	str	r3, [r7, #16]
}
 80183ce:	bf00      	nop
 80183d0:	bf00      	nop
 80183d2:	e7fd      	b.n	80183d0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80183d4:	697b      	ldr	r3, [r7, #20]
}
 80183d6:	4618      	mov	r0, r3
 80183d8:	3718      	adds	r7, #24
 80183da:	46bd      	mov	sp, r7
 80183dc:	bd80      	pop	{r7, pc}
 80183de:	bf00      	nop
 80183e0:	24001e98 	.word	0x24001e98
 80183e4:	0801f838 	.word	0x0801f838
 80183e8:	08018529 	.word	0x08018529
 80183ec:	24001e9c 	.word	0x24001e9c

080183f0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80183f0:	b580      	push	{r7, lr}
 80183f2:	b08a      	sub	sp, #40	@ 0x28
 80183f4:	af00      	add	r7, sp, #0
 80183f6:	60f8      	str	r0, [r7, #12]
 80183f8:	60b9      	str	r1, [r7, #8]
 80183fa:	607a      	str	r2, [r7, #4]
 80183fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80183fe:	2300      	movs	r3, #0
 8018400:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8018402:	68fb      	ldr	r3, [r7, #12]
 8018404:	2b00      	cmp	r3, #0
 8018406:	d10b      	bne.n	8018420 <xTimerGenericCommand+0x30>
	__asm volatile
 8018408:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801840c:	f383 8811 	msr	BASEPRI, r3
 8018410:	f3bf 8f6f 	isb	sy
 8018414:	f3bf 8f4f 	dsb	sy
 8018418:	623b      	str	r3, [r7, #32]
}
 801841a:	bf00      	nop
 801841c:	bf00      	nop
 801841e:	e7fd      	b.n	801841c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8018420:	4b19      	ldr	r3, [pc, #100]	@ (8018488 <xTimerGenericCommand+0x98>)
 8018422:	681b      	ldr	r3, [r3, #0]
 8018424:	2b00      	cmp	r3, #0
 8018426:	d02a      	beq.n	801847e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8018428:	68bb      	ldr	r3, [r7, #8]
 801842a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801842c:	687b      	ldr	r3, [r7, #4]
 801842e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8018430:	68fb      	ldr	r3, [r7, #12]
 8018432:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8018434:	68bb      	ldr	r3, [r7, #8]
 8018436:	2b05      	cmp	r3, #5
 8018438:	dc18      	bgt.n	801846c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801843a:	f7ff fdad 	bl	8017f98 <xTaskGetSchedulerState>
 801843e:	4603      	mov	r3, r0
 8018440:	2b02      	cmp	r3, #2
 8018442:	d109      	bne.n	8018458 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8018444:	4b10      	ldr	r3, [pc, #64]	@ (8018488 <xTimerGenericCommand+0x98>)
 8018446:	6818      	ldr	r0, [r3, #0]
 8018448:	f107 0110 	add.w	r1, r7, #16
 801844c:	2300      	movs	r3, #0
 801844e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018450:	f7fd ffbe 	bl	80163d0 <xQueueGenericSend>
 8018454:	6278      	str	r0, [r7, #36]	@ 0x24
 8018456:	e012      	b.n	801847e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8018458:	4b0b      	ldr	r3, [pc, #44]	@ (8018488 <xTimerGenericCommand+0x98>)
 801845a:	6818      	ldr	r0, [r3, #0]
 801845c:	f107 0110 	add.w	r1, r7, #16
 8018460:	2300      	movs	r3, #0
 8018462:	2200      	movs	r2, #0
 8018464:	f7fd ffb4 	bl	80163d0 <xQueueGenericSend>
 8018468:	6278      	str	r0, [r7, #36]	@ 0x24
 801846a:	e008      	b.n	801847e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801846c:	4b06      	ldr	r3, [pc, #24]	@ (8018488 <xTimerGenericCommand+0x98>)
 801846e:	6818      	ldr	r0, [r3, #0]
 8018470:	f107 0110 	add.w	r1, r7, #16
 8018474:	2300      	movs	r3, #0
 8018476:	683a      	ldr	r2, [r7, #0]
 8018478:	f7fe f8ac 	bl	80165d4 <xQueueGenericSendFromISR>
 801847c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801847e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8018480:	4618      	mov	r0, r3
 8018482:	3728      	adds	r7, #40	@ 0x28
 8018484:	46bd      	mov	sp, r7
 8018486:	bd80      	pop	{r7, pc}
 8018488:	24001e98 	.word	0x24001e98

0801848c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801848c:	b580      	push	{r7, lr}
 801848e:	b088      	sub	sp, #32
 8018490:	af02      	add	r7, sp, #8
 8018492:	6078      	str	r0, [r7, #4]
 8018494:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018496:	4b23      	ldr	r3, [pc, #140]	@ (8018524 <prvProcessExpiredTimer+0x98>)
 8018498:	681b      	ldr	r3, [r3, #0]
 801849a:	68db      	ldr	r3, [r3, #12]
 801849c:	68db      	ldr	r3, [r3, #12]
 801849e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80184a0:	697b      	ldr	r3, [r7, #20]
 80184a2:	3304      	adds	r3, #4
 80184a4:	4618      	mov	r0, r3
 80184a6:	f7fd fe23 	bl	80160f0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80184aa:	697b      	ldr	r3, [r7, #20]
 80184ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80184b0:	f003 0304 	and.w	r3, r3, #4
 80184b4:	2b00      	cmp	r3, #0
 80184b6:	d023      	beq.n	8018500 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80184b8:	697b      	ldr	r3, [r7, #20]
 80184ba:	699a      	ldr	r2, [r3, #24]
 80184bc:	687b      	ldr	r3, [r7, #4]
 80184be:	18d1      	adds	r1, r2, r3
 80184c0:	687b      	ldr	r3, [r7, #4]
 80184c2:	683a      	ldr	r2, [r7, #0]
 80184c4:	6978      	ldr	r0, [r7, #20]
 80184c6:	f000 f8d5 	bl	8018674 <prvInsertTimerInActiveList>
 80184ca:	4603      	mov	r3, r0
 80184cc:	2b00      	cmp	r3, #0
 80184ce:	d020      	beq.n	8018512 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80184d0:	2300      	movs	r3, #0
 80184d2:	9300      	str	r3, [sp, #0]
 80184d4:	2300      	movs	r3, #0
 80184d6:	687a      	ldr	r2, [r7, #4]
 80184d8:	2100      	movs	r1, #0
 80184da:	6978      	ldr	r0, [r7, #20]
 80184dc:	f7ff ff88 	bl	80183f0 <xTimerGenericCommand>
 80184e0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80184e2:	693b      	ldr	r3, [r7, #16]
 80184e4:	2b00      	cmp	r3, #0
 80184e6:	d114      	bne.n	8018512 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80184e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80184ec:	f383 8811 	msr	BASEPRI, r3
 80184f0:	f3bf 8f6f 	isb	sy
 80184f4:	f3bf 8f4f 	dsb	sy
 80184f8:	60fb      	str	r3, [r7, #12]
}
 80184fa:	bf00      	nop
 80184fc:	bf00      	nop
 80184fe:	e7fd      	b.n	80184fc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018500:	697b      	ldr	r3, [r7, #20]
 8018502:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8018506:	f023 0301 	bic.w	r3, r3, #1
 801850a:	b2da      	uxtb	r2, r3
 801850c:	697b      	ldr	r3, [r7, #20]
 801850e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018512:	697b      	ldr	r3, [r7, #20]
 8018514:	6a1b      	ldr	r3, [r3, #32]
 8018516:	6978      	ldr	r0, [r7, #20]
 8018518:	4798      	blx	r3
}
 801851a:	bf00      	nop
 801851c:	3718      	adds	r7, #24
 801851e:	46bd      	mov	sp, r7
 8018520:	bd80      	pop	{r7, pc}
 8018522:	bf00      	nop
 8018524:	24001e90 	.word	0x24001e90

08018528 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8018528:	b580      	push	{r7, lr}
 801852a:	b084      	sub	sp, #16
 801852c:	af00      	add	r7, sp, #0
 801852e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8018530:	f107 0308 	add.w	r3, r7, #8
 8018534:	4618      	mov	r0, r3
 8018536:	f000 f859 	bl	80185ec <prvGetNextExpireTime>
 801853a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801853c:	68bb      	ldr	r3, [r7, #8]
 801853e:	4619      	mov	r1, r3
 8018540:	68f8      	ldr	r0, [r7, #12]
 8018542:	f000 f805 	bl	8018550 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8018546:	f000 f8d7 	bl	80186f8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801854a:	bf00      	nop
 801854c:	e7f0      	b.n	8018530 <prvTimerTask+0x8>
	...

08018550 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8018550:	b580      	push	{r7, lr}
 8018552:	b084      	sub	sp, #16
 8018554:	af00      	add	r7, sp, #0
 8018556:	6078      	str	r0, [r7, #4]
 8018558:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801855a:	f7ff f929 	bl	80177b0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801855e:	f107 0308 	add.w	r3, r7, #8
 8018562:	4618      	mov	r0, r3
 8018564:	f000 f866 	bl	8018634 <prvSampleTimeNow>
 8018568:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801856a:	68bb      	ldr	r3, [r7, #8]
 801856c:	2b00      	cmp	r3, #0
 801856e:	d130      	bne.n	80185d2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8018570:	683b      	ldr	r3, [r7, #0]
 8018572:	2b00      	cmp	r3, #0
 8018574:	d10a      	bne.n	801858c <prvProcessTimerOrBlockTask+0x3c>
 8018576:	687a      	ldr	r2, [r7, #4]
 8018578:	68fb      	ldr	r3, [r7, #12]
 801857a:	429a      	cmp	r2, r3
 801857c:	d806      	bhi.n	801858c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801857e:	f7ff f925 	bl	80177cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8018582:	68f9      	ldr	r1, [r7, #12]
 8018584:	6878      	ldr	r0, [r7, #4]
 8018586:	f7ff ff81 	bl	801848c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801858a:	e024      	b.n	80185d6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801858c:	683b      	ldr	r3, [r7, #0]
 801858e:	2b00      	cmp	r3, #0
 8018590:	d008      	beq.n	80185a4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8018592:	4b13      	ldr	r3, [pc, #76]	@ (80185e0 <prvProcessTimerOrBlockTask+0x90>)
 8018594:	681b      	ldr	r3, [r3, #0]
 8018596:	681b      	ldr	r3, [r3, #0]
 8018598:	2b00      	cmp	r3, #0
 801859a:	d101      	bne.n	80185a0 <prvProcessTimerOrBlockTask+0x50>
 801859c:	2301      	movs	r3, #1
 801859e:	e000      	b.n	80185a2 <prvProcessTimerOrBlockTask+0x52>
 80185a0:	2300      	movs	r3, #0
 80185a2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80185a4:	4b0f      	ldr	r3, [pc, #60]	@ (80185e4 <prvProcessTimerOrBlockTask+0x94>)
 80185a6:	6818      	ldr	r0, [r3, #0]
 80185a8:	687a      	ldr	r2, [r7, #4]
 80185aa:	68fb      	ldr	r3, [r7, #12]
 80185ac:	1ad3      	subs	r3, r2, r3
 80185ae:	683a      	ldr	r2, [r7, #0]
 80185b0:	4619      	mov	r1, r3
 80185b2:	f7fe fc81 	bl	8016eb8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80185b6:	f7ff f909 	bl	80177cc <xTaskResumeAll>
 80185ba:	4603      	mov	r3, r0
 80185bc:	2b00      	cmp	r3, #0
 80185be:	d10a      	bne.n	80185d6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80185c0:	4b09      	ldr	r3, [pc, #36]	@ (80185e8 <prvProcessTimerOrBlockTask+0x98>)
 80185c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80185c6:	601a      	str	r2, [r3, #0]
 80185c8:	f3bf 8f4f 	dsb	sy
 80185cc:	f3bf 8f6f 	isb	sy
}
 80185d0:	e001      	b.n	80185d6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80185d2:	f7ff f8fb 	bl	80177cc <xTaskResumeAll>
}
 80185d6:	bf00      	nop
 80185d8:	3710      	adds	r7, #16
 80185da:	46bd      	mov	sp, r7
 80185dc:	bd80      	pop	{r7, pc}
 80185de:	bf00      	nop
 80185e0:	24001e94 	.word	0x24001e94
 80185e4:	24001e98 	.word	0x24001e98
 80185e8:	e000ed04 	.word	0xe000ed04

080185ec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80185ec:	b480      	push	{r7}
 80185ee:	b085      	sub	sp, #20
 80185f0:	af00      	add	r7, sp, #0
 80185f2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80185f4:	4b0e      	ldr	r3, [pc, #56]	@ (8018630 <prvGetNextExpireTime+0x44>)
 80185f6:	681b      	ldr	r3, [r3, #0]
 80185f8:	681b      	ldr	r3, [r3, #0]
 80185fa:	2b00      	cmp	r3, #0
 80185fc:	d101      	bne.n	8018602 <prvGetNextExpireTime+0x16>
 80185fe:	2201      	movs	r2, #1
 8018600:	e000      	b.n	8018604 <prvGetNextExpireTime+0x18>
 8018602:	2200      	movs	r2, #0
 8018604:	687b      	ldr	r3, [r7, #4]
 8018606:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8018608:	687b      	ldr	r3, [r7, #4]
 801860a:	681b      	ldr	r3, [r3, #0]
 801860c:	2b00      	cmp	r3, #0
 801860e:	d105      	bne.n	801861c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8018610:	4b07      	ldr	r3, [pc, #28]	@ (8018630 <prvGetNextExpireTime+0x44>)
 8018612:	681b      	ldr	r3, [r3, #0]
 8018614:	68db      	ldr	r3, [r3, #12]
 8018616:	681b      	ldr	r3, [r3, #0]
 8018618:	60fb      	str	r3, [r7, #12]
 801861a:	e001      	b.n	8018620 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801861c:	2300      	movs	r3, #0
 801861e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8018620:	68fb      	ldr	r3, [r7, #12]
}
 8018622:	4618      	mov	r0, r3
 8018624:	3714      	adds	r7, #20
 8018626:	46bd      	mov	sp, r7
 8018628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801862c:	4770      	bx	lr
 801862e:	bf00      	nop
 8018630:	24001e90 	.word	0x24001e90

08018634 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8018634:	b580      	push	{r7, lr}
 8018636:	b084      	sub	sp, #16
 8018638:	af00      	add	r7, sp, #0
 801863a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801863c:	f7ff f964 	bl	8017908 <xTaskGetTickCount>
 8018640:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8018642:	4b0b      	ldr	r3, [pc, #44]	@ (8018670 <prvSampleTimeNow+0x3c>)
 8018644:	681b      	ldr	r3, [r3, #0]
 8018646:	68fa      	ldr	r2, [r7, #12]
 8018648:	429a      	cmp	r2, r3
 801864a:	d205      	bcs.n	8018658 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801864c:	f000 f93a 	bl	80188c4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8018650:	687b      	ldr	r3, [r7, #4]
 8018652:	2201      	movs	r2, #1
 8018654:	601a      	str	r2, [r3, #0]
 8018656:	e002      	b.n	801865e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8018658:	687b      	ldr	r3, [r7, #4]
 801865a:	2200      	movs	r2, #0
 801865c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801865e:	4a04      	ldr	r2, [pc, #16]	@ (8018670 <prvSampleTimeNow+0x3c>)
 8018660:	68fb      	ldr	r3, [r7, #12]
 8018662:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8018664:	68fb      	ldr	r3, [r7, #12]
}
 8018666:	4618      	mov	r0, r3
 8018668:	3710      	adds	r7, #16
 801866a:	46bd      	mov	sp, r7
 801866c:	bd80      	pop	{r7, pc}
 801866e:	bf00      	nop
 8018670:	24001ea0 	.word	0x24001ea0

08018674 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8018674:	b580      	push	{r7, lr}
 8018676:	b086      	sub	sp, #24
 8018678:	af00      	add	r7, sp, #0
 801867a:	60f8      	str	r0, [r7, #12]
 801867c:	60b9      	str	r1, [r7, #8]
 801867e:	607a      	str	r2, [r7, #4]
 8018680:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8018682:	2300      	movs	r3, #0
 8018684:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8018686:	68fb      	ldr	r3, [r7, #12]
 8018688:	68ba      	ldr	r2, [r7, #8]
 801868a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801868c:	68fb      	ldr	r3, [r7, #12]
 801868e:	68fa      	ldr	r2, [r7, #12]
 8018690:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8018692:	68ba      	ldr	r2, [r7, #8]
 8018694:	687b      	ldr	r3, [r7, #4]
 8018696:	429a      	cmp	r2, r3
 8018698:	d812      	bhi.n	80186c0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801869a:	687a      	ldr	r2, [r7, #4]
 801869c:	683b      	ldr	r3, [r7, #0]
 801869e:	1ad2      	subs	r2, r2, r3
 80186a0:	68fb      	ldr	r3, [r7, #12]
 80186a2:	699b      	ldr	r3, [r3, #24]
 80186a4:	429a      	cmp	r2, r3
 80186a6:	d302      	bcc.n	80186ae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80186a8:	2301      	movs	r3, #1
 80186aa:	617b      	str	r3, [r7, #20]
 80186ac:	e01b      	b.n	80186e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80186ae:	4b10      	ldr	r3, [pc, #64]	@ (80186f0 <prvInsertTimerInActiveList+0x7c>)
 80186b0:	681a      	ldr	r2, [r3, #0]
 80186b2:	68fb      	ldr	r3, [r7, #12]
 80186b4:	3304      	adds	r3, #4
 80186b6:	4619      	mov	r1, r3
 80186b8:	4610      	mov	r0, r2
 80186ba:	f7fd fce0 	bl	801607e <vListInsert>
 80186be:	e012      	b.n	80186e6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80186c0:	687a      	ldr	r2, [r7, #4]
 80186c2:	683b      	ldr	r3, [r7, #0]
 80186c4:	429a      	cmp	r2, r3
 80186c6:	d206      	bcs.n	80186d6 <prvInsertTimerInActiveList+0x62>
 80186c8:	68ba      	ldr	r2, [r7, #8]
 80186ca:	683b      	ldr	r3, [r7, #0]
 80186cc:	429a      	cmp	r2, r3
 80186ce:	d302      	bcc.n	80186d6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80186d0:	2301      	movs	r3, #1
 80186d2:	617b      	str	r3, [r7, #20]
 80186d4:	e007      	b.n	80186e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80186d6:	4b07      	ldr	r3, [pc, #28]	@ (80186f4 <prvInsertTimerInActiveList+0x80>)
 80186d8:	681a      	ldr	r2, [r3, #0]
 80186da:	68fb      	ldr	r3, [r7, #12]
 80186dc:	3304      	adds	r3, #4
 80186de:	4619      	mov	r1, r3
 80186e0:	4610      	mov	r0, r2
 80186e2:	f7fd fccc 	bl	801607e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80186e6:	697b      	ldr	r3, [r7, #20]
}
 80186e8:	4618      	mov	r0, r3
 80186ea:	3718      	adds	r7, #24
 80186ec:	46bd      	mov	sp, r7
 80186ee:	bd80      	pop	{r7, pc}
 80186f0:	24001e94 	.word	0x24001e94
 80186f4:	24001e90 	.word	0x24001e90

080186f8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80186f8:	b580      	push	{r7, lr}
 80186fa:	b08e      	sub	sp, #56	@ 0x38
 80186fc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80186fe:	e0ce      	b.n	801889e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8018700:	687b      	ldr	r3, [r7, #4]
 8018702:	2b00      	cmp	r3, #0
 8018704:	da19      	bge.n	801873a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8018706:	1d3b      	adds	r3, r7, #4
 8018708:	3304      	adds	r3, #4
 801870a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801870c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801870e:	2b00      	cmp	r3, #0
 8018710:	d10b      	bne.n	801872a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8018712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018716:	f383 8811 	msr	BASEPRI, r3
 801871a:	f3bf 8f6f 	isb	sy
 801871e:	f3bf 8f4f 	dsb	sy
 8018722:	61fb      	str	r3, [r7, #28]
}
 8018724:	bf00      	nop
 8018726:	bf00      	nop
 8018728:	e7fd      	b.n	8018726 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801872a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801872c:	681b      	ldr	r3, [r3, #0]
 801872e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018730:	6850      	ldr	r0, [r2, #4]
 8018732:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018734:	6892      	ldr	r2, [r2, #8]
 8018736:	4611      	mov	r1, r2
 8018738:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801873a:	687b      	ldr	r3, [r7, #4]
 801873c:	2b00      	cmp	r3, #0
 801873e:	f2c0 80ae 	blt.w	801889e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8018742:	68fb      	ldr	r3, [r7, #12]
 8018744:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8018746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018748:	695b      	ldr	r3, [r3, #20]
 801874a:	2b00      	cmp	r3, #0
 801874c:	d004      	beq.n	8018758 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801874e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018750:	3304      	adds	r3, #4
 8018752:	4618      	mov	r0, r3
 8018754:	f7fd fccc 	bl	80160f0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8018758:	463b      	mov	r3, r7
 801875a:	4618      	mov	r0, r3
 801875c:	f7ff ff6a 	bl	8018634 <prvSampleTimeNow>
 8018760:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8018762:	687b      	ldr	r3, [r7, #4]
 8018764:	2b09      	cmp	r3, #9
 8018766:	f200 8097 	bhi.w	8018898 <prvProcessReceivedCommands+0x1a0>
 801876a:	a201      	add	r2, pc, #4	@ (adr r2, 8018770 <prvProcessReceivedCommands+0x78>)
 801876c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018770:	08018799 	.word	0x08018799
 8018774:	08018799 	.word	0x08018799
 8018778:	08018799 	.word	0x08018799
 801877c:	0801880f 	.word	0x0801880f
 8018780:	08018823 	.word	0x08018823
 8018784:	0801886f 	.word	0x0801886f
 8018788:	08018799 	.word	0x08018799
 801878c:	08018799 	.word	0x08018799
 8018790:	0801880f 	.word	0x0801880f
 8018794:	08018823 	.word	0x08018823
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8018798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801879a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801879e:	f043 0301 	orr.w	r3, r3, #1
 80187a2:	b2da      	uxtb	r2, r3
 80187a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80187a6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80187aa:	68ba      	ldr	r2, [r7, #8]
 80187ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80187ae:	699b      	ldr	r3, [r3, #24]
 80187b0:	18d1      	adds	r1, r2, r3
 80187b2:	68bb      	ldr	r3, [r7, #8]
 80187b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80187b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80187b8:	f7ff ff5c 	bl	8018674 <prvInsertTimerInActiveList>
 80187bc:	4603      	mov	r3, r0
 80187be:	2b00      	cmp	r3, #0
 80187c0:	d06c      	beq.n	801889c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80187c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80187c4:	6a1b      	ldr	r3, [r3, #32]
 80187c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80187c8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80187ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80187cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80187d0:	f003 0304 	and.w	r3, r3, #4
 80187d4:	2b00      	cmp	r3, #0
 80187d6:	d061      	beq.n	801889c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80187d8:	68ba      	ldr	r2, [r7, #8]
 80187da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80187dc:	699b      	ldr	r3, [r3, #24]
 80187de:	441a      	add	r2, r3
 80187e0:	2300      	movs	r3, #0
 80187e2:	9300      	str	r3, [sp, #0]
 80187e4:	2300      	movs	r3, #0
 80187e6:	2100      	movs	r1, #0
 80187e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80187ea:	f7ff fe01 	bl	80183f0 <xTimerGenericCommand>
 80187ee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80187f0:	6a3b      	ldr	r3, [r7, #32]
 80187f2:	2b00      	cmp	r3, #0
 80187f4:	d152      	bne.n	801889c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80187f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80187fa:	f383 8811 	msr	BASEPRI, r3
 80187fe:	f3bf 8f6f 	isb	sy
 8018802:	f3bf 8f4f 	dsb	sy
 8018806:	61bb      	str	r3, [r7, #24]
}
 8018808:	bf00      	nop
 801880a:	bf00      	nop
 801880c:	e7fd      	b.n	801880a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801880e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018810:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8018814:	f023 0301 	bic.w	r3, r3, #1
 8018818:	b2da      	uxtb	r2, r3
 801881a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801881c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8018820:	e03d      	b.n	801889e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8018822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018824:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8018828:	f043 0301 	orr.w	r3, r3, #1
 801882c:	b2da      	uxtb	r2, r3
 801882e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018830:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8018834:	68ba      	ldr	r2, [r7, #8]
 8018836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018838:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801883a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801883c:	699b      	ldr	r3, [r3, #24]
 801883e:	2b00      	cmp	r3, #0
 8018840:	d10b      	bne.n	801885a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8018842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018846:	f383 8811 	msr	BASEPRI, r3
 801884a:	f3bf 8f6f 	isb	sy
 801884e:	f3bf 8f4f 	dsb	sy
 8018852:	617b      	str	r3, [r7, #20]
}
 8018854:	bf00      	nop
 8018856:	bf00      	nop
 8018858:	e7fd      	b.n	8018856 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801885a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801885c:	699a      	ldr	r2, [r3, #24]
 801885e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018860:	18d1      	adds	r1, r2, r3
 8018862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018864:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018866:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018868:	f7ff ff04 	bl	8018674 <prvInsertTimerInActiveList>
					break;
 801886c:	e017      	b.n	801889e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801886e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018870:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8018874:	f003 0302 	and.w	r3, r3, #2
 8018878:	2b00      	cmp	r3, #0
 801887a:	d103      	bne.n	8018884 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 801887c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801887e:	f000 fbeb 	bl	8019058 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8018882:	e00c      	b.n	801889e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018886:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801888a:	f023 0301 	bic.w	r3, r3, #1
 801888e:	b2da      	uxtb	r2, r3
 8018890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018892:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8018896:	e002      	b.n	801889e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8018898:	bf00      	nop
 801889a:	e000      	b.n	801889e <prvProcessReceivedCommands+0x1a6>
					break;
 801889c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801889e:	4b08      	ldr	r3, [pc, #32]	@ (80188c0 <prvProcessReceivedCommands+0x1c8>)
 80188a0:	681b      	ldr	r3, [r3, #0]
 80188a2:	1d39      	adds	r1, r7, #4
 80188a4:	2200      	movs	r2, #0
 80188a6:	4618      	mov	r0, r3
 80188a8:	f7fd ffc2 	bl	8016830 <xQueueReceive>
 80188ac:	4603      	mov	r3, r0
 80188ae:	2b00      	cmp	r3, #0
 80188b0:	f47f af26 	bne.w	8018700 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80188b4:	bf00      	nop
 80188b6:	bf00      	nop
 80188b8:	3730      	adds	r7, #48	@ 0x30
 80188ba:	46bd      	mov	sp, r7
 80188bc:	bd80      	pop	{r7, pc}
 80188be:	bf00      	nop
 80188c0:	24001e98 	.word	0x24001e98

080188c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80188c4:	b580      	push	{r7, lr}
 80188c6:	b088      	sub	sp, #32
 80188c8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80188ca:	e049      	b.n	8018960 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80188cc:	4b2e      	ldr	r3, [pc, #184]	@ (8018988 <prvSwitchTimerLists+0xc4>)
 80188ce:	681b      	ldr	r3, [r3, #0]
 80188d0:	68db      	ldr	r3, [r3, #12]
 80188d2:	681b      	ldr	r3, [r3, #0]
 80188d4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80188d6:	4b2c      	ldr	r3, [pc, #176]	@ (8018988 <prvSwitchTimerLists+0xc4>)
 80188d8:	681b      	ldr	r3, [r3, #0]
 80188da:	68db      	ldr	r3, [r3, #12]
 80188dc:	68db      	ldr	r3, [r3, #12]
 80188de:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80188e0:	68fb      	ldr	r3, [r7, #12]
 80188e2:	3304      	adds	r3, #4
 80188e4:	4618      	mov	r0, r3
 80188e6:	f7fd fc03 	bl	80160f0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80188ea:	68fb      	ldr	r3, [r7, #12]
 80188ec:	6a1b      	ldr	r3, [r3, #32]
 80188ee:	68f8      	ldr	r0, [r7, #12]
 80188f0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80188f2:	68fb      	ldr	r3, [r7, #12]
 80188f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80188f8:	f003 0304 	and.w	r3, r3, #4
 80188fc:	2b00      	cmp	r3, #0
 80188fe:	d02f      	beq.n	8018960 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8018900:	68fb      	ldr	r3, [r7, #12]
 8018902:	699b      	ldr	r3, [r3, #24]
 8018904:	693a      	ldr	r2, [r7, #16]
 8018906:	4413      	add	r3, r2
 8018908:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801890a:	68ba      	ldr	r2, [r7, #8]
 801890c:	693b      	ldr	r3, [r7, #16]
 801890e:	429a      	cmp	r2, r3
 8018910:	d90e      	bls.n	8018930 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8018912:	68fb      	ldr	r3, [r7, #12]
 8018914:	68ba      	ldr	r2, [r7, #8]
 8018916:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8018918:	68fb      	ldr	r3, [r7, #12]
 801891a:	68fa      	ldr	r2, [r7, #12]
 801891c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801891e:	4b1a      	ldr	r3, [pc, #104]	@ (8018988 <prvSwitchTimerLists+0xc4>)
 8018920:	681a      	ldr	r2, [r3, #0]
 8018922:	68fb      	ldr	r3, [r7, #12]
 8018924:	3304      	adds	r3, #4
 8018926:	4619      	mov	r1, r3
 8018928:	4610      	mov	r0, r2
 801892a:	f7fd fba8 	bl	801607e <vListInsert>
 801892e:	e017      	b.n	8018960 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018930:	2300      	movs	r3, #0
 8018932:	9300      	str	r3, [sp, #0]
 8018934:	2300      	movs	r3, #0
 8018936:	693a      	ldr	r2, [r7, #16]
 8018938:	2100      	movs	r1, #0
 801893a:	68f8      	ldr	r0, [r7, #12]
 801893c:	f7ff fd58 	bl	80183f0 <xTimerGenericCommand>
 8018940:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8018942:	687b      	ldr	r3, [r7, #4]
 8018944:	2b00      	cmp	r3, #0
 8018946:	d10b      	bne.n	8018960 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8018948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801894c:	f383 8811 	msr	BASEPRI, r3
 8018950:	f3bf 8f6f 	isb	sy
 8018954:	f3bf 8f4f 	dsb	sy
 8018958:	603b      	str	r3, [r7, #0]
}
 801895a:	bf00      	nop
 801895c:	bf00      	nop
 801895e:	e7fd      	b.n	801895c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8018960:	4b09      	ldr	r3, [pc, #36]	@ (8018988 <prvSwitchTimerLists+0xc4>)
 8018962:	681b      	ldr	r3, [r3, #0]
 8018964:	681b      	ldr	r3, [r3, #0]
 8018966:	2b00      	cmp	r3, #0
 8018968:	d1b0      	bne.n	80188cc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801896a:	4b07      	ldr	r3, [pc, #28]	@ (8018988 <prvSwitchTimerLists+0xc4>)
 801896c:	681b      	ldr	r3, [r3, #0]
 801896e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8018970:	4b06      	ldr	r3, [pc, #24]	@ (801898c <prvSwitchTimerLists+0xc8>)
 8018972:	681b      	ldr	r3, [r3, #0]
 8018974:	4a04      	ldr	r2, [pc, #16]	@ (8018988 <prvSwitchTimerLists+0xc4>)
 8018976:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8018978:	4a04      	ldr	r2, [pc, #16]	@ (801898c <prvSwitchTimerLists+0xc8>)
 801897a:	697b      	ldr	r3, [r7, #20]
 801897c:	6013      	str	r3, [r2, #0]
}
 801897e:	bf00      	nop
 8018980:	3718      	adds	r7, #24
 8018982:	46bd      	mov	sp, r7
 8018984:	bd80      	pop	{r7, pc}
 8018986:	bf00      	nop
 8018988:	24001e90 	.word	0x24001e90
 801898c:	24001e94 	.word	0x24001e94

08018990 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8018990:	b580      	push	{r7, lr}
 8018992:	b082      	sub	sp, #8
 8018994:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8018996:	f000 f96f 	bl	8018c78 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801899a:	4b15      	ldr	r3, [pc, #84]	@ (80189f0 <prvCheckForValidListAndQueue+0x60>)
 801899c:	681b      	ldr	r3, [r3, #0]
 801899e:	2b00      	cmp	r3, #0
 80189a0:	d120      	bne.n	80189e4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80189a2:	4814      	ldr	r0, [pc, #80]	@ (80189f4 <prvCheckForValidListAndQueue+0x64>)
 80189a4:	f7fd fb1a 	bl	8015fdc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80189a8:	4813      	ldr	r0, [pc, #76]	@ (80189f8 <prvCheckForValidListAndQueue+0x68>)
 80189aa:	f7fd fb17 	bl	8015fdc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80189ae:	4b13      	ldr	r3, [pc, #76]	@ (80189fc <prvCheckForValidListAndQueue+0x6c>)
 80189b0:	4a10      	ldr	r2, [pc, #64]	@ (80189f4 <prvCheckForValidListAndQueue+0x64>)
 80189b2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80189b4:	4b12      	ldr	r3, [pc, #72]	@ (8018a00 <prvCheckForValidListAndQueue+0x70>)
 80189b6:	4a10      	ldr	r2, [pc, #64]	@ (80189f8 <prvCheckForValidListAndQueue+0x68>)
 80189b8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80189ba:	2300      	movs	r3, #0
 80189bc:	9300      	str	r3, [sp, #0]
 80189be:	4b11      	ldr	r3, [pc, #68]	@ (8018a04 <prvCheckForValidListAndQueue+0x74>)
 80189c0:	4a11      	ldr	r2, [pc, #68]	@ (8018a08 <prvCheckForValidListAndQueue+0x78>)
 80189c2:	2110      	movs	r1, #16
 80189c4:	200a      	movs	r0, #10
 80189c6:	f7fd fc27 	bl	8016218 <xQueueGenericCreateStatic>
 80189ca:	4603      	mov	r3, r0
 80189cc:	4a08      	ldr	r2, [pc, #32]	@ (80189f0 <prvCheckForValidListAndQueue+0x60>)
 80189ce:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80189d0:	4b07      	ldr	r3, [pc, #28]	@ (80189f0 <prvCheckForValidListAndQueue+0x60>)
 80189d2:	681b      	ldr	r3, [r3, #0]
 80189d4:	2b00      	cmp	r3, #0
 80189d6:	d005      	beq.n	80189e4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80189d8:	4b05      	ldr	r3, [pc, #20]	@ (80189f0 <prvCheckForValidListAndQueue+0x60>)
 80189da:	681b      	ldr	r3, [r3, #0]
 80189dc:	490b      	ldr	r1, [pc, #44]	@ (8018a0c <prvCheckForValidListAndQueue+0x7c>)
 80189de:	4618      	mov	r0, r3
 80189e0:	f7fe fa40 	bl	8016e64 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80189e4:	f000 f97a 	bl	8018cdc <vPortExitCritical>
}
 80189e8:	bf00      	nop
 80189ea:	46bd      	mov	sp, r7
 80189ec:	bd80      	pop	{r7, pc}
 80189ee:	bf00      	nop
 80189f0:	24001e98 	.word	0x24001e98
 80189f4:	24001e68 	.word	0x24001e68
 80189f8:	24001e7c 	.word	0x24001e7c
 80189fc:	24001e90 	.word	0x24001e90
 8018a00:	24001e94 	.word	0x24001e94
 8018a04:	24001f44 	.word	0x24001f44
 8018a08:	24001ea4 	.word	0x24001ea4
 8018a0c:	0801f840 	.word	0x0801f840

08018a10 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8018a10:	b480      	push	{r7}
 8018a12:	b085      	sub	sp, #20
 8018a14:	af00      	add	r7, sp, #0
 8018a16:	60f8      	str	r0, [r7, #12]
 8018a18:	60b9      	str	r1, [r7, #8]
 8018a1a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8018a1c:	68fb      	ldr	r3, [r7, #12]
 8018a1e:	3b04      	subs	r3, #4
 8018a20:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8018a22:	68fb      	ldr	r3, [r7, #12]
 8018a24:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8018a28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8018a2a:	68fb      	ldr	r3, [r7, #12]
 8018a2c:	3b04      	subs	r3, #4
 8018a2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8018a30:	68bb      	ldr	r3, [r7, #8]
 8018a32:	f023 0201 	bic.w	r2, r3, #1
 8018a36:	68fb      	ldr	r3, [r7, #12]
 8018a38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8018a3a:	68fb      	ldr	r3, [r7, #12]
 8018a3c:	3b04      	subs	r3, #4
 8018a3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8018a40:	4a0c      	ldr	r2, [pc, #48]	@ (8018a74 <pxPortInitialiseStack+0x64>)
 8018a42:	68fb      	ldr	r3, [r7, #12]
 8018a44:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8018a46:	68fb      	ldr	r3, [r7, #12]
 8018a48:	3b14      	subs	r3, #20
 8018a4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8018a4c:	687a      	ldr	r2, [r7, #4]
 8018a4e:	68fb      	ldr	r3, [r7, #12]
 8018a50:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8018a52:	68fb      	ldr	r3, [r7, #12]
 8018a54:	3b04      	subs	r3, #4
 8018a56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8018a58:	68fb      	ldr	r3, [r7, #12]
 8018a5a:	f06f 0202 	mvn.w	r2, #2
 8018a5e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8018a60:	68fb      	ldr	r3, [r7, #12]
 8018a62:	3b20      	subs	r3, #32
 8018a64:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8018a66:	68fb      	ldr	r3, [r7, #12]
}
 8018a68:	4618      	mov	r0, r3
 8018a6a:	3714      	adds	r7, #20
 8018a6c:	46bd      	mov	sp, r7
 8018a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a72:	4770      	bx	lr
 8018a74:	08018a79 	.word	0x08018a79

08018a78 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8018a78:	b480      	push	{r7}
 8018a7a:	b085      	sub	sp, #20
 8018a7c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8018a7e:	2300      	movs	r3, #0
 8018a80:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8018a82:	4b13      	ldr	r3, [pc, #76]	@ (8018ad0 <prvTaskExitError+0x58>)
 8018a84:	681b      	ldr	r3, [r3, #0]
 8018a86:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8018a8a:	d00b      	beq.n	8018aa4 <prvTaskExitError+0x2c>
	__asm volatile
 8018a8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018a90:	f383 8811 	msr	BASEPRI, r3
 8018a94:	f3bf 8f6f 	isb	sy
 8018a98:	f3bf 8f4f 	dsb	sy
 8018a9c:	60fb      	str	r3, [r7, #12]
}
 8018a9e:	bf00      	nop
 8018aa0:	bf00      	nop
 8018aa2:	e7fd      	b.n	8018aa0 <prvTaskExitError+0x28>
	__asm volatile
 8018aa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018aa8:	f383 8811 	msr	BASEPRI, r3
 8018aac:	f3bf 8f6f 	isb	sy
 8018ab0:	f3bf 8f4f 	dsb	sy
 8018ab4:	60bb      	str	r3, [r7, #8]
}
 8018ab6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8018ab8:	bf00      	nop
 8018aba:	687b      	ldr	r3, [r7, #4]
 8018abc:	2b00      	cmp	r3, #0
 8018abe:	d0fc      	beq.n	8018aba <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8018ac0:	bf00      	nop
 8018ac2:	bf00      	nop
 8018ac4:	3714      	adds	r7, #20
 8018ac6:	46bd      	mov	sp, r7
 8018ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018acc:	4770      	bx	lr
 8018ace:	bf00      	nop
 8018ad0:	24000028 	.word	0x24000028
	...

08018ae0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8018ae0:	4b07      	ldr	r3, [pc, #28]	@ (8018b00 <pxCurrentTCBConst2>)
 8018ae2:	6819      	ldr	r1, [r3, #0]
 8018ae4:	6808      	ldr	r0, [r1, #0]
 8018ae6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018aea:	f380 8809 	msr	PSP, r0
 8018aee:	f3bf 8f6f 	isb	sy
 8018af2:	f04f 0000 	mov.w	r0, #0
 8018af6:	f380 8811 	msr	BASEPRI, r0
 8018afa:	4770      	bx	lr
 8018afc:	f3af 8000 	nop.w

08018b00 <pxCurrentTCBConst2>:
 8018b00:	24001968 	.word	0x24001968
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8018b04:	bf00      	nop
 8018b06:	bf00      	nop

08018b08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8018b08:	4808      	ldr	r0, [pc, #32]	@ (8018b2c <prvPortStartFirstTask+0x24>)
 8018b0a:	6800      	ldr	r0, [r0, #0]
 8018b0c:	6800      	ldr	r0, [r0, #0]
 8018b0e:	f380 8808 	msr	MSP, r0
 8018b12:	f04f 0000 	mov.w	r0, #0
 8018b16:	f380 8814 	msr	CONTROL, r0
 8018b1a:	b662      	cpsie	i
 8018b1c:	b661      	cpsie	f
 8018b1e:	f3bf 8f4f 	dsb	sy
 8018b22:	f3bf 8f6f 	isb	sy
 8018b26:	df00      	svc	0
 8018b28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8018b2a:	bf00      	nop
 8018b2c:	e000ed08 	.word	0xe000ed08

08018b30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8018b30:	b580      	push	{r7, lr}
 8018b32:	b086      	sub	sp, #24
 8018b34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8018b36:	4b47      	ldr	r3, [pc, #284]	@ (8018c54 <xPortStartScheduler+0x124>)
 8018b38:	681b      	ldr	r3, [r3, #0]
 8018b3a:	4a47      	ldr	r2, [pc, #284]	@ (8018c58 <xPortStartScheduler+0x128>)
 8018b3c:	4293      	cmp	r3, r2
 8018b3e:	d10b      	bne.n	8018b58 <xPortStartScheduler+0x28>
	__asm volatile
 8018b40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018b44:	f383 8811 	msr	BASEPRI, r3
 8018b48:	f3bf 8f6f 	isb	sy
 8018b4c:	f3bf 8f4f 	dsb	sy
 8018b50:	60fb      	str	r3, [r7, #12]
}
 8018b52:	bf00      	nop
 8018b54:	bf00      	nop
 8018b56:	e7fd      	b.n	8018b54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8018b58:	4b3e      	ldr	r3, [pc, #248]	@ (8018c54 <xPortStartScheduler+0x124>)
 8018b5a:	681b      	ldr	r3, [r3, #0]
 8018b5c:	4a3f      	ldr	r2, [pc, #252]	@ (8018c5c <xPortStartScheduler+0x12c>)
 8018b5e:	4293      	cmp	r3, r2
 8018b60:	d10b      	bne.n	8018b7a <xPortStartScheduler+0x4a>
	__asm volatile
 8018b62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018b66:	f383 8811 	msr	BASEPRI, r3
 8018b6a:	f3bf 8f6f 	isb	sy
 8018b6e:	f3bf 8f4f 	dsb	sy
 8018b72:	613b      	str	r3, [r7, #16]
}
 8018b74:	bf00      	nop
 8018b76:	bf00      	nop
 8018b78:	e7fd      	b.n	8018b76 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8018b7a:	4b39      	ldr	r3, [pc, #228]	@ (8018c60 <xPortStartScheduler+0x130>)
 8018b7c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8018b7e:	697b      	ldr	r3, [r7, #20]
 8018b80:	781b      	ldrb	r3, [r3, #0]
 8018b82:	b2db      	uxtb	r3, r3
 8018b84:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8018b86:	697b      	ldr	r3, [r7, #20]
 8018b88:	22ff      	movs	r2, #255	@ 0xff
 8018b8a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8018b8c:	697b      	ldr	r3, [r7, #20]
 8018b8e:	781b      	ldrb	r3, [r3, #0]
 8018b90:	b2db      	uxtb	r3, r3
 8018b92:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8018b94:	78fb      	ldrb	r3, [r7, #3]
 8018b96:	b2db      	uxtb	r3, r3
 8018b98:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8018b9c:	b2da      	uxtb	r2, r3
 8018b9e:	4b31      	ldr	r3, [pc, #196]	@ (8018c64 <xPortStartScheduler+0x134>)
 8018ba0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8018ba2:	4b31      	ldr	r3, [pc, #196]	@ (8018c68 <xPortStartScheduler+0x138>)
 8018ba4:	2207      	movs	r2, #7
 8018ba6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018ba8:	e009      	b.n	8018bbe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8018baa:	4b2f      	ldr	r3, [pc, #188]	@ (8018c68 <xPortStartScheduler+0x138>)
 8018bac:	681b      	ldr	r3, [r3, #0]
 8018bae:	3b01      	subs	r3, #1
 8018bb0:	4a2d      	ldr	r2, [pc, #180]	@ (8018c68 <xPortStartScheduler+0x138>)
 8018bb2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8018bb4:	78fb      	ldrb	r3, [r7, #3]
 8018bb6:	b2db      	uxtb	r3, r3
 8018bb8:	005b      	lsls	r3, r3, #1
 8018bba:	b2db      	uxtb	r3, r3
 8018bbc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018bbe:	78fb      	ldrb	r3, [r7, #3]
 8018bc0:	b2db      	uxtb	r3, r3
 8018bc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8018bc6:	2b80      	cmp	r3, #128	@ 0x80
 8018bc8:	d0ef      	beq.n	8018baa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8018bca:	4b27      	ldr	r3, [pc, #156]	@ (8018c68 <xPortStartScheduler+0x138>)
 8018bcc:	681b      	ldr	r3, [r3, #0]
 8018bce:	f1c3 0307 	rsb	r3, r3, #7
 8018bd2:	2b04      	cmp	r3, #4
 8018bd4:	d00b      	beq.n	8018bee <xPortStartScheduler+0xbe>
	__asm volatile
 8018bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018bda:	f383 8811 	msr	BASEPRI, r3
 8018bde:	f3bf 8f6f 	isb	sy
 8018be2:	f3bf 8f4f 	dsb	sy
 8018be6:	60bb      	str	r3, [r7, #8]
}
 8018be8:	bf00      	nop
 8018bea:	bf00      	nop
 8018bec:	e7fd      	b.n	8018bea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8018bee:	4b1e      	ldr	r3, [pc, #120]	@ (8018c68 <xPortStartScheduler+0x138>)
 8018bf0:	681b      	ldr	r3, [r3, #0]
 8018bf2:	021b      	lsls	r3, r3, #8
 8018bf4:	4a1c      	ldr	r2, [pc, #112]	@ (8018c68 <xPortStartScheduler+0x138>)
 8018bf6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8018bf8:	4b1b      	ldr	r3, [pc, #108]	@ (8018c68 <xPortStartScheduler+0x138>)
 8018bfa:	681b      	ldr	r3, [r3, #0]
 8018bfc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8018c00:	4a19      	ldr	r2, [pc, #100]	@ (8018c68 <xPortStartScheduler+0x138>)
 8018c02:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8018c04:	687b      	ldr	r3, [r7, #4]
 8018c06:	b2da      	uxtb	r2, r3
 8018c08:	697b      	ldr	r3, [r7, #20]
 8018c0a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8018c0c:	4b17      	ldr	r3, [pc, #92]	@ (8018c6c <xPortStartScheduler+0x13c>)
 8018c0e:	681b      	ldr	r3, [r3, #0]
 8018c10:	4a16      	ldr	r2, [pc, #88]	@ (8018c6c <xPortStartScheduler+0x13c>)
 8018c12:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8018c16:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8018c18:	4b14      	ldr	r3, [pc, #80]	@ (8018c6c <xPortStartScheduler+0x13c>)
 8018c1a:	681b      	ldr	r3, [r3, #0]
 8018c1c:	4a13      	ldr	r2, [pc, #76]	@ (8018c6c <xPortStartScheduler+0x13c>)
 8018c1e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8018c22:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8018c24:	f000 f8da 	bl	8018ddc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8018c28:	4b11      	ldr	r3, [pc, #68]	@ (8018c70 <xPortStartScheduler+0x140>)
 8018c2a:	2200      	movs	r2, #0
 8018c2c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8018c2e:	f000 f8f9 	bl	8018e24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8018c32:	4b10      	ldr	r3, [pc, #64]	@ (8018c74 <xPortStartScheduler+0x144>)
 8018c34:	681b      	ldr	r3, [r3, #0]
 8018c36:	4a0f      	ldr	r2, [pc, #60]	@ (8018c74 <xPortStartScheduler+0x144>)
 8018c38:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8018c3c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8018c3e:	f7ff ff63 	bl	8018b08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8018c42:	f7fe ff2b 	bl	8017a9c <vTaskSwitchContext>
	prvTaskExitError();
 8018c46:	f7ff ff17 	bl	8018a78 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8018c4a:	2300      	movs	r3, #0
}
 8018c4c:	4618      	mov	r0, r3
 8018c4e:	3718      	adds	r7, #24
 8018c50:	46bd      	mov	sp, r7
 8018c52:	bd80      	pop	{r7, pc}
 8018c54:	e000ed00 	.word	0xe000ed00
 8018c58:	410fc271 	.word	0x410fc271
 8018c5c:	410fc270 	.word	0x410fc270
 8018c60:	e000e400 	.word	0xe000e400
 8018c64:	24001f94 	.word	0x24001f94
 8018c68:	24001f98 	.word	0x24001f98
 8018c6c:	e000ed20 	.word	0xe000ed20
 8018c70:	24000028 	.word	0x24000028
 8018c74:	e000ef34 	.word	0xe000ef34

08018c78 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8018c78:	b480      	push	{r7}
 8018c7a:	b083      	sub	sp, #12
 8018c7c:	af00      	add	r7, sp, #0
	__asm volatile
 8018c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018c82:	f383 8811 	msr	BASEPRI, r3
 8018c86:	f3bf 8f6f 	isb	sy
 8018c8a:	f3bf 8f4f 	dsb	sy
 8018c8e:	607b      	str	r3, [r7, #4]
}
 8018c90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8018c92:	4b10      	ldr	r3, [pc, #64]	@ (8018cd4 <vPortEnterCritical+0x5c>)
 8018c94:	681b      	ldr	r3, [r3, #0]
 8018c96:	3301      	adds	r3, #1
 8018c98:	4a0e      	ldr	r2, [pc, #56]	@ (8018cd4 <vPortEnterCritical+0x5c>)
 8018c9a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8018c9c:	4b0d      	ldr	r3, [pc, #52]	@ (8018cd4 <vPortEnterCritical+0x5c>)
 8018c9e:	681b      	ldr	r3, [r3, #0]
 8018ca0:	2b01      	cmp	r3, #1
 8018ca2:	d110      	bne.n	8018cc6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8018ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8018cd8 <vPortEnterCritical+0x60>)
 8018ca6:	681b      	ldr	r3, [r3, #0]
 8018ca8:	b2db      	uxtb	r3, r3
 8018caa:	2b00      	cmp	r3, #0
 8018cac:	d00b      	beq.n	8018cc6 <vPortEnterCritical+0x4e>
	__asm volatile
 8018cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018cb2:	f383 8811 	msr	BASEPRI, r3
 8018cb6:	f3bf 8f6f 	isb	sy
 8018cba:	f3bf 8f4f 	dsb	sy
 8018cbe:	603b      	str	r3, [r7, #0]
}
 8018cc0:	bf00      	nop
 8018cc2:	bf00      	nop
 8018cc4:	e7fd      	b.n	8018cc2 <vPortEnterCritical+0x4a>
	}
}
 8018cc6:	bf00      	nop
 8018cc8:	370c      	adds	r7, #12
 8018cca:	46bd      	mov	sp, r7
 8018ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cd0:	4770      	bx	lr
 8018cd2:	bf00      	nop
 8018cd4:	24000028 	.word	0x24000028
 8018cd8:	e000ed04 	.word	0xe000ed04

08018cdc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8018cdc:	b480      	push	{r7}
 8018cde:	b083      	sub	sp, #12
 8018ce0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8018ce2:	4b12      	ldr	r3, [pc, #72]	@ (8018d2c <vPortExitCritical+0x50>)
 8018ce4:	681b      	ldr	r3, [r3, #0]
 8018ce6:	2b00      	cmp	r3, #0
 8018ce8:	d10b      	bne.n	8018d02 <vPortExitCritical+0x26>
	__asm volatile
 8018cea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018cee:	f383 8811 	msr	BASEPRI, r3
 8018cf2:	f3bf 8f6f 	isb	sy
 8018cf6:	f3bf 8f4f 	dsb	sy
 8018cfa:	607b      	str	r3, [r7, #4]
}
 8018cfc:	bf00      	nop
 8018cfe:	bf00      	nop
 8018d00:	e7fd      	b.n	8018cfe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8018d02:	4b0a      	ldr	r3, [pc, #40]	@ (8018d2c <vPortExitCritical+0x50>)
 8018d04:	681b      	ldr	r3, [r3, #0]
 8018d06:	3b01      	subs	r3, #1
 8018d08:	4a08      	ldr	r2, [pc, #32]	@ (8018d2c <vPortExitCritical+0x50>)
 8018d0a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8018d0c:	4b07      	ldr	r3, [pc, #28]	@ (8018d2c <vPortExitCritical+0x50>)
 8018d0e:	681b      	ldr	r3, [r3, #0]
 8018d10:	2b00      	cmp	r3, #0
 8018d12:	d105      	bne.n	8018d20 <vPortExitCritical+0x44>
 8018d14:	2300      	movs	r3, #0
 8018d16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8018d18:	683b      	ldr	r3, [r7, #0]
 8018d1a:	f383 8811 	msr	BASEPRI, r3
}
 8018d1e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8018d20:	bf00      	nop
 8018d22:	370c      	adds	r7, #12
 8018d24:	46bd      	mov	sp, r7
 8018d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d2a:	4770      	bx	lr
 8018d2c:	24000028 	.word	0x24000028

08018d30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8018d30:	f3ef 8009 	mrs	r0, PSP
 8018d34:	f3bf 8f6f 	isb	sy
 8018d38:	4b15      	ldr	r3, [pc, #84]	@ (8018d90 <pxCurrentTCBConst>)
 8018d3a:	681a      	ldr	r2, [r3, #0]
 8018d3c:	f01e 0f10 	tst.w	lr, #16
 8018d40:	bf08      	it	eq
 8018d42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8018d46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d4a:	6010      	str	r0, [r2, #0]
 8018d4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8018d50:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8018d54:	f380 8811 	msr	BASEPRI, r0
 8018d58:	f3bf 8f4f 	dsb	sy
 8018d5c:	f3bf 8f6f 	isb	sy
 8018d60:	f7fe fe9c 	bl	8017a9c <vTaskSwitchContext>
 8018d64:	f04f 0000 	mov.w	r0, #0
 8018d68:	f380 8811 	msr	BASEPRI, r0
 8018d6c:	bc09      	pop	{r0, r3}
 8018d6e:	6819      	ldr	r1, [r3, #0]
 8018d70:	6808      	ldr	r0, [r1, #0]
 8018d72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d76:	f01e 0f10 	tst.w	lr, #16
 8018d7a:	bf08      	it	eq
 8018d7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8018d80:	f380 8809 	msr	PSP, r0
 8018d84:	f3bf 8f6f 	isb	sy
 8018d88:	4770      	bx	lr
 8018d8a:	bf00      	nop
 8018d8c:	f3af 8000 	nop.w

08018d90 <pxCurrentTCBConst>:
 8018d90:	24001968 	.word	0x24001968
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8018d94:	bf00      	nop
 8018d96:	bf00      	nop

08018d98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8018d98:	b580      	push	{r7, lr}
 8018d9a:	b082      	sub	sp, #8
 8018d9c:	af00      	add	r7, sp, #0
	__asm volatile
 8018d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018da2:	f383 8811 	msr	BASEPRI, r3
 8018da6:	f3bf 8f6f 	isb	sy
 8018daa:	f3bf 8f4f 	dsb	sy
 8018dae:	607b      	str	r3, [r7, #4]
}
 8018db0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8018db2:	f7fe fdb9 	bl	8017928 <xTaskIncrementTick>
 8018db6:	4603      	mov	r3, r0
 8018db8:	2b00      	cmp	r3, #0
 8018dba:	d003      	beq.n	8018dc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8018dbc:	4b06      	ldr	r3, [pc, #24]	@ (8018dd8 <xPortSysTickHandler+0x40>)
 8018dbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018dc2:	601a      	str	r2, [r3, #0]
 8018dc4:	2300      	movs	r3, #0
 8018dc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8018dc8:	683b      	ldr	r3, [r7, #0]
 8018dca:	f383 8811 	msr	BASEPRI, r3
}
 8018dce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8018dd0:	bf00      	nop
 8018dd2:	3708      	adds	r7, #8
 8018dd4:	46bd      	mov	sp, r7
 8018dd6:	bd80      	pop	{r7, pc}
 8018dd8:	e000ed04 	.word	0xe000ed04

08018ddc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8018ddc:	b480      	push	{r7}
 8018dde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8018de0:	4b0b      	ldr	r3, [pc, #44]	@ (8018e10 <vPortSetupTimerInterrupt+0x34>)
 8018de2:	2200      	movs	r2, #0
 8018de4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8018de6:	4b0b      	ldr	r3, [pc, #44]	@ (8018e14 <vPortSetupTimerInterrupt+0x38>)
 8018de8:	2200      	movs	r2, #0
 8018dea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8018dec:	4b0a      	ldr	r3, [pc, #40]	@ (8018e18 <vPortSetupTimerInterrupt+0x3c>)
 8018dee:	681b      	ldr	r3, [r3, #0]
 8018df0:	4a0a      	ldr	r2, [pc, #40]	@ (8018e1c <vPortSetupTimerInterrupt+0x40>)
 8018df2:	fba2 2303 	umull	r2, r3, r2, r3
 8018df6:	099b      	lsrs	r3, r3, #6
 8018df8:	4a09      	ldr	r2, [pc, #36]	@ (8018e20 <vPortSetupTimerInterrupt+0x44>)
 8018dfa:	3b01      	subs	r3, #1
 8018dfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8018dfe:	4b04      	ldr	r3, [pc, #16]	@ (8018e10 <vPortSetupTimerInterrupt+0x34>)
 8018e00:	2207      	movs	r2, #7
 8018e02:	601a      	str	r2, [r3, #0]
}
 8018e04:	bf00      	nop
 8018e06:	46bd      	mov	sp, r7
 8018e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e0c:	4770      	bx	lr
 8018e0e:	bf00      	nop
 8018e10:	e000e010 	.word	0xe000e010
 8018e14:	e000e018 	.word	0xe000e018
 8018e18:	24000018 	.word	0x24000018
 8018e1c:	10624dd3 	.word	0x10624dd3
 8018e20:	e000e014 	.word	0xe000e014

08018e24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8018e24:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8018e34 <vPortEnableVFP+0x10>
 8018e28:	6801      	ldr	r1, [r0, #0]
 8018e2a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8018e2e:	6001      	str	r1, [r0, #0]
 8018e30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8018e32:	bf00      	nop
 8018e34:	e000ed88 	.word	0xe000ed88

08018e38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8018e38:	b480      	push	{r7}
 8018e3a:	b085      	sub	sp, #20
 8018e3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8018e3e:	f3ef 8305 	mrs	r3, IPSR
 8018e42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8018e44:	68fb      	ldr	r3, [r7, #12]
 8018e46:	2b0f      	cmp	r3, #15
 8018e48:	d915      	bls.n	8018e76 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8018e4a:	4a18      	ldr	r2, [pc, #96]	@ (8018eac <vPortValidateInterruptPriority+0x74>)
 8018e4c:	68fb      	ldr	r3, [r7, #12]
 8018e4e:	4413      	add	r3, r2
 8018e50:	781b      	ldrb	r3, [r3, #0]
 8018e52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8018e54:	4b16      	ldr	r3, [pc, #88]	@ (8018eb0 <vPortValidateInterruptPriority+0x78>)
 8018e56:	781b      	ldrb	r3, [r3, #0]
 8018e58:	7afa      	ldrb	r2, [r7, #11]
 8018e5a:	429a      	cmp	r2, r3
 8018e5c:	d20b      	bcs.n	8018e76 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8018e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018e62:	f383 8811 	msr	BASEPRI, r3
 8018e66:	f3bf 8f6f 	isb	sy
 8018e6a:	f3bf 8f4f 	dsb	sy
 8018e6e:	607b      	str	r3, [r7, #4]
}
 8018e70:	bf00      	nop
 8018e72:	bf00      	nop
 8018e74:	e7fd      	b.n	8018e72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8018e76:	4b0f      	ldr	r3, [pc, #60]	@ (8018eb4 <vPortValidateInterruptPriority+0x7c>)
 8018e78:	681b      	ldr	r3, [r3, #0]
 8018e7a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8018e7e:	4b0e      	ldr	r3, [pc, #56]	@ (8018eb8 <vPortValidateInterruptPriority+0x80>)
 8018e80:	681b      	ldr	r3, [r3, #0]
 8018e82:	429a      	cmp	r2, r3
 8018e84:	d90b      	bls.n	8018e9e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8018e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018e8a:	f383 8811 	msr	BASEPRI, r3
 8018e8e:	f3bf 8f6f 	isb	sy
 8018e92:	f3bf 8f4f 	dsb	sy
 8018e96:	603b      	str	r3, [r7, #0]
}
 8018e98:	bf00      	nop
 8018e9a:	bf00      	nop
 8018e9c:	e7fd      	b.n	8018e9a <vPortValidateInterruptPriority+0x62>
	}
 8018e9e:	bf00      	nop
 8018ea0:	3714      	adds	r7, #20
 8018ea2:	46bd      	mov	sp, r7
 8018ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ea8:	4770      	bx	lr
 8018eaa:	bf00      	nop
 8018eac:	e000e3f0 	.word	0xe000e3f0
 8018eb0:	24001f94 	.word	0x24001f94
 8018eb4:	e000ed0c 	.word	0xe000ed0c
 8018eb8:	24001f98 	.word	0x24001f98

08018ebc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8018ebc:	b580      	push	{r7, lr}
 8018ebe:	b08a      	sub	sp, #40	@ 0x28
 8018ec0:	af00      	add	r7, sp, #0
 8018ec2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8018ec4:	2300      	movs	r3, #0
 8018ec6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8018ec8:	f7fe fc72 	bl	80177b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8018ecc:	4b5c      	ldr	r3, [pc, #368]	@ (8019040 <pvPortMalloc+0x184>)
 8018ece:	681b      	ldr	r3, [r3, #0]
 8018ed0:	2b00      	cmp	r3, #0
 8018ed2:	d101      	bne.n	8018ed8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8018ed4:	f000 f924 	bl	8019120 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8018ed8:	4b5a      	ldr	r3, [pc, #360]	@ (8019044 <pvPortMalloc+0x188>)
 8018eda:	681a      	ldr	r2, [r3, #0]
 8018edc:	687b      	ldr	r3, [r7, #4]
 8018ede:	4013      	ands	r3, r2
 8018ee0:	2b00      	cmp	r3, #0
 8018ee2:	f040 8095 	bne.w	8019010 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8018ee6:	687b      	ldr	r3, [r7, #4]
 8018ee8:	2b00      	cmp	r3, #0
 8018eea:	d01e      	beq.n	8018f2a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8018eec:	2208      	movs	r2, #8
 8018eee:	687b      	ldr	r3, [r7, #4]
 8018ef0:	4413      	add	r3, r2
 8018ef2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8018ef4:	687b      	ldr	r3, [r7, #4]
 8018ef6:	f003 0307 	and.w	r3, r3, #7
 8018efa:	2b00      	cmp	r3, #0
 8018efc:	d015      	beq.n	8018f2a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8018efe:	687b      	ldr	r3, [r7, #4]
 8018f00:	f023 0307 	bic.w	r3, r3, #7
 8018f04:	3308      	adds	r3, #8
 8018f06:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018f08:	687b      	ldr	r3, [r7, #4]
 8018f0a:	f003 0307 	and.w	r3, r3, #7
 8018f0e:	2b00      	cmp	r3, #0
 8018f10:	d00b      	beq.n	8018f2a <pvPortMalloc+0x6e>
	__asm volatile
 8018f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018f16:	f383 8811 	msr	BASEPRI, r3
 8018f1a:	f3bf 8f6f 	isb	sy
 8018f1e:	f3bf 8f4f 	dsb	sy
 8018f22:	617b      	str	r3, [r7, #20]
}
 8018f24:	bf00      	nop
 8018f26:	bf00      	nop
 8018f28:	e7fd      	b.n	8018f26 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8018f2a:	687b      	ldr	r3, [r7, #4]
 8018f2c:	2b00      	cmp	r3, #0
 8018f2e:	d06f      	beq.n	8019010 <pvPortMalloc+0x154>
 8018f30:	4b45      	ldr	r3, [pc, #276]	@ (8019048 <pvPortMalloc+0x18c>)
 8018f32:	681b      	ldr	r3, [r3, #0]
 8018f34:	687a      	ldr	r2, [r7, #4]
 8018f36:	429a      	cmp	r2, r3
 8018f38:	d86a      	bhi.n	8019010 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8018f3a:	4b44      	ldr	r3, [pc, #272]	@ (801904c <pvPortMalloc+0x190>)
 8018f3c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8018f3e:	4b43      	ldr	r3, [pc, #268]	@ (801904c <pvPortMalloc+0x190>)
 8018f40:	681b      	ldr	r3, [r3, #0]
 8018f42:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8018f44:	e004      	b.n	8018f50 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8018f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018f48:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8018f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018f4c:	681b      	ldr	r3, [r3, #0]
 8018f4e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8018f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018f52:	685b      	ldr	r3, [r3, #4]
 8018f54:	687a      	ldr	r2, [r7, #4]
 8018f56:	429a      	cmp	r2, r3
 8018f58:	d903      	bls.n	8018f62 <pvPortMalloc+0xa6>
 8018f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018f5c:	681b      	ldr	r3, [r3, #0]
 8018f5e:	2b00      	cmp	r3, #0
 8018f60:	d1f1      	bne.n	8018f46 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8018f62:	4b37      	ldr	r3, [pc, #220]	@ (8019040 <pvPortMalloc+0x184>)
 8018f64:	681b      	ldr	r3, [r3, #0]
 8018f66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018f68:	429a      	cmp	r2, r3
 8018f6a:	d051      	beq.n	8019010 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8018f6c:	6a3b      	ldr	r3, [r7, #32]
 8018f6e:	681b      	ldr	r3, [r3, #0]
 8018f70:	2208      	movs	r2, #8
 8018f72:	4413      	add	r3, r2
 8018f74:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8018f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018f78:	681a      	ldr	r2, [r3, #0]
 8018f7a:	6a3b      	ldr	r3, [r7, #32]
 8018f7c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8018f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018f80:	685a      	ldr	r2, [r3, #4]
 8018f82:	687b      	ldr	r3, [r7, #4]
 8018f84:	1ad2      	subs	r2, r2, r3
 8018f86:	2308      	movs	r3, #8
 8018f88:	005b      	lsls	r3, r3, #1
 8018f8a:	429a      	cmp	r2, r3
 8018f8c:	d920      	bls.n	8018fd0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8018f8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018f90:	687b      	ldr	r3, [r7, #4]
 8018f92:	4413      	add	r3, r2
 8018f94:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018f96:	69bb      	ldr	r3, [r7, #24]
 8018f98:	f003 0307 	and.w	r3, r3, #7
 8018f9c:	2b00      	cmp	r3, #0
 8018f9e:	d00b      	beq.n	8018fb8 <pvPortMalloc+0xfc>
	__asm volatile
 8018fa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018fa4:	f383 8811 	msr	BASEPRI, r3
 8018fa8:	f3bf 8f6f 	isb	sy
 8018fac:	f3bf 8f4f 	dsb	sy
 8018fb0:	613b      	str	r3, [r7, #16]
}
 8018fb2:	bf00      	nop
 8018fb4:	bf00      	nop
 8018fb6:	e7fd      	b.n	8018fb4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8018fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018fba:	685a      	ldr	r2, [r3, #4]
 8018fbc:	687b      	ldr	r3, [r7, #4]
 8018fbe:	1ad2      	subs	r2, r2, r3
 8018fc0:	69bb      	ldr	r3, [r7, #24]
 8018fc2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8018fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018fc6:	687a      	ldr	r2, [r7, #4]
 8018fc8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8018fca:	69b8      	ldr	r0, [r7, #24]
 8018fcc:	f000 f90a 	bl	80191e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8018fd0:	4b1d      	ldr	r3, [pc, #116]	@ (8019048 <pvPortMalloc+0x18c>)
 8018fd2:	681a      	ldr	r2, [r3, #0]
 8018fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018fd6:	685b      	ldr	r3, [r3, #4]
 8018fd8:	1ad3      	subs	r3, r2, r3
 8018fda:	4a1b      	ldr	r2, [pc, #108]	@ (8019048 <pvPortMalloc+0x18c>)
 8018fdc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8018fde:	4b1a      	ldr	r3, [pc, #104]	@ (8019048 <pvPortMalloc+0x18c>)
 8018fe0:	681a      	ldr	r2, [r3, #0]
 8018fe2:	4b1b      	ldr	r3, [pc, #108]	@ (8019050 <pvPortMalloc+0x194>)
 8018fe4:	681b      	ldr	r3, [r3, #0]
 8018fe6:	429a      	cmp	r2, r3
 8018fe8:	d203      	bcs.n	8018ff2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8018fea:	4b17      	ldr	r3, [pc, #92]	@ (8019048 <pvPortMalloc+0x18c>)
 8018fec:	681b      	ldr	r3, [r3, #0]
 8018fee:	4a18      	ldr	r2, [pc, #96]	@ (8019050 <pvPortMalloc+0x194>)
 8018ff0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8018ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018ff4:	685a      	ldr	r2, [r3, #4]
 8018ff6:	4b13      	ldr	r3, [pc, #76]	@ (8019044 <pvPortMalloc+0x188>)
 8018ff8:	681b      	ldr	r3, [r3, #0]
 8018ffa:	431a      	orrs	r2, r3
 8018ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018ffe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8019000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019002:	2200      	movs	r2, #0
 8019004:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8019006:	4b13      	ldr	r3, [pc, #76]	@ (8019054 <pvPortMalloc+0x198>)
 8019008:	681b      	ldr	r3, [r3, #0]
 801900a:	3301      	adds	r3, #1
 801900c:	4a11      	ldr	r2, [pc, #68]	@ (8019054 <pvPortMalloc+0x198>)
 801900e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8019010:	f7fe fbdc 	bl	80177cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8019014:	69fb      	ldr	r3, [r7, #28]
 8019016:	f003 0307 	and.w	r3, r3, #7
 801901a:	2b00      	cmp	r3, #0
 801901c:	d00b      	beq.n	8019036 <pvPortMalloc+0x17a>
	__asm volatile
 801901e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019022:	f383 8811 	msr	BASEPRI, r3
 8019026:	f3bf 8f6f 	isb	sy
 801902a:	f3bf 8f4f 	dsb	sy
 801902e:	60fb      	str	r3, [r7, #12]
}
 8019030:	bf00      	nop
 8019032:	bf00      	nop
 8019034:	e7fd      	b.n	8019032 <pvPortMalloc+0x176>
	return pvReturn;
 8019036:	69fb      	ldr	r3, [r7, #28]
}
 8019038:	4618      	mov	r0, r3
 801903a:	3728      	adds	r7, #40	@ 0x28
 801903c:	46bd      	mov	sp, r7
 801903e:	bd80      	pop	{r7, pc}
 8019040:	24005ba4 	.word	0x24005ba4
 8019044:	24005bb8 	.word	0x24005bb8
 8019048:	24005ba8 	.word	0x24005ba8
 801904c:	24005b9c 	.word	0x24005b9c
 8019050:	24005bac 	.word	0x24005bac
 8019054:	24005bb0 	.word	0x24005bb0

08019058 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8019058:	b580      	push	{r7, lr}
 801905a:	b086      	sub	sp, #24
 801905c:	af00      	add	r7, sp, #0
 801905e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8019060:	687b      	ldr	r3, [r7, #4]
 8019062:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8019064:	687b      	ldr	r3, [r7, #4]
 8019066:	2b00      	cmp	r3, #0
 8019068:	d04f      	beq.n	801910a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801906a:	2308      	movs	r3, #8
 801906c:	425b      	negs	r3, r3
 801906e:	697a      	ldr	r2, [r7, #20]
 8019070:	4413      	add	r3, r2
 8019072:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8019074:	697b      	ldr	r3, [r7, #20]
 8019076:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8019078:	693b      	ldr	r3, [r7, #16]
 801907a:	685a      	ldr	r2, [r3, #4]
 801907c:	4b25      	ldr	r3, [pc, #148]	@ (8019114 <vPortFree+0xbc>)
 801907e:	681b      	ldr	r3, [r3, #0]
 8019080:	4013      	ands	r3, r2
 8019082:	2b00      	cmp	r3, #0
 8019084:	d10b      	bne.n	801909e <vPortFree+0x46>
	__asm volatile
 8019086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801908a:	f383 8811 	msr	BASEPRI, r3
 801908e:	f3bf 8f6f 	isb	sy
 8019092:	f3bf 8f4f 	dsb	sy
 8019096:	60fb      	str	r3, [r7, #12]
}
 8019098:	bf00      	nop
 801909a:	bf00      	nop
 801909c:	e7fd      	b.n	801909a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801909e:	693b      	ldr	r3, [r7, #16]
 80190a0:	681b      	ldr	r3, [r3, #0]
 80190a2:	2b00      	cmp	r3, #0
 80190a4:	d00b      	beq.n	80190be <vPortFree+0x66>
	__asm volatile
 80190a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80190aa:	f383 8811 	msr	BASEPRI, r3
 80190ae:	f3bf 8f6f 	isb	sy
 80190b2:	f3bf 8f4f 	dsb	sy
 80190b6:	60bb      	str	r3, [r7, #8]
}
 80190b8:	bf00      	nop
 80190ba:	bf00      	nop
 80190bc:	e7fd      	b.n	80190ba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80190be:	693b      	ldr	r3, [r7, #16]
 80190c0:	685a      	ldr	r2, [r3, #4]
 80190c2:	4b14      	ldr	r3, [pc, #80]	@ (8019114 <vPortFree+0xbc>)
 80190c4:	681b      	ldr	r3, [r3, #0]
 80190c6:	4013      	ands	r3, r2
 80190c8:	2b00      	cmp	r3, #0
 80190ca:	d01e      	beq.n	801910a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80190cc:	693b      	ldr	r3, [r7, #16]
 80190ce:	681b      	ldr	r3, [r3, #0]
 80190d0:	2b00      	cmp	r3, #0
 80190d2:	d11a      	bne.n	801910a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80190d4:	693b      	ldr	r3, [r7, #16]
 80190d6:	685a      	ldr	r2, [r3, #4]
 80190d8:	4b0e      	ldr	r3, [pc, #56]	@ (8019114 <vPortFree+0xbc>)
 80190da:	681b      	ldr	r3, [r3, #0]
 80190dc:	43db      	mvns	r3, r3
 80190de:	401a      	ands	r2, r3
 80190e0:	693b      	ldr	r3, [r7, #16]
 80190e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80190e4:	f7fe fb64 	bl	80177b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80190e8:	693b      	ldr	r3, [r7, #16]
 80190ea:	685a      	ldr	r2, [r3, #4]
 80190ec:	4b0a      	ldr	r3, [pc, #40]	@ (8019118 <vPortFree+0xc0>)
 80190ee:	681b      	ldr	r3, [r3, #0]
 80190f0:	4413      	add	r3, r2
 80190f2:	4a09      	ldr	r2, [pc, #36]	@ (8019118 <vPortFree+0xc0>)
 80190f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80190f6:	6938      	ldr	r0, [r7, #16]
 80190f8:	f000 f874 	bl	80191e4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80190fc:	4b07      	ldr	r3, [pc, #28]	@ (801911c <vPortFree+0xc4>)
 80190fe:	681b      	ldr	r3, [r3, #0]
 8019100:	3301      	adds	r3, #1
 8019102:	4a06      	ldr	r2, [pc, #24]	@ (801911c <vPortFree+0xc4>)
 8019104:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8019106:	f7fe fb61 	bl	80177cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801910a:	bf00      	nop
 801910c:	3718      	adds	r7, #24
 801910e:	46bd      	mov	sp, r7
 8019110:	bd80      	pop	{r7, pc}
 8019112:	bf00      	nop
 8019114:	24005bb8 	.word	0x24005bb8
 8019118:	24005ba8 	.word	0x24005ba8
 801911c:	24005bb4 	.word	0x24005bb4

08019120 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8019120:	b480      	push	{r7}
 8019122:	b085      	sub	sp, #20
 8019124:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8019126:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 801912a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801912c:	4b27      	ldr	r3, [pc, #156]	@ (80191cc <prvHeapInit+0xac>)
 801912e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8019130:	68fb      	ldr	r3, [r7, #12]
 8019132:	f003 0307 	and.w	r3, r3, #7
 8019136:	2b00      	cmp	r3, #0
 8019138:	d00c      	beq.n	8019154 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801913a:	68fb      	ldr	r3, [r7, #12]
 801913c:	3307      	adds	r3, #7
 801913e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019140:	68fb      	ldr	r3, [r7, #12]
 8019142:	f023 0307 	bic.w	r3, r3, #7
 8019146:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8019148:	68ba      	ldr	r2, [r7, #8]
 801914a:	68fb      	ldr	r3, [r7, #12]
 801914c:	1ad3      	subs	r3, r2, r3
 801914e:	4a1f      	ldr	r2, [pc, #124]	@ (80191cc <prvHeapInit+0xac>)
 8019150:	4413      	add	r3, r2
 8019152:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8019154:	68fb      	ldr	r3, [r7, #12]
 8019156:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8019158:	4a1d      	ldr	r2, [pc, #116]	@ (80191d0 <prvHeapInit+0xb0>)
 801915a:	687b      	ldr	r3, [r7, #4]
 801915c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801915e:	4b1c      	ldr	r3, [pc, #112]	@ (80191d0 <prvHeapInit+0xb0>)
 8019160:	2200      	movs	r2, #0
 8019162:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8019164:	687b      	ldr	r3, [r7, #4]
 8019166:	68ba      	ldr	r2, [r7, #8]
 8019168:	4413      	add	r3, r2
 801916a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801916c:	2208      	movs	r2, #8
 801916e:	68fb      	ldr	r3, [r7, #12]
 8019170:	1a9b      	subs	r3, r3, r2
 8019172:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019174:	68fb      	ldr	r3, [r7, #12]
 8019176:	f023 0307 	bic.w	r3, r3, #7
 801917a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801917c:	68fb      	ldr	r3, [r7, #12]
 801917e:	4a15      	ldr	r2, [pc, #84]	@ (80191d4 <prvHeapInit+0xb4>)
 8019180:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8019182:	4b14      	ldr	r3, [pc, #80]	@ (80191d4 <prvHeapInit+0xb4>)
 8019184:	681b      	ldr	r3, [r3, #0]
 8019186:	2200      	movs	r2, #0
 8019188:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801918a:	4b12      	ldr	r3, [pc, #72]	@ (80191d4 <prvHeapInit+0xb4>)
 801918c:	681b      	ldr	r3, [r3, #0]
 801918e:	2200      	movs	r2, #0
 8019190:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8019192:	687b      	ldr	r3, [r7, #4]
 8019194:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8019196:	683b      	ldr	r3, [r7, #0]
 8019198:	68fa      	ldr	r2, [r7, #12]
 801919a:	1ad2      	subs	r2, r2, r3
 801919c:	683b      	ldr	r3, [r7, #0]
 801919e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80191a0:	4b0c      	ldr	r3, [pc, #48]	@ (80191d4 <prvHeapInit+0xb4>)
 80191a2:	681a      	ldr	r2, [r3, #0]
 80191a4:	683b      	ldr	r3, [r7, #0]
 80191a6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80191a8:	683b      	ldr	r3, [r7, #0]
 80191aa:	685b      	ldr	r3, [r3, #4]
 80191ac:	4a0a      	ldr	r2, [pc, #40]	@ (80191d8 <prvHeapInit+0xb8>)
 80191ae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80191b0:	683b      	ldr	r3, [r7, #0]
 80191b2:	685b      	ldr	r3, [r3, #4]
 80191b4:	4a09      	ldr	r2, [pc, #36]	@ (80191dc <prvHeapInit+0xbc>)
 80191b6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80191b8:	4b09      	ldr	r3, [pc, #36]	@ (80191e0 <prvHeapInit+0xc0>)
 80191ba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80191be:	601a      	str	r2, [r3, #0]
}
 80191c0:	bf00      	nop
 80191c2:	3714      	adds	r7, #20
 80191c4:	46bd      	mov	sp, r7
 80191c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191ca:	4770      	bx	lr
 80191cc:	24001f9c 	.word	0x24001f9c
 80191d0:	24005b9c 	.word	0x24005b9c
 80191d4:	24005ba4 	.word	0x24005ba4
 80191d8:	24005bac 	.word	0x24005bac
 80191dc:	24005ba8 	.word	0x24005ba8
 80191e0:	24005bb8 	.word	0x24005bb8

080191e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80191e4:	b480      	push	{r7}
 80191e6:	b085      	sub	sp, #20
 80191e8:	af00      	add	r7, sp, #0
 80191ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80191ec:	4b28      	ldr	r3, [pc, #160]	@ (8019290 <prvInsertBlockIntoFreeList+0xac>)
 80191ee:	60fb      	str	r3, [r7, #12]
 80191f0:	e002      	b.n	80191f8 <prvInsertBlockIntoFreeList+0x14>
 80191f2:	68fb      	ldr	r3, [r7, #12]
 80191f4:	681b      	ldr	r3, [r3, #0]
 80191f6:	60fb      	str	r3, [r7, #12]
 80191f8:	68fb      	ldr	r3, [r7, #12]
 80191fa:	681b      	ldr	r3, [r3, #0]
 80191fc:	687a      	ldr	r2, [r7, #4]
 80191fe:	429a      	cmp	r2, r3
 8019200:	d8f7      	bhi.n	80191f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8019202:	68fb      	ldr	r3, [r7, #12]
 8019204:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8019206:	68fb      	ldr	r3, [r7, #12]
 8019208:	685b      	ldr	r3, [r3, #4]
 801920a:	68ba      	ldr	r2, [r7, #8]
 801920c:	4413      	add	r3, r2
 801920e:	687a      	ldr	r2, [r7, #4]
 8019210:	429a      	cmp	r2, r3
 8019212:	d108      	bne.n	8019226 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8019214:	68fb      	ldr	r3, [r7, #12]
 8019216:	685a      	ldr	r2, [r3, #4]
 8019218:	687b      	ldr	r3, [r7, #4]
 801921a:	685b      	ldr	r3, [r3, #4]
 801921c:	441a      	add	r2, r3
 801921e:	68fb      	ldr	r3, [r7, #12]
 8019220:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8019222:	68fb      	ldr	r3, [r7, #12]
 8019224:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8019226:	687b      	ldr	r3, [r7, #4]
 8019228:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801922a:	687b      	ldr	r3, [r7, #4]
 801922c:	685b      	ldr	r3, [r3, #4]
 801922e:	68ba      	ldr	r2, [r7, #8]
 8019230:	441a      	add	r2, r3
 8019232:	68fb      	ldr	r3, [r7, #12]
 8019234:	681b      	ldr	r3, [r3, #0]
 8019236:	429a      	cmp	r2, r3
 8019238:	d118      	bne.n	801926c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801923a:	68fb      	ldr	r3, [r7, #12]
 801923c:	681a      	ldr	r2, [r3, #0]
 801923e:	4b15      	ldr	r3, [pc, #84]	@ (8019294 <prvInsertBlockIntoFreeList+0xb0>)
 8019240:	681b      	ldr	r3, [r3, #0]
 8019242:	429a      	cmp	r2, r3
 8019244:	d00d      	beq.n	8019262 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8019246:	687b      	ldr	r3, [r7, #4]
 8019248:	685a      	ldr	r2, [r3, #4]
 801924a:	68fb      	ldr	r3, [r7, #12]
 801924c:	681b      	ldr	r3, [r3, #0]
 801924e:	685b      	ldr	r3, [r3, #4]
 8019250:	441a      	add	r2, r3
 8019252:	687b      	ldr	r3, [r7, #4]
 8019254:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8019256:	68fb      	ldr	r3, [r7, #12]
 8019258:	681b      	ldr	r3, [r3, #0]
 801925a:	681a      	ldr	r2, [r3, #0]
 801925c:	687b      	ldr	r3, [r7, #4]
 801925e:	601a      	str	r2, [r3, #0]
 8019260:	e008      	b.n	8019274 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8019262:	4b0c      	ldr	r3, [pc, #48]	@ (8019294 <prvInsertBlockIntoFreeList+0xb0>)
 8019264:	681a      	ldr	r2, [r3, #0]
 8019266:	687b      	ldr	r3, [r7, #4]
 8019268:	601a      	str	r2, [r3, #0]
 801926a:	e003      	b.n	8019274 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801926c:	68fb      	ldr	r3, [r7, #12]
 801926e:	681a      	ldr	r2, [r3, #0]
 8019270:	687b      	ldr	r3, [r7, #4]
 8019272:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8019274:	68fa      	ldr	r2, [r7, #12]
 8019276:	687b      	ldr	r3, [r7, #4]
 8019278:	429a      	cmp	r2, r3
 801927a:	d002      	beq.n	8019282 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801927c:	68fb      	ldr	r3, [r7, #12]
 801927e:	687a      	ldr	r2, [r7, #4]
 8019280:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019282:	bf00      	nop
 8019284:	3714      	adds	r7, #20
 8019286:	46bd      	mov	sp, r7
 8019288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801928c:	4770      	bx	lr
 801928e:	bf00      	nop
 8019290:	24005b9c 	.word	0x24005b9c
 8019294:	24005ba4 	.word	0x24005ba4

08019298 <sulp>:
 8019298:	b570      	push	{r4, r5, r6, lr}
 801929a:	4604      	mov	r4, r0
 801929c:	460d      	mov	r5, r1
 801929e:	4616      	mov	r6, r2
 80192a0:	ec45 4b10 	vmov	d0, r4, r5
 80192a4:	f003 fd6a 	bl	801cd7c <__ulp>
 80192a8:	b17e      	cbz	r6, 80192ca <sulp+0x32>
 80192aa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80192ae:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80192b2:	2b00      	cmp	r3, #0
 80192b4:	dd09      	ble.n	80192ca <sulp+0x32>
 80192b6:	051b      	lsls	r3, r3, #20
 80192b8:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 80192bc:	2000      	movs	r0, #0
 80192be:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 80192c2:	ec41 0b17 	vmov	d7, r0, r1
 80192c6:	ee20 0b07 	vmul.f64	d0, d0, d7
 80192ca:	bd70      	pop	{r4, r5, r6, pc}
 80192cc:	0000      	movs	r0, r0
	...

080192d0 <_strtod_l>:
 80192d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80192d4:	ed2d 8b0a 	vpush	{d8-d12}
 80192d8:	b097      	sub	sp, #92	@ 0x5c
 80192da:	4688      	mov	r8, r1
 80192dc:	920e      	str	r2, [sp, #56]	@ 0x38
 80192de:	2200      	movs	r2, #0
 80192e0:	9212      	str	r2, [sp, #72]	@ 0x48
 80192e2:	9005      	str	r0, [sp, #20]
 80192e4:	f04f 0a00 	mov.w	sl, #0
 80192e8:	f04f 0b00 	mov.w	fp, #0
 80192ec:	460a      	mov	r2, r1
 80192ee:	9211      	str	r2, [sp, #68]	@ 0x44
 80192f0:	7811      	ldrb	r1, [r2, #0]
 80192f2:	292b      	cmp	r1, #43	@ 0x2b
 80192f4:	d04c      	beq.n	8019390 <_strtod_l+0xc0>
 80192f6:	d839      	bhi.n	801936c <_strtod_l+0x9c>
 80192f8:	290d      	cmp	r1, #13
 80192fa:	d833      	bhi.n	8019364 <_strtod_l+0x94>
 80192fc:	2908      	cmp	r1, #8
 80192fe:	d833      	bhi.n	8019368 <_strtod_l+0x98>
 8019300:	2900      	cmp	r1, #0
 8019302:	d03c      	beq.n	801937e <_strtod_l+0xae>
 8019304:	2200      	movs	r2, #0
 8019306:	9208      	str	r2, [sp, #32]
 8019308:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801930a:	782a      	ldrb	r2, [r5, #0]
 801930c:	2a30      	cmp	r2, #48	@ 0x30
 801930e:	f040 80b7 	bne.w	8019480 <_strtod_l+0x1b0>
 8019312:	786a      	ldrb	r2, [r5, #1]
 8019314:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8019318:	2a58      	cmp	r2, #88	@ 0x58
 801931a:	d170      	bne.n	80193fe <_strtod_l+0x12e>
 801931c:	9302      	str	r3, [sp, #8]
 801931e:	9b08      	ldr	r3, [sp, #32]
 8019320:	9301      	str	r3, [sp, #4]
 8019322:	ab12      	add	r3, sp, #72	@ 0x48
 8019324:	9300      	str	r3, [sp, #0]
 8019326:	4a90      	ldr	r2, [pc, #576]	@ (8019568 <_strtod_l+0x298>)
 8019328:	9805      	ldr	r0, [sp, #20]
 801932a:	ab13      	add	r3, sp, #76	@ 0x4c
 801932c:	a911      	add	r1, sp, #68	@ 0x44
 801932e:	f002 fe1f 	bl	801bf70 <__gethex>
 8019332:	f010 060f 	ands.w	r6, r0, #15
 8019336:	4604      	mov	r4, r0
 8019338:	d005      	beq.n	8019346 <_strtod_l+0x76>
 801933a:	2e06      	cmp	r6, #6
 801933c:	d12a      	bne.n	8019394 <_strtod_l+0xc4>
 801933e:	3501      	adds	r5, #1
 8019340:	2300      	movs	r3, #0
 8019342:	9511      	str	r5, [sp, #68]	@ 0x44
 8019344:	9308      	str	r3, [sp, #32]
 8019346:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019348:	2b00      	cmp	r3, #0
 801934a:	f040 8537 	bne.w	8019dbc <_strtod_l+0xaec>
 801934e:	9b08      	ldr	r3, [sp, #32]
 8019350:	ec4b ab10 	vmov	d0, sl, fp
 8019354:	b1cb      	cbz	r3, 801938a <_strtod_l+0xba>
 8019356:	eeb1 0b40 	vneg.f64	d0, d0
 801935a:	b017      	add	sp, #92	@ 0x5c
 801935c:	ecbd 8b0a 	vpop	{d8-d12}
 8019360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019364:	2920      	cmp	r1, #32
 8019366:	d1cd      	bne.n	8019304 <_strtod_l+0x34>
 8019368:	3201      	adds	r2, #1
 801936a:	e7c0      	b.n	80192ee <_strtod_l+0x1e>
 801936c:	292d      	cmp	r1, #45	@ 0x2d
 801936e:	d1c9      	bne.n	8019304 <_strtod_l+0x34>
 8019370:	2101      	movs	r1, #1
 8019372:	9108      	str	r1, [sp, #32]
 8019374:	1c51      	adds	r1, r2, #1
 8019376:	9111      	str	r1, [sp, #68]	@ 0x44
 8019378:	7852      	ldrb	r2, [r2, #1]
 801937a:	2a00      	cmp	r2, #0
 801937c:	d1c4      	bne.n	8019308 <_strtod_l+0x38>
 801937e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019380:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8019384:	2b00      	cmp	r3, #0
 8019386:	f040 8517 	bne.w	8019db8 <_strtod_l+0xae8>
 801938a:	ec4b ab10 	vmov	d0, sl, fp
 801938e:	e7e4      	b.n	801935a <_strtod_l+0x8a>
 8019390:	2100      	movs	r1, #0
 8019392:	e7ee      	b.n	8019372 <_strtod_l+0xa2>
 8019394:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8019396:	b13a      	cbz	r2, 80193a8 <_strtod_l+0xd8>
 8019398:	2135      	movs	r1, #53	@ 0x35
 801939a:	a814      	add	r0, sp, #80	@ 0x50
 801939c:	f003 fde5 	bl	801cf6a <__copybits>
 80193a0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80193a2:	9805      	ldr	r0, [sp, #20]
 80193a4:	f003 f9be 	bl	801c724 <_Bfree>
 80193a8:	1e73      	subs	r3, r6, #1
 80193aa:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80193ac:	2b04      	cmp	r3, #4
 80193ae:	d806      	bhi.n	80193be <_strtod_l+0xee>
 80193b0:	e8df f003 	tbb	[pc, r3]
 80193b4:	201d0314 	.word	0x201d0314
 80193b8:	14          	.byte	0x14
 80193b9:	00          	.byte	0x00
 80193ba:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 80193be:	05e3      	lsls	r3, r4, #23
 80193c0:	bf48      	it	mi
 80193c2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80193c6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80193ca:	0d1b      	lsrs	r3, r3, #20
 80193cc:	051b      	lsls	r3, r3, #20
 80193ce:	2b00      	cmp	r3, #0
 80193d0:	d1b9      	bne.n	8019346 <_strtod_l+0x76>
 80193d2:	f001 fee9 	bl	801b1a8 <__errno>
 80193d6:	2322      	movs	r3, #34	@ 0x22
 80193d8:	6003      	str	r3, [r0, #0]
 80193da:	e7b4      	b.n	8019346 <_strtod_l+0x76>
 80193dc:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 80193e0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80193e4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80193e8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80193ec:	e7e7      	b.n	80193be <_strtod_l+0xee>
 80193ee:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8019570 <_strtod_l+0x2a0>
 80193f2:	e7e4      	b.n	80193be <_strtod_l+0xee>
 80193f4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80193f8:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80193fc:	e7df      	b.n	80193be <_strtod_l+0xee>
 80193fe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8019400:	1c5a      	adds	r2, r3, #1
 8019402:	9211      	str	r2, [sp, #68]	@ 0x44
 8019404:	785b      	ldrb	r3, [r3, #1]
 8019406:	2b30      	cmp	r3, #48	@ 0x30
 8019408:	d0f9      	beq.n	80193fe <_strtod_l+0x12e>
 801940a:	2b00      	cmp	r3, #0
 801940c:	d09b      	beq.n	8019346 <_strtod_l+0x76>
 801940e:	2301      	movs	r3, #1
 8019410:	9307      	str	r3, [sp, #28]
 8019412:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8019414:	930a      	str	r3, [sp, #40]	@ 0x28
 8019416:	2300      	movs	r3, #0
 8019418:	9306      	str	r3, [sp, #24]
 801941a:	4699      	mov	r9, r3
 801941c:	461d      	mov	r5, r3
 801941e:	220a      	movs	r2, #10
 8019420:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8019422:	7804      	ldrb	r4, [r0, #0]
 8019424:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8019428:	b2d9      	uxtb	r1, r3
 801942a:	2909      	cmp	r1, #9
 801942c:	d92a      	bls.n	8019484 <_strtod_l+0x1b4>
 801942e:	494f      	ldr	r1, [pc, #316]	@ (801956c <_strtod_l+0x29c>)
 8019430:	2201      	movs	r2, #1
 8019432:	f001 fdfe 	bl	801b032 <strncmp>
 8019436:	b398      	cbz	r0, 80194a0 <_strtod_l+0x1d0>
 8019438:	2000      	movs	r0, #0
 801943a:	4622      	mov	r2, r4
 801943c:	462b      	mov	r3, r5
 801943e:	4607      	mov	r7, r0
 8019440:	4601      	mov	r1, r0
 8019442:	2a65      	cmp	r2, #101	@ 0x65
 8019444:	d001      	beq.n	801944a <_strtod_l+0x17a>
 8019446:	2a45      	cmp	r2, #69	@ 0x45
 8019448:	d118      	bne.n	801947c <_strtod_l+0x1ac>
 801944a:	b91b      	cbnz	r3, 8019454 <_strtod_l+0x184>
 801944c:	9b07      	ldr	r3, [sp, #28]
 801944e:	4303      	orrs	r3, r0
 8019450:	d095      	beq.n	801937e <_strtod_l+0xae>
 8019452:	2300      	movs	r3, #0
 8019454:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8019458:	f108 0201 	add.w	r2, r8, #1
 801945c:	9211      	str	r2, [sp, #68]	@ 0x44
 801945e:	f898 2001 	ldrb.w	r2, [r8, #1]
 8019462:	2a2b      	cmp	r2, #43	@ 0x2b
 8019464:	d074      	beq.n	8019550 <_strtod_l+0x280>
 8019466:	2a2d      	cmp	r2, #45	@ 0x2d
 8019468:	d07a      	beq.n	8019560 <_strtod_l+0x290>
 801946a:	f04f 0e00 	mov.w	lr, #0
 801946e:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8019472:	2c09      	cmp	r4, #9
 8019474:	f240 8082 	bls.w	801957c <_strtod_l+0x2ac>
 8019478:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 801947c:	2400      	movs	r4, #0
 801947e:	e09d      	b.n	80195bc <_strtod_l+0x2ec>
 8019480:	2300      	movs	r3, #0
 8019482:	e7c5      	b.n	8019410 <_strtod_l+0x140>
 8019484:	2d08      	cmp	r5, #8
 8019486:	bfc8      	it	gt
 8019488:	9906      	ldrgt	r1, [sp, #24]
 801948a:	f100 0001 	add.w	r0, r0, #1
 801948e:	bfca      	itet	gt
 8019490:	fb02 3301 	mlagt	r3, r2, r1, r3
 8019494:	fb02 3909 	mlale	r9, r2, r9, r3
 8019498:	9306      	strgt	r3, [sp, #24]
 801949a:	3501      	adds	r5, #1
 801949c:	9011      	str	r0, [sp, #68]	@ 0x44
 801949e:	e7bf      	b.n	8019420 <_strtod_l+0x150>
 80194a0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80194a2:	1c5a      	adds	r2, r3, #1
 80194a4:	9211      	str	r2, [sp, #68]	@ 0x44
 80194a6:	785a      	ldrb	r2, [r3, #1]
 80194a8:	b3bd      	cbz	r5, 801951a <_strtod_l+0x24a>
 80194aa:	4607      	mov	r7, r0
 80194ac:	462b      	mov	r3, r5
 80194ae:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80194b2:	2909      	cmp	r1, #9
 80194b4:	d912      	bls.n	80194dc <_strtod_l+0x20c>
 80194b6:	2101      	movs	r1, #1
 80194b8:	e7c3      	b.n	8019442 <_strtod_l+0x172>
 80194ba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80194bc:	1c5a      	adds	r2, r3, #1
 80194be:	9211      	str	r2, [sp, #68]	@ 0x44
 80194c0:	785a      	ldrb	r2, [r3, #1]
 80194c2:	3001      	adds	r0, #1
 80194c4:	2a30      	cmp	r2, #48	@ 0x30
 80194c6:	d0f8      	beq.n	80194ba <_strtod_l+0x1ea>
 80194c8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80194cc:	2b08      	cmp	r3, #8
 80194ce:	f200 847a 	bhi.w	8019dc6 <_strtod_l+0xaf6>
 80194d2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80194d4:	930a      	str	r3, [sp, #40]	@ 0x28
 80194d6:	4607      	mov	r7, r0
 80194d8:	2000      	movs	r0, #0
 80194da:	4603      	mov	r3, r0
 80194dc:	3a30      	subs	r2, #48	@ 0x30
 80194de:	f100 0101 	add.w	r1, r0, #1
 80194e2:	d014      	beq.n	801950e <_strtod_l+0x23e>
 80194e4:	440f      	add	r7, r1
 80194e6:	469c      	mov	ip, r3
 80194e8:	f04f 0e0a 	mov.w	lr, #10
 80194ec:	f10c 0401 	add.w	r4, ip, #1
 80194f0:	1ae6      	subs	r6, r4, r3
 80194f2:	42b1      	cmp	r1, r6
 80194f4:	dc13      	bgt.n	801951e <_strtod_l+0x24e>
 80194f6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80194fa:	1819      	adds	r1, r3, r0
 80194fc:	2908      	cmp	r1, #8
 80194fe:	f103 0301 	add.w	r3, r3, #1
 8019502:	4403      	add	r3, r0
 8019504:	dc19      	bgt.n	801953a <_strtod_l+0x26a>
 8019506:	210a      	movs	r1, #10
 8019508:	fb01 2909 	mla	r9, r1, r9, r2
 801950c:	2100      	movs	r1, #0
 801950e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8019510:	1c50      	adds	r0, r2, #1
 8019512:	9011      	str	r0, [sp, #68]	@ 0x44
 8019514:	7852      	ldrb	r2, [r2, #1]
 8019516:	4608      	mov	r0, r1
 8019518:	e7c9      	b.n	80194ae <_strtod_l+0x1de>
 801951a:	4628      	mov	r0, r5
 801951c:	e7d2      	b.n	80194c4 <_strtod_l+0x1f4>
 801951e:	f1bc 0f08 	cmp.w	ip, #8
 8019522:	dc03      	bgt.n	801952c <_strtod_l+0x25c>
 8019524:	fb0e f909 	mul.w	r9, lr, r9
 8019528:	46a4      	mov	ip, r4
 801952a:	e7df      	b.n	80194ec <_strtod_l+0x21c>
 801952c:	2c10      	cmp	r4, #16
 801952e:	bfde      	ittt	le
 8019530:	9e06      	ldrle	r6, [sp, #24]
 8019532:	fb0e f606 	mulle.w	r6, lr, r6
 8019536:	9606      	strle	r6, [sp, #24]
 8019538:	e7f6      	b.n	8019528 <_strtod_l+0x258>
 801953a:	290f      	cmp	r1, #15
 801953c:	bfdf      	itttt	le
 801953e:	9806      	ldrle	r0, [sp, #24]
 8019540:	210a      	movle	r1, #10
 8019542:	fb01 2200 	mlale	r2, r1, r0, r2
 8019546:	9206      	strle	r2, [sp, #24]
 8019548:	e7e0      	b.n	801950c <_strtod_l+0x23c>
 801954a:	2700      	movs	r7, #0
 801954c:	2101      	movs	r1, #1
 801954e:	e77d      	b.n	801944c <_strtod_l+0x17c>
 8019550:	f04f 0e00 	mov.w	lr, #0
 8019554:	f108 0202 	add.w	r2, r8, #2
 8019558:	9211      	str	r2, [sp, #68]	@ 0x44
 801955a:	f898 2002 	ldrb.w	r2, [r8, #2]
 801955e:	e786      	b.n	801946e <_strtod_l+0x19e>
 8019560:	f04f 0e01 	mov.w	lr, #1
 8019564:	e7f6      	b.n	8019554 <_strtod_l+0x284>
 8019566:	bf00      	nop
 8019568:	0801fc18 	.word	0x0801fc18
 801956c:	0801fa14 	.word	0x0801fa14
 8019570:	7ff00000 	.word	0x7ff00000
 8019574:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8019576:	1c54      	adds	r4, r2, #1
 8019578:	9411      	str	r4, [sp, #68]	@ 0x44
 801957a:	7852      	ldrb	r2, [r2, #1]
 801957c:	2a30      	cmp	r2, #48	@ 0x30
 801957e:	d0f9      	beq.n	8019574 <_strtod_l+0x2a4>
 8019580:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8019584:	2c08      	cmp	r4, #8
 8019586:	f63f af79 	bhi.w	801947c <_strtod_l+0x1ac>
 801958a:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 801958e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8019590:	9209      	str	r2, [sp, #36]	@ 0x24
 8019592:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8019594:	1c54      	adds	r4, r2, #1
 8019596:	9411      	str	r4, [sp, #68]	@ 0x44
 8019598:	7852      	ldrb	r2, [r2, #1]
 801959a:	f1a2 0630 	sub.w	r6, r2, #48	@ 0x30
 801959e:	2e09      	cmp	r6, #9
 80195a0:	d937      	bls.n	8019612 <_strtod_l+0x342>
 80195a2:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 80195a4:	1ba4      	subs	r4, r4, r6
 80195a6:	2c08      	cmp	r4, #8
 80195a8:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 80195ac:	dc02      	bgt.n	80195b4 <_strtod_l+0x2e4>
 80195ae:	4564      	cmp	r4, ip
 80195b0:	bfa8      	it	ge
 80195b2:	4664      	movge	r4, ip
 80195b4:	f1be 0f00 	cmp.w	lr, #0
 80195b8:	d000      	beq.n	80195bc <_strtod_l+0x2ec>
 80195ba:	4264      	negs	r4, r4
 80195bc:	2b00      	cmp	r3, #0
 80195be:	d14d      	bne.n	801965c <_strtod_l+0x38c>
 80195c0:	9b07      	ldr	r3, [sp, #28]
 80195c2:	4318      	orrs	r0, r3
 80195c4:	f47f aebf 	bne.w	8019346 <_strtod_l+0x76>
 80195c8:	2900      	cmp	r1, #0
 80195ca:	f47f aed8 	bne.w	801937e <_strtod_l+0xae>
 80195ce:	2a69      	cmp	r2, #105	@ 0x69
 80195d0:	d027      	beq.n	8019622 <_strtod_l+0x352>
 80195d2:	dc24      	bgt.n	801961e <_strtod_l+0x34e>
 80195d4:	2a49      	cmp	r2, #73	@ 0x49
 80195d6:	d024      	beq.n	8019622 <_strtod_l+0x352>
 80195d8:	2a4e      	cmp	r2, #78	@ 0x4e
 80195da:	f47f aed0 	bne.w	801937e <_strtod_l+0xae>
 80195de:	4997      	ldr	r1, [pc, #604]	@ (801983c <_strtod_l+0x56c>)
 80195e0:	a811      	add	r0, sp, #68	@ 0x44
 80195e2:	f002 fee7 	bl	801c3b4 <__match>
 80195e6:	2800      	cmp	r0, #0
 80195e8:	f43f aec9 	beq.w	801937e <_strtod_l+0xae>
 80195ec:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80195ee:	781b      	ldrb	r3, [r3, #0]
 80195f0:	2b28      	cmp	r3, #40	@ 0x28
 80195f2:	d12d      	bne.n	8019650 <_strtod_l+0x380>
 80195f4:	4992      	ldr	r1, [pc, #584]	@ (8019840 <_strtod_l+0x570>)
 80195f6:	aa14      	add	r2, sp, #80	@ 0x50
 80195f8:	a811      	add	r0, sp, #68	@ 0x44
 80195fa:	f002 feef 	bl	801c3dc <__hexnan>
 80195fe:	2805      	cmp	r0, #5
 8019600:	d126      	bne.n	8019650 <_strtod_l+0x380>
 8019602:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8019604:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8019608:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801960c:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8019610:	e699      	b.n	8019346 <_strtod_l+0x76>
 8019612:	240a      	movs	r4, #10
 8019614:	fb04 2c0c 	mla	ip, r4, ip, r2
 8019618:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 801961c:	e7b9      	b.n	8019592 <_strtod_l+0x2c2>
 801961e:	2a6e      	cmp	r2, #110	@ 0x6e
 8019620:	e7db      	b.n	80195da <_strtod_l+0x30a>
 8019622:	4988      	ldr	r1, [pc, #544]	@ (8019844 <_strtod_l+0x574>)
 8019624:	a811      	add	r0, sp, #68	@ 0x44
 8019626:	f002 fec5 	bl	801c3b4 <__match>
 801962a:	2800      	cmp	r0, #0
 801962c:	f43f aea7 	beq.w	801937e <_strtod_l+0xae>
 8019630:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8019632:	4985      	ldr	r1, [pc, #532]	@ (8019848 <_strtod_l+0x578>)
 8019634:	3b01      	subs	r3, #1
 8019636:	a811      	add	r0, sp, #68	@ 0x44
 8019638:	9311      	str	r3, [sp, #68]	@ 0x44
 801963a:	f002 febb 	bl	801c3b4 <__match>
 801963e:	b910      	cbnz	r0, 8019646 <_strtod_l+0x376>
 8019640:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8019642:	3301      	adds	r3, #1
 8019644:	9311      	str	r3, [sp, #68]	@ 0x44
 8019646:	f8df b214 	ldr.w	fp, [pc, #532]	@ 801985c <_strtod_l+0x58c>
 801964a:	f04f 0a00 	mov.w	sl, #0
 801964e:	e67a      	b.n	8019346 <_strtod_l+0x76>
 8019650:	487e      	ldr	r0, [pc, #504]	@ (801984c <_strtod_l+0x57c>)
 8019652:	f001 fde5 	bl	801b220 <nan>
 8019656:	ec5b ab10 	vmov	sl, fp, d0
 801965a:	e674      	b.n	8019346 <_strtod_l+0x76>
 801965c:	ee07 9a90 	vmov	s15, r9
 8019660:	1be2      	subs	r2, r4, r7
 8019662:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8019666:	2d00      	cmp	r5, #0
 8019668:	bf08      	it	eq
 801966a:	461d      	moveq	r5, r3
 801966c:	2b10      	cmp	r3, #16
 801966e:	9209      	str	r2, [sp, #36]	@ 0x24
 8019670:	461a      	mov	r2, r3
 8019672:	bfa8      	it	ge
 8019674:	2210      	movge	r2, #16
 8019676:	2b09      	cmp	r3, #9
 8019678:	ec5b ab17 	vmov	sl, fp, d7
 801967c:	dc15      	bgt.n	80196aa <_strtod_l+0x3da>
 801967e:	1be1      	subs	r1, r4, r7
 8019680:	2900      	cmp	r1, #0
 8019682:	f43f ae60 	beq.w	8019346 <_strtod_l+0x76>
 8019686:	eba4 0107 	sub.w	r1, r4, r7
 801968a:	dd72      	ble.n	8019772 <_strtod_l+0x4a2>
 801968c:	2916      	cmp	r1, #22
 801968e:	dc59      	bgt.n	8019744 <_strtod_l+0x474>
 8019690:	4b6f      	ldr	r3, [pc, #444]	@ (8019850 <_strtod_l+0x580>)
 8019692:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019694:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8019698:	ed93 7b00 	vldr	d7, [r3]
 801969c:	ec4b ab16 	vmov	d6, sl, fp
 80196a0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80196a4:	ec5b ab17 	vmov	sl, fp, d7
 80196a8:	e64d      	b.n	8019346 <_strtod_l+0x76>
 80196aa:	4969      	ldr	r1, [pc, #420]	@ (8019850 <_strtod_l+0x580>)
 80196ac:	eddd 6a06 	vldr	s13, [sp, #24]
 80196b0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80196b4:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 80196b8:	2b0f      	cmp	r3, #15
 80196ba:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 80196be:	eea7 6b05 	vfma.f64	d6, d7, d5
 80196c2:	ec5b ab16 	vmov	sl, fp, d6
 80196c6:	ddda      	ble.n	801967e <_strtod_l+0x3ae>
 80196c8:	1a9a      	subs	r2, r3, r2
 80196ca:	1be1      	subs	r1, r4, r7
 80196cc:	440a      	add	r2, r1
 80196ce:	2a00      	cmp	r2, #0
 80196d0:	f340 8094 	ble.w	80197fc <_strtod_l+0x52c>
 80196d4:	f012 000f 	ands.w	r0, r2, #15
 80196d8:	d00a      	beq.n	80196f0 <_strtod_l+0x420>
 80196da:	495d      	ldr	r1, [pc, #372]	@ (8019850 <_strtod_l+0x580>)
 80196dc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80196e0:	ed91 7b00 	vldr	d7, [r1]
 80196e4:	ec4b ab16 	vmov	d6, sl, fp
 80196e8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80196ec:	ec5b ab17 	vmov	sl, fp, d7
 80196f0:	f032 020f 	bics.w	r2, r2, #15
 80196f4:	d073      	beq.n	80197de <_strtod_l+0x50e>
 80196f6:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 80196fa:	dd47      	ble.n	801978c <_strtod_l+0x4bc>
 80196fc:	2400      	movs	r4, #0
 80196fe:	4625      	mov	r5, r4
 8019700:	9407      	str	r4, [sp, #28]
 8019702:	4626      	mov	r6, r4
 8019704:	9a05      	ldr	r2, [sp, #20]
 8019706:	f8df b154 	ldr.w	fp, [pc, #340]	@ 801985c <_strtod_l+0x58c>
 801970a:	2322      	movs	r3, #34	@ 0x22
 801970c:	6013      	str	r3, [r2, #0]
 801970e:	f04f 0a00 	mov.w	sl, #0
 8019712:	9b07      	ldr	r3, [sp, #28]
 8019714:	2b00      	cmp	r3, #0
 8019716:	f43f ae16 	beq.w	8019346 <_strtod_l+0x76>
 801971a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801971c:	9805      	ldr	r0, [sp, #20]
 801971e:	f003 f801 	bl	801c724 <_Bfree>
 8019722:	9805      	ldr	r0, [sp, #20]
 8019724:	4631      	mov	r1, r6
 8019726:	f002 fffd 	bl	801c724 <_Bfree>
 801972a:	9805      	ldr	r0, [sp, #20]
 801972c:	4629      	mov	r1, r5
 801972e:	f002 fff9 	bl	801c724 <_Bfree>
 8019732:	9907      	ldr	r1, [sp, #28]
 8019734:	9805      	ldr	r0, [sp, #20]
 8019736:	f002 fff5 	bl	801c724 <_Bfree>
 801973a:	9805      	ldr	r0, [sp, #20]
 801973c:	4621      	mov	r1, r4
 801973e:	f002 fff1 	bl	801c724 <_Bfree>
 8019742:	e600      	b.n	8019346 <_strtod_l+0x76>
 8019744:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8019748:	1be0      	subs	r0, r4, r7
 801974a:	4281      	cmp	r1, r0
 801974c:	dbbc      	blt.n	80196c8 <_strtod_l+0x3f8>
 801974e:	4a40      	ldr	r2, [pc, #256]	@ (8019850 <_strtod_l+0x580>)
 8019750:	f1c3 030f 	rsb	r3, r3, #15
 8019754:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8019758:	ed91 7b00 	vldr	d7, [r1]
 801975c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801975e:	ec4b ab16 	vmov	d6, sl, fp
 8019762:	1acb      	subs	r3, r1, r3
 8019764:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8019768:	ee27 7b06 	vmul.f64	d7, d7, d6
 801976c:	ed92 6b00 	vldr	d6, [r2]
 8019770:	e796      	b.n	80196a0 <_strtod_l+0x3d0>
 8019772:	3116      	adds	r1, #22
 8019774:	dba8      	blt.n	80196c8 <_strtod_l+0x3f8>
 8019776:	4b36      	ldr	r3, [pc, #216]	@ (8019850 <_strtod_l+0x580>)
 8019778:	1b3c      	subs	r4, r7, r4
 801977a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801977e:	ed94 7b00 	vldr	d7, [r4]
 8019782:	ec4b ab16 	vmov	d6, sl, fp
 8019786:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801978a:	e78b      	b.n	80196a4 <_strtod_l+0x3d4>
 801978c:	2000      	movs	r0, #0
 801978e:	ec4b ab17 	vmov	d7, sl, fp
 8019792:	4e30      	ldr	r6, [pc, #192]	@ (8019854 <_strtod_l+0x584>)
 8019794:	1112      	asrs	r2, r2, #4
 8019796:	4601      	mov	r1, r0
 8019798:	2a01      	cmp	r2, #1
 801979a:	dc23      	bgt.n	80197e4 <_strtod_l+0x514>
 801979c:	b108      	cbz	r0, 80197a2 <_strtod_l+0x4d2>
 801979e:	ec5b ab17 	vmov	sl, fp, d7
 80197a2:	4a2c      	ldr	r2, [pc, #176]	@ (8019854 <_strtod_l+0x584>)
 80197a4:	482c      	ldr	r0, [pc, #176]	@ (8019858 <_strtod_l+0x588>)
 80197a6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80197aa:	ed92 7b00 	vldr	d7, [r2]
 80197ae:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80197b2:	ec4b ab16 	vmov	d6, sl, fp
 80197b6:	4a29      	ldr	r2, [pc, #164]	@ (801985c <_strtod_l+0x58c>)
 80197b8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80197bc:	ee17 1a90 	vmov	r1, s15
 80197c0:	400a      	ands	r2, r1
 80197c2:	4282      	cmp	r2, r0
 80197c4:	ec5b ab17 	vmov	sl, fp, d7
 80197c8:	d898      	bhi.n	80196fc <_strtod_l+0x42c>
 80197ca:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 80197ce:	4282      	cmp	r2, r0
 80197d0:	bf86      	itte	hi
 80197d2:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8019860 <_strtod_l+0x590>
 80197d6:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 80197da:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 80197de:	2200      	movs	r2, #0
 80197e0:	9206      	str	r2, [sp, #24]
 80197e2:	e076      	b.n	80198d2 <_strtod_l+0x602>
 80197e4:	f012 0f01 	tst.w	r2, #1
 80197e8:	d004      	beq.n	80197f4 <_strtod_l+0x524>
 80197ea:	ed96 6b00 	vldr	d6, [r6]
 80197ee:	2001      	movs	r0, #1
 80197f0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80197f4:	3101      	adds	r1, #1
 80197f6:	1052      	asrs	r2, r2, #1
 80197f8:	3608      	adds	r6, #8
 80197fa:	e7cd      	b.n	8019798 <_strtod_l+0x4c8>
 80197fc:	d0ef      	beq.n	80197de <_strtod_l+0x50e>
 80197fe:	4252      	negs	r2, r2
 8019800:	f012 000f 	ands.w	r0, r2, #15
 8019804:	d00a      	beq.n	801981c <_strtod_l+0x54c>
 8019806:	4912      	ldr	r1, [pc, #72]	@ (8019850 <_strtod_l+0x580>)
 8019808:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801980c:	ed91 7b00 	vldr	d7, [r1]
 8019810:	ec4b ab16 	vmov	d6, sl, fp
 8019814:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8019818:	ec5b ab17 	vmov	sl, fp, d7
 801981c:	1112      	asrs	r2, r2, #4
 801981e:	d0de      	beq.n	80197de <_strtod_l+0x50e>
 8019820:	2a1f      	cmp	r2, #31
 8019822:	dd1f      	ble.n	8019864 <_strtod_l+0x594>
 8019824:	2400      	movs	r4, #0
 8019826:	4625      	mov	r5, r4
 8019828:	9407      	str	r4, [sp, #28]
 801982a:	4626      	mov	r6, r4
 801982c:	9a05      	ldr	r2, [sp, #20]
 801982e:	2322      	movs	r3, #34	@ 0x22
 8019830:	f04f 0a00 	mov.w	sl, #0
 8019834:	f04f 0b00 	mov.w	fp, #0
 8019838:	6013      	str	r3, [r2, #0]
 801983a:	e76a      	b.n	8019712 <_strtod_l+0x442>
 801983c:	0801fa23 	.word	0x0801fa23
 8019840:	0801fc04 	.word	0x0801fc04
 8019844:	0801fa1b 	.word	0x0801fa1b
 8019848:	0801fa58 	.word	0x0801fa58
 801984c:	0801fc02 	.word	0x0801fc02
 8019850:	0801fc90 	.word	0x0801fc90
 8019854:	0801fc68 	.word	0x0801fc68
 8019858:	7ca00000 	.word	0x7ca00000
 801985c:	7ff00000 	.word	0x7ff00000
 8019860:	7fefffff 	.word	0x7fefffff
 8019864:	f012 0110 	ands.w	r1, r2, #16
 8019868:	bf18      	it	ne
 801986a:	216a      	movne	r1, #106	@ 0x6a
 801986c:	9106      	str	r1, [sp, #24]
 801986e:	ec4b ab17 	vmov	d7, sl, fp
 8019872:	49af      	ldr	r1, [pc, #700]	@ (8019b30 <_strtod_l+0x860>)
 8019874:	2000      	movs	r0, #0
 8019876:	07d6      	lsls	r6, r2, #31
 8019878:	d504      	bpl.n	8019884 <_strtod_l+0x5b4>
 801987a:	ed91 6b00 	vldr	d6, [r1]
 801987e:	2001      	movs	r0, #1
 8019880:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019884:	1052      	asrs	r2, r2, #1
 8019886:	f101 0108 	add.w	r1, r1, #8
 801988a:	d1f4      	bne.n	8019876 <_strtod_l+0x5a6>
 801988c:	b108      	cbz	r0, 8019892 <_strtod_l+0x5c2>
 801988e:	ec5b ab17 	vmov	sl, fp, d7
 8019892:	9a06      	ldr	r2, [sp, #24]
 8019894:	b1b2      	cbz	r2, 80198c4 <_strtod_l+0x5f4>
 8019896:	f3cb 510a 	ubfx	r1, fp, #20, #11
 801989a:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 801989e:	2a00      	cmp	r2, #0
 80198a0:	4658      	mov	r0, fp
 80198a2:	dd0f      	ble.n	80198c4 <_strtod_l+0x5f4>
 80198a4:	2a1f      	cmp	r2, #31
 80198a6:	dd55      	ble.n	8019954 <_strtod_l+0x684>
 80198a8:	2a34      	cmp	r2, #52	@ 0x34
 80198aa:	bfde      	ittt	le
 80198ac:	f04f 32ff 	movle.w	r2, #4294967295	@ 0xffffffff
 80198b0:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 80198b4:	408a      	lslle	r2, r1
 80198b6:	f04f 0a00 	mov.w	sl, #0
 80198ba:	bfcc      	ite	gt
 80198bc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80198c0:	ea02 0b00 	andle.w	fp, r2, r0
 80198c4:	ec4b ab17 	vmov	d7, sl, fp
 80198c8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80198cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198d0:	d0a8      	beq.n	8019824 <_strtod_l+0x554>
 80198d2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80198d4:	9805      	ldr	r0, [sp, #20]
 80198d6:	f8cd 9000 	str.w	r9, [sp]
 80198da:	462a      	mov	r2, r5
 80198dc:	f002 ff8a 	bl	801c7f4 <__s2b>
 80198e0:	9007      	str	r0, [sp, #28]
 80198e2:	2800      	cmp	r0, #0
 80198e4:	f43f af0a 	beq.w	80196fc <_strtod_l+0x42c>
 80198e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80198ea:	1b3f      	subs	r7, r7, r4
 80198ec:	2b00      	cmp	r3, #0
 80198ee:	bfb4      	ite	lt
 80198f0:	463b      	movlt	r3, r7
 80198f2:	2300      	movge	r3, #0
 80198f4:	930a      	str	r3, [sp, #40]	@ 0x28
 80198f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80198f8:	ed9f bb89 	vldr	d11, [pc, #548]	@ 8019b20 <_strtod_l+0x850>
 80198fc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019900:	2400      	movs	r4, #0
 8019902:	930d      	str	r3, [sp, #52]	@ 0x34
 8019904:	4625      	mov	r5, r4
 8019906:	9b07      	ldr	r3, [sp, #28]
 8019908:	9805      	ldr	r0, [sp, #20]
 801990a:	6859      	ldr	r1, [r3, #4]
 801990c:	f002 feca 	bl	801c6a4 <_Balloc>
 8019910:	4606      	mov	r6, r0
 8019912:	2800      	cmp	r0, #0
 8019914:	f43f aef6 	beq.w	8019704 <_strtod_l+0x434>
 8019918:	9b07      	ldr	r3, [sp, #28]
 801991a:	691a      	ldr	r2, [r3, #16]
 801991c:	ec4b ab19 	vmov	d9, sl, fp
 8019920:	3202      	adds	r2, #2
 8019922:	f103 010c 	add.w	r1, r3, #12
 8019926:	0092      	lsls	r2, r2, #2
 8019928:	300c      	adds	r0, #12
 801992a:	f001 fc6a 	bl	801b202 <memcpy>
 801992e:	eeb0 0b49 	vmov.f64	d0, d9
 8019932:	9805      	ldr	r0, [sp, #20]
 8019934:	aa14      	add	r2, sp, #80	@ 0x50
 8019936:	a913      	add	r1, sp, #76	@ 0x4c
 8019938:	f003 fa90 	bl	801ce5c <__d2b>
 801993c:	9012      	str	r0, [sp, #72]	@ 0x48
 801993e:	2800      	cmp	r0, #0
 8019940:	f43f aee0 	beq.w	8019704 <_strtod_l+0x434>
 8019944:	9805      	ldr	r0, [sp, #20]
 8019946:	2101      	movs	r1, #1
 8019948:	f002 ffea 	bl	801c920 <__i2b>
 801994c:	4605      	mov	r5, r0
 801994e:	b940      	cbnz	r0, 8019962 <_strtod_l+0x692>
 8019950:	2500      	movs	r5, #0
 8019952:	e6d7      	b.n	8019704 <_strtod_l+0x434>
 8019954:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8019958:	fa01 f202 	lsl.w	r2, r1, r2
 801995c:	ea02 0a0a 	and.w	sl, r2, sl
 8019960:	e7b0      	b.n	80198c4 <_strtod_l+0x5f4>
 8019962:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8019964:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8019966:	2f00      	cmp	r7, #0
 8019968:	bfab      	itete	ge
 801996a:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 801996c:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 801996e:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 8019972:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8019976:	bfac      	ite	ge
 8019978:	eb07 0903 	addge.w	r9, r7, r3
 801997c:	eba3 0807 	sublt.w	r8, r3, r7
 8019980:	9b06      	ldr	r3, [sp, #24]
 8019982:	1aff      	subs	r7, r7, r3
 8019984:	4417      	add	r7, r2
 8019986:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 801998a:	4a6a      	ldr	r2, [pc, #424]	@ (8019b34 <_strtod_l+0x864>)
 801998c:	3f01      	subs	r7, #1
 801998e:	4297      	cmp	r7, r2
 8019990:	da51      	bge.n	8019a36 <_strtod_l+0x766>
 8019992:	1bd1      	subs	r1, r2, r7
 8019994:	291f      	cmp	r1, #31
 8019996:	eba3 0301 	sub.w	r3, r3, r1
 801999a:	f04f 0201 	mov.w	r2, #1
 801999e:	dc3e      	bgt.n	8019a1e <_strtod_l+0x74e>
 80199a0:	408a      	lsls	r2, r1
 80199a2:	920c      	str	r2, [sp, #48]	@ 0x30
 80199a4:	2200      	movs	r2, #0
 80199a6:	920b      	str	r2, [sp, #44]	@ 0x2c
 80199a8:	eb09 0703 	add.w	r7, r9, r3
 80199ac:	4498      	add	r8, r3
 80199ae:	9b06      	ldr	r3, [sp, #24]
 80199b0:	45b9      	cmp	r9, r7
 80199b2:	4498      	add	r8, r3
 80199b4:	464b      	mov	r3, r9
 80199b6:	bfa8      	it	ge
 80199b8:	463b      	movge	r3, r7
 80199ba:	4543      	cmp	r3, r8
 80199bc:	bfa8      	it	ge
 80199be:	4643      	movge	r3, r8
 80199c0:	2b00      	cmp	r3, #0
 80199c2:	bfc2      	ittt	gt
 80199c4:	1aff      	subgt	r7, r7, r3
 80199c6:	eba8 0803 	subgt.w	r8, r8, r3
 80199ca:	eba9 0903 	subgt.w	r9, r9, r3
 80199ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80199d0:	2b00      	cmp	r3, #0
 80199d2:	dd16      	ble.n	8019a02 <_strtod_l+0x732>
 80199d4:	4629      	mov	r1, r5
 80199d6:	9805      	ldr	r0, [sp, #20]
 80199d8:	461a      	mov	r2, r3
 80199da:	f003 f859 	bl	801ca90 <__pow5mult>
 80199de:	4605      	mov	r5, r0
 80199e0:	2800      	cmp	r0, #0
 80199e2:	d0b5      	beq.n	8019950 <_strtod_l+0x680>
 80199e4:	4601      	mov	r1, r0
 80199e6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80199e8:	9805      	ldr	r0, [sp, #20]
 80199ea:	f002 ffaf 	bl	801c94c <__multiply>
 80199ee:	900f      	str	r0, [sp, #60]	@ 0x3c
 80199f0:	2800      	cmp	r0, #0
 80199f2:	f43f ae87 	beq.w	8019704 <_strtod_l+0x434>
 80199f6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80199f8:	9805      	ldr	r0, [sp, #20]
 80199fa:	f002 fe93 	bl	801c724 <_Bfree>
 80199fe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019a00:	9312      	str	r3, [sp, #72]	@ 0x48
 8019a02:	2f00      	cmp	r7, #0
 8019a04:	dc1b      	bgt.n	8019a3e <_strtod_l+0x76e>
 8019a06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019a08:	2b00      	cmp	r3, #0
 8019a0a:	dd21      	ble.n	8019a50 <_strtod_l+0x780>
 8019a0c:	4631      	mov	r1, r6
 8019a0e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019a10:	9805      	ldr	r0, [sp, #20]
 8019a12:	f003 f83d 	bl	801ca90 <__pow5mult>
 8019a16:	4606      	mov	r6, r0
 8019a18:	b9d0      	cbnz	r0, 8019a50 <_strtod_l+0x780>
 8019a1a:	2600      	movs	r6, #0
 8019a1c:	e672      	b.n	8019704 <_strtod_l+0x434>
 8019a1e:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 8019a22:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8019a26:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8019a2a:	37e2      	adds	r7, #226	@ 0xe2
 8019a2c:	fa02 f107 	lsl.w	r1, r2, r7
 8019a30:	910b      	str	r1, [sp, #44]	@ 0x2c
 8019a32:	920c      	str	r2, [sp, #48]	@ 0x30
 8019a34:	e7b8      	b.n	80199a8 <_strtod_l+0x6d8>
 8019a36:	2200      	movs	r2, #0
 8019a38:	920b      	str	r2, [sp, #44]	@ 0x2c
 8019a3a:	2201      	movs	r2, #1
 8019a3c:	e7f9      	b.n	8019a32 <_strtod_l+0x762>
 8019a3e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8019a40:	9805      	ldr	r0, [sp, #20]
 8019a42:	463a      	mov	r2, r7
 8019a44:	f003 f87e 	bl	801cb44 <__lshift>
 8019a48:	9012      	str	r0, [sp, #72]	@ 0x48
 8019a4a:	2800      	cmp	r0, #0
 8019a4c:	d1db      	bne.n	8019a06 <_strtod_l+0x736>
 8019a4e:	e659      	b.n	8019704 <_strtod_l+0x434>
 8019a50:	f1b8 0f00 	cmp.w	r8, #0
 8019a54:	dd07      	ble.n	8019a66 <_strtod_l+0x796>
 8019a56:	4631      	mov	r1, r6
 8019a58:	9805      	ldr	r0, [sp, #20]
 8019a5a:	4642      	mov	r2, r8
 8019a5c:	f003 f872 	bl	801cb44 <__lshift>
 8019a60:	4606      	mov	r6, r0
 8019a62:	2800      	cmp	r0, #0
 8019a64:	d0d9      	beq.n	8019a1a <_strtod_l+0x74a>
 8019a66:	f1b9 0f00 	cmp.w	r9, #0
 8019a6a:	dd08      	ble.n	8019a7e <_strtod_l+0x7ae>
 8019a6c:	4629      	mov	r1, r5
 8019a6e:	9805      	ldr	r0, [sp, #20]
 8019a70:	464a      	mov	r2, r9
 8019a72:	f003 f867 	bl	801cb44 <__lshift>
 8019a76:	4605      	mov	r5, r0
 8019a78:	2800      	cmp	r0, #0
 8019a7a:	f43f ae43 	beq.w	8019704 <_strtod_l+0x434>
 8019a7e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8019a80:	9805      	ldr	r0, [sp, #20]
 8019a82:	4632      	mov	r2, r6
 8019a84:	f003 f8e6 	bl	801cc54 <__mdiff>
 8019a88:	4604      	mov	r4, r0
 8019a8a:	2800      	cmp	r0, #0
 8019a8c:	f43f ae3a 	beq.w	8019704 <_strtod_l+0x434>
 8019a90:	2300      	movs	r3, #0
 8019a92:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8019a96:	60c3      	str	r3, [r0, #12]
 8019a98:	4629      	mov	r1, r5
 8019a9a:	f003 f8bf 	bl	801cc1c <__mcmp>
 8019a9e:	2800      	cmp	r0, #0
 8019aa0:	da4c      	bge.n	8019b3c <_strtod_l+0x86c>
 8019aa2:	ea58 080a 	orrs.w	r8, r8, sl
 8019aa6:	d172      	bne.n	8019b8e <_strtod_l+0x8be>
 8019aa8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8019aac:	2b00      	cmp	r3, #0
 8019aae:	d16e      	bne.n	8019b8e <_strtod_l+0x8be>
 8019ab0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8019ab4:	0d1b      	lsrs	r3, r3, #20
 8019ab6:	051b      	lsls	r3, r3, #20
 8019ab8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8019abc:	d967      	bls.n	8019b8e <_strtod_l+0x8be>
 8019abe:	6963      	ldr	r3, [r4, #20]
 8019ac0:	b913      	cbnz	r3, 8019ac8 <_strtod_l+0x7f8>
 8019ac2:	6923      	ldr	r3, [r4, #16]
 8019ac4:	2b01      	cmp	r3, #1
 8019ac6:	dd62      	ble.n	8019b8e <_strtod_l+0x8be>
 8019ac8:	4621      	mov	r1, r4
 8019aca:	2201      	movs	r2, #1
 8019acc:	9805      	ldr	r0, [sp, #20]
 8019ace:	f003 f839 	bl	801cb44 <__lshift>
 8019ad2:	4629      	mov	r1, r5
 8019ad4:	4604      	mov	r4, r0
 8019ad6:	f003 f8a1 	bl	801cc1c <__mcmp>
 8019ada:	2800      	cmp	r0, #0
 8019adc:	dd57      	ble.n	8019b8e <_strtod_l+0x8be>
 8019ade:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8019ae2:	9a06      	ldr	r2, [sp, #24]
 8019ae4:	0d1b      	lsrs	r3, r3, #20
 8019ae6:	051b      	lsls	r3, r3, #20
 8019ae8:	2a00      	cmp	r2, #0
 8019aea:	d06e      	beq.n	8019bca <_strtod_l+0x8fa>
 8019aec:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8019af0:	d86b      	bhi.n	8019bca <_strtod_l+0x8fa>
 8019af2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8019af6:	f67f ae99 	bls.w	801982c <_strtod_l+0x55c>
 8019afa:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 8019b28 <_strtod_l+0x858>
 8019afe:	ec4b ab16 	vmov	d6, sl, fp
 8019b02:	4b0d      	ldr	r3, [pc, #52]	@ (8019b38 <_strtod_l+0x868>)
 8019b04:	ee26 7b07 	vmul.f64	d7, d6, d7
 8019b08:	ee17 2a90 	vmov	r2, s15
 8019b0c:	4013      	ands	r3, r2
 8019b0e:	ec5b ab17 	vmov	sl, fp, d7
 8019b12:	2b00      	cmp	r3, #0
 8019b14:	f47f ae01 	bne.w	801971a <_strtod_l+0x44a>
 8019b18:	9a05      	ldr	r2, [sp, #20]
 8019b1a:	2322      	movs	r3, #34	@ 0x22
 8019b1c:	6013      	str	r3, [r2, #0]
 8019b1e:	e5fc      	b.n	801971a <_strtod_l+0x44a>
 8019b20:	ffc00000 	.word	0xffc00000
 8019b24:	41dfffff 	.word	0x41dfffff
 8019b28:	00000000 	.word	0x00000000
 8019b2c:	39500000 	.word	0x39500000
 8019b30:	0801fc30 	.word	0x0801fc30
 8019b34:	fffffc02 	.word	0xfffffc02
 8019b38:	7ff00000 	.word	0x7ff00000
 8019b3c:	46d9      	mov	r9, fp
 8019b3e:	d15d      	bne.n	8019bfc <_strtod_l+0x92c>
 8019b40:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8019b44:	f1b8 0f00 	cmp.w	r8, #0
 8019b48:	d02a      	beq.n	8019ba0 <_strtod_l+0x8d0>
 8019b4a:	4aa9      	ldr	r2, [pc, #676]	@ (8019df0 <_strtod_l+0xb20>)
 8019b4c:	4293      	cmp	r3, r2
 8019b4e:	d12a      	bne.n	8019ba6 <_strtod_l+0x8d6>
 8019b50:	9b06      	ldr	r3, [sp, #24]
 8019b52:	4652      	mov	r2, sl
 8019b54:	b1fb      	cbz	r3, 8019b96 <_strtod_l+0x8c6>
 8019b56:	4ba7      	ldr	r3, [pc, #668]	@ (8019df4 <_strtod_l+0xb24>)
 8019b58:	ea0b 0303 	and.w	r3, fp, r3
 8019b5c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8019b60:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8019b64:	d81a      	bhi.n	8019b9c <_strtod_l+0x8cc>
 8019b66:	0d1b      	lsrs	r3, r3, #20
 8019b68:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8019b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8019b70:	429a      	cmp	r2, r3
 8019b72:	d118      	bne.n	8019ba6 <_strtod_l+0x8d6>
 8019b74:	4ba0      	ldr	r3, [pc, #640]	@ (8019df8 <_strtod_l+0xb28>)
 8019b76:	4599      	cmp	r9, r3
 8019b78:	d102      	bne.n	8019b80 <_strtod_l+0x8b0>
 8019b7a:	3201      	adds	r2, #1
 8019b7c:	f43f adc2 	beq.w	8019704 <_strtod_l+0x434>
 8019b80:	4b9c      	ldr	r3, [pc, #624]	@ (8019df4 <_strtod_l+0xb24>)
 8019b82:	ea09 0303 	and.w	r3, r9, r3
 8019b86:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 8019b8a:	f04f 0a00 	mov.w	sl, #0
 8019b8e:	9b06      	ldr	r3, [sp, #24]
 8019b90:	2b00      	cmp	r3, #0
 8019b92:	d1b2      	bne.n	8019afa <_strtod_l+0x82a>
 8019b94:	e5c1      	b.n	801971a <_strtod_l+0x44a>
 8019b96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019b9a:	e7e9      	b.n	8019b70 <_strtod_l+0x8a0>
 8019b9c:	460b      	mov	r3, r1
 8019b9e:	e7e7      	b.n	8019b70 <_strtod_l+0x8a0>
 8019ba0:	ea53 030a 	orrs.w	r3, r3, sl
 8019ba4:	d09b      	beq.n	8019ade <_strtod_l+0x80e>
 8019ba6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019ba8:	b1c3      	cbz	r3, 8019bdc <_strtod_l+0x90c>
 8019baa:	ea13 0f09 	tst.w	r3, r9
 8019bae:	d0ee      	beq.n	8019b8e <_strtod_l+0x8be>
 8019bb0:	9a06      	ldr	r2, [sp, #24]
 8019bb2:	4650      	mov	r0, sl
 8019bb4:	4659      	mov	r1, fp
 8019bb6:	f1b8 0f00 	cmp.w	r8, #0
 8019bba:	d013      	beq.n	8019be4 <_strtod_l+0x914>
 8019bbc:	f7ff fb6c 	bl	8019298 <sulp>
 8019bc0:	ee39 7b00 	vadd.f64	d7, d9, d0
 8019bc4:	ec5b ab17 	vmov	sl, fp, d7
 8019bc8:	e7e1      	b.n	8019b8e <_strtod_l+0x8be>
 8019bca:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8019bce:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8019bd2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8019bd6:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8019bda:	e7d8      	b.n	8019b8e <_strtod_l+0x8be>
 8019bdc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019bde:	ea13 0f0a 	tst.w	r3, sl
 8019be2:	e7e4      	b.n	8019bae <_strtod_l+0x8de>
 8019be4:	f7ff fb58 	bl	8019298 <sulp>
 8019be8:	ee39 0b40 	vsub.f64	d0, d9, d0
 8019bec:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8019bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019bf4:	ec5b ab10 	vmov	sl, fp, d0
 8019bf8:	d1c9      	bne.n	8019b8e <_strtod_l+0x8be>
 8019bfa:	e617      	b.n	801982c <_strtod_l+0x55c>
 8019bfc:	4629      	mov	r1, r5
 8019bfe:	4620      	mov	r0, r4
 8019c00:	f003 f984 	bl	801cf0c <__ratio>
 8019c04:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8019c08:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8019c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c10:	d85d      	bhi.n	8019cce <_strtod_l+0x9fe>
 8019c12:	f1b8 0f00 	cmp.w	r8, #0
 8019c16:	d164      	bne.n	8019ce2 <_strtod_l+0xa12>
 8019c18:	f1ba 0f00 	cmp.w	sl, #0
 8019c1c:	d14b      	bne.n	8019cb6 <_strtod_l+0x9e6>
 8019c1e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8019c22:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8019c26:	2b00      	cmp	r3, #0
 8019c28:	d160      	bne.n	8019cec <_strtod_l+0xa1c>
 8019c2a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 8019c2e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8019c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c36:	d401      	bmi.n	8019c3c <_strtod_l+0x96c>
 8019c38:	ee20 8b08 	vmul.f64	d8, d0, d8
 8019c3c:	eeb1 ab48 	vneg.f64	d10, d8
 8019c40:	486c      	ldr	r0, [pc, #432]	@ (8019df4 <_strtod_l+0xb24>)
 8019c42:	496e      	ldr	r1, [pc, #440]	@ (8019dfc <_strtod_l+0xb2c>)
 8019c44:	ea09 0700 	and.w	r7, r9, r0
 8019c48:	428f      	cmp	r7, r1
 8019c4a:	ec53 2b1a 	vmov	r2, r3, d10
 8019c4e:	d17d      	bne.n	8019d4c <_strtod_l+0xa7c>
 8019c50:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 8019c54:	ec4b ab1c 	vmov	d12, sl, fp
 8019c58:	eeb0 0b4c 	vmov.f64	d0, d12
 8019c5c:	f003 f88e 	bl	801cd7c <__ulp>
 8019c60:	4864      	ldr	r0, [pc, #400]	@ (8019df4 <_strtod_l+0xb24>)
 8019c62:	eea0 cb0a 	vfma.f64	d12, d0, d10
 8019c66:	ee1c 3a90 	vmov	r3, s25
 8019c6a:	4a65      	ldr	r2, [pc, #404]	@ (8019e00 <_strtod_l+0xb30>)
 8019c6c:	ea03 0100 	and.w	r1, r3, r0
 8019c70:	4291      	cmp	r1, r2
 8019c72:	ec5b ab1c 	vmov	sl, fp, d12
 8019c76:	d93c      	bls.n	8019cf2 <_strtod_l+0xa22>
 8019c78:	ee19 2a90 	vmov	r2, s19
 8019c7c:	4b5e      	ldr	r3, [pc, #376]	@ (8019df8 <_strtod_l+0xb28>)
 8019c7e:	429a      	cmp	r2, r3
 8019c80:	d104      	bne.n	8019c8c <_strtod_l+0x9bc>
 8019c82:	ee19 3a10 	vmov	r3, s18
 8019c86:	3301      	adds	r3, #1
 8019c88:	f43f ad3c 	beq.w	8019704 <_strtod_l+0x434>
 8019c8c:	f8df b168 	ldr.w	fp, [pc, #360]	@ 8019df8 <_strtod_l+0xb28>
 8019c90:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8019c94:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8019c96:	9805      	ldr	r0, [sp, #20]
 8019c98:	f002 fd44 	bl	801c724 <_Bfree>
 8019c9c:	9805      	ldr	r0, [sp, #20]
 8019c9e:	4631      	mov	r1, r6
 8019ca0:	f002 fd40 	bl	801c724 <_Bfree>
 8019ca4:	9805      	ldr	r0, [sp, #20]
 8019ca6:	4629      	mov	r1, r5
 8019ca8:	f002 fd3c 	bl	801c724 <_Bfree>
 8019cac:	9805      	ldr	r0, [sp, #20]
 8019cae:	4621      	mov	r1, r4
 8019cb0:	f002 fd38 	bl	801c724 <_Bfree>
 8019cb4:	e627      	b.n	8019906 <_strtod_l+0x636>
 8019cb6:	f1ba 0f01 	cmp.w	sl, #1
 8019cba:	d103      	bne.n	8019cc4 <_strtod_l+0x9f4>
 8019cbc:	f1bb 0f00 	cmp.w	fp, #0
 8019cc0:	f43f adb4 	beq.w	801982c <_strtod_l+0x55c>
 8019cc4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8019cc8:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8019ccc:	e7b8      	b.n	8019c40 <_strtod_l+0x970>
 8019cce:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8019cd2:	ee20 8b08 	vmul.f64	d8, d0, d8
 8019cd6:	f1b8 0f00 	cmp.w	r8, #0
 8019cda:	d0af      	beq.n	8019c3c <_strtod_l+0x96c>
 8019cdc:	eeb0 ab48 	vmov.f64	d10, d8
 8019ce0:	e7ae      	b.n	8019c40 <_strtod_l+0x970>
 8019ce2:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 8019ce6:	eeb0 8b4a 	vmov.f64	d8, d10
 8019cea:	e7a9      	b.n	8019c40 <_strtod_l+0x970>
 8019cec:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8019cf0:	e7a6      	b.n	8019c40 <_strtod_l+0x970>
 8019cf2:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8019cf6:	9b06      	ldr	r3, [sp, #24]
 8019cf8:	46d9      	mov	r9, fp
 8019cfa:	2b00      	cmp	r3, #0
 8019cfc:	d1ca      	bne.n	8019c94 <_strtod_l+0x9c4>
 8019cfe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8019d02:	0d1b      	lsrs	r3, r3, #20
 8019d04:	051b      	lsls	r3, r3, #20
 8019d06:	429f      	cmp	r7, r3
 8019d08:	d1c4      	bne.n	8019c94 <_strtod_l+0x9c4>
 8019d0a:	ec51 0b18 	vmov	r0, r1, d8
 8019d0e:	f7e6 fd8b 	bl	8000828 <__aeabi_d2lz>
 8019d12:	f7e6 fcf3 	bl	80006fc <__aeabi_l2d>
 8019d16:	f3cb 0913 	ubfx	r9, fp, #0, #20
 8019d1a:	ec41 0b17 	vmov	d7, r0, r1
 8019d1e:	ea49 090a 	orr.w	r9, r9, sl
 8019d22:	ea59 0908 	orrs.w	r9, r9, r8
 8019d26:	ee38 8b47 	vsub.f64	d8, d8, d7
 8019d2a:	d03c      	beq.n	8019da6 <_strtod_l+0xad6>
 8019d2c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8019dd8 <_strtod_l+0xb08>
 8019d30:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8019d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d38:	f53f acef 	bmi.w	801971a <_strtod_l+0x44a>
 8019d3c:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 8019de0 <_strtod_l+0xb10>
 8019d40:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8019d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d48:	dda4      	ble.n	8019c94 <_strtod_l+0x9c4>
 8019d4a:	e4e6      	b.n	801971a <_strtod_l+0x44a>
 8019d4c:	9906      	ldr	r1, [sp, #24]
 8019d4e:	b1e1      	cbz	r1, 8019d8a <_strtod_l+0xaba>
 8019d50:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 8019d54:	d819      	bhi.n	8019d8a <_strtod_l+0xaba>
 8019d56:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8019d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d5e:	d811      	bhi.n	8019d84 <_strtod_l+0xab4>
 8019d60:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8019d64:	ee18 3a10 	vmov	r3, s16
 8019d68:	2b01      	cmp	r3, #1
 8019d6a:	bf38      	it	cc
 8019d6c:	2301      	movcc	r3, #1
 8019d6e:	ee08 3a10 	vmov	s16, r3
 8019d72:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8019d76:	f1b8 0f00 	cmp.w	r8, #0
 8019d7a:	d111      	bne.n	8019da0 <_strtod_l+0xad0>
 8019d7c:	eeb1 7b48 	vneg.f64	d7, d8
 8019d80:	ec53 2b17 	vmov	r2, r3, d7
 8019d84:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8019d88:	1bcb      	subs	r3, r1, r7
 8019d8a:	eeb0 0b49 	vmov.f64	d0, d9
 8019d8e:	ec43 2b1a 	vmov	d10, r2, r3
 8019d92:	f002 fff3 	bl	801cd7c <__ulp>
 8019d96:	eeaa 9b00 	vfma.f64	d9, d10, d0
 8019d9a:	ec5b ab19 	vmov	sl, fp, d9
 8019d9e:	e7aa      	b.n	8019cf6 <_strtod_l+0xa26>
 8019da0:	eeb0 7b48 	vmov.f64	d7, d8
 8019da4:	e7ec      	b.n	8019d80 <_strtod_l+0xab0>
 8019da6:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8019de8 <_strtod_l+0xb18>
 8019daa:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8019dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019db2:	f57f af6f 	bpl.w	8019c94 <_strtod_l+0x9c4>
 8019db6:	e4b0      	b.n	801971a <_strtod_l+0x44a>
 8019db8:	2300      	movs	r3, #0
 8019dba:	9308      	str	r3, [sp, #32]
 8019dbc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019dbe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8019dc0:	6013      	str	r3, [r2, #0]
 8019dc2:	f7ff bac4 	b.w	801934e <_strtod_l+0x7e>
 8019dc6:	2a65      	cmp	r2, #101	@ 0x65
 8019dc8:	f43f abbf 	beq.w	801954a <_strtod_l+0x27a>
 8019dcc:	2a45      	cmp	r2, #69	@ 0x45
 8019dce:	f43f abbc 	beq.w	801954a <_strtod_l+0x27a>
 8019dd2:	2101      	movs	r1, #1
 8019dd4:	f7ff bbf4 	b.w	80195c0 <_strtod_l+0x2f0>
 8019dd8:	94a03595 	.word	0x94a03595
 8019ddc:	3fdfffff 	.word	0x3fdfffff
 8019de0:	35afe535 	.word	0x35afe535
 8019de4:	3fe00000 	.word	0x3fe00000
 8019de8:	94a03595 	.word	0x94a03595
 8019dec:	3fcfffff 	.word	0x3fcfffff
 8019df0:	000fffff 	.word	0x000fffff
 8019df4:	7ff00000 	.word	0x7ff00000
 8019df8:	7fefffff 	.word	0x7fefffff
 8019dfc:	7fe00000 	.word	0x7fe00000
 8019e00:	7c9fffff 	.word	0x7c9fffff

08019e04 <_strtod_r>:
 8019e04:	4b01      	ldr	r3, [pc, #4]	@ (8019e0c <_strtod_r+0x8>)
 8019e06:	f7ff ba63 	b.w	80192d0 <_strtod_l>
 8019e0a:	bf00      	nop
 8019e0c:	24000038 	.word	0x24000038

08019e10 <strtof>:
 8019e10:	b510      	push	{r4, lr}
 8019e12:	4c21      	ldr	r4, [pc, #132]	@ (8019e98 <strtof+0x88>)
 8019e14:	4b21      	ldr	r3, [pc, #132]	@ (8019e9c <strtof+0x8c>)
 8019e16:	460a      	mov	r2, r1
 8019e18:	4601      	mov	r1, r0
 8019e1a:	6820      	ldr	r0, [r4, #0]
 8019e1c:	f7ff fa58 	bl	80192d0 <_strtod_l>
 8019e20:	eeb4 0b40 	vcmp.f64	d0, d0
 8019e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e28:	eeb0 7b40 	vmov.f64	d7, d0
 8019e2c:	d70d      	bvc.n	8019e4a <strtof+0x3a>
 8019e2e:	ee17 3a90 	vmov	r3, s15
 8019e32:	2b00      	cmp	r3, #0
 8019e34:	481a      	ldr	r0, [pc, #104]	@ (8019ea0 <strtof+0x90>)
 8019e36:	da04      	bge.n	8019e42 <strtof+0x32>
 8019e38:	f001 f9fa 	bl	801b230 <nanf>
 8019e3c:	eeb1 0a40 	vneg.f32	s0, s0
 8019e40:	bd10      	pop	{r4, pc}
 8019e42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019e46:	f001 b9f3 	b.w	801b230 <nanf>
 8019e4a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8019e4e:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8019ea4 <strtof+0x94>
 8019e52:	eeb0 6ac0 	vabs.f32	s12, s0
 8019e56:	eeb4 6a66 	vcmp.f32	s12, s13
 8019e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e5e:	dd08      	ble.n	8019e72 <strtof+0x62>
 8019e60:	eeb0 6bc7 	vabs.f64	d6, d7
 8019e64:	ed9f 5b0a 	vldr	d5, [pc, #40]	@ 8019e90 <strtof+0x80>
 8019e68:	eeb4 6b45 	vcmp.f64	d6, d5
 8019e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e70:	dd0a      	ble.n	8019e88 <strtof+0x78>
 8019e72:	ee10 3a10 	vmov	r3, s0
 8019e76:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8019e7a:	d1e1      	bne.n	8019e40 <strtof+0x30>
 8019e7c:	ee17 2a90 	vmov	r2, s15
 8019e80:	4b09      	ldr	r3, [pc, #36]	@ (8019ea8 <strtof+0x98>)
 8019e82:	4013      	ands	r3, r2
 8019e84:	2b00      	cmp	r3, #0
 8019e86:	d0db      	beq.n	8019e40 <strtof+0x30>
 8019e88:	6823      	ldr	r3, [r4, #0]
 8019e8a:	2222      	movs	r2, #34	@ 0x22
 8019e8c:	601a      	str	r2, [r3, #0]
 8019e8e:	e7d7      	b.n	8019e40 <strtof+0x30>
 8019e90:	ffffffff 	.word	0xffffffff
 8019e94:	7fefffff 	.word	0x7fefffff
 8019e98:	240001a4 	.word	0x240001a4
 8019e9c:	24000038 	.word	0x24000038
 8019ea0:	0801fc02 	.word	0x0801fc02
 8019ea4:	7f7fffff 	.word	0x7f7fffff
 8019ea8:	7ff00000 	.word	0x7ff00000

08019eac <__cvt>:
 8019eac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019eae:	ed2d 8b02 	vpush	{d8}
 8019eb2:	eeb0 8b40 	vmov.f64	d8, d0
 8019eb6:	b085      	sub	sp, #20
 8019eb8:	4617      	mov	r7, r2
 8019eba:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8019ebc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8019ebe:	ee18 2a90 	vmov	r2, s17
 8019ec2:	f025 0520 	bic.w	r5, r5, #32
 8019ec6:	2a00      	cmp	r2, #0
 8019ec8:	bfb6      	itet	lt
 8019eca:	222d      	movlt	r2, #45	@ 0x2d
 8019ecc:	2200      	movge	r2, #0
 8019ece:	eeb1 8b40 	vneglt.f64	d8, d0
 8019ed2:	2d46      	cmp	r5, #70	@ 0x46
 8019ed4:	460c      	mov	r4, r1
 8019ed6:	701a      	strb	r2, [r3, #0]
 8019ed8:	d004      	beq.n	8019ee4 <__cvt+0x38>
 8019eda:	2d45      	cmp	r5, #69	@ 0x45
 8019edc:	d100      	bne.n	8019ee0 <__cvt+0x34>
 8019ede:	3401      	adds	r4, #1
 8019ee0:	2102      	movs	r1, #2
 8019ee2:	e000      	b.n	8019ee6 <__cvt+0x3a>
 8019ee4:	2103      	movs	r1, #3
 8019ee6:	ab03      	add	r3, sp, #12
 8019ee8:	9301      	str	r3, [sp, #4]
 8019eea:	ab02      	add	r3, sp, #8
 8019eec:	9300      	str	r3, [sp, #0]
 8019eee:	4622      	mov	r2, r4
 8019ef0:	4633      	mov	r3, r6
 8019ef2:	eeb0 0b48 	vmov.f64	d0, d8
 8019ef6:	f001 fa2b 	bl	801b350 <_dtoa_r>
 8019efa:	2d47      	cmp	r5, #71	@ 0x47
 8019efc:	d114      	bne.n	8019f28 <__cvt+0x7c>
 8019efe:	07fb      	lsls	r3, r7, #31
 8019f00:	d50a      	bpl.n	8019f18 <__cvt+0x6c>
 8019f02:	1902      	adds	r2, r0, r4
 8019f04:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8019f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f0c:	bf08      	it	eq
 8019f0e:	9203      	streq	r2, [sp, #12]
 8019f10:	2130      	movs	r1, #48	@ 0x30
 8019f12:	9b03      	ldr	r3, [sp, #12]
 8019f14:	4293      	cmp	r3, r2
 8019f16:	d319      	bcc.n	8019f4c <__cvt+0xa0>
 8019f18:	9b03      	ldr	r3, [sp, #12]
 8019f1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019f1c:	1a1b      	subs	r3, r3, r0
 8019f1e:	6013      	str	r3, [r2, #0]
 8019f20:	b005      	add	sp, #20
 8019f22:	ecbd 8b02 	vpop	{d8}
 8019f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019f28:	2d46      	cmp	r5, #70	@ 0x46
 8019f2a:	eb00 0204 	add.w	r2, r0, r4
 8019f2e:	d1e9      	bne.n	8019f04 <__cvt+0x58>
 8019f30:	7803      	ldrb	r3, [r0, #0]
 8019f32:	2b30      	cmp	r3, #48	@ 0x30
 8019f34:	d107      	bne.n	8019f46 <__cvt+0x9a>
 8019f36:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8019f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f3e:	bf1c      	itt	ne
 8019f40:	f1c4 0401 	rsbne	r4, r4, #1
 8019f44:	6034      	strne	r4, [r6, #0]
 8019f46:	6833      	ldr	r3, [r6, #0]
 8019f48:	441a      	add	r2, r3
 8019f4a:	e7db      	b.n	8019f04 <__cvt+0x58>
 8019f4c:	1c5c      	adds	r4, r3, #1
 8019f4e:	9403      	str	r4, [sp, #12]
 8019f50:	7019      	strb	r1, [r3, #0]
 8019f52:	e7de      	b.n	8019f12 <__cvt+0x66>

08019f54 <__exponent>:
 8019f54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019f56:	2900      	cmp	r1, #0
 8019f58:	bfba      	itte	lt
 8019f5a:	4249      	neglt	r1, r1
 8019f5c:	232d      	movlt	r3, #45	@ 0x2d
 8019f5e:	232b      	movge	r3, #43	@ 0x2b
 8019f60:	2909      	cmp	r1, #9
 8019f62:	7002      	strb	r2, [r0, #0]
 8019f64:	7043      	strb	r3, [r0, #1]
 8019f66:	dd29      	ble.n	8019fbc <__exponent+0x68>
 8019f68:	f10d 0307 	add.w	r3, sp, #7
 8019f6c:	461d      	mov	r5, r3
 8019f6e:	270a      	movs	r7, #10
 8019f70:	461a      	mov	r2, r3
 8019f72:	fbb1 f6f7 	udiv	r6, r1, r7
 8019f76:	fb07 1416 	mls	r4, r7, r6, r1
 8019f7a:	3430      	adds	r4, #48	@ 0x30
 8019f7c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8019f80:	460c      	mov	r4, r1
 8019f82:	2c63      	cmp	r4, #99	@ 0x63
 8019f84:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8019f88:	4631      	mov	r1, r6
 8019f8a:	dcf1      	bgt.n	8019f70 <__exponent+0x1c>
 8019f8c:	3130      	adds	r1, #48	@ 0x30
 8019f8e:	1e94      	subs	r4, r2, #2
 8019f90:	f803 1c01 	strb.w	r1, [r3, #-1]
 8019f94:	1c41      	adds	r1, r0, #1
 8019f96:	4623      	mov	r3, r4
 8019f98:	42ab      	cmp	r3, r5
 8019f9a:	d30a      	bcc.n	8019fb2 <__exponent+0x5e>
 8019f9c:	f10d 0309 	add.w	r3, sp, #9
 8019fa0:	1a9b      	subs	r3, r3, r2
 8019fa2:	42ac      	cmp	r4, r5
 8019fa4:	bf88      	it	hi
 8019fa6:	2300      	movhi	r3, #0
 8019fa8:	3302      	adds	r3, #2
 8019faa:	4403      	add	r3, r0
 8019fac:	1a18      	subs	r0, r3, r0
 8019fae:	b003      	add	sp, #12
 8019fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019fb2:	f813 6b01 	ldrb.w	r6, [r3], #1
 8019fb6:	f801 6f01 	strb.w	r6, [r1, #1]!
 8019fba:	e7ed      	b.n	8019f98 <__exponent+0x44>
 8019fbc:	2330      	movs	r3, #48	@ 0x30
 8019fbe:	3130      	adds	r1, #48	@ 0x30
 8019fc0:	7083      	strb	r3, [r0, #2]
 8019fc2:	70c1      	strb	r1, [r0, #3]
 8019fc4:	1d03      	adds	r3, r0, #4
 8019fc6:	e7f1      	b.n	8019fac <__exponent+0x58>

08019fc8 <_printf_float>:
 8019fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019fcc:	b08d      	sub	sp, #52	@ 0x34
 8019fce:	460c      	mov	r4, r1
 8019fd0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8019fd4:	4616      	mov	r6, r2
 8019fd6:	461f      	mov	r7, r3
 8019fd8:	4605      	mov	r5, r0
 8019fda:	f001 f83d 	bl	801b058 <_localeconv_r>
 8019fde:	f8d0 b000 	ldr.w	fp, [r0]
 8019fe2:	4658      	mov	r0, fp
 8019fe4:	f7e6 f9f4 	bl	80003d0 <strlen>
 8019fe8:	2300      	movs	r3, #0
 8019fea:	930a      	str	r3, [sp, #40]	@ 0x28
 8019fec:	f8d8 3000 	ldr.w	r3, [r8]
 8019ff0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8019ff4:	6822      	ldr	r2, [r4, #0]
 8019ff6:	9005      	str	r0, [sp, #20]
 8019ff8:	3307      	adds	r3, #7
 8019ffa:	f023 0307 	bic.w	r3, r3, #7
 8019ffe:	f103 0108 	add.w	r1, r3, #8
 801a002:	f8c8 1000 	str.w	r1, [r8]
 801a006:	ed93 0b00 	vldr	d0, [r3]
 801a00a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 801a268 <_printf_float+0x2a0>
 801a00e:	eeb0 7bc0 	vabs.f64	d7, d0
 801a012:	eeb4 7b46 	vcmp.f64	d7, d6
 801a016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a01a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 801a01e:	dd24      	ble.n	801a06a <_printf_float+0xa2>
 801a020:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801a024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a028:	d502      	bpl.n	801a030 <_printf_float+0x68>
 801a02a:	232d      	movs	r3, #45	@ 0x2d
 801a02c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a030:	498f      	ldr	r1, [pc, #572]	@ (801a270 <_printf_float+0x2a8>)
 801a032:	4b90      	ldr	r3, [pc, #576]	@ (801a274 <_printf_float+0x2ac>)
 801a034:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 801a038:	bf8c      	ite	hi
 801a03a:	4688      	movhi	r8, r1
 801a03c:	4698      	movls	r8, r3
 801a03e:	f022 0204 	bic.w	r2, r2, #4
 801a042:	2303      	movs	r3, #3
 801a044:	6123      	str	r3, [r4, #16]
 801a046:	6022      	str	r2, [r4, #0]
 801a048:	f04f 0a00 	mov.w	sl, #0
 801a04c:	9700      	str	r7, [sp, #0]
 801a04e:	4633      	mov	r3, r6
 801a050:	aa0b      	add	r2, sp, #44	@ 0x2c
 801a052:	4621      	mov	r1, r4
 801a054:	4628      	mov	r0, r5
 801a056:	f000 f9d1 	bl	801a3fc <_printf_common>
 801a05a:	3001      	adds	r0, #1
 801a05c:	f040 8089 	bne.w	801a172 <_printf_float+0x1aa>
 801a060:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a064:	b00d      	add	sp, #52	@ 0x34
 801a066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a06a:	eeb4 0b40 	vcmp.f64	d0, d0
 801a06e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a072:	d709      	bvc.n	801a088 <_printf_float+0xc0>
 801a074:	ee10 3a90 	vmov	r3, s1
 801a078:	2b00      	cmp	r3, #0
 801a07a:	bfbc      	itt	lt
 801a07c:	232d      	movlt	r3, #45	@ 0x2d
 801a07e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801a082:	497d      	ldr	r1, [pc, #500]	@ (801a278 <_printf_float+0x2b0>)
 801a084:	4b7d      	ldr	r3, [pc, #500]	@ (801a27c <_printf_float+0x2b4>)
 801a086:	e7d5      	b.n	801a034 <_printf_float+0x6c>
 801a088:	6863      	ldr	r3, [r4, #4]
 801a08a:	1c59      	adds	r1, r3, #1
 801a08c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 801a090:	d139      	bne.n	801a106 <_printf_float+0x13e>
 801a092:	2306      	movs	r3, #6
 801a094:	6063      	str	r3, [r4, #4]
 801a096:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801a09a:	2300      	movs	r3, #0
 801a09c:	6022      	str	r2, [r4, #0]
 801a09e:	9303      	str	r3, [sp, #12]
 801a0a0:	ab0a      	add	r3, sp, #40	@ 0x28
 801a0a2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801a0a6:	ab09      	add	r3, sp, #36	@ 0x24
 801a0a8:	9300      	str	r3, [sp, #0]
 801a0aa:	6861      	ldr	r1, [r4, #4]
 801a0ac:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801a0b0:	4628      	mov	r0, r5
 801a0b2:	f7ff fefb 	bl	8019eac <__cvt>
 801a0b6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801a0ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801a0bc:	4680      	mov	r8, r0
 801a0be:	d129      	bne.n	801a114 <_printf_float+0x14c>
 801a0c0:	1cc8      	adds	r0, r1, #3
 801a0c2:	db02      	blt.n	801a0ca <_printf_float+0x102>
 801a0c4:	6863      	ldr	r3, [r4, #4]
 801a0c6:	4299      	cmp	r1, r3
 801a0c8:	dd41      	ble.n	801a14e <_printf_float+0x186>
 801a0ca:	f1a9 0902 	sub.w	r9, r9, #2
 801a0ce:	fa5f f989 	uxtb.w	r9, r9
 801a0d2:	3901      	subs	r1, #1
 801a0d4:	464a      	mov	r2, r9
 801a0d6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801a0da:	9109      	str	r1, [sp, #36]	@ 0x24
 801a0dc:	f7ff ff3a 	bl	8019f54 <__exponent>
 801a0e0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a0e2:	1813      	adds	r3, r2, r0
 801a0e4:	2a01      	cmp	r2, #1
 801a0e6:	4682      	mov	sl, r0
 801a0e8:	6123      	str	r3, [r4, #16]
 801a0ea:	dc02      	bgt.n	801a0f2 <_printf_float+0x12a>
 801a0ec:	6822      	ldr	r2, [r4, #0]
 801a0ee:	07d2      	lsls	r2, r2, #31
 801a0f0:	d501      	bpl.n	801a0f6 <_printf_float+0x12e>
 801a0f2:	3301      	adds	r3, #1
 801a0f4:	6123      	str	r3, [r4, #16]
 801a0f6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801a0fa:	2b00      	cmp	r3, #0
 801a0fc:	d0a6      	beq.n	801a04c <_printf_float+0x84>
 801a0fe:	232d      	movs	r3, #45	@ 0x2d
 801a100:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a104:	e7a2      	b.n	801a04c <_printf_float+0x84>
 801a106:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801a10a:	d1c4      	bne.n	801a096 <_printf_float+0xce>
 801a10c:	2b00      	cmp	r3, #0
 801a10e:	d1c2      	bne.n	801a096 <_printf_float+0xce>
 801a110:	2301      	movs	r3, #1
 801a112:	e7bf      	b.n	801a094 <_printf_float+0xcc>
 801a114:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 801a118:	d9db      	bls.n	801a0d2 <_printf_float+0x10a>
 801a11a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 801a11e:	d118      	bne.n	801a152 <_printf_float+0x18a>
 801a120:	2900      	cmp	r1, #0
 801a122:	6863      	ldr	r3, [r4, #4]
 801a124:	dd0b      	ble.n	801a13e <_printf_float+0x176>
 801a126:	6121      	str	r1, [r4, #16]
 801a128:	b913      	cbnz	r3, 801a130 <_printf_float+0x168>
 801a12a:	6822      	ldr	r2, [r4, #0]
 801a12c:	07d0      	lsls	r0, r2, #31
 801a12e:	d502      	bpl.n	801a136 <_printf_float+0x16e>
 801a130:	3301      	adds	r3, #1
 801a132:	440b      	add	r3, r1
 801a134:	6123      	str	r3, [r4, #16]
 801a136:	65a1      	str	r1, [r4, #88]	@ 0x58
 801a138:	f04f 0a00 	mov.w	sl, #0
 801a13c:	e7db      	b.n	801a0f6 <_printf_float+0x12e>
 801a13e:	b913      	cbnz	r3, 801a146 <_printf_float+0x17e>
 801a140:	6822      	ldr	r2, [r4, #0]
 801a142:	07d2      	lsls	r2, r2, #31
 801a144:	d501      	bpl.n	801a14a <_printf_float+0x182>
 801a146:	3302      	adds	r3, #2
 801a148:	e7f4      	b.n	801a134 <_printf_float+0x16c>
 801a14a:	2301      	movs	r3, #1
 801a14c:	e7f2      	b.n	801a134 <_printf_float+0x16c>
 801a14e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 801a152:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a154:	4299      	cmp	r1, r3
 801a156:	db05      	blt.n	801a164 <_printf_float+0x19c>
 801a158:	6823      	ldr	r3, [r4, #0]
 801a15a:	6121      	str	r1, [r4, #16]
 801a15c:	07d8      	lsls	r0, r3, #31
 801a15e:	d5ea      	bpl.n	801a136 <_printf_float+0x16e>
 801a160:	1c4b      	adds	r3, r1, #1
 801a162:	e7e7      	b.n	801a134 <_printf_float+0x16c>
 801a164:	2900      	cmp	r1, #0
 801a166:	bfd4      	ite	le
 801a168:	f1c1 0202 	rsble	r2, r1, #2
 801a16c:	2201      	movgt	r2, #1
 801a16e:	4413      	add	r3, r2
 801a170:	e7e0      	b.n	801a134 <_printf_float+0x16c>
 801a172:	6823      	ldr	r3, [r4, #0]
 801a174:	055a      	lsls	r2, r3, #21
 801a176:	d407      	bmi.n	801a188 <_printf_float+0x1c0>
 801a178:	6923      	ldr	r3, [r4, #16]
 801a17a:	4642      	mov	r2, r8
 801a17c:	4631      	mov	r1, r6
 801a17e:	4628      	mov	r0, r5
 801a180:	47b8      	blx	r7
 801a182:	3001      	adds	r0, #1
 801a184:	d12a      	bne.n	801a1dc <_printf_float+0x214>
 801a186:	e76b      	b.n	801a060 <_printf_float+0x98>
 801a188:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 801a18c:	f240 80e0 	bls.w	801a350 <_printf_float+0x388>
 801a190:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801a194:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801a198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a19c:	d133      	bne.n	801a206 <_printf_float+0x23e>
 801a19e:	4a38      	ldr	r2, [pc, #224]	@ (801a280 <_printf_float+0x2b8>)
 801a1a0:	2301      	movs	r3, #1
 801a1a2:	4631      	mov	r1, r6
 801a1a4:	4628      	mov	r0, r5
 801a1a6:	47b8      	blx	r7
 801a1a8:	3001      	adds	r0, #1
 801a1aa:	f43f af59 	beq.w	801a060 <_printf_float+0x98>
 801a1ae:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801a1b2:	4543      	cmp	r3, r8
 801a1b4:	db02      	blt.n	801a1bc <_printf_float+0x1f4>
 801a1b6:	6823      	ldr	r3, [r4, #0]
 801a1b8:	07d8      	lsls	r0, r3, #31
 801a1ba:	d50f      	bpl.n	801a1dc <_printf_float+0x214>
 801a1bc:	9b05      	ldr	r3, [sp, #20]
 801a1be:	465a      	mov	r2, fp
 801a1c0:	4631      	mov	r1, r6
 801a1c2:	4628      	mov	r0, r5
 801a1c4:	47b8      	blx	r7
 801a1c6:	3001      	adds	r0, #1
 801a1c8:	f43f af4a 	beq.w	801a060 <_printf_float+0x98>
 801a1cc:	f04f 0900 	mov.w	r9, #0
 801a1d0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 801a1d4:	f104 0a1a 	add.w	sl, r4, #26
 801a1d8:	45c8      	cmp	r8, r9
 801a1da:	dc09      	bgt.n	801a1f0 <_printf_float+0x228>
 801a1dc:	6823      	ldr	r3, [r4, #0]
 801a1de:	079b      	lsls	r3, r3, #30
 801a1e0:	f100 8107 	bmi.w	801a3f2 <_printf_float+0x42a>
 801a1e4:	68e0      	ldr	r0, [r4, #12]
 801a1e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a1e8:	4298      	cmp	r0, r3
 801a1ea:	bfb8      	it	lt
 801a1ec:	4618      	movlt	r0, r3
 801a1ee:	e739      	b.n	801a064 <_printf_float+0x9c>
 801a1f0:	2301      	movs	r3, #1
 801a1f2:	4652      	mov	r2, sl
 801a1f4:	4631      	mov	r1, r6
 801a1f6:	4628      	mov	r0, r5
 801a1f8:	47b8      	blx	r7
 801a1fa:	3001      	adds	r0, #1
 801a1fc:	f43f af30 	beq.w	801a060 <_printf_float+0x98>
 801a200:	f109 0901 	add.w	r9, r9, #1
 801a204:	e7e8      	b.n	801a1d8 <_printf_float+0x210>
 801a206:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a208:	2b00      	cmp	r3, #0
 801a20a:	dc3b      	bgt.n	801a284 <_printf_float+0x2bc>
 801a20c:	4a1c      	ldr	r2, [pc, #112]	@ (801a280 <_printf_float+0x2b8>)
 801a20e:	2301      	movs	r3, #1
 801a210:	4631      	mov	r1, r6
 801a212:	4628      	mov	r0, r5
 801a214:	47b8      	blx	r7
 801a216:	3001      	adds	r0, #1
 801a218:	f43f af22 	beq.w	801a060 <_printf_float+0x98>
 801a21c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801a220:	ea59 0303 	orrs.w	r3, r9, r3
 801a224:	d102      	bne.n	801a22c <_printf_float+0x264>
 801a226:	6823      	ldr	r3, [r4, #0]
 801a228:	07d9      	lsls	r1, r3, #31
 801a22a:	d5d7      	bpl.n	801a1dc <_printf_float+0x214>
 801a22c:	9b05      	ldr	r3, [sp, #20]
 801a22e:	465a      	mov	r2, fp
 801a230:	4631      	mov	r1, r6
 801a232:	4628      	mov	r0, r5
 801a234:	47b8      	blx	r7
 801a236:	3001      	adds	r0, #1
 801a238:	f43f af12 	beq.w	801a060 <_printf_float+0x98>
 801a23c:	f04f 0a00 	mov.w	sl, #0
 801a240:	f104 0b1a 	add.w	fp, r4, #26
 801a244:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a246:	425b      	negs	r3, r3
 801a248:	4553      	cmp	r3, sl
 801a24a:	dc01      	bgt.n	801a250 <_printf_float+0x288>
 801a24c:	464b      	mov	r3, r9
 801a24e:	e794      	b.n	801a17a <_printf_float+0x1b2>
 801a250:	2301      	movs	r3, #1
 801a252:	465a      	mov	r2, fp
 801a254:	4631      	mov	r1, r6
 801a256:	4628      	mov	r0, r5
 801a258:	47b8      	blx	r7
 801a25a:	3001      	adds	r0, #1
 801a25c:	f43f af00 	beq.w	801a060 <_printf_float+0x98>
 801a260:	f10a 0a01 	add.w	sl, sl, #1
 801a264:	e7ee      	b.n	801a244 <_printf_float+0x27c>
 801a266:	bf00      	nop
 801a268:	ffffffff 	.word	0xffffffff
 801a26c:	7fefffff 	.word	0x7fefffff
 801a270:	0801fa1a 	.word	0x0801fa1a
 801a274:	0801fa16 	.word	0x0801fa16
 801a278:	0801fa22 	.word	0x0801fa22
 801a27c:	0801fa1e 	.word	0x0801fa1e
 801a280:	0801fbc2 	.word	0x0801fbc2
 801a284:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801a286:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801a28a:	4553      	cmp	r3, sl
 801a28c:	bfa8      	it	ge
 801a28e:	4653      	movge	r3, sl
 801a290:	2b00      	cmp	r3, #0
 801a292:	4699      	mov	r9, r3
 801a294:	dc37      	bgt.n	801a306 <_printf_float+0x33e>
 801a296:	2300      	movs	r3, #0
 801a298:	9307      	str	r3, [sp, #28]
 801a29a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a29e:	f104 021a 	add.w	r2, r4, #26
 801a2a2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801a2a4:	9907      	ldr	r1, [sp, #28]
 801a2a6:	9306      	str	r3, [sp, #24]
 801a2a8:	eba3 0309 	sub.w	r3, r3, r9
 801a2ac:	428b      	cmp	r3, r1
 801a2ae:	dc31      	bgt.n	801a314 <_printf_float+0x34c>
 801a2b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a2b2:	459a      	cmp	sl, r3
 801a2b4:	dc3b      	bgt.n	801a32e <_printf_float+0x366>
 801a2b6:	6823      	ldr	r3, [r4, #0]
 801a2b8:	07da      	lsls	r2, r3, #31
 801a2ba:	d438      	bmi.n	801a32e <_printf_float+0x366>
 801a2bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a2be:	ebaa 0903 	sub.w	r9, sl, r3
 801a2c2:	9b06      	ldr	r3, [sp, #24]
 801a2c4:	ebaa 0303 	sub.w	r3, sl, r3
 801a2c8:	4599      	cmp	r9, r3
 801a2ca:	bfa8      	it	ge
 801a2cc:	4699      	movge	r9, r3
 801a2ce:	f1b9 0f00 	cmp.w	r9, #0
 801a2d2:	dc34      	bgt.n	801a33e <_printf_float+0x376>
 801a2d4:	f04f 0800 	mov.w	r8, #0
 801a2d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a2dc:	f104 0b1a 	add.w	fp, r4, #26
 801a2e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a2e2:	ebaa 0303 	sub.w	r3, sl, r3
 801a2e6:	eba3 0309 	sub.w	r3, r3, r9
 801a2ea:	4543      	cmp	r3, r8
 801a2ec:	f77f af76 	ble.w	801a1dc <_printf_float+0x214>
 801a2f0:	2301      	movs	r3, #1
 801a2f2:	465a      	mov	r2, fp
 801a2f4:	4631      	mov	r1, r6
 801a2f6:	4628      	mov	r0, r5
 801a2f8:	47b8      	blx	r7
 801a2fa:	3001      	adds	r0, #1
 801a2fc:	f43f aeb0 	beq.w	801a060 <_printf_float+0x98>
 801a300:	f108 0801 	add.w	r8, r8, #1
 801a304:	e7ec      	b.n	801a2e0 <_printf_float+0x318>
 801a306:	4642      	mov	r2, r8
 801a308:	4631      	mov	r1, r6
 801a30a:	4628      	mov	r0, r5
 801a30c:	47b8      	blx	r7
 801a30e:	3001      	adds	r0, #1
 801a310:	d1c1      	bne.n	801a296 <_printf_float+0x2ce>
 801a312:	e6a5      	b.n	801a060 <_printf_float+0x98>
 801a314:	2301      	movs	r3, #1
 801a316:	4631      	mov	r1, r6
 801a318:	4628      	mov	r0, r5
 801a31a:	9206      	str	r2, [sp, #24]
 801a31c:	47b8      	blx	r7
 801a31e:	3001      	adds	r0, #1
 801a320:	f43f ae9e 	beq.w	801a060 <_printf_float+0x98>
 801a324:	9b07      	ldr	r3, [sp, #28]
 801a326:	9a06      	ldr	r2, [sp, #24]
 801a328:	3301      	adds	r3, #1
 801a32a:	9307      	str	r3, [sp, #28]
 801a32c:	e7b9      	b.n	801a2a2 <_printf_float+0x2da>
 801a32e:	9b05      	ldr	r3, [sp, #20]
 801a330:	465a      	mov	r2, fp
 801a332:	4631      	mov	r1, r6
 801a334:	4628      	mov	r0, r5
 801a336:	47b8      	blx	r7
 801a338:	3001      	adds	r0, #1
 801a33a:	d1bf      	bne.n	801a2bc <_printf_float+0x2f4>
 801a33c:	e690      	b.n	801a060 <_printf_float+0x98>
 801a33e:	9a06      	ldr	r2, [sp, #24]
 801a340:	464b      	mov	r3, r9
 801a342:	4442      	add	r2, r8
 801a344:	4631      	mov	r1, r6
 801a346:	4628      	mov	r0, r5
 801a348:	47b8      	blx	r7
 801a34a:	3001      	adds	r0, #1
 801a34c:	d1c2      	bne.n	801a2d4 <_printf_float+0x30c>
 801a34e:	e687      	b.n	801a060 <_printf_float+0x98>
 801a350:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 801a354:	f1b9 0f01 	cmp.w	r9, #1
 801a358:	dc01      	bgt.n	801a35e <_printf_float+0x396>
 801a35a:	07db      	lsls	r3, r3, #31
 801a35c:	d536      	bpl.n	801a3cc <_printf_float+0x404>
 801a35e:	2301      	movs	r3, #1
 801a360:	4642      	mov	r2, r8
 801a362:	4631      	mov	r1, r6
 801a364:	4628      	mov	r0, r5
 801a366:	47b8      	blx	r7
 801a368:	3001      	adds	r0, #1
 801a36a:	f43f ae79 	beq.w	801a060 <_printf_float+0x98>
 801a36e:	9b05      	ldr	r3, [sp, #20]
 801a370:	465a      	mov	r2, fp
 801a372:	4631      	mov	r1, r6
 801a374:	4628      	mov	r0, r5
 801a376:	47b8      	blx	r7
 801a378:	3001      	adds	r0, #1
 801a37a:	f43f ae71 	beq.w	801a060 <_printf_float+0x98>
 801a37e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801a382:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801a386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a38a:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 801a38e:	d018      	beq.n	801a3c2 <_printf_float+0x3fa>
 801a390:	464b      	mov	r3, r9
 801a392:	f108 0201 	add.w	r2, r8, #1
 801a396:	4631      	mov	r1, r6
 801a398:	4628      	mov	r0, r5
 801a39a:	47b8      	blx	r7
 801a39c:	3001      	adds	r0, #1
 801a39e:	d10c      	bne.n	801a3ba <_printf_float+0x3f2>
 801a3a0:	e65e      	b.n	801a060 <_printf_float+0x98>
 801a3a2:	2301      	movs	r3, #1
 801a3a4:	465a      	mov	r2, fp
 801a3a6:	4631      	mov	r1, r6
 801a3a8:	4628      	mov	r0, r5
 801a3aa:	47b8      	blx	r7
 801a3ac:	3001      	adds	r0, #1
 801a3ae:	f43f ae57 	beq.w	801a060 <_printf_float+0x98>
 801a3b2:	f108 0801 	add.w	r8, r8, #1
 801a3b6:	45c8      	cmp	r8, r9
 801a3b8:	dbf3      	blt.n	801a3a2 <_printf_float+0x3da>
 801a3ba:	4653      	mov	r3, sl
 801a3bc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801a3c0:	e6dc      	b.n	801a17c <_printf_float+0x1b4>
 801a3c2:	f04f 0800 	mov.w	r8, #0
 801a3c6:	f104 0b1a 	add.w	fp, r4, #26
 801a3ca:	e7f4      	b.n	801a3b6 <_printf_float+0x3ee>
 801a3cc:	2301      	movs	r3, #1
 801a3ce:	4642      	mov	r2, r8
 801a3d0:	e7e1      	b.n	801a396 <_printf_float+0x3ce>
 801a3d2:	2301      	movs	r3, #1
 801a3d4:	464a      	mov	r2, r9
 801a3d6:	4631      	mov	r1, r6
 801a3d8:	4628      	mov	r0, r5
 801a3da:	47b8      	blx	r7
 801a3dc:	3001      	adds	r0, #1
 801a3de:	f43f ae3f 	beq.w	801a060 <_printf_float+0x98>
 801a3e2:	f108 0801 	add.w	r8, r8, #1
 801a3e6:	68e3      	ldr	r3, [r4, #12]
 801a3e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801a3ea:	1a5b      	subs	r3, r3, r1
 801a3ec:	4543      	cmp	r3, r8
 801a3ee:	dcf0      	bgt.n	801a3d2 <_printf_float+0x40a>
 801a3f0:	e6f8      	b.n	801a1e4 <_printf_float+0x21c>
 801a3f2:	f04f 0800 	mov.w	r8, #0
 801a3f6:	f104 0919 	add.w	r9, r4, #25
 801a3fa:	e7f4      	b.n	801a3e6 <_printf_float+0x41e>

0801a3fc <_printf_common>:
 801a3fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a400:	4616      	mov	r6, r2
 801a402:	4698      	mov	r8, r3
 801a404:	688a      	ldr	r2, [r1, #8]
 801a406:	690b      	ldr	r3, [r1, #16]
 801a408:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801a40c:	4293      	cmp	r3, r2
 801a40e:	bfb8      	it	lt
 801a410:	4613      	movlt	r3, r2
 801a412:	6033      	str	r3, [r6, #0]
 801a414:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801a418:	4607      	mov	r7, r0
 801a41a:	460c      	mov	r4, r1
 801a41c:	b10a      	cbz	r2, 801a422 <_printf_common+0x26>
 801a41e:	3301      	adds	r3, #1
 801a420:	6033      	str	r3, [r6, #0]
 801a422:	6823      	ldr	r3, [r4, #0]
 801a424:	0699      	lsls	r1, r3, #26
 801a426:	bf42      	ittt	mi
 801a428:	6833      	ldrmi	r3, [r6, #0]
 801a42a:	3302      	addmi	r3, #2
 801a42c:	6033      	strmi	r3, [r6, #0]
 801a42e:	6825      	ldr	r5, [r4, #0]
 801a430:	f015 0506 	ands.w	r5, r5, #6
 801a434:	d106      	bne.n	801a444 <_printf_common+0x48>
 801a436:	f104 0a19 	add.w	sl, r4, #25
 801a43a:	68e3      	ldr	r3, [r4, #12]
 801a43c:	6832      	ldr	r2, [r6, #0]
 801a43e:	1a9b      	subs	r3, r3, r2
 801a440:	42ab      	cmp	r3, r5
 801a442:	dc26      	bgt.n	801a492 <_printf_common+0x96>
 801a444:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801a448:	6822      	ldr	r2, [r4, #0]
 801a44a:	3b00      	subs	r3, #0
 801a44c:	bf18      	it	ne
 801a44e:	2301      	movne	r3, #1
 801a450:	0692      	lsls	r2, r2, #26
 801a452:	d42b      	bmi.n	801a4ac <_printf_common+0xb0>
 801a454:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801a458:	4641      	mov	r1, r8
 801a45a:	4638      	mov	r0, r7
 801a45c:	47c8      	blx	r9
 801a45e:	3001      	adds	r0, #1
 801a460:	d01e      	beq.n	801a4a0 <_printf_common+0xa4>
 801a462:	6823      	ldr	r3, [r4, #0]
 801a464:	6922      	ldr	r2, [r4, #16]
 801a466:	f003 0306 	and.w	r3, r3, #6
 801a46a:	2b04      	cmp	r3, #4
 801a46c:	bf02      	ittt	eq
 801a46e:	68e5      	ldreq	r5, [r4, #12]
 801a470:	6833      	ldreq	r3, [r6, #0]
 801a472:	1aed      	subeq	r5, r5, r3
 801a474:	68a3      	ldr	r3, [r4, #8]
 801a476:	bf0c      	ite	eq
 801a478:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a47c:	2500      	movne	r5, #0
 801a47e:	4293      	cmp	r3, r2
 801a480:	bfc4      	itt	gt
 801a482:	1a9b      	subgt	r3, r3, r2
 801a484:	18ed      	addgt	r5, r5, r3
 801a486:	2600      	movs	r6, #0
 801a488:	341a      	adds	r4, #26
 801a48a:	42b5      	cmp	r5, r6
 801a48c:	d11a      	bne.n	801a4c4 <_printf_common+0xc8>
 801a48e:	2000      	movs	r0, #0
 801a490:	e008      	b.n	801a4a4 <_printf_common+0xa8>
 801a492:	2301      	movs	r3, #1
 801a494:	4652      	mov	r2, sl
 801a496:	4641      	mov	r1, r8
 801a498:	4638      	mov	r0, r7
 801a49a:	47c8      	blx	r9
 801a49c:	3001      	adds	r0, #1
 801a49e:	d103      	bne.n	801a4a8 <_printf_common+0xac>
 801a4a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a4a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a4a8:	3501      	adds	r5, #1
 801a4aa:	e7c6      	b.n	801a43a <_printf_common+0x3e>
 801a4ac:	18e1      	adds	r1, r4, r3
 801a4ae:	1c5a      	adds	r2, r3, #1
 801a4b0:	2030      	movs	r0, #48	@ 0x30
 801a4b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801a4b6:	4422      	add	r2, r4
 801a4b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801a4bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801a4c0:	3302      	adds	r3, #2
 801a4c2:	e7c7      	b.n	801a454 <_printf_common+0x58>
 801a4c4:	2301      	movs	r3, #1
 801a4c6:	4622      	mov	r2, r4
 801a4c8:	4641      	mov	r1, r8
 801a4ca:	4638      	mov	r0, r7
 801a4cc:	47c8      	blx	r9
 801a4ce:	3001      	adds	r0, #1
 801a4d0:	d0e6      	beq.n	801a4a0 <_printf_common+0xa4>
 801a4d2:	3601      	adds	r6, #1
 801a4d4:	e7d9      	b.n	801a48a <_printf_common+0x8e>
	...

0801a4d8 <_printf_i>:
 801a4d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a4dc:	7e0f      	ldrb	r7, [r1, #24]
 801a4de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801a4e0:	2f78      	cmp	r7, #120	@ 0x78
 801a4e2:	4691      	mov	r9, r2
 801a4e4:	4680      	mov	r8, r0
 801a4e6:	460c      	mov	r4, r1
 801a4e8:	469a      	mov	sl, r3
 801a4ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801a4ee:	d807      	bhi.n	801a500 <_printf_i+0x28>
 801a4f0:	2f62      	cmp	r7, #98	@ 0x62
 801a4f2:	d80a      	bhi.n	801a50a <_printf_i+0x32>
 801a4f4:	2f00      	cmp	r7, #0
 801a4f6:	f000 80d1 	beq.w	801a69c <_printf_i+0x1c4>
 801a4fa:	2f58      	cmp	r7, #88	@ 0x58
 801a4fc:	f000 80b8 	beq.w	801a670 <_printf_i+0x198>
 801a500:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801a504:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801a508:	e03a      	b.n	801a580 <_printf_i+0xa8>
 801a50a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801a50e:	2b15      	cmp	r3, #21
 801a510:	d8f6      	bhi.n	801a500 <_printf_i+0x28>
 801a512:	a101      	add	r1, pc, #4	@ (adr r1, 801a518 <_printf_i+0x40>)
 801a514:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a518:	0801a571 	.word	0x0801a571
 801a51c:	0801a585 	.word	0x0801a585
 801a520:	0801a501 	.word	0x0801a501
 801a524:	0801a501 	.word	0x0801a501
 801a528:	0801a501 	.word	0x0801a501
 801a52c:	0801a501 	.word	0x0801a501
 801a530:	0801a585 	.word	0x0801a585
 801a534:	0801a501 	.word	0x0801a501
 801a538:	0801a501 	.word	0x0801a501
 801a53c:	0801a501 	.word	0x0801a501
 801a540:	0801a501 	.word	0x0801a501
 801a544:	0801a683 	.word	0x0801a683
 801a548:	0801a5af 	.word	0x0801a5af
 801a54c:	0801a63d 	.word	0x0801a63d
 801a550:	0801a501 	.word	0x0801a501
 801a554:	0801a501 	.word	0x0801a501
 801a558:	0801a6a5 	.word	0x0801a6a5
 801a55c:	0801a501 	.word	0x0801a501
 801a560:	0801a5af 	.word	0x0801a5af
 801a564:	0801a501 	.word	0x0801a501
 801a568:	0801a501 	.word	0x0801a501
 801a56c:	0801a645 	.word	0x0801a645
 801a570:	6833      	ldr	r3, [r6, #0]
 801a572:	1d1a      	adds	r2, r3, #4
 801a574:	681b      	ldr	r3, [r3, #0]
 801a576:	6032      	str	r2, [r6, #0]
 801a578:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801a57c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801a580:	2301      	movs	r3, #1
 801a582:	e09c      	b.n	801a6be <_printf_i+0x1e6>
 801a584:	6833      	ldr	r3, [r6, #0]
 801a586:	6820      	ldr	r0, [r4, #0]
 801a588:	1d19      	adds	r1, r3, #4
 801a58a:	6031      	str	r1, [r6, #0]
 801a58c:	0606      	lsls	r6, r0, #24
 801a58e:	d501      	bpl.n	801a594 <_printf_i+0xbc>
 801a590:	681d      	ldr	r5, [r3, #0]
 801a592:	e003      	b.n	801a59c <_printf_i+0xc4>
 801a594:	0645      	lsls	r5, r0, #25
 801a596:	d5fb      	bpl.n	801a590 <_printf_i+0xb8>
 801a598:	f9b3 5000 	ldrsh.w	r5, [r3]
 801a59c:	2d00      	cmp	r5, #0
 801a59e:	da03      	bge.n	801a5a8 <_printf_i+0xd0>
 801a5a0:	232d      	movs	r3, #45	@ 0x2d
 801a5a2:	426d      	negs	r5, r5
 801a5a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a5a8:	4858      	ldr	r0, [pc, #352]	@ (801a70c <_printf_i+0x234>)
 801a5aa:	230a      	movs	r3, #10
 801a5ac:	e011      	b.n	801a5d2 <_printf_i+0xfa>
 801a5ae:	6821      	ldr	r1, [r4, #0]
 801a5b0:	6833      	ldr	r3, [r6, #0]
 801a5b2:	0608      	lsls	r0, r1, #24
 801a5b4:	f853 5b04 	ldr.w	r5, [r3], #4
 801a5b8:	d402      	bmi.n	801a5c0 <_printf_i+0xe8>
 801a5ba:	0649      	lsls	r1, r1, #25
 801a5bc:	bf48      	it	mi
 801a5be:	b2ad      	uxthmi	r5, r5
 801a5c0:	2f6f      	cmp	r7, #111	@ 0x6f
 801a5c2:	4852      	ldr	r0, [pc, #328]	@ (801a70c <_printf_i+0x234>)
 801a5c4:	6033      	str	r3, [r6, #0]
 801a5c6:	bf14      	ite	ne
 801a5c8:	230a      	movne	r3, #10
 801a5ca:	2308      	moveq	r3, #8
 801a5cc:	2100      	movs	r1, #0
 801a5ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801a5d2:	6866      	ldr	r6, [r4, #4]
 801a5d4:	60a6      	str	r6, [r4, #8]
 801a5d6:	2e00      	cmp	r6, #0
 801a5d8:	db05      	blt.n	801a5e6 <_printf_i+0x10e>
 801a5da:	6821      	ldr	r1, [r4, #0]
 801a5dc:	432e      	orrs	r6, r5
 801a5de:	f021 0104 	bic.w	r1, r1, #4
 801a5e2:	6021      	str	r1, [r4, #0]
 801a5e4:	d04b      	beq.n	801a67e <_printf_i+0x1a6>
 801a5e6:	4616      	mov	r6, r2
 801a5e8:	fbb5 f1f3 	udiv	r1, r5, r3
 801a5ec:	fb03 5711 	mls	r7, r3, r1, r5
 801a5f0:	5dc7      	ldrb	r7, [r0, r7]
 801a5f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801a5f6:	462f      	mov	r7, r5
 801a5f8:	42bb      	cmp	r3, r7
 801a5fa:	460d      	mov	r5, r1
 801a5fc:	d9f4      	bls.n	801a5e8 <_printf_i+0x110>
 801a5fe:	2b08      	cmp	r3, #8
 801a600:	d10b      	bne.n	801a61a <_printf_i+0x142>
 801a602:	6823      	ldr	r3, [r4, #0]
 801a604:	07df      	lsls	r7, r3, #31
 801a606:	d508      	bpl.n	801a61a <_printf_i+0x142>
 801a608:	6923      	ldr	r3, [r4, #16]
 801a60a:	6861      	ldr	r1, [r4, #4]
 801a60c:	4299      	cmp	r1, r3
 801a60e:	bfde      	ittt	le
 801a610:	2330      	movle	r3, #48	@ 0x30
 801a612:	f806 3c01 	strble.w	r3, [r6, #-1]
 801a616:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801a61a:	1b92      	subs	r2, r2, r6
 801a61c:	6122      	str	r2, [r4, #16]
 801a61e:	f8cd a000 	str.w	sl, [sp]
 801a622:	464b      	mov	r3, r9
 801a624:	aa03      	add	r2, sp, #12
 801a626:	4621      	mov	r1, r4
 801a628:	4640      	mov	r0, r8
 801a62a:	f7ff fee7 	bl	801a3fc <_printf_common>
 801a62e:	3001      	adds	r0, #1
 801a630:	d14a      	bne.n	801a6c8 <_printf_i+0x1f0>
 801a632:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a636:	b004      	add	sp, #16
 801a638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a63c:	6823      	ldr	r3, [r4, #0]
 801a63e:	f043 0320 	orr.w	r3, r3, #32
 801a642:	6023      	str	r3, [r4, #0]
 801a644:	4832      	ldr	r0, [pc, #200]	@ (801a710 <_printf_i+0x238>)
 801a646:	2778      	movs	r7, #120	@ 0x78
 801a648:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801a64c:	6823      	ldr	r3, [r4, #0]
 801a64e:	6831      	ldr	r1, [r6, #0]
 801a650:	061f      	lsls	r7, r3, #24
 801a652:	f851 5b04 	ldr.w	r5, [r1], #4
 801a656:	d402      	bmi.n	801a65e <_printf_i+0x186>
 801a658:	065f      	lsls	r7, r3, #25
 801a65a:	bf48      	it	mi
 801a65c:	b2ad      	uxthmi	r5, r5
 801a65e:	6031      	str	r1, [r6, #0]
 801a660:	07d9      	lsls	r1, r3, #31
 801a662:	bf44      	itt	mi
 801a664:	f043 0320 	orrmi.w	r3, r3, #32
 801a668:	6023      	strmi	r3, [r4, #0]
 801a66a:	b11d      	cbz	r5, 801a674 <_printf_i+0x19c>
 801a66c:	2310      	movs	r3, #16
 801a66e:	e7ad      	b.n	801a5cc <_printf_i+0xf4>
 801a670:	4826      	ldr	r0, [pc, #152]	@ (801a70c <_printf_i+0x234>)
 801a672:	e7e9      	b.n	801a648 <_printf_i+0x170>
 801a674:	6823      	ldr	r3, [r4, #0]
 801a676:	f023 0320 	bic.w	r3, r3, #32
 801a67a:	6023      	str	r3, [r4, #0]
 801a67c:	e7f6      	b.n	801a66c <_printf_i+0x194>
 801a67e:	4616      	mov	r6, r2
 801a680:	e7bd      	b.n	801a5fe <_printf_i+0x126>
 801a682:	6833      	ldr	r3, [r6, #0]
 801a684:	6825      	ldr	r5, [r4, #0]
 801a686:	6961      	ldr	r1, [r4, #20]
 801a688:	1d18      	adds	r0, r3, #4
 801a68a:	6030      	str	r0, [r6, #0]
 801a68c:	062e      	lsls	r6, r5, #24
 801a68e:	681b      	ldr	r3, [r3, #0]
 801a690:	d501      	bpl.n	801a696 <_printf_i+0x1be>
 801a692:	6019      	str	r1, [r3, #0]
 801a694:	e002      	b.n	801a69c <_printf_i+0x1c4>
 801a696:	0668      	lsls	r0, r5, #25
 801a698:	d5fb      	bpl.n	801a692 <_printf_i+0x1ba>
 801a69a:	8019      	strh	r1, [r3, #0]
 801a69c:	2300      	movs	r3, #0
 801a69e:	6123      	str	r3, [r4, #16]
 801a6a0:	4616      	mov	r6, r2
 801a6a2:	e7bc      	b.n	801a61e <_printf_i+0x146>
 801a6a4:	6833      	ldr	r3, [r6, #0]
 801a6a6:	1d1a      	adds	r2, r3, #4
 801a6a8:	6032      	str	r2, [r6, #0]
 801a6aa:	681e      	ldr	r6, [r3, #0]
 801a6ac:	6862      	ldr	r2, [r4, #4]
 801a6ae:	2100      	movs	r1, #0
 801a6b0:	4630      	mov	r0, r6
 801a6b2:	f7e5 fe3d 	bl	8000330 <memchr>
 801a6b6:	b108      	cbz	r0, 801a6bc <_printf_i+0x1e4>
 801a6b8:	1b80      	subs	r0, r0, r6
 801a6ba:	6060      	str	r0, [r4, #4]
 801a6bc:	6863      	ldr	r3, [r4, #4]
 801a6be:	6123      	str	r3, [r4, #16]
 801a6c0:	2300      	movs	r3, #0
 801a6c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a6c6:	e7aa      	b.n	801a61e <_printf_i+0x146>
 801a6c8:	6923      	ldr	r3, [r4, #16]
 801a6ca:	4632      	mov	r2, r6
 801a6cc:	4649      	mov	r1, r9
 801a6ce:	4640      	mov	r0, r8
 801a6d0:	47d0      	blx	sl
 801a6d2:	3001      	adds	r0, #1
 801a6d4:	d0ad      	beq.n	801a632 <_printf_i+0x15a>
 801a6d6:	6823      	ldr	r3, [r4, #0]
 801a6d8:	079b      	lsls	r3, r3, #30
 801a6da:	d413      	bmi.n	801a704 <_printf_i+0x22c>
 801a6dc:	68e0      	ldr	r0, [r4, #12]
 801a6de:	9b03      	ldr	r3, [sp, #12]
 801a6e0:	4298      	cmp	r0, r3
 801a6e2:	bfb8      	it	lt
 801a6e4:	4618      	movlt	r0, r3
 801a6e6:	e7a6      	b.n	801a636 <_printf_i+0x15e>
 801a6e8:	2301      	movs	r3, #1
 801a6ea:	4632      	mov	r2, r6
 801a6ec:	4649      	mov	r1, r9
 801a6ee:	4640      	mov	r0, r8
 801a6f0:	47d0      	blx	sl
 801a6f2:	3001      	adds	r0, #1
 801a6f4:	d09d      	beq.n	801a632 <_printf_i+0x15a>
 801a6f6:	3501      	adds	r5, #1
 801a6f8:	68e3      	ldr	r3, [r4, #12]
 801a6fa:	9903      	ldr	r1, [sp, #12]
 801a6fc:	1a5b      	subs	r3, r3, r1
 801a6fe:	42ab      	cmp	r3, r5
 801a700:	dcf2      	bgt.n	801a6e8 <_printf_i+0x210>
 801a702:	e7eb      	b.n	801a6dc <_printf_i+0x204>
 801a704:	2500      	movs	r5, #0
 801a706:	f104 0619 	add.w	r6, r4, #25
 801a70a:	e7f5      	b.n	801a6f8 <_printf_i+0x220>
 801a70c:	0801fa26 	.word	0x0801fa26
 801a710:	0801fa37 	.word	0x0801fa37

0801a714 <_scanf_float>:
 801a714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a718:	b087      	sub	sp, #28
 801a71a:	4691      	mov	r9, r2
 801a71c:	9303      	str	r3, [sp, #12]
 801a71e:	688b      	ldr	r3, [r1, #8]
 801a720:	1e5a      	subs	r2, r3, #1
 801a722:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801a726:	bf81      	itttt	hi
 801a728:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801a72c:	eb03 0b05 	addhi.w	fp, r3, r5
 801a730:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801a734:	608b      	strhi	r3, [r1, #8]
 801a736:	680b      	ldr	r3, [r1, #0]
 801a738:	460a      	mov	r2, r1
 801a73a:	f04f 0500 	mov.w	r5, #0
 801a73e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 801a742:	f842 3b1c 	str.w	r3, [r2], #28
 801a746:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801a74a:	4680      	mov	r8, r0
 801a74c:	460c      	mov	r4, r1
 801a74e:	bf98      	it	ls
 801a750:	f04f 0b00 	movls.w	fp, #0
 801a754:	9201      	str	r2, [sp, #4]
 801a756:	4616      	mov	r6, r2
 801a758:	46aa      	mov	sl, r5
 801a75a:	462f      	mov	r7, r5
 801a75c:	9502      	str	r5, [sp, #8]
 801a75e:	68a2      	ldr	r2, [r4, #8]
 801a760:	b15a      	cbz	r2, 801a77a <_scanf_float+0x66>
 801a762:	f8d9 3000 	ldr.w	r3, [r9]
 801a766:	781b      	ldrb	r3, [r3, #0]
 801a768:	2b4e      	cmp	r3, #78	@ 0x4e
 801a76a:	d863      	bhi.n	801a834 <_scanf_float+0x120>
 801a76c:	2b40      	cmp	r3, #64	@ 0x40
 801a76e:	d83b      	bhi.n	801a7e8 <_scanf_float+0xd4>
 801a770:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 801a774:	b2c8      	uxtb	r0, r1
 801a776:	280e      	cmp	r0, #14
 801a778:	d939      	bls.n	801a7ee <_scanf_float+0xda>
 801a77a:	b11f      	cbz	r7, 801a784 <_scanf_float+0x70>
 801a77c:	6823      	ldr	r3, [r4, #0]
 801a77e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801a782:	6023      	str	r3, [r4, #0]
 801a784:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 801a788:	f1ba 0f01 	cmp.w	sl, #1
 801a78c:	f200 8114 	bhi.w	801a9b8 <_scanf_float+0x2a4>
 801a790:	9b01      	ldr	r3, [sp, #4]
 801a792:	429e      	cmp	r6, r3
 801a794:	f200 8105 	bhi.w	801a9a2 <_scanf_float+0x28e>
 801a798:	2001      	movs	r0, #1
 801a79a:	b007      	add	sp, #28
 801a79c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a7a0:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801a7a4:	2a0d      	cmp	r2, #13
 801a7a6:	d8e8      	bhi.n	801a77a <_scanf_float+0x66>
 801a7a8:	a101      	add	r1, pc, #4	@ (adr r1, 801a7b0 <_scanf_float+0x9c>)
 801a7aa:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801a7ae:	bf00      	nop
 801a7b0:	0801a8f9 	.word	0x0801a8f9
 801a7b4:	0801a77b 	.word	0x0801a77b
 801a7b8:	0801a77b 	.word	0x0801a77b
 801a7bc:	0801a77b 	.word	0x0801a77b
 801a7c0:	0801a955 	.word	0x0801a955
 801a7c4:	0801a92f 	.word	0x0801a92f
 801a7c8:	0801a77b 	.word	0x0801a77b
 801a7cc:	0801a77b 	.word	0x0801a77b
 801a7d0:	0801a907 	.word	0x0801a907
 801a7d4:	0801a77b 	.word	0x0801a77b
 801a7d8:	0801a77b 	.word	0x0801a77b
 801a7dc:	0801a77b 	.word	0x0801a77b
 801a7e0:	0801a77b 	.word	0x0801a77b
 801a7e4:	0801a8c3 	.word	0x0801a8c3
 801a7e8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 801a7ec:	e7da      	b.n	801a7a4 <_scanf_float+0x90>
 801a7ee:	290e      	cmp	r1, #14
 801a7f0:	d8c3      	bhi.n	801a77a <_scanf_float+0x66>
 801a7f2:	a001      	add	r0, pc, #4	@ (adr r0, 801a7f8 <_scanf_float+0xe4>)
 801a7f4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801a7f8:	0801a8b3 	.word	0x0801a8b3
 801a7fc:	0801a77b 	.word	0x0801a77b
 801a800:	0801a8b3 	.word	0x0801a8b3
 801a804:	0801a943 	.word	0x0801a943
 801a808:	0801a77b 	.word	0x0801a77b
 801a80c:	0801a855 	.word	0x0801a855
 801a810:	0801a899 	.word	0x0801a899
 801a814:	0801a899 	.word	0x0801a899
 801a818:	0801a899 	.word	0x0801a899
 801a81c:	0801a899 	.word	0x0801a899
 801a820:	0801a899 	.word	0x0801a899
 801a824:	0801a899 	.word	0x0801a899
 801a828:	0801a899 	.word	0x0801a899
 801a82c:	0801a899 	.word	0x0801a899
 801a830:	0801a899 	.word	0x0801a899
 801a834:	2b6e      	cmp	r3, #110	@ 0x6e
 801a836:	d809      	bhi.n	801a84c <_scanf_float+0x138>
 801a838:	2b60      	cmp	r3, #96	@ 0x60
 801a83a:	d8b1      	bhi.n	801a7a0 <_scanf_float+0x8c>
 801a83c:	2b54      	cmp	r3, #84	@ 0x54
 801a83e:	d07b      	beq.n	801a938 <_scanf_float+0x224>
 801a840:	2b59      	cmp	r3, #89	@ 0x59
 801a842:	d19a      	bne.n	801a77a <_scanf_float+0x66>
 801a844:	2d07      	cmp	r5, #7
 801a846:	d198      	bne.n	801a77a <_scanf_float+0x66>
 801a848:	2508      	movs	r5, #8
 801a84a:	e02f      	b.n	801a8ac <_scanf_float+0x198>
 801a84c:	2b74      	cmp	r3, #116	@ 0x74
 801a84e:	d073      	beq.n	801a938 <_scanf_float+0x224>
 801a850:	2b79      	cmp	r3, #121	@ 0x79
 801a852:	e7f6      	b.n	801a842 <_scanf_float+0x12e>
 801a854:	6821      	ldr	r1, [r4, #0]
 801a856:	05c8      	lsls	r0, r1, #23
 801a858:	d51e      	bpl.n	801a898 <_scanf_float+0x184>
 801a85a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801a85e:	6021      	str	r1, [r4, #0]
 801a860:	3701      	adds	r7, #1
 801a862:	f1bb 0f00 	cmp.w	fp, #0
 801a866:	d003      	beq.n	801a870 <_scanf_float+0x15c>
 801a868:	3201      	adds	r2, #1
 801a86a:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 801a86e:	60a2      	str	r2, [r4, #8]
 801a870:	68a3      	ldr	r3, [r4, #8]
 801a872:	3b01      	subs	r3, #1
 801a874:	60a3      	str	r3, [r4, #8]
 801a876:	6923      	ldr	r3, [r4, #16]
 801a878:	3301      	adds	r3, #1
 801a87a:	6123      	str	r3, [r4, #16]
 801a87c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801a880:	3b01      	subs	r3, #1
 801a882:	2b00      	cmp	r3, #0
 801a884:	f8c9 3004 	str.w	r3, [r9, #4]
 801a888:	f340 8082 	ble.w	801a990 <_scanf_float+0x27c>
 801a88c:	f8d9 3000 	ldr.w	r3, [r9]
 801a890:	3301      	adds	r3, #1
 801a892:	f8c9 3000 	str.w	r3, [r9]
 801a896:	e762      	b.n	801a75e <_scanf_float+0x4a>
 801a898:	eb1a 0105 	adds.w	r1, sl, r5
 801a89c:	f47f af6d 	bne.w	801a77a <_scanf_float+0x66>
 801a8a0:	6822      	ldr	r2, [r4, #0]
 801a8a2:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 801a8a6:	6022      	str	r2, [r4, #0]
 801a8a8:	460d      	mov	r5, r1
 801a8aa:	468a      	mov	sl, r1
 801a8ac:	f806 3b01 	strb.w	r3, [r6], #1
 801a8b0:	e7de      	b.n	801a870 <_scanf_float+0x15c>
 801a8b2:	6822      	ldr	r2, [r4, #0]
 801a8b4:	0610      	lsls	r0, r2, #24
 801a8b6:	f57f af60 	bpl.w	801a77a <_scanf_float+0x66>
 801a8ba:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801a8be:	6022      	str	r2, [r4, #0]
 801a8c0:	e7f4      	b.n	801a8ac <_scanf_float+0x198>
 801a8c2:	f1ba 0f00 	cmp.w	sl, #0
 801a8c6:	d10c      	bne.n	801a8e2 <_scanf_float+0x1ce>
 801a8c8:	b977      	cbnz	r7, 801a8e8 <_scanf_float+0x1d4>
 801a8ca:	6822      	ldr	r2, [r4, #0]
 801a8cc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801a8d0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801a8d4:	d108      	bne.n	801a8e8 <_scanf_float+0x1d4>
 801a8d6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801a8da:	6022      	str	r2, [r4, #0]
 801a8dc:	f04f 0a01 	mov.w	sl, #1
 801a8e0:	e7e4      	b.n	801a8ac <_scanf_float+0x198>
 801a8e2:	f1ba 0f02 	cmp.w	sl, #2
 801a8e6:	d050      	beq.n	801a98a <_scanf_float+0x276>
 801a8e8:	2d01      	cmp	r5, #1
 801a8ea:	d002      	beq.n	801a8f2 <_scanf_float+0x1de>
 801a8ec:	2d04      	cmp	r5, #4
 801a8ee:	f47f af44 	bne.w	801a77a <_scanf_float+0x66>
 801a8f2:	3501      	adds	r5, #1
 801a8f4:	b2ed      	uxtb	r5, r5
 801a8f6:	e7d9      	b.n	801a8ac <_scanf_float+0x198>
 801a8f8:	f1ba 0f01 	cmp.w	sl, #1
 801a8fc:	f47f af3d 	bne.w	801a77a <_scanf_float+0x66>
 801a900:	f04f 0a02 	mov.w	sl, #2
 801a904:	e7d2      	b.n	801a8ac <_scanf_float+0x198>
 801a906:	b975      	cbnz	r5, 801a926 <_scanf_float+0x212>
 801a908:	2f00      	cmp	r7, #0
 801a90a:	f47f af37 	bne.w	801a77c <_scanf_float+0x68>
 801a90e:	6822      	ldr	r2, [r4, #0]
 801a910:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801a914:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801a918:	f040 80fc 	bne.w	801ab14 <_scanf_float+0x400>
 801a91c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801a920:	6022      	str	r2, [r4, #0]
 801a922:	2501      	movs	r5, #1
 801a924:	e7c2      	b.n	801a8ac <_scanf_float+0x198>
 801a926:	2d03      	cmp	r5, #3
 801a928:	d0e3      	beq.n	801a8f2 <_scanf_float+0x1de>
 801a92a:	2d05      	cmp	r5, #5
 801a92c:	e7df      	b.n	801a8ee <_scanf_float+0x1da>
 801a92e:	2d02      	cmp	r5, #2
 801a930:	f47f af23 	bne.w	801a77a <_scanf_float+0x66>
 801a934:	2503      	movs	r5, #3
 801a936:	e7b9      	b.n	801a8ac <_scanf_float+0x198>
 801a938:	2d06      	cmp	r5, #6
 801a93a:	f47f af1e 	bne.w	801a77a <_scanf_float+0x66>
 801a93e:	2507      	movs	r5, #7
 801a940:	e7b4      	b.n	801a8ac <_scanf_float+0x198>
 801a942:	6822      	ldr	r2, [r4, #0]
 801a944:	0591      	lsls	r1, r2, #22
 801a946:	f57f af18 	bpl.w	801a77a <_scanf_float+0x66>
 801a94a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801a94e:	6022      	str	r2, [r4, #0]
 801a950:	9702      	str	r7, [sp, #8]
 801a952:	e7ab      	b.n	801a8ac <_scanf_float+0x198>
 801a954:	6822      	ldr	r2, [r4, #0]
 801a956:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 801a95a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801a95e:	d005      	beq.n	801a96c <_scanf_float+0x258>
 801a960:	0550      	lsls	r0, r2, #21
 801a962:	f57f af0a 	bpl.w	801a77a <_scanf_float+0x66>
 801a966:	2f00      	cmp	r7, #0
 801a968:	f000 80d4 	beq.w	801ab14 <_scanf_float+0x400>
 801a96c:	0591      	lsls	r1, r2, #22
 801a96e:	bf58      	it	pl
 801a970:	9902      	ldrpl	r1, [sp, #8]
 801a972:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801a976:	bf58      	it	pl
 801a978:	1a79      	subpl	r1, r7, r1
 801a97a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 801a97e:	bf58      	it	pl
 801a980:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801a984:	6022      	str	r2, [r4, #0]
 801a986:	2700      	movs	r7, #0
 801a988:	e790      	b.n	801a8ac <_scanf_float+0x198>
 801a98a:	f04f 0a03 	mov.w	sl, #3
 801a98e:	e78d      	b.n	801a8ac <_scanf_float+0x198>
 801a990:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801a994:	4649      	mov	r1, r9
 801a996:	4640      	mov	r0, r8
 801a998:	4798      	blx	r3
 801a99a:	2800      	cmp	r0, #0
 801a99c:	f43f aedf 	beq.w	801a75e <_scanf_float+0x4a>
 801a9a0:	e6eb      	b.n	801a77a <_scanf_float+0x66>
 801a9a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801a9a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a9aa:	464a      	mov	r2, r9
 801a9ac:	4640      	mov	r0, r8
 801a9ae:	4798      	blx	r3
 801a9b0:	6923      	ldr	r3, [r4, #16]
 801a9b2:	3b01      	subs	r3, #1
 801a9b4:	6123      	str	r3, [r4, #16]
 801a9b6:	e6eb      	b.n	801a790 <_scanf_float+0x7c>
 801a9b8:	1e6b      	subs	r3, r5, #1
 801a9ba:	2b06      	cmp	r3, #6
 801a9bc:	d824      	bhi.n	801aa08 <_scanf_float+0x2f4>
 801a9be:	2d02      	cmp	r5, #2
 801a9c0:	d836      	bhi.n	801aa30 <_scanf_float+0x31c>
 801a9c2:	9b01      	ldr	r3, [sp, #4]
 801a9c4:	429e      	cmp	r6, r3
 801a9c6:	f67f aee7 	bls.w	801a798 <_scanf_float+0x84>
 801a9ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801a9ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a9d2:	464a      	mov	r2, r9
 801a9d4:	4640      	mov	r0, r8
 801a9d6:	4798      	blx	r3
 801a9d8:	6923      	ldr	r3, [r4, #16]
 801a9da:	3b01      	subs	r3, #1
 801a9dc:	6123      	str	r3, [r4, #16]
 801a9de:	e7f0      	b.n	801a9c2 <_scanf_float+0x2ae>
 801a9e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801a9e4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 801a9e8:	464a      	mov	r2, r9
 801a9ea:	4640      	mov	r0, r8
 801a9ec:	4798      	blx	r3
 801a9ee:	6923      	ldr	r3, [r4, #16]
 801a9f0:	3b01      	subs	r3, #1
 801a9f2:	6123      	str	r3, [r4, #16]
 801a9f4:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 801a9f8:	fa5f fa8a 	uxtb.w	sl, sl
 801a9fc:	f1ba 0f02 	cmp.w	sl, #2
 801aa00:	d1ee      	bne.n	801a9e0 <_scanf_float+0x2cc>
 801aa02:	3d03      	subs	r5, #3
 801aa04:	b2ed      	uxtb	r5, r5
 801aa06:	1b76      	subs	r6, r6, r5
 801aa08:	6823      	ldr	r3, [r4, #0]
 801aa0a:	05da      	lsls	r2, r3, #23
 801aa0c:	d530      	bpl.n	801aa70 <_scanf_float+0x35c>
 801aa0e:	055b      	lsls	r3, r3, #21
 801aa10:	d511      	bpl.n	801aa36 <_scanf_float+0x322>
 801aa12:	9b01      	ldr	r3, [sp, #4]
 801aa14:	429e      	cmp	r6, r3
 801aa16:	f67f aebf 	bls.w	801a798 <_scanf_float+0x84>
 801aa1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801aa1e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801aa22:	464a      	mov	r2, r9
 801aa24:	4640      	mov	r0, r8
 801aa26:	4798      	blx	r3
 801aa28:	6923      	ldr	r3, [r4, #16]
 801aa2a:	3b01      	subs	r3, #1
 801aa2c:	6123      	str	r3, [r4, #16]
 801aa2e:	e7f0      	b.n	801aa12 <_scanf_float+0x2fe>
 801aa30:	46aa      	mov	sl, r5
 801aa32:	46b3      	mov	fp, r6
 801aa34:	e7de      	b.n	801a9f4 <_scanf_float+0x2e0>
 801aa36:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801aa3a:	6923      	ldr	r3, [r4, #16]
 801aa3c:	2965      	cmp	r1, #101	@ 0x65
 801aa3e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 801aa42:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 801aa46:	6123      	str	r3, [r4, #16]
 801aa48:	d00c      	beq.n	801aa64 <_scanf_float+0x350>
 801aa4a:	2945      	cmp	r1, #69	@ 0x45
 801aa4c:	d00a      	beq.n	801aa64 <_scanf_float+0x350>
 801aa4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801aa52:	464a      	mov	r2, r9
 801aa54:	4640      	mov	r0, r8
 801aa56:	4798      	blx	r3
 801aa58:	6923      	ldr	r3, [r4, #16]
 801aa5a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801aa5e:	3b01      	subs	r3, #1
 801aa60:	1eb5      	subs	r5, r6, #2
 801aa62:	6123      	str	r3, [r4, #16]
 801aa64:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801aa68:	464a      	mov	r2, r9
 801aa6a:	4640      	mov	r0, r8
 801aa6c:	4798      	blx	r3
 801aa6e:	462e      	mov	r6, r5
 801aa70:	6822      	ldr	r2, [r4, #0]
 801aa72:	f012 0210 	ands.w	r2, r2, #16
 801aa76:	d001      	beq.n	801aa7c <_scanf_float+0x368>
 801aa78:	2000      	movs	r0, #0
 801aa7a:	e68e      	b.n	801a79a <_scanf_float+0x86>
 801aa7c:	7032      	strb	r2, [r6, #0]
 801aa7e:	6823      	ldr	r3, [r4, #0]
 801aa80:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801aa84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801aa88:	d123      	bne.n	801aad2 <_scanf_float+0x3be>
 801aa8a:	9b02      	ldr	r3, [sp, #8]
 801aa8c:	429f      	cmp	r7, r3
 801aa8e:	d00a      	beq.n	801aaa6 <_scanf_float+0x392>
 801aa90:	1bda      	subs	r2, r3, r7
 801aa92:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 801aa96:	429e      	cmp	r6, r3
 801aa98:	bf28      	it	cs
 801aa9a:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 801aa9e:	491e      	ldr	r1, [pc, #120]	@ (801ab18 <_scanf_float+0x404>)
 801aaa0:	4630      	mov	r0, r6
 801aaa2:	f000 f96f 	bl	801ad84 <siprintf>
 801aaa6:	9901      	ldr	r1, [sp, #4]
 801aaa8:	2200      	movs	r2, #0
 801aaaa:	4640      	mov	r0, r8
 801aaac:	f7ff f9aa 	bl	8019e04 <_strtod_r>
 801aab0:	9b03      	ldr	r3, [sp, #12]
 801aab2:	6821      	ldr	r1, [r4, #0]
 801aab4:	681b      	ldr	r3, [r3, #0]
 801aab6:	f011 0f02 	tst.w	r1, #2
 801aaba:	f103 0204 	add.w	r2, r3, #4
 801aabe:	d015      	beq.n	801aaec <_scanf_float+0x3d8>
 801aac0:	9903      	ldr	r1, [sp, #12]
 801aac2:	600a      	str	r2, [r1, #0]
 801aac4:	681b      	ldr	r3, [r3, #0]
 801aac6:	ed83 0b00 	vstr	d0, [r3]
 801aaca:	68e3      	ldr	r3, [r4, #12]
 801aacc:	3301      	adds	r3, #1
 801aace:	60e3      	str	r3, [r4, #12]
 801aad0:	e7d2      	b.n	801aa78 <_scanf_float+0x364>
 801aad2:	9b04      	ldr	r3, [sp, #16]
 801aad4:	2b00      	cmp	r3, #0
 801aad6:	d0e6      	beq.n	801aaa6 <_scanf_float+0x392>
 801aad8:	9905      	ldr	r1, [sp, #20]
 801aada:	230a      	movs	r3, #10
 801aadc:	3101      	adds	r1, #1
 801aade:	4640      	mov	r0, r8
 801aae0:	f002 fb02 	bl	801d0e8 <_strtol_r>
 801aae4:	9b04      	ldr	r3, [sp, #16]
 801aae6:	9e05      	ldr	r6, [sp, #20]
 801aae8:	1ac2      	subs	r2, r0, r3
 801aaea:	e7d2      	b.n	801aa92 <_scanf_float+0x37e>
 801aaec:	f011 0f04 	tst.w	r1, #4
 801aaf0:	9903      	ldr	r1, [sp, #12]
 801aaf2:	600a      	str	r2, [r1, #0]
 801aaf4:	d1e6      	bne.n	801aac4 <_scanf_float+0x3b0>
 801aaf6:	eeb4 0b40 	vcmp.f64	d0, d0
 801aafa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aafe:	681d      	ldr	r5, [r3, #0]
 801ab00:	d705      	bvc.n	801ab0e <_scanf_float+0x3fa>
 801ab02:	4806      	ldr	r0, [pc, #24]	@ (801ab1c <_scanf_float+0x408>)
 801ab04:	f000 fb94 	bl	801b230 <nanf>
 801ab08:	ed85 0a00 	vstr	s0, [r5]
 801ab0c:	e7dd      	b.n	801aaca <_scanf_float+0x3b6>
 801ab0e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801ab12:	e7f9      	b.n	801ab08 <_scanf_float+0x3f4>
 801ab14:	2700      	movs	r7, #0
 801ab16:	e635      	b.n	801a784 <_scanf_float+0x70>
 801ab18:	0801fa48 	.word	0x0801fa48
 801ab1c:	0801fc02 	.word	0x0801fc02

0801ab20 <std>:
 801ab20:	2300      	movs	r3, #0
 801ab22:	b510      	push	{r4, lr}
 801ab24:	4604      	mov	r4, r0
 801ab26:	e9c0 3300 	strd	r3, r3, [r0]
 801ab2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801ab2e:	6083      	str	r3, [r0, #8]
 801ab30:	8181      	strh	r1, [r0, #12]
 801ab32:	6643      	str	r3, [r0, #100]	@ 0x64
 801ab34:	81c2      	strh	r2, [r0, #14]
 801ab36:	6183      	str	r3, [r0, #24]
 801ab38:	4619      	mov	r1, r3
 801ab3a:	2208      	movs	r2, #8
 801ab3c:	305c      	adds	r0, #92	@ 0x5c
 801ab3e:	f000 fa63 	bl	801b008 <memset>
 801ab42:	4b0d      	ldr	r3, [pc, #52]	@ (801ab78 <std+0x58>)
 801ab44:	6263      	str	r3, [r4, #36]	@ 0x24
 801ab46:	4b0d      	ldr	r3, [pc, #52]	@ (801ab7c <std+0x5c>)
 801ab48:	62a3      	str	r3, [r4, #40]	@ 0x28
 801ab4a:	4b0d      	ldr	r3, [pc, #52]	@ (801ab80 <std+0x60>)
 801ab4c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801ab4e:	4b0d      	ldr	r3, [pc, #52]	@ (801ab84 <std+0x64>)
 801ab50:	6323      	str	r3, [r4, #48]	@ 0x30
 801ab52:	4b0d      	ldr	r3, [pc, #52]	@ (801ab88 <std+0x68>)
 801ab54:	6224      	str	r4, [r4, #32]
 801ab56:	429c      	cmp	r4, r3
 801ab58:	d006      	beq.n	801ab68 <std+0x48>
 801ab5a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801ab5e:	4294      	cmp	r4, r2
 801ab60:	d002      	beq.n	801ab68 <std+0x48>
 801ab62:	33d0      	adds	r3, #208	@ 0xd0
 801ab64:	429c      	cmp	r4, r3
 801ab66:	d105      	bne.n	801ab74 <std+0x54>
 801ab68:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801ab6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ab70:	f000 bb44 	b.w	801b1fc <__retarget_lock_init_recursive>
 801ab74:	bd10      	pop	{r4, pc}
 801ab76:	bf00      	nop
 801ab78:	0801ae21 	.word	0x0801ae21
 801ab7c:	0801ae47 	.word	0x0801ae47
 801ab80:	0801ae7f 	.word	0x0801ae7f
 801ab84:	0801aea3 	.word	0x0801aea3
 801ab88:	24005bbc 	.word	0x24005bbc

0801ab8c <stdio_exit_handler>:
 801ab8c:	4a02      	ldr	r2, [pc, #8]	@ (801ab98 <stdio_exit_handler+0xc>)
 801ab8e:	4903      	ldr	r1, [pc, #12]	@ (801ab9c <stdio_exit_handler+0x10>)
 801ab90:	4803      	ldr	r0, [pc, #12]	@ (801aba0 <stdio_exit_handler+0x14>)
 801ab92:	f000 b869 	b.w	801ac68 <_fwalk_sglue>
 801ab96:	bf00      	nop
 801ab98:	2400002c 	.word	0x2400002c
 801ab9c:	0801dd7d 	.word	0x0801dd7d
 801aba0:	240001a8 	.word	0x240001a8

0801aba4 <cleanup_stdio>:
 801aba4:	6841      	ldr	r1, [r0, #4]
 801aba6:	4b0c      	ldr	r3, [pc, #48]	@ (801abd8 <cleanup_stdio+0x34>)
 801aba8:	4299      	cmp	r1, r3
 801abaa:	b510      	push	{r4, lr}
 801abac:	4604      	mov	r4, r0
 801abae:	d001      	beq.n	801abb4 <cleanup_stdio+0x10>
 801abb0:	f003 f8e4 	bl	801dd7c <_fflush_r>
 801abb4:	68a1      	ldr	r1, [r4, #8]
 801abb6:	4b09      	ldr	r3, [pc, #36]	@ (801abdc <cleanup_stdio+0x38>)
 801abb8:	4299      	cmp	r1, r3
 801abba:	d002      	beq.n	801abc2 <cleanup_stdio+0x1e>
 801abbc:	4620      	mov	r0, r4
 801abbe:	f003 f8dd 	bl	801dd7c <_fflush_r>
 801abc2:	68e1      	ldr	r1, [r4, #12]
 801abc4:	4b06      	ldr	r3, [pc, #24]	@ (801abe0 <cleanup_stdio+0x3c>)
 801abc6:	4299      	cmp	r1, r3
 801abc8:	d004      	beq.n	801abd4 <cleanup_stdio+0x30>
 801abca:	4620      	mov	r0, r4
 801abcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801abd0:	f003 b8d4 	b.w	801dd7c <_fflush_r>
 801abd4:	bd10      	pop	{r4, pc}
 801abd6:	bf00      	nop
 801abd8:	24005bbc 	.word	0x24005bbc
 801abdc:	24005c24 	.word	0x24005c24
 801abe0:	24005c8c 	.word	0x24005c8c

0801abe4 <global_stdio_init.part.0>:
 801abe4:	b510      	push	{r4, lr}
 801abe6:	4b0b      	ldr	r3, [pc, #44]	@ (801ac14 <global_stdio_init.part.0+0x30>)
 801abe8:	4c0b      	ldr	r4, [pc, #44]	@ (801ac18 <global_stdio_init.part.0+0x34>)
 801abea:	4a0c      	ldr	r2, [pc, #48]	@ (801ac1c <global_stdio_init.part.0+0x38>)
 801abec:	601a      	str	r2, [r3, #0]
 801abee:	4620      	mov	r0, r4
 801abf0:	2200      	movs	r2, #0
 801abf2:	2104      	movs	r1, #4
 801abf4:	f7ff ff94 	bl	801ab20 <std>
 801abf8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801abfc:	2201      	movs	r2, #1
 801abfe:	2109      	movs	r1, #9
 801ac00:	f7ff ff8e 	bl	801ab20 <std>
 801ac04:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801ac08:	2202      	movs	r2, #2
 801ac0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ac0e:	2112      	movs	r1, #18
 801ac10:	f7ff bf86 	b.w	801ab20 <std>
 801ac14:	24005cf4 	.word	0x24005cf4
 801ac18:	24005bbc 	.word	0x24005bbc
 801ac1c:	0801ab8d 	.word	0x0801ab8d

0801ac20 <__sfp_lock_acquire>:
 801ac20:	4801      	ldr	r0, [pc, #4]	@ (801ac28 <__sfp_lock_acquire+0x8>)
 801ac22:	f000 baec 	b.w	801b1fe <__retarget_lock_acquire_recursive>
 801ac26:	bf00      	nop
 801ac28:	24005cfd 	.word	0x24005cfd

0801ac2c <__sfp_lock_release>:
 801ac2c:	4801      	ldr	r0, [pc, #4]	@ (801ac34 <__sfp_lock_release+0x8>)
 801ac2e:	f000 bae7 	b.w	801b200 <__retarget_lock_release_recursive>
 801ac32:	bf00      	nop
 801ac34:	24005cfd 	.word	0x24005cfd

0801ac38 <__sinit>:
 801ac38:	b510      	push	{r4, lr}
 801ac3a:	4604      	mov	r4, r0
 801ac3c:	f7ff fff0 	bl	801ac20 <__sfp_lock_acquire>
 801ac40:	6a23      	ldr	r3, [r4, #32]
 801ac42:	b11b      	cbz	r3, 801ac4c <__sinit+0x14>
 801ac44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ac48:	f7ff bff0 	b.w	801ac2c <__sfp_lock_release>
 801ac4c:	4b04      	ldr	r3, [pc, #16]	@ (801ac60 <__sinit+0x28>)
 801ac4e:	6223      	str	r3, [r4, #32]
 801ac50:	4b04      	ldr	r3, [pc, #16]	@ (801ac64 <__sinit+0x2c>)
 801ac52:	681b      	ldr	r3, [r3, #0]
 801ac54:	2b00      	cmp	r3, #0
 801ac56:	d1f5      	bne.n	801ac44 <__sinit+0xc>
 801ac58:	f7ff ffc4 	bl	801abe4 <global_stdio_init.part.0>
 801ac5c:	e7f2      	b.n	801ac44 <__sinit+0xc>
 801ac5e:	bf00      	nop
 801ac60:	0801aba5 	.word	0x0801aba5
 801ac64:	24005cf4 	.word	0x24005cf4

0801ac68 <_fwalk_sglue>:
 801ac68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ac6c:	4607      	mov	r7, r0
 801ac6e:	4688      	mov	r8, r1
 801ac70:	4614      	mov	r4, r2
 801ac72:	2600      	movs	r6, #0
 801ac74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801ac78:	f1b9 0901 	subs.w	r9, r9, #1
 801ac7c:	d505      	bpl.n	801ac8a <_fwalk_sglue+0x22>
 801ac7e:	6824      	ldr	r4, [r4, #0]
 801ac80:	2c00      	cmp	r4, #0
 801ac82:	d1f7      	bne.n	801ac74 <_fwalk_sglue+0xc>
 801ac84:	4630      	mov	r0, r6
 801ac86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ac8a:	89ab      	ldrh	r3, [r5, #12]
 801ac8c:	2b01      	cmp	r3, #1
 801ac8e:	d907      	bls.n	801aca0 <_fwalk_sglue+0x38>
 801ac90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801ac94:	3301      	adds	r3, #1
 801ac96:	d003      	beq.n	801aca0 <_fwalk_sglue+0x38>
 801ac98:	4629      	mov	r1, r5
 801ac9a:	4638      	mov	r0, r7
 801ac9c:	47c0      	blx	r8
 801ac9e:	4306      	orrs	r6, r0
 801aca0:	3568      	adds	r5, #104	@ 0x68
 801aca2:	e7e9      	b.n	801ac78 <_fwalk_sglue+0x10>

0801aca4 <iprintf>:
 801aca4:	b40f      	push	{r0, r1, r2, r3}
 801aca6:	b507      	push	{r0, r1, r2, lr}
 801aca8:	4906      	ldr	r1, [pc, #24]	@ (801acc4 <iprintf+0x20>)
 801acaa:	ab04      	add	r3, sp, #16
 801acac:	6808      	ldr	r0, [r1, #0]
 801acae:	f853 2b04 	ldr.w	r2, [r3], #4
 801acb2:	6881      	ldr	r1, [r0, #8]
 801acb4:	9301      	str	r3, [sp, #4]
 801acb6:	f002 fd77 	bl	801d7a8 <_vfiprintf_r>
 801acba:	b003      	add	sp, #12
 801acbc:	f85d eb04 	ldr.w	lr, [sp], #4
 801acc0:	b004      	add	sp, #16
 801acc2:	4770      	bx	lr
 801acc4:	240001a4 	.word	0x240001a4

0801acc8 <_puts_r>:
 801acc8:	6a03      	ldr	r3, [r0, #32]
 801acca:	b570      	push	{r4, r5, r6, lr}
 801accc:	6884      	ldr	r4, [r0, #8]
 801acce:	4605      	mov	r5, r0
 801acd0:	460e      	mov	r6, r1
 801acd2:	b90b      	cbnz	r3, 801acd8 <_puts_r+0x10>
 801acd4:	f7ff ffb0 	bl	801ac38 <__sinit>
 801acd8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801acda:	07db      	lsls	r3, r3, #31
 801acdc:	d405      	bmi.n	801acea <_puts_r+0x22>
 801acde:	89a3      	ldrh	r3, [r4, #12]
 801ace0:	0598      	lsls	r0, r3, #22
 801ace2:	d402      	bmi.n	801acea <_puts_r+0x22>
 801ace4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ace6:	f000 fa8a 	bl	801b1fe <__retarget_lock_acquire_recursive>
 801acea:	89a3      	ldrh	r3, [r4, #12]
 801acec:	0719      	lsls	r1, r3, #28
 801acee:	d502      	bpl.n	801acf6 <_puts_r+0x2e>
 801acf0:	6923      	ldr	r3, [r4, #16]
 801acf2:	2b00      	cmp	r3, #0
 801acf4:	d135      	bne.n	801ad62 <_puts_r+0x9a>
 801acf6:	4621      	mov	r1, r4
 801acf8:	4628      	mov	r0, r5
 801acfa:	f000 f915 	bl	801af28 <__swsetup_r>
 801acfe:	b380      	cbz	r0, 801ad62 <_puts_r+0x9a>
 801ad00:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801ad04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ad06:	07da      	lsls	r2, r3, #31
 801ad08:	d405      	bmi.n	801ad16 <_puts_r+0x4e>
 801ad0a:	89a3      	ldrh	r3, [r4, #12]
 801ad0c:	059b      	lsls	r3, r3, #22
 801ad0e:	d402      	bmi.n	801ad16 <_puts_r+0x4e>
 801ad10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ad12:	f000 fa75 	bl	801b200 <__retarget_lock_release_recursive>
 801ad16:	4628      	mov	r0, r5
 801ad18:	bd70      	pop	{r4, r5, r6, pc}
 801ad1a:	2b00      	cmp	r3, #0
 801ad1c:	da04      	bge.n	801ad28 <_puts_r+0x60>
 801ad1e:	69a2      	ldr	r2, [r4, #24]
 801ad20:	429a      	cmp	r2, r3
 801ad22:	dc17      	bgt.n	801ad54 <_puts_r+0x8c>
 801ad24:	290a      	cmp	r1, #10
 801ad26:	d015      	beq.n	801ad54 <_puts_r+0x8c>
 801ad28:	6823      	ldr	r3, [r4, #0]
 801ad2a:	1c5a      	adds	r2, r3, #1
 801ad2c:	6022      	str	r2, [r4, #0]
 801ad2e:	7019      	strb	r1, [r3, #0]
 801ad30:	68a3      	ldr	r3, [r4, #8]
 801ad32:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801ad36:	3b01      	subs	r3, #1
 801ad38:	60a3      	str	r3, [r4, #8]
 801ad3a:	2900      	cmp	r1, #0
 801ad3c:	d1ed      	bne.n	801ad1a <_puts_r+0x52>
 801ad3e:	2b00      	cmp	r3, #0
 801ad40:	da11      	bge.n	801ad66 <_puts_r+0x9e>
 801ad42:	4622      	mov	r2, r4
 801ad44:	210a      	movs	r1, #10
 801ad46:	4628      	mov	r0, r5
 801ad48:	f000 f8af 	bl	801aeaa <__swbuf_r>
 801ad4c:	3001      	adds	r0, #1
 801ad4e:	d0d7      	beq.n	801ad00 <_puts_r+0x38>
 801ad50:	250a      	movs	r5, #10
 801ad52:	e7d7      	b.n	801ad04 <_puts_r+0x3c>
 801ad54:	4622      	mov	r2, r4
 801ad56:	4628      	mov	r0, r5
 801ad58:	f000 f8a7 	bl	801aeaa <__swbuf_r>
 801ad5c:	3001      	adds	r0, #1
 801ad5e:	d1e7      	bne.n	801ad30 <_puts_r+0x68>
 801ad60:	e7ce      	b.n	801ad00 <_puts_r+0x38>
 801ad62:	3e01      	subs	r6, #1
 801ad64:	e7e4      	b.n	801ad30 <_puts_r+0x68>
 801ad66:	6823      	ldr	r3, [r4, #0]
 801ad68:	1c5a      	adds	r2, r3, #1
 801ad6a:	6022      	str	r2, [r4, #0]
 801ad6c:	220a      	movs	r2, #10
 801ad6e:	701a      	strb	r2, [r3, #0]
 801ad70:	e7ee      	b.n	801ad50 <_puts_r+0x88>
	...

0801ad74 <puts>:
 801ad74:	4b02      	ldr	r3, [pc, #8]	@ (801ad80 <puts+0xc>)
 801ad76:	4601      	mov	r1, r0
 801ad78:	6818      	ldr	r0, [r3, #0]
 801ad7a:	f7ff bfa5 	b.w	801acc8 <_puts_r>
 801ad7e:	bf00      	nop
 801ad80:	240001a4 	.word	0x240001a4

0801ad84 <siprintf>:
 801ad84:	b40e      	push	{r1, r2, r3}
 801ad86:	b510      	push	{r4, lr}
 801ad88:	b09d      	sub	sp, #116	@ 0x74
 801ad8a:	ab1f      	add	r3, sp, #124	@ 0x7c
 801ad8c:	9002      	str	r0, [sp, #8]
 801ad8e:	9006      	str	r0, [sp, #24]
 801ad90:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801ad94:	480a      	ldr	r0, [pc, #40]	@ (801adc0 <siprintf+0x3c>)
 801ad96:	9107      	str	r1, [sp, #28]
 801ad98:	9104      	str	r1, [sp, #16]
 801ad9a:	490a      	ldr	r1, [pc, #40]	@ (801adc4 <siprintf+0x40>)
 801ad9c:	f853 2b04 	ldr.w	r2, [r3], #4
 801ada0:	9105      	str	r1, [sp, #20]
 801ada2:	2400      	movs	r4, #0
 801ada4:	a902      	add	r1, sp, #8
 801ada6:	6800      	ldr	r0, [r0, #0]
 801ada8:	9301      	str	r3, [sp, #4]
 801adaa:	941b      	str	r4, [sp, #108]	@ 0x6c
 801adac:	f002 fa06 	bl	801d1bc <_svfiprintf_r>
 801adb0:	9b02      	ldr	r3, [sp, #8]
 801adb2:	701c      	strb	r4, [r3, #0]
 801adb4:	b01d      	add	sp, #116	@ 0x74
 801adb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801adba:	b003      	add	sp, #12
 801adbc:	4770      	bx	lr
 801adbe:	bf00      	nop
 801adc0:	240001a4 	.word	0x240001a4
 801adc4:	ffff0208 	.word	0xffff0208

0801adc8 <siscanf>:
 801adc8:	b40e      	push	{r1, r2, r3}
 801adca:	b570      	push	{r4, r5, r6, lr}
 801adcc:	b09d      	sub	sp, #116	@ 0x74
 801adce:	ac21      	add	r4, sp, #132	@ 0x84
 801add0:	2500      	movs	r5, #0
 801add2:	f44f 7201 	mov.w	r2, #516	@ 0x204
 801add6:	f854 6b04 	ldr.w	r6, [r4], #4
 801adda:	f8ad 2014 	strh.w	r2, [sp, #20]
 801adde:	951b      	str	r5, [sp, #108]	@ 0x6c
 801ade0:	9002      	str	r0, [sp, #8]
 801ade2:	9006      	str	r0, [sp, #24]
 801ade4:	f7e5 faf4 	bl	80003d0 <strlen>
 801ade8:	4b0b      	ldr	r3, [pc, #44]	@ (801ae18 <siscanf+0x50>)
 801adea:	9003      	str	r0, [sp, #12]
 801adec:	9007      	str	r0, [sp, #28]
 801adee:	480b      	ldr	r0, [pc, #44]	@ (801ae1c <siscanf+0x54>)
 801adf0:	930b      	str	r3, [sp, #44]	@ 0x2c
 801adf2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801adf6:	f8ad 3016 	strh.w	r3, [sp, #22]
 801adfa:	4632      	mov	r2, r6
 801adfc:	4623      	mov	r3, r4
 801adfe:	a902      	add	r1, sp, #8
 801ae00:	6800      	ldr	r0, [r0, #0]
 801ae02:	950f      	str	r5, [sp, #60]	@ 0x3c
 801ae04:	9514      	str	r5, [sp, #80]	@ 0x50
 801ae06:	9401      	str	r4, [sp, #4]
 801ae08:	f002 fb2e 	bl	801d468 <__ssvfiscanf_r>
 801ae0c:	b01d      	add	sp, #116	@ 0x74
 801ae0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ae12:	b003      	add	sp, #12
 801ae14:	4770      	bx	lr
 801ae16:	bf00      	nop
 801ae18:	0801ae43 	.word	0x0801ae43
 801ae1c:	240001a4 	.word	0x240001a4

0801ae20 <__sread>:
 801ae20:	b510      	push	{r4, lr}
 801ae22:	460c      	mov	r4, r1
 801ae24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ae28:	f000 f99a 	bl	801b160 <_read_r>
 801ae2c:	2800      	cmp	r0, #0
 801ae2e:	bfab      	itete	ge
 801ae30:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801ae32:	89a3      	ldrhlt	r3, [r4, #12]
 801ae34:	181b      	addge	r3, r3, r0
 801ae36:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801ae3a:	bfac      	ite	ge
 801ae3c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801ae3e:	81a3      	strhlt	r3, [r4, #12]
 801ae40:	bd10      	pop	{r4, pc}

0801ae42 <__seofread>:
 801ae42:	2000      	movs	r0, #0
 801ae44:	4770      	bx	lr

0801ae46 <__swrite>:
 801ae46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ae4a:	461f      	mov	r7, r3
 801ae4c:	898b      	ldrh	r3, [r1, #12]
 801ae4e:	05db      	lsls	r3, r3, #23
 801ae50:	4605      	mov	r5, r0
 801ae52:	460c      	mov	r4, r1
 801ae54:	4616      	mov	r6, r2
 801ae56:	d505      	bpl.n	801ae64 <__swrite+0x1e>
 801ae58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ae5c:	2302      	movs	r3, #2
 801ae5e:	2200      	movs	r2, #0
 801ae60:	f000 f96c 	bl	801b13c <_lseek_r>
 801ae64:	89a3      	ldrh	r3, [r4, #12]
 801ae66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ae6a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801ae6e:	81a3      	strh	r3, [r4, #12]
 801ae70:	4632      	mov	r2, r6
 801ae72:	463b      	mov	r3, r7
 801ae74:	4628      	mov	r0, r5
 801ae76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ae7a:	f000 b983 	b.w	801b184 <_write_r>

0801ae7e <__sseek>:
 801ae7e:	b510      	push	{r4, lr}
 801ae80:	460c      	mov	r4, r1
 801ae82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ae86:	f000 f959 	bl	801b13c <_lseek_r>
 801ae8a:	1c43      	adds	r3, r0, #1
 801ae8c:	89a3      	ldrh	r3, [r4, #12]
 801ae8e:	bf15      	itete	ne
 801ae90:	6560      	strne	r0, [r4, #84]	@ 0x54
 801ae92:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801ae96:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801ae9a:	81a3      	strheq	r3, [r4, #12]
 801ae9c:	bf18      	it	ne
 801ae9e:	81a3      	strhne	r3, [r4, #12]
 801aea0:	bd10      	pop	{r4, pc}

0801aea2 <__sclose>:
 801aea2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801aea6:	f000 b8db 	b.w	801b060 <_close_r>

0801aeaa <__swbuf_r>:
 801aeaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aeac:	460e      	mov	r6, r1
 801aeae:	4614      	mov	r4, r2
 801aeb0:	4605      	mov	r5, r0
 801aeb2:	b118      	cbz	r0, 801aebc <__swbuf_r+0x12>
 801aeb4:	6a03      	ldr	r3, [r0, #32]
 801aeb6:	b90b      	cbnz	r3, 801aebc <__swbuf_r+0x12>
 801aeb8:	f7ff febe 	bl	801ac38 <__sinit>
 801aebc:	69a3      	ldr	r3, [r4, #24]
 801aebe:	60a3      	str	r3, [r4, #8]
 801aec0:	89a3      	ldrh	r3, [r4, #12]
 801aec2:	071a      	lsls	r2, r3, #28
 801aec4:	d501      	bpl.n	801aeca <__swbuf_r+0x20>
 801aec6:	6923      	ldr	r3, [r4, #16]
 801aec8:	b943      	cbnz	r3, 801aedc <__swbuf_r+0x32>
 801aeca:	4621      	mov	r1, r4
 801aecc:	4628      	mov	r0, r5
 801aece:	f000 f82b 	bl	801af28 <__swsetup_r>
 801aed2:	b118      	cbz	r0, 801aedc <__swbuf_r+0x32>
 801aed4:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801aed8:	4638      	mov	r0, r7
 801aeda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aedc:	6823      	ldr	r3, [r4, #0]
 801aede:	6922      	ldr	r2, [r4, #16]
 801aee0:	1a98      	subs	r0, r3, r2
 801aee2:	6963      	ldr	r3, [r4, #20]
 801aee4:	b2f6      	uxtb	r6, r6
 801aee6:	4283      	cmp	r3, r0
 801aee8:	4637      	mov	r7, r6
 801aeea:	dc05      	bgt.n	801aef8 <__swbuf_r+0x4e>
 801aeec:	4621      	mov	r1, r4
 801aeee:	4628      	mov	r0, r5
 801aef0:	f002 ff44 	bl	801dd7c <_fflush_r>
 801aef4:	2800      	cmp	r0, #0
 801aef6:	d1ed      	bne.n	801aed4 <__swbuf_r+0x2a>
 801aef8:	68a3      	ldr	r3, [r4, #8]
 801aefa:	3b01      	subs	r3, #1
 801aefc:	60a3      	str	r3, [r4, #8]
 801aefe:	6823      	ldr	r3, [r4, #0]
 801af00:	1c5a      	adds	r2, r3, #1
 801af02:	6022      	str	r2, [r4, #0]
 801af04:	701e      	strb	r6, [r3, #0]
 801af06:	6962      	ldr	r2, [r4, #20]
 801af08:	1c43      	adds	r3, r0, #1
 801af0a:	429a      	cmp	r2, r3
 801af0c:	d004      	beq.n	801af18 <__swbuf_r+0x6e>
 801af0e:	89a3      	ldrh	r3, [r4, #12]
 801af10:	07db      	lsls	r3, r3, #31
 801af12:	d5e1      	bpl.n	801aed8 <__swbuf_r+0x2e>
 801af14:	2e0a      	cmp	r6, #10
 801af16:	d1df      	bne.n	801aed8 <__swbuf_r+0x2e>
 801af18:	4621      	mov	r1, r4
 801af1a:	4628      	mov	r0, r5
 801af1c:	f002 ff2e 	bl	801dd7c <_fflush_r>
 801af20:	2800      	cmp	r0, #0
 801af22:	d0d9      	beq.n	801aed8 <__swbuf_r+0x2e>
 801af24:	e7d6      	b.n	801aed4 <__swbuf_r+0x2a>
	...

0801af28 <__swsetup_r>:
 801af28:	b538      	push	{r3, r4, r5, lr}
 801af2a:	4b29      	ldr	r3, [pc, #164]	@ (801afd0 <__swsetup_r+0xa8>)
 801af2c:	4605      	mov	r5, r0
 801af2e:	6818      	ldr	r0, [r3, #0]
 801af30:	460c      	mov	r4, r1
 801af32:	b118      	cbz	r0, 801af3c <__swsetup_r+0x14>
 801af34:	6a03      	ldr	r3, [r0, #32]
 801af36:	b90b      	cbnz	r3, 801af3c <__swsetup_r+0x14>
 801af38:	f7ff fe7e 	bl	801ac38 <__sinit>
 801af3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801af40:	0719      	lsls	r1, r3, #28
 801af42:	d422      	bmi.n	801af8a <__swsetup_r+0x62>
 801af44:	06da      	lsls	r2, r3, #27
 801af46:	d407      	bmi.n	801af58 <__swsetup_r+0x30>
 801af48:	2209      	movs	r2, #9
 801af4a:	602a      	str	r2, [r5, #0]
 801af4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801af50:	81a3      	strh	r3, [r4, #12]
 801af52:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801af56:	e033      	b.n	801afc0 <__swsetup_r+0x98>
 801af58:	0758      	lsls	r0, r3, #29
 801af5a:	d512      	bpl.n	801af82 <__swsetup_r+0x5a>
 801af5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801af5e:	b141      	cbz	r1, 801af72 <__swsetup_r+0x4a>
 801af60:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801af64:	4299      	cmp	r1, r3
 801af66:	d002      	beq.n	801af6e <__swsetup_r+0x46>
 801af68:	4628      	mov	r0, r5
 801af6a:	f000 ff4f 	bl	801be0c <_free_r>
 801af6e:	2300      	movs	r3, #0
 801af70:	6363      	str	r3, [r4, #52]	@ 0x34
 801af72:	89a3      	ldrh	r3, [r4, #12]
 801af74:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801af78:	81a3      	strh	r3, [r4, #12]
 801af7a:	2300      	movs	r3, #0
 801af7c:	6063      	str	r3, [r4, #4]
 801af7e:	6923      	ldr	r3, [r4, #16]
 801af80:	6023      	str	r3, [r4, #0]
 801af82:	89a3      	ldrh	r3, [r4, #12]
 801af84:	f043 0308 	orr.w	r3, r3, #8
 801af88:	81a3      	strh	r3, [r4, #12]
 801af8a:	6923      	ldr	r3, [r4, #16]
 801af8c:	b94b      	cbnz	r3, 801afa2 <__swsetup_r+0x7a>
 801af8e:	89a3      	ldrh	r3, [r4, #12]
 801af90:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801af94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801af98:	d003      	beq.n	801afa2 <__swsetup_r+0x7a>
 801af9a:	4621      	mov	r1, r4
 801af9c:	4628      	mov	r0, r5
 801af9e:	f002 ff3b 	bl	801de18 <__smakebuf_r>
 801afa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801afa6:	f013 0201 	ands.w	r2, r3, #1
 801afaa:	d00a      	beq.n	801afc2 <__swsetup_r+0x9a>
 801afac:	2200      	movs	r2, #0
 801afae:	60a2      	str	r2, [r4, #8]
 801afb0:	6962      	ldr	r2, [r4, #20]
 801afb2:	4252      	negs	r2, r2
 801afb4:	61a2      	str	r2, [r4, #24]
 801afb6:	6922      	ldr	r2, [r4, #16]
 801afb8:	b942      	cbnz	r2, 801afcc <__swsetup_r+0xa4>
 801afba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801afbe:	d1c5      	bne.n	801af4c <__swsetup_r+0x24>
 801afc0:	bd38      	pop	{r3, r4, r5, pc}
 801afc2:	0799      	lsls	r1, r3, #30
 801afc4:	bf58      	it	pl
 801afc6:	6962      	ldrpl	r2, [r4, #20]
 801afc8:	60a2      	str	r2, [r4, #8]
 801afca:	e7f4      	b.n	801afb6 <__swsetup_r+0x8e>
 801afcc:	2000      	movs	r0, #0
 801afce:	e7f7      	b.n	801afc0 <__swsetup_r+0x98>
 801afd0:	240001a4 	.word	0x240001a4

0801afd4 <memmove>:
 801afd4:	4288      	cmp	r0, r1
 801afd6:	b510      	push	{r4, lr}
 801afd8:	eb01 0402 	add.w	r4, r1, r2
 801afdc:	d902      	bls.n	801afe4 <memmove+0x10>
 801afde:	4284      	cmp	r4, r0
 801afe0:	4623      	mov	r3, r4
 801afe2:	d807      	bhi.n	801aff4 <memmove+0x20>
 801afe4:	1e43      	subs	r3, r0, #1
 801afe6:	42a1      	cmp	r1, r4
 801afe8:	d008      	beq.n	801affc <memmove+0x28>
 801afea:	f811 2b01 	ldrb.w	r2, [r1], #1
 801afee:	f803 2f01 	strb.w	r2, [r3, #1]!
 801aff2:	e7f8      	b.n	801afe6 <memmove+0x12>
 801aff4:	4402      	add	r2, r0
 801aff6:	4601      	mov	r1, r0
 801aff8:	428a      	cmp	r2, r1
 801affa:	d100      	bne.n	801affe <memmove+0x2a>
 801affc:	bd10      	pop	{r4, pc}
 801affe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b002:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b006:	e7f7      	b.n	801aff8 <memmove+0x24>

0801b008 <memset>:
 801b008:	4402      	add	r2, r0
 801b00a:	4603      	mov	r3, r0
 801b00c:	4293      	cmp	r3, r2
 801b00e:	d100      	bne.n	801b012 <memset+0xa>
 801b010:	4770      	bx	lr
 801b012:	f803 1b01 	strb.w	r1, [r3], #1
 801b016:	e7f9      	b.n	801b00c <memset+0x4>

0801b018 <strchr>:
 801b018:	b2c9      	uxtb	r1, r1
 801b01a:	4603      	mov	r3, r0
 801b01c:	4618      	mov	r0, r3
 801b01e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b022:	b112      	cbz	r2, 801b02a <strchr+0x12>
 801b024:	428a      	cmp	r2, r1
 801b026:	d1f9      	bne.n	801b01c <strchr+0x4>
 801b028:	4770      	bx	lr
 801b02a:	2900      	cmp	r1, #0
 801b02c:	bf18      	it	ne
 801b02e:	2000      	movne	r0, #0
 801b030:	4770      	bx	lr

0801b032 <strncmp>:
 801b032:	b510      	push	{r4, lr}
 801b034:	b16a      	cbz	r2, 801b052 <strncmp+0x20>
 801b036:	3901      	subs	r1, #1
 801b038:	1884      	adds	r4, r0, r2
 801b03a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b03e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801b042:	429a      	cmp	r2, r3
 801b044:	d103      	bne.n	801b04e <strncmp+0x1c>
 801b046:	42a0      	cmp	r0, r4
 801b048:	d001      	beq.n	801b04e <strncmp+0x1c>
 801b04a:	2a00      	cmp	r2, #0
 801b04c:	d1f5      	bne.n	801b03a <strncmp+0x8>
 801b04e:	1ad0      	subs	r0, r2, r3
 801b050:	bd10      	pop	{r4, pc}
 801b052:	4610      	mov	r0, r2
 801b054:	e7fc      	b.n	801b050 <strncmp+0x1e>
	...

0801b058 <_localeconv_r>:
 801b058:	4800      	ldr	r0, [pc, #0]	@ (801b05c <_localeconv_r+0x4>)
 801b05a:	4770      	bx	lr
 801b05c:	24000128 	.word	0x24000128

0801b060 <_close_r>:
 801b060:	b538      	push	{r3, r4, r5, lr}
 801b062:	4d06      	ldr	r5, [pc, #24]	@ (801b07c <_close_r+0x1c>)
 801b064:	2300      	movs	r3, #0
 801b066:	4604      	mov	r4, r0
 801b068:	4608      	mov	r0, r1
 801b06a:	602b      	str	r3, [r5, #0]
 801b06c:	f7ea fc2c 	bl	80058c8 <_close>
 801b070:	1c43      	adds	r3, r0, #1
 801b072:	d102      	bne.n	801b07a <_close_r+0x1a>
 801b074:	682b      	ldr	r3, [r5, #0]
 801b076:	b103      	cbz	r3, 801b07a <_close_r+0x1a>
 801b078:	6023      	str	r3, [r4, #0]
 801b07a:	bd38      	pop	{r3, r4, r5, pc}
 801b07c:	24005cf8 	.word	0x24005cf8

0801b080 <_reclaim_reent>:
 801b080:	4b2d      	ldr	r3, [pc, #180]	@ (801b138 <_reclaim_reent+0xb8>)
 801b082:	681b      	ldr	r3, [r3, #0]
 801b084:	4283      	cmp	r3, r0
 801b086:	b570      	push	{r4, r5, r6, lr}
 801b088:	4604      	mov	r4, r0
 801b08a:	d053      	beq.n	801b134 <_reclaim_reent+0xb4>
 801b08c:	69c3      	ldr	r3, [r0, #28]
 801b08e:	b31b      	cbz	r3, 801b0d8 <_reclaim_reent+0x58>
 801b090:	68db      	ldr	r3, [r3, #12]
 801b092:	b163      	cbz	r3, 801b0ae <_reclaim_reent+0x2e>
 801b094:	2500      	movs	r5, #0
 801b096:	69e3      	ldr	r3, [r4, #28]
 801b098:	68db      	ldr	r3, [r3, #12]
 801b09a:	5959      	ldr	r1, [r3, r5]
 801b09c:	b9b1      	cbnz	r1, 801b0cc <_reclaim_reent+0x4c>
 801b09e:	3504      	adds	r5, #4
 801b0a0:	2d80      	cmp	r5, #128	@ 0x80
 801b0a2:	d1f8      	bne.n	801b096 <_reclaim_reent+0x16>
 801b0a4:	69e3      	ldr	r3, [r4, #28]
 801b0a6:	4620      	mov	r0, r4
 801b0a8:	68d9      	ldr	r1, [r3, #12]
 801b0aa:	f000 feaf 	bl	801be0c <_free_r>
 801b0ae:	69e3      	ldr	r3, [r4, #28]
 801b0b0:	6819      	ldr	r1, [r3, #0]
 801b0b2:	b111      	cbz	r1, 801b0ba <_reclaim_reent+0x3a>
 801b0b4:	4620      	mov	r0, r4
 801b0b6:	f000 fea9 	bl	801be0c <_free_r>
 801b0ba:	69e3      	ldr	r3, [r4, #28]
 801b0bc:	689d      	ldr	r5, [r3, #8]
 801b0be:	b15d      	cbz	r5, 801b0d8 <_reclaim_reent+0x58>
 801b0c0:	4629      	mov	r1, r5
 801b0c2:	4620      	mov	r0, r4
 801b0c4:	682d      	ldr	r5, [r5, #0]
 801b0c6:	f000 fea1 	bl	801be0c <_free_r>
 801b0ca:	e7f8      	b.n	801b0be <_reclaim_reent+0x3e>
 801b0cc:	680e      	ldr	r6, [r1, #0]
 801b0ce:	4620      	mov	r0, r4
 801b0d0:	f000 fe9c 	bl	801be0c <_free_r>
 801b0d4:	4631      	mov	r1, r6
 801b0d6:	e7e1      	b.n	801b09c <_reclaim_reent+0x1c>
 801b0d8:	6961      	ldr	r1, [r4, #20]
 801b0da:	b111      	cbz	r1, 801b0e2 <_reclaim_reent+0x62>
 801b0dc:	4620      	mov	r0, r4
 801b0de:	f000 fe95 	bl	801be0c <_free_r>
 801b0e2:	69e1      	ldr	r1, [r4, #28]
 801b0e4:	b111      	cbz	r1, 801b0ec <_reclaim_reent+0x6c>
 801b0e6:	4620      	mov	r0, r4
 801b0e8:	f000 fe90 	bl	801be0c <_free_r>
 801b0ec:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801b0ee:	b111      	cbz	r1, 801b0f6 <_reclaim_reent+0x76>
 801b0f0:	4620      	mov	r0, r4
 801b0f2:	f000 fe8b 	bl	801be0c <_free_r>
 801b0f6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801b0f8:	b111      	cbz	r1, 801b100 <_reclaim_reent+0x80>
 801b0fa:	4620      	mov	r0, r4
 801b0fc:	f000 fe86 	bl	801be0c <_free_r>
 801b100:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801b102:	b111      	cbz	r1, 801b10a <_reclaim_reent+0x8a>
 801b104:	4620      	mov	r0, r4
 801b106:	f000 fe81 	bl	801be0c <_free_r>
 801b10a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801b10c:	b111      	cbz	r1, 801b114 <_reclaim_reent+0x94>
 801b10e:	4620      	mov	r0, r4
 801b110:	f000 fe7c 	bl	801be0c <_free_r>
 801b114:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801b116:	b111      	cbz	r1, 801b11e <_reclaim_reent+0x9e>
 801b118:	4620      	mov	r0, r4
 801b11a:	f000 fe77 	bl	801be0c <_free_r>
 801b11e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801b120:	b111      	cbz	r1, 801b128 <_reclaim_reent+0xa8>
 801b122:	4620      	mov	r0, r4
 801b124:	f000 fe72 	bl	801be0c <_free_r>
 801b128:	6a23      	ldr	r3, [r4, #32]
 801b12a:	b11b      	cbz	r3, 801b134 <_reclaim_reent+0xb4>
 801b12c:	4620      	mov	r0, r4
 801b12e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b132:	4718      	bx	r3
 801b134:	bd70      	pop	{r4, r5, r6, pc}
 801b136:	bf00      	nop
 801b138:	240001a4 	.word	0x240001a4

0801b13c <_lseek_r>:
 801b13c:	b538      	push	{r3, r4, r5, lr}
 801b13e:	4d07      	ldr	r5, [pc, #28]	@ (801b15c <_lseek_r+0x20>)
 801b140:	4604      	mov	r4, r0
 801b142:	4608      	mov	r0, r1
 801b144:	4611      	mov	r1, r2
 801b146:	2200      	movs	r2, #0
 801b148:	602a      	str	r2, [r5, #0]
 801b14a:	461a      	mov	r2, r3
 801b14c:	f7ea fbe3 	bl	8005916 <_lseek>
 801b150:	1c43      	adds	r3, r0, #1
 801b152:	d102      	bne.n	801b15a <_lseek_r+0x1e>
 801b154:	682b      	ldr	r3, [r5, #0]
 801b156:	b103      	cbz	r3, 801b15a <_lseek_r+0x1e>
 801b158:	6023      	str	r3, [r4, #0]
 801b15a:	bd38      	pop	{r3, r4, r5, pc}
 801b15c:	24005cf8 	.word	0x24005cf8

0801b160 <_read_r>:
 801b160:	b538      	push	{r3, r4, r5, lr}
 801b162:	4d07      	ldr	r5, [pc, #28]	@ (801b180 <_read_r+0x20>)
 801b164:	4604      	mov	r4, r0
 801b166:	4608      	mov	r0, r1
 801b168:	4611      	mov	r1, r2
 801b16a:	2200      	movs	r2, #0
 801b16c:	602a      	str	r2, [r5, #0]
 801b16e:	461a      	mov	r2, r3
 801b170:	f7ea fb8d 	bl	800588e <_read>
 801b174:	1c43      	adds	r3, r0, #1
 801b176:	d102      	bne.n	801b17e <_read_r+0x1e>
 801b178:	682b      	ldr	r3, [r5, #0]
 801b17a:	b103      	cbz	r3, 801b17e <_read_r+0x1e>
 801b17c:	6023      	str	r3, [r4, #0]
 801b17e:	bd38      	pop	{r3, r4, r5, pc}
 801b180:	24005cf8 	.word	0x24005cf8

0801b184 <_write_r>:
 801b184:	b538      	push	{r3, r4, r5, lr}
 801b186:	4d07      	ldr	r5, [pc, #28]	@ (801b1a4 <_write_r+0x20>)
 801b188:	4604      	mov	r4, r0
 801b18a:	4608      	mov	r0, r1
 801b18c:	4611      	mov	r1, r2
 801b18e:	2200      	movs	r2, #0
 801b190:	602a      	str	r2, [r5, #0]
 801b192:	461a      	mov	r2, r3
 801b194:	f7e8 ff2e 	bl	8003ff4 <_write>
 801b198:	1c43      	adds	r3, r0, #1
 801b19a:	d102      	bne.n	801b1a2 <_write_r+0x1e>
 801b19c:	682b      	ldr	r3, [r5, #0]
 801b19e:	b103      	cbz	r3, 801b1a2 <_write_r+0x1e>
 801b1a0:	6023      	str	r3, [r4, #0]
 801b1a2:	bd38      	pop	{r3, r4, r5, pc}
 801b1a4:	24005cf8 	.word	0x24005cf8

0801b1a8 <__errno>:
 801b1a8:	4b01      	ldr	r3, [pc, #4]	@ (801b1b0 <__errno+0x8>)
 801b1aa:	6818      	ldr	r0, [r3, #0]
 801b1ac:	4770      	bx	lr
 801b1ae:	bf00      	nop
 801b1b0:	240001a4 	.word	0x240001a4

0801b1b4 <__libc_init_array>:
 801b1b4:	b570      	push	{r4, r5, r6, lr}
 801b1b6:	4d0d      	ldr	r5, [pc, #52]	@ (801b1ec <__libc_init_array+0x38>)
 801b1b8:	4c0d      	ldr	r4, [pc, #52]	@ (801b1f0 <__libc_init_array+0x3c>)
 801b1ba:	1b64      	subs	r4, r4, r5
 801b1bc:	10a4      	asrs	r4, r4, #2
 801b1be:	2600      	movs	r6, #0
 801b1c0:	42a6      	cmp	r6, r4
 801b1c2:	d109      	bne.n	801b1d8 <__libc_init_array+0x24>
 801b1c4:	4d0b      	ldr	r5, [pc, #44]	@ (801b1f4 <__libc_init_array+0x40>)
 801b1c6:	4c0c      	ldr	r4, [pc, #48]	@ (801b1f8 <__libc_init_array+0x44>)
 801b1c8:	f003 f83e 	bl	801e248 <_init>
 801b1cc:	1b64      	subs	r4, r4, r5
 801b1ce:	10a4      	asrs	r4, r4, #2
 801b1d0:	2600      	movs	r6, #0
 801b1d2:	42a6      	cmp	r6, r4
 801b1d4:	d105      	bne.n	801b1e2 <__libc_init_array+0x2e>
 801b1d6:	bd70      	pop	{r4, r5, r6, pc}
 801b1d8:	f855 3b04 	ldr.w	r3, [r5], #4
 801b1dc:	4798      	blx	r3
 801b1de:	3601      	adds	r6, #1
 801b1e0:	e7ee      	b.n	801b1c0 <__libc_init_array+0xc>
 801b1e2:	f855 3b04 	ldr.w	r3, [r5], #4
 801b1e6:	4798      	blx	r3
 801b1e8:	3601      	adds	r6, #1
 801b1ea:	e7f2      	b.n	801b1d2 <__libc_init_array+0x1e>
 801b1ec:	0801fe64 	.word	0x0801fe64
 801b1f0:	0801fe64 	.word	0x0801fe64
 801b1f4:	0801fe64 	.word	0x0801fe64
 801b1f8:	0801fe68 	.word	0x0801fe68

0801b1fc <__retarget_lock_init_recursive>:
 801b1fc:	4770      	bx	lr

0801b1fe <__retarget_lock_acquire_recursive>:
 801b1fe:	4770      	bx	lr

0801b200 <__retarget_lock_release_recursive>:
 801b200:	4770      	bx	lr

0801b202 <memcpy>:
 801b202:	440a      	add	r2, r1
 801b204:	4291      	cmp	r1, r2
 801b206:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801b20a:	d100      	bne.n	801b20e <memcpy+0xc>
 801b20c:	4770      	bx	lr
 801b20e:	b510      	push	{r4, lr}
 801b210:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b214:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b218:	4291      	cmp	r1, r2
 801b21a:	d1f9      	bne.n	801b210 <memcpy+0xe>
 801b21c:	bd10      	pop	{r4, pc}
	...

0801b220 <nan>:
 801b220:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801b228 <nan+0x8>
 801b224:	4770      	bx	lr
 801b226:	bf00      	nop
 801b228:	00000000 	.word	0x00000000
 801b22c:	7ff80000 	.word	0x7ff80000

0801b230 <nanf>:
 801b230:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801b238 <nanf+0x8>
 801b234:	4770      	bx	lr
 801b236:	bf00      	nop
 801b238:	7fc00000 	.word	0x7fc00000

0801b23c <quorem>:
 801b23c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b240:	6903      	ldr	r3, [r0, #16]
 801b242:	690c      	ldr	r4, [r1, #16]
 801b244:	42a3      	cmp	r3, r4
 801b246:	4607      	mov	r7, r0
 801b248:	db7e      	blt.n	801b348 <quorem+0x10c>
 801b24a:	3c01      	subs	r4, #1
 801b24c:	f101 0814 	add.w	r8, r1, #20
 801b250:	00a3      	lsls	r3, r4, #2
 801b252:	f100 0514 	add.w	r5, r0, #20
 801b256:	9300      	str	r3, [sp, #0]
 801b258:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b25c:	9301      	str	r3, [sp, #4]
 801b25e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801b262:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b266:	3301      	adds	r3, #1
 801b268:	429a      	cmp	r2, r3
 801b26a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801b26e:	fbb2 f6f3 	udiv	r6, r2, r3
 801b272:	d32e      	bcc.n	801b2d2 <quorem+0x96>
 801b274:	f04f 0a00 	mov.w	sl, #0
 801b278:	46c4      	mov	ip, r8
 801b27a:	46ae      	mov	lr, r5
 801b27c:	46d3      	mov	fp, sl
 801b27e:	f85c 3b04 	ldr.w	r3, [ip], #4
 801b282:	b298      	uxth	r0, r3
 801b284:	fb06 a000 	mla	r0, r6, r0, sl
 801b288:	0c02      	lsrs	r2, r0, #16
 801b28a:	0c1b      	lsrs	r3, r3, #16
 801b28c:	fb06 2303 	mla	r3, r6, r3, r2
 801b290:	f8de 2000 	ldr.w	r2, [lr]
 801b294:	b280      	uxth	r0, r0
 801b296:	b292      	uxth	r2, r2
 801b298:	1a12      	subs	r2, r2, r0
 801b29a:	445a      	add	r2, fp
 801b29c:	f8de 0000 	ldr.w	r0, [lr]
 801b2a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801b2a4:	b29b      	uxth	r3, r3
 801b2a6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801b2aa:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801b2ae:	b292      	uxth	r2, r2
 801b2b0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801b2b4:	45e1      	cmp	r9, ip
 801b2b6:	f84e 2b04 	str.w	r2, [lr], #4
 801b2ba:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801b2be:	d2de      	bcs.n	801b27e <quorem+0x42>
 801b2c0:	9b00      	ldr	r3, [sp, #0]
 801b2c2:	58eb      	ldr	r3, [r5, r3]
 801b2c4:	b92b      	cbnz	r3, 801b2d2 <quorem+0x96>
 801b2c6:	9b01      	ldr	r3, [sp, #4]
 801b2c8:	3b04      	subs	r3, #4
 801b2ca:	429d      	cmp	r5, r3
 801b2cc:	461a      	mov	r2, r3
 801b2ce:	d32f      	bcc.n	801b330 <quorem+0xf4>
 801b2d0:	613c      	str	r4, [r7, #16]
 801b2d2:	4638      	mov	r0, r7
 801b2d4:	f001 fca2 	bl	801cc1c <__mcmp>
 801b2d8:	2800      	cmp	r0, #0
 801b2da:	db25      	blt.n	801b328 <quorem+0xec>
 801b2dc:	4629      	mov	r1, r5
 801b2de:	2000      	movs	r0, #0
 801b2e0:	f858 2b04 	ldr.w	r2, [r8], #4
 801b2e4:	f8d1 c000 	ldr.w	ip, [r1]
 801b2e8:	fa1f fe82 	uxth.w	lr, r2
 801b2ec:	fa1f f38c 	uxth.w	r3, ip
 801b2f0:	eba3 030e 	sub.w	r3, r3, lr
 801b2f4:	4403      	add	r3, r0
 801b2f6:	0c12      	lsrs	r2, r2, #16
 801b2f8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801b2fc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801b300:	b29b      	uxth	r3, r3
 801b302:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b306:	45c1      	cmp	r9, r8
 801b308:	f841 3b04 	str.w	r3, [r1], #4
 801b30c:	ea4f 4022 	mov.w	r0, r2, asr #16
 801b310:	d2e6      	bcs.n	801b2e0 <quorem+0xa4>
 801b312:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b316:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b31a:	b922      	cbnz	r2, 801b326 <quorem+0xea>
 801b31c:	3b04      	subs	r3, #4
 801b31e:	429d      	cmp	r5, r3
 801b320:	461a      	mov	r2, r3
 801b322:	d30b      	bcc.n	801b33c <quorem+0x100>
 801b324:	613c      	str	r4, [r7, #16]
 801b326:	3601      	adds	r6, #1
 801b328:	4630      	mov	r0, r6
 801b32a:	b003      	add	sp, #12
 801b32c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b330:	6812      	ldr	r2, [r2, #0]
 801b332:	3b04      	subs	r3, #4
 801b334:	2a00      	cmp	r2, #0
 801b336:	d1cb      	bne.n	801b2d0 <quorem+0x94>
 801b338:	3c01      	subs	r4, #1
 801b33a:	e7c6      	b.n	801b2ca <quorem+0x8e>
 801b33c:	6812      	ldr	r2, [r2, #0]
 801b33e:	3b04      	subs	r3, #4
 801b340:	2a00      	cmp	r2, #0
 801b342:	d1ef      	bne.n	801b324 <quorem+0xe8>
 801b344:	3c01      	subs	r4, #1
 801b346:	e7ea      	b.n	801b31e <quorem+0xe2>
 801b348:	2000      	movs	r0, #0
 801b34a:	e7ee      	b.n	801b32a <quorem+0xee>
 801b34c:	0000      	movs	r0, r0
	...

0801b350 <_dtoa_r>:
 801b350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b354:	ed2d 8b02 	vpush	{d8}
 801b358:	69c7      	ldr	r7, [r0, #28]
 801b35a:	b091      	sub	sp, #68	@ 0x44
 801b35c:	ed8d 0b02 	vstr	d0, [sp, #8]
 801b360:	ec55 4b10 	vmov	r4, r5, d0
 801b364:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 801b366:	9107      	str	r1, [sp, #28]
 801b368:	4681      	mov	r9, r0
 801b36a:	9209      	str	r2, [sp, #36]	@ 0x24
 801b36c:	930d      	str	r3, [sp, #52]	@ 0x34
 801b36e:	b97f      	cbnz	r7, 801b390 <_dtoa_r+0x40>
 801b370:	2010      	movs	r0, #16
 801b372:	f001 f8cf 	bl	801c514 <malloc>
 801b376:	4602      	mov	r2, r0
 801b378:	f8c9 001c 	str.w	r0, [r9, #28]
 801b37c:	b920      	cbnz	r0, 801b388 <_dtoa_r+0x38>
 801b37e:	4ba0      	ldr	r3, [pc, #640]	@ (801b600 <_dtoa_r+0x2b0>)
 801b380:	21ef      	movs	r1, #239	@ 0xef
 801b382:	48a0      	ldr	r0, [pc, #640]	@ (801b604 <_dtoa_r+0x2b4>)
 801b384:	f002 fe2a 	bl	801dfdc <__assert_func>
 801b388:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801b38c:	6007      	str	r7, [r0, #0]
 801b38e:	60c7      	str	r7, [r0, #12]
 801b390:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801b394:	6819      	ldr	r1, [r3, #0]
 801b396:	b159      	cbz	r1, 801b3b0 <_dtoa_r+0x60>
 801b398:	685a      	ldr	r2, [r3, #4]
 801b39a:	604a      	str	r2, [r1, #4]
 801b39c:	2301      	movs	r3, #1
 801b39e:	4093      	lsls	r3, r2
 801b3a0:	608b      	str	r3, [r1, #8]
 801b3a2:	4648      	mov	r0, r9
 801b3a4:	f001 f9be 	bl	801c724 <_Bfree>
 801b3a8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801b3ac:	2200      	movs	r2, #0
 801b3ae:	601a      	str	r2, [r3, #0]
 801b3b0:	1e2b      	subs	r3, r5, #0
 801b3b2:	bfbb      	ittet	lt
 801b3b4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801b3b8:	9303      	strlt	r3, [sp, #12]
 801b3ba:	2300      	movge	r3, #0
 801b3bc:	2201      	movlt	r2, #1
 801b3be:	bfac      	ite	ge
 801b3c0:	6033      	strge	r3, [r6, #0]
 801b3c2:	6032      	strlt	r2, [r6, #0]
 801b3c4:	4b90      	ldr	r3, [pc, #576]	@ (801b608 <_dtoa_r+0x2b8>)
 801b3c6:	9e03      	ldr	r6, [sp, #12]
 801b3c8:	43b3      	bics	r3, r6
 801b3ca:	d110      	bne.n	801b3ee <_dtoa_r+0x9e>
 801b3cc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801b3ce:	f242 730f 	movw	r3, #9999	@ 0x270f
 801b3d2:	6013      	str	r3, [r2, #0]
 801b3d4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 801b3d8:	4323      	orrs	r3, r4
 801b3da:	f000 84e6 	beq.w	801bdaa <_dtoa_r+0xa5a>
 801b3de:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801b3e0:	4f8a      	ldr	r7, [pc, #552]	@ (801b60c <_dtoa_r+0x2bc>)
 801b3e2:	2b00      	cmp	r3, #0
 801b3e4:	f000 84e8 	beq.w	801bdb8 <_dtoa_r+0xa68>
 801b3e8:	1cfb      	adds	r3, r7, #3
 801b3ea:	f000 bce3 	b.w	801bdb4 <_dtoa_r+0xa64>
 801b3ee:	ed9d 8b02 	vldr	d8, [sp, #8]
 801b3f2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801b3f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b3fa:	d10a      	bne.n	801b412 <_dtoa_r+0xc2>
 801b3fc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801b3fe:	2301      	movs	r3, #1
 801b400:	6013      	str	r3, [r2, #0]
 801b402:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801b404:	b113      	cbz	r3, 801b40c <_dtoa_r+0xbc>
 801b406:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801b408:	4b81      	ldr	r3, [pc, #516]	@ (801b610 <_dtoa_r+0x2c0>)
 801b40a:	6013      	str	r3, [r2, #0]
 801b40c:	4f81      	ldr	r7, [pc, #516]	@ (801b614 <_dtoa_r+0x2c4>)
 801b40e:	f000 bcd3 	b.w	801bdb8 <_dtoa_r+0xa68>
 801b412:	aa0e      	add	r2, sp, #56	@ 0x38
 801b414:	a90f      	add	r1, sp, #60	@ 0x3c
 801b416:	4648      	mov	r0, r9
 801b418:	eeb0 0b48 	vmov.f64	d0, d8
 801b41c:	f001 fd1e 	bl	801ce5c <__d2b>
 801b420:	f3c6 530a 	ubfx	r3, r6, #20, #11
 801b424:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b426:	9001      	str	r0, [sp, #4]
 801b428:	2b00      	cmp	r3, #0
 801b42a:	d045      	beq.n	801b4b8 <_dtoa_r+0x168>
 801b42c:	eeb0 7b48 	vmov.f64	d7, d8
 801b430:	ee18 1a90 	vmov	r1, s17
 801b434:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801b438:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 801b43c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 801b440:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801b444:	2500      	movs	r5, #0
 801b446:	ee07 1a90 	vmov	s15, r1
 801b44a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 801b44e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 801b5e8 <_dtoa_r+0x298>
 801b452:	ee37 7b46 	vsub.f64	d7, d7, d6
 801b456:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 801b5f0 <_dtoa_r+0x2a0>
 801b45a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801b45e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 801b5f8 <_dtoa_r+0x2a8>
 801b462:	ee07 3a90 	vmov	s15, r3
 801b466:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801b46a:	eeb0 7b46 	vmov.f64	d7, d6
 801b46e:	eea4 7b05 	vfma.f64	d7, d4, d5
 801b472:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801b476:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801b47a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b47e:	ee16 8a90 	vmov	r8, s13
 801b482:	d508      	bpl.n	801b496 <_dtoa_r+0x146>
 801b484:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801b488:	eeb4 6b47 	vcmp.f64	d6, d7
 801b48c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b490:	bf18      	it	ne
 801b492:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 801b496:	f1b8 0f16 	cmp.w	r8, #22
 801b49a:	d82b      	bhi.n	801b4f4 <_dtoa_r+0x1a4>
 801b49c:	495e      	ldr	r1, [pc, #376]	@ (801b618 <_dtoa_r+0x2c8>)
 801b49e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 801b4a2:	ed91 7b00 	vldr	d7, [r1]
 801b4a6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801b4aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b4ae:	d501      	bpl.n	801b4b4 <_dtoa_r+0x164>
 801b4b0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 801b4b4:	2100      	movs	r1, #0
 801b4b6:	e01e      	b.n	801b4f6 <_dtoa_r+0x1a6>
 801b4b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b4ba:	4413      	add	r3, r2
 801b4bc:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 801b4c0:	2920      	cmp	r1, #32
 801b4c2:	bfc1      	itttt	gt
 801b4c4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 801b4c8:	408e      	lslgt	r6, r1
 801b4ca:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 801b4ce:	fa24 f101 	lsrgt.w	r1, r4, r1
 801b4d2:	bfd6      	itet	le
 801b4d4:	f1c1 0120 	rsble	r1, r1, #32
 801b4d8:	4331      	orrgt	r1, r6
 801b4da:	fa04 f101 	lslle.w	r1, r4, r1
 801b4de:	ee07 1a90 	vmov	s15, r1
 801b4e2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801b4e6:	3b01      	subs	r3, #1
 801b4e8:	ee17 1a90 	vmov	r1, s15
 801b4ec:	2501      	movs	r5, #1
 801b4ee:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 801b4f2:	e7a8      	b.n	801b446 <_dtoa_r+0xf6>
 801b4f4:	2101      	movs	r1, #1
 801b4f6:	1ad2      	subs	r2, r2, r3
 801b4f8:	1e53      	subs	r3, r2, #1
 801b4fa:	9306      	str	r3, [sp, #24]
 801b4fc:	bf45      	ittet	mi
 801b4fe:	f1c2 0301 	rsbmi	r3, r2, #1
 801b502:	9304      	strmi	r3, [sp, #16]
 801b504:	2300      	movpl	r3, #0
 801b506:	2300      	movmi	r3, #0
 801b508:	bf4c      	ite	mi
 801b50a:	9306      	strmi	r3, [sp, #24]
 801b50c:	9304      	strpl	r3, [sp, #16]
 801b50e:	f1b8 0f00 	cmp.w	r8, #0
 801b512:	910c      	str	r1, [sp, #48]	@ 0x30
 801b514:	db18      	blt.n	801b548 <_dtoa_r+0x1f8>
 801b516:	9b06      	ldr	r3, [sp, #24]
 801b518:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 801b51c:	4443      	add	r3, r8
 801b51e:	9306      	str	r3, [sp, #24]
 801b520:	2300      	movs	r3, #0
 801b522:	9a07      	ldr	r2, [sp, #28]
 801b524:	2a09      	cmp	r2, #9
 801b526:	d845      	bhi.n	801b5b4 <_dtoa_r+0x264>
 801b528:	2a05      	cmp	r2, #5
 801b52a:	bfc4      	itt	gt
 801b52c:	3a04      	subgt	r2, #4
 801b52e:	9207      	strgt	r2, [sp, #28]
 801b530:	9a07      	ldr	r2, [sp, #28]
 801b532:	f1a2 0202 	sub.w	r2, r2, #2
 801b536:	bfcc      	ite	gt
 801b538:	2400      	movgt	r4, #0
 801b53a:	2401      	movle	r4, #1
 801b53c:	2a03      	cmp	r2, #3
 801b53e:	d844      	bhi.n	801b5ca <_dtoa_r+0x27a>
 801b540:	e8df f002 	tbb	[pc, r2]
 801b544:	0b173634 	.word	0x0b173634
 801b548:	9b04      	ldr	r3, [sp, #16]
 801b54a:	2200      	movs	r2, #0
 801b54c:	eba3 0308 	sub.w	r3, r3, r8
 801b550:	9304      	str	r3, [sp, #16]
 801b552:	920a      	str	r2, [sp, #40]	@ 0x28
 801b554:	f1c8 0300 	rsb	r3, r8, #0
 801b558:	e7e3      	b.n	801b522 <_dtoa_r+0x1d2>
 801b55a:	2201      	movs	r2, #1
 801b55c:	9208      	str	r2, [sp, #32]
 801b55e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b560:	eb08 0b02 	add.w	fp, r8, r2
 801b564:	f10b 0a01 	add.w	sl, fp, #1
 801b568:	4652      	mov	r2, sl
 801b56a:	2a01      	cmp	r2, #1
 801b56c:	bfb8      	it	lt
 801b56e:	2201      	movlt	r2, #1
 801b570:	e006      	b.n	801b580 <_dtoa_r+0x230>
 801b572:	2201      	movs	r2, #1
 801b574:	9208      	str	r2, [sp, #32]
 801b576:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b578:	2a00      	cmp	r2, #0
 801b57a:	dd29      	ble.n	801b5d0 <_dtoa_r+0x280>
 801b57c:	4693      	mov	fp, r2
 801b57e:	4692      	mov	sl, r2
 801b580:	f8d9 701c 	ldr.w	r7, [r9, #28]
 801b584:	2100      	movs	r1, #0
 801b586:	2004      	movs	r0, #4
 801b588:	f100 0614 	add.w	r6, r0, #20
 801b58c:	4296      	cmp	r6, r2
 801b58e:	d926      	bls.n	801b5de <_dtoa_r+0x28e>
 801b590:	6079      	str	r1, [r7, #4]
 801b592:	4648      	mov	r0, r9
 801b594:	9305      	str	r3, [sp, #20]
 801b596:	f001 f885 	bl	801c6a4 <_Balloc>
 801b59a:	9b05      	ldr	r3, [sp, #20]
 801b59c:	4607      	mov	r7, r0
 801b59e:	2800      	cmp	r0, #0
 801b5a0:	d13e      	bne.n	801b620 <_dtoa_r+0x2d0>
 801b5a2:	4b1e      	ldr	r3, [pc, #120]	@ (801b61c <_dtoa_r+0x2cc>)
 801b5a4:	4602      	mov	r2, r0
 801b5a6:	f240 11af 	movw	r1, #431	@ 0x1af
 801b5aa:	e6ea      	b.n	801b382 <_dtoa_r+0x32>
 801b5ac:	2200      	movs	r2, #0
 801b5ae:	e7e1      	b.n	801b574 <_dtoa_r+0x224>
 801b5b0:	2200      	movs	r2, #0
 801b5b2:	e7d3      	b.n	801b55c <_dtoa_r+0x20c>
 801b5b4:	2401      	movs	r4, #1
 801b5b6:	2200      	movs	r2, #0
 801b5b8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801b5bc:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 801b5c0:	2100      	movs	r1, #0
 801b5c2:	46da      	mov	sl, fp
 801b5c4:	2212      	movs	r2, #18
 801b5c6:	9109      	str	r1, [sp, #36]	@ 0x24
 801b5c8:	e7da      	b.n	801b580 <_dtoa_r+0x230>
 801b5ca:	2201      	movs	r2, #1
 801b5cc:	9208      	str	r2, [sp, #32]
 801b5ce:	e7f5      	b.n	801b5bc <_dtoa_r+0x26c>
 801b5d0:	f04f 0b01 	mov.w	fp, #1
 801b5d4:	46da      	mov	sl, fp
 801b5d6:	465a      	mov	r2, fp
 801b5d8:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 801b5dc:	e7d0      	b.n	801b580 <_dtoa_r+0x230>
 801b5de:	3101      	adds	r1, #1
 801b5e0:	0040      	lsls	r0, r0, #1
 801b5e2:	e7d1      	b.n	801b588 <_dtoa_r+0x238>
 801b5e4:	f3af 8000 	nop.w
 801b5e8:	636f4361 	.word	0x636f4361
 801b5ec:	3fd287a7 	.word	0x3fd287a7
 801b5f0:	8b60c8b3 	.word	0x8b60c8b3
 801b5f4:	3fc68a28 	.word	0x3fc68a28
 801b5f8:	509f79fb 	.word	0x509f79fb
 801b5fc:	3fd34413 	.word	0x3fd34413
 801b600:	0801fa62 	.word	0x0801fa62
 801b604:	0801fa79 	.word	0x0801fa79
 801b608:	7ff00000 	.word	0x7ff00000
 801b60c:	0801fa5e 	.word	0x0801fa5e
 801b610:	0801fbc3 	.word	0x0801fbc3
 801b614:	0801fbc2 	.word	0x0801fbc2
 801b618:	0801fc90 	.word	0x0801fc90
 801b61c:	0801fad1 	.word	0x0801fad1
 801b620:	f8d9 201c 	ldr.w	r2, [r9, #28]
 801b624:	f1ba 0f0e 	cmp.w	sl, #14
 801b628:	6010      	str	r0, [r2, #0]
 801b62a:	d86e      	bhi.n	801b70a <_dtoa_r+0x3ba>
 801b62c:	2c00      	cmp	r4, #0
 801b62e:	d06c      	beq.n	801b70a <_dtoa_r+0x3ba>
 801b630:	f1b8 0f00 	cmp.w	r8, #0
 801b634:	f340 80b4 	ble.w	801b7a0 <_dtoa_r+0x450>
 801b638:	4ac8      	ldr	r2, [pc, #800]	@ (801b95c <_dtoa_r+0x60c>)
 801b63a:	f008 010f 	and.w	r1, r8, #15
 801b63e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801b642:	f418 7f80 	tst.w	r8, #256	@ 0x100
 801b646:	ed92 7b00 	vldr	d7, [r2]
 801b64a:	ea4f 1128 	mov.w	r1, r8, asr #4
 801b64e:	f000 809b 	beq.w	801b788 <_dtoa_r+0x438>
 801b652:	4ac3      	ldr	r2, [pc, #780]	@ (801b960 <_dtoa_r+0x610>)
 801b654:	ed92 6b08 	vldr	d6, [r2, #32]
 801b658:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801b65c:	ed8d 6b02 	vstr	d6, [sp, #8]
 801b660:	f001 010f 	and.w	r1, r1, #15
 801b664:	2203      	movs	r2, #3
 801b666:	48be      	ldr	r0, [pc, #760]	@ (801b960 <_dtoa_r+0x610>)
 801b668:	2900      	cmp	r1, #0
 801b66a:	f040 808f 	bne.w	801b78c <_dtoa_r+0x43c>
 801b66e:	ed9d 6b02 	vldr	d6, [sp, #8]
 801b672:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801b676:	ed8d 7b02 	vstr	d7, [sp, #8]
 801b67a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801b67c:	ed9d 7b02 	vldr	d7, [sp, #8]
 801b680:	2900      	cmp	r1, #0
 801b682:	f000 80b3 	beq.w	801b7ec <_dtoa_r+0x49c>
 801b686:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801b68a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801b68e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b692:	f140 80ab 	bpl.w	801b7ec <_dtoa_r+0x49c>
 801b696:	f1ba 0f00 	cmp.w	sl, #0
 801b69a:	f000 80a7 	beq.w	801b7ec <_dtoa_r+0x49c>
 801b69e:	f1bb 0f00 	cmp.w	fp, #0
 801b6a2:	dd30      	ble.n	801b706 <_dtoa_r+0x3b6>
 801b6a4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 801b6a8:	ee27 7b06 	vmul.f64	d7, d7, d6
 801b6ac:	ed8d 7b02 	vstr	d7, [sp, #8]
 801b6b0:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 801b6b4:	9105      	str	r1, [sp, #20]
 801b6b6:	3201      	adds	r2, #1
 801b6b8:	465c      	mov	r4, fp
 801b6ba:	ed9d 6b02 	vldr	d6, [sp, #8]
 801b6be:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 801b6c2:	ee07 2a90 	vmov	s15, r2
 801b6c6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801b6ca:	eea7 5b06 	vfma.f64	d5, d7, d6
 801b6ce:	ee15 2a90 	vmov	r2, s11
 801b6d2:	ec51 0b15 	vmov	r0, r1, d5
 801b6d6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 801b6da:	2c00      	cmp	r4, #0
 801b6dc:	f040 808a 	bne.w	801b7f4 <_dtoa_r+0x4a4>
 801b6e0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801b6e4:	ee36 6b47 	vsub.f64	d6, d6, d7
 801b6e8:	ec41 0b17 	vmov	d7, r0, r1
 801b6ec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801b6f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b6f4:	f300 826a 	bgt.w	801bbcc <_dtoa_r+0x87c>
 801b6f8:	eeb1 7b47 	vneg.f64	d7, d7
 801b6fc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801b700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b704:	d423      	bmi.n	801b74e <_dtoa_r+0x3fe>
 801b706:	ed8d 8b02 	vstr	d8, [sp, #8]
 801b70a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801b70c:	2a00      	cmp	r2, #0
 801b70e:	f2c0 8129 	blt.w	801b964 <_dtoa_r+0x614>
 801b712:	f1b8 0f0e 	cmp.w	r8, #14
 801b716:	f300 8125 	bgt.w	801b964 <_dtoa_r+0x614>
 801b71a:	4b90      	ldr	r3, [pc, #576]	@ (801b95c <_dtoa_r+0x60c>)
 801b71c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801b720:	ed93 6b00 	vldr	d6, [r3]
 801b724:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b726:	2b00      	cmp	r3, #0
 801b728:	f280 80c8 	bge.w	801b8bc <_dtoa_r+0x56c>
 801b72c:	f1ba 0f00 	cmp.w	sl, #0
 801b730:	f300 80c4 	bgt.w	801b8bc <_dtoa_r+0x56c>
 801b734:	d10b      	bne.n	801b74e <_dtoa_r+0x3fe>
 801b736:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801b73a:	ee26 6b07 	vmul.f64	d6, d6, d7
 801b73e:	ed9d 7b02 	vldr	d7, [sp, #8]
 801b742:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801b746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b74a:	f2c0 823c 	blt.w	801bbc6 <_dtoa_r+0x876>
 801b74e:	2400      	movs	r4, #0
 801b750:	4625      	mov	r5, r4
 801b752:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b754:	43db      	mvns	r3, r3
 801b756:	9305      	str	r3, [sp, #20]
 801b758:	463e      	mov	r6, r7
 801b75a:	f04f 0800 	mov.w	r8, #0
 801b75e:	4621      	mov	r1, r4
 801b760:	4648      	mov	r0, r9
 801b762:	f000 ffdf 	bl	801c724 <_Bfree>
 801b766:	2d00      	cmp	r5, #0
 801b768:	f000 80a2 	beq.w	801b8b0 <_dtoa_r+0x560>
 801b76c:	f1b8 0f00 	cmp.w	r8, #0
 801b770:	d005      	beq.n	801b77e <_dtoa_r+0x42e>
 801b772:	45a8      	cmp	r8, r5
 801b774:	d003      	beq.n	801b77e <_dtoa_r+0x42e>
 801b776:	4641      	mov	r1, r8
 801b778:	4648      	mov	r0, r9
 801b77a:	f000 ffd3 	bl	801c724 <_Bfree>
 801b77e:	4629      	mov	r1, r5
 801b780:	4648      	mov	r0, r9
 801b782:	f000 ffcf 	bl	801c724 <_Bfree>
 801b786:	e093      	b.n	801b8b0 <_dtoa_r+0x560>
 801b788:	2202      	movs	r2, #2
 801b78a:	e76c      	b.n	801b666 <_dtoa_r+0x316>
 801b78c:	07cc      	lsls	r4, r1, #31
 801b78e:	d504      	bpl.n	801b79a <_dtoa_r+0x44a>
 801b790:	ed90 6b00 	vldr	d6, [r0]
 801b794:	3201      	adds	r2, #1
 801b796:	ee27 7b06 	vmul.f64	d7, d7, d6
 801b79a:	1049      	asrs	r1, r1, #1
 801b79c:	3008      	adds	r0, #8
 801b79e:	e763      	b.n	801b668 <_dtoa_r+0x318>
 801b7a0:	d022      	beq.n	801b7e8 <_dtoa_r+0x498>
 801b7a2:	f1c8 0100 	rsb	r1, r8, #0
 801b7a6:	4a6d      	ldr	r2, [pc, #436]	@ (801b95c <_dtoa_r+0x60c>)
 801b7a8:	f001 000f 	and.w	r0, r1, #15
 801b7ac:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801b7b0:	ed92 7b00 	vldr	d7, [r2]
 801b7b4:	ee28 7b07 	vmul.f64	d7, d8, d7
 801b7b8:	ed8d 7b02 	vstr	d7, [sp, #8]
 801b7bc:	4868      	ldr	r0, [pc, #416]	@ (801b960 <_dtoa_r+0x610>)
 801b7be:	1109      	asrs	r1, r1, #4
 801b7c0:	2400      	movs	r4, #0
 801b7c2:	2202      	movs	r2, #2
 801b7c4:	b929      	cbnz	r1, 801b7d2 <_dtoa_r+0x482>
 801b7c6:	2c00      	cmp	r4, #0
 801b7c8:	f43f af57 	beq.w	801b67a <_dtoa_r+0x32a>
 801b7cc:	ed8d 7b02 	vstr	d7, [sp, #8]
 801b7d0:	e753      	b.n	801b67a <_dtoa_r+0x32a>
 801b7d2:	07ce      	lsls	r6, r1, #31
 801b7d4:	d505      	bpl.n	801b7e2 <_dtoa_r+0x492>
 801b7d6:	ed90 6b00 	vldr	d6, [r0]
 801b7da:	3201      	adds	r2, #1
 801b7dc:	2401      	movs	r4, #1
 801b7de:	ee27 7b06 	vmul.f64	d7, d7, d6
 801b7e2:	1049      	asrs	r1, r1, #1
 801b7e4:	3008      	adds	r0, #8
 801b7e6:	e7ed      	b.n	801b7c4 <_dtoa_r+0x474>
 801b7e8:	2202      	movs	r2, #2
 801b7ea:	e746      	b.n	801b67a <_dtoa_r+0x32a>
 801b7ec:	f8cd 8014 	str.w	r8, [sp, #20]
 801b7f0:	4654      	mov	r4, sl
 801b7f2:	e762      	b.n	801b6ba <_dtoa_r+0x36a>
 801b7f4:	4a59      	ldr	r2, [pc, #356]	@ (801b95c <_dtoa_r+0x60c>)
 801b7f6:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801b7fa:	ed12 4b02 	vldr	d4, [r2, #-8]
 801b7fe:	9a08      	ldr	r2, [sp, #32]
 801b800:	ec41 0b17 	vmov	d7, r0, r1
 801b804:	443c      	add	r4, r7
 801b806:	b34a      	cbz	r2, 801b85c <_dtoa_r+0x50c>
 801b808:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 801b80c:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 801b810:	463e      	mov	r6, r7
 801b812:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801b816:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801b81a:	ee35 7b47 	vsub.f64	d7, d5, d7
 801b81e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801b822:	ee14 2a90 	vmov	r2, s9
 801b826:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801b82a:	3230      	adds	r2, #48	@ 0x30
 801b82c:	ee36 6b45 	vsub.f64	d6, d6, d5
 801b830:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801b834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b838:	f806 2b01 	strb.w	r2, [r6], #1
 801b83c:	d438      	bmi.n	801b8b0 <_dtoa_r+0x560>
 801b83e:	ee32 5b46 	vsub.f64	d5, d2, d6
 801b842:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801b846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b84a:	d46e      	bmi.n	801b92a <_dtoa_r+0x5da>
 801b84c:	42a6      	cmp	r6, r4
 801b84e:	f43f af5a 	beq.w	801b706 <_dtoa_r+0x3b6>
 801b852:	ee27 7b03 	vmul.f64	d7, d7, d3
 801b856:	ee26 6b03 	vmul.f64	d6, d6, d3
 801b85a:	e7e0      	b.n	801b81e <_dtoa_r+0x4ce>
 801b85c:	4621      	mov	r1, r4
 801b85e:	463e      	mov	r6, r7
 801b860:	ee27 7b04 	vmul.f64	d7, d7, d4
 801b864:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801b868:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801b86c:	ee14 2a90 	vmov	r2, s9
 801b870:	3230      	adds	r2, #48	@ 0x30
 801b872:	f806 2b01 	strb.w	r2, [r6], #1
 801b876:	42a6      	cmp	r6, r4
 801b878:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801b87c:	ee36 6b45 	vsub.f64	d6, d6, d5
 801b880:	d119      	bne.n	801b8b6 <_dtoa_r+0x566>
 801b882:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 801b886:	ee37 4b05 	vadd.f64	d4, d7, d5
 801b88a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801b88e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b892:	dc4a      	bgt.n	801b92a <_dtoa_r+0x5da>
 801b894:	ee35 5b47 	vsub.f64	d5, d5, d7
 801b898:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801b89c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b8a0:	f57f af31 	bpl.w	801b706 <_dtoa_r+0x3b6>
 801b8a4:	460e      	mov	r6, r1
 801b8a6:	3901      	subs	r1, #1
 801b8a8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801b8ac:	2b30      	cmp	r3, #48	@ 0x30
 801b8ae:	d0f9      	beq.n	801b8a4 <_dtoa_r+0x554>
 801b8b0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801b8b4:	e027      	b.n	801b906 <_dtoa_r+0x5b6>
 801b8b6:	ee26 6b03 	vmul.f64	d6, d6, d3
 801b8ba:	e7d5      	b.n	801b868 <_dtoa_r+0x518>
 801b8bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 801b8c0:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 801b8c4:	463e      	mov	r6, r7
 801b8c6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801b8ca:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801b8ce:	ee15 3a10 	vmov	r3, s10
 801b8d2:	3330      	adds	r3, #48	@ 0x30
 801b8d4:	f806 3b01 	strb.w	r3, [r6], #1
 801b8d8:	1bf3      	subs	r3, r6, r7
 801b8da:	459a      	cmp	sl, r3
 801b8dc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801b8e0:	eea3 7b46 	vfms.f64	d7, d3, d6
 801b8e4:	d132      	bne.n	801b94c <_dtoa_r+0x5fc>
 801b8e6:	ee37 7b07 	vadd.f64	d7, d7, d7
 801b8ea:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801b8ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b8f2:	dc18      	bgt.n	801b926 <_dtoa_r+0x5d6>
 801b8f4:	eeb4 7b46 	vcmp.f64	d7, d6
 801b8f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b8fc:	d103      	bne.n	801b906 <_dtoa_r+0x5b6>
 801b8fe:	ee15 3a10 	vmov	r3, s10
 801b902:	07db      	lsls	r3, r3, #31
 801b904:	d40f      	bmi.n	801b926 <_dtoa_r+0x5d6>
 801b906:	9901      	ldr	r1, [sp, #4]
 801b908:	4648      	mov	r0, r9
 801b90a:	f000 ff0b 	bl	801c724 <_Bfree>
 801b90e:	2300      	movs	r3, #0
 801b910:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801b912:	7033      	strb	r3, [r6, #0]
 801b914:	f108 0301 	add.w	r3, r8, #1
 801b918:	6013      	str	r3, [r2, #0]
 801b91a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801b91c:	2b00      	cmp	r3, #0
 801b91e:	f000 824b 	beq.w	801bdb8 <_dtoa_r+0xa68>
 801b922:	601e      	str	r6, [r3, #0]
 801b924:	e248      	b.n	801bdb8 <_dtoa_r+0xa68>
 801b926:	f8cd 8014 	str.w	r8, [sp, #20]
 801b92a:	4633      	mov	r3, r6
 801b92c:	461e      	mov	r6, r3
 801b92e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801b932:	2a39      	cmp	r2, #57	@ 0x39
 801b934:	d106      	bne.n	801b944 <_dtoa_r+0x5f4>
 801b936:	429f      	cmp	r7, r3
 801b938:	d1f8      	bne.n	801b92c <_dtoa_r+0x5dc>
 801b93a:	9a05      	ldr	r2, [sp, #20]
 801b93c:	3201      	adds	r2, #1
 801b93e:	9205      	str	r2, [sp, #20]
 801b940:	2230      	movs	r2, #48	@ 0x30
 801b942:	703a      	strb	r2, [r7, #0]
 801b944:	781a      	ldrb	r2, [r3, #0]
 801b946:	3201      	adds	r2, #1
 801b948:	701a      	strb	r2, [r3, #0]
 801b94a:	e7b1      	b.n	801b8b0 <_dtoa_r+0x560>
 801b94c:	ee27 7b04 	vmul.f64	d7, d7, d4
 801b950:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801b954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b958:	d1b5      	bne.n	801b8c6 <_dtoa_r+0x576>
 801b95a:	e7d4      	b.n	801b906 <_dtoa_r+0x5b6>
 801b95c:	0801fc90 	.word	0x0801fc90
 801b960:	0801fc68 	.word	0x0801fc68
 801b964:	9908      	ldr	r1, [sp, #32]
 801b966:	2900      	cmp	r1, #0
 801b968:	f000 80e9 	beq.w	801bb3e <_dtoa_r+0x7ee>
 801b96c:	9907      	ldr	r1, [sp, #28]
 801b96e:	2901      	cmp	r1, #1
 801b970:	f300 80cb 	bgt.w	801bb0a <_dtoa_r+0x7ba>
 801b974:	2d00      	cmp	r5, #0
 801b976:	f000 80c4 	beq.w	801bb02 <_dtoa_r+0x7b2>
 801b97a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801b97e:	9e04      	ldr	r6, [sp, #16]
 801b980:	461c      	mov	r4, r3
 801b982:	9305      	str	r3, [sp, #20]
 801b984:	9b04      	ldr	r3, [sp, #16]
 801b986:	4413      	add	r3, r2
 801b988:	9304      	str	r3, [sp, #16]
 801b98a:	9b06      	ldr	r3, [sp, #24]
 801b98c:	2101      	movs	r1, #1
 801b98e:	4413      	add	r3, r2
 801b990:	4648      	mov	r0, r9
 801b992:	9306      	str	r3, [sp, #24]
 801b994:	f000 ffc4 	bl	801c920 <__i2b>
 801b998:	9b05      	ldr	r3, [sp, #20]
 801b99a:	4605      	mov	r5, r0
 801b99c:	b166      	cbz	r6, 801b9b8 <_dtoa_r+0x668>
 801b99e:	9a06      	ldr	r2, [sp, #24]
 801b9a0:	2a00      	cmp	r2, #0
 801b9a2:	dd09      	ble.n	801b9b8 <_dtoa_r+0x668>
 801b9a4:	42b2      	cmp	r2, r6
 801b9a6:	9904      	ldr	r1, [sp, #16]
 801b9a8:	bfa8      	it	ge
 801b9aa:	4632      	movge	r2, r6
 801b9ac:	1a89      	subs	r1, r1, r2
 801b9ae:	9104      	str	r1, [sp, #16]
 801b9b0:	9906      	ldr	r1, [sp, #24]
 801b9b2:	1ab6      	subs	r6, r6, r2
 801b9b4:	1a8a      	subs	r2, r1, r2
 801b9b6:	9206      	str	r2, [sp, #24]
 801b9b8:	b30b      	cbz	r3, 801b9fe <_dtoa_r+0x6ae>
 801b9ba:	9a08      	ldr	r2, [sp, #32]
 801b9bc:	2a00      	cmp	r2, #0
 801b9be:	f000 80c5 	beq.w	801bb4c <_dtoa_r+0x7fc>
 801b9c2:	2c00      	cmp	r4, #0
 801b9c4:	f000 80bf 	beq.w	801bb46 <_dtoa_r+0x7f6>
 801b9c8:	4629      	mov	r1, r5
 801b9ca:	4622      	mov	r2, r4
 801b9cc:	4648      	mov	r0, r9
 801b9ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b9d0:	f001 f85e 	bl	801ca90 <__pow5mult>
 801b9d4:	9a01      	ldr	r2, [sp, #4]
 801b9d6:	4601      	mov	r1, r0
 801b9d8:	4605      	mov	r5, r0
 801b9da:	4648      	mov	r0, r9
 801b9dc:	f000 ffb6 	bl	801c94c <__multiply>
 801b9e0:	9901      	ldr	r1, [sp, #4]
 801b9e2:	9005      	str	r0, [sp, #20]
 801b9e4:	4648      	mov	r0, r9
 801b9e6:	f000 fe9d 	bl	801c724 <_Bfree>
 801b9ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b9ec:	1b1b      	subs	r3, r3, r4
 801b9ee:	f000 80b0 	beq.w	801bb52 <_dtoa_r+0x802>
 801b9f2:	9905      	ldr	r1, [sp, #20]
 801b9f4:	461a      	mov	r2, r3
 801b9f6:	4648      	mov	r0, r9
 801b9f8:	f001 f84a 	bl	801ca90 <__pow5mult>
 801b9fc:	9001      	str	r0, [sp, #4]
 801b9fe:	2101      	movs	r1, #1
 801ba00:	4648      	mov	r0, r9
 801ba02:	f000 ff8d 	bl	801c920 <__i2b>
 801ba06:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ba08:	4604      	mov	r4, r0
 801ba0a:	2b00      	cmp	r3, #0
 801ba0c:	f000 81da 	beq.w	801bdc4 <_dtoa_r+0xa74>
 801ba10:	461a      	mov	r2, r3
 801ba12:	4601      	mov	r1, r0
 801ba14:	4648      	mov	r0, r9
 801ba16:	f001 f83b 	bl	801ca90 <__pow5mult>
 801ba1a:	9b07      	ldr	r3, [sp, #28]
 801ba1c:	2b01      	cmp	r3, #1
 801ba1e:	4604      	mov	r4, r0
 801ba20:	f300 80a0 	bgt.w	801bb64 <_dtoa_r+0x814>
 801ba24:	9b02      	ldr	r3, [sp, #8]
 801ba26:	2b00      	cmp	r3, #0
 801ba28:	f040 8096 	bne.w	801bb58 <_dtoa_r+0x808>
 801ba2c:	9b03      	ldr	r3, [sp, #12]
 801ba2e:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801ba32:	2a00      	cmp	r2, #0
 801ba34:	f040 8092 	bne.w	801bb5c <_dtoa_r+0x80c>
 801ba38:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801ba3c:	0d12      	lsrs	r2, r2, #20
 801ba3e:	0512      	lsls	r2, r2, #20
 801ba40:	2a00      	cmp	r2, #0
 801ba42:	f000 808d 	beq.w	801bb60 <_dtoa_r+0x810>
 801ba46:	9b04      	ldr	r3, [sp, #16]
 801ba48:	3301      	adds	r3, #1
 801ba4a:	9304      	str	r3, [sp, #16]
 801ba4c:	9b06      	ldr	r3, [sp, #24]
 801ba4e:	3301      	adds	r3, #1
 801ba50:	9306      	str	r3, [sp, #24]
 801ba52:	2301      	movs	r3, #1
 801ba54:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ba56:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ba58:	2b00      	cmp	r3, #0
 801ba5a:	f000 81b9 	beq.w	801bdd0 <_dtoa_r+0xa80>
 801ba5e:	6922      	ldr	r2, [r4, #16]
 801ba60:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801ba64:	6910      	ldr	r0, [r2, #16]
 801ba66:	f000 ff0f 	bl	801c888 <__hi0bits>
 801ba6a:	f1c0 0020 	rsb	r0, r0, #32
 801ba6e:	9b06      	ldr	r3, [sp, #24]
 801ba70:	4418      	add	r0, r3
 801ba72:	f010 001f 	ands.w	r0, r0, #31
 801ba76:	f000 8081 	beq.w	801bb7c <_dtoa_r+0x82c>
 801ba7a:	f1c0 0220 	rsb	r2, r0, #32
 801ba7e:	2a04      	cmp	r2, #4
 801ba80:	dd73      	ble.n	801bb6a <_dtoa_r+0x81a>
 801ba82:	9b04      	ldr	r3, [sp, #16]
 801ba84:	f1c0 001c 	rsb	r0, r0, #28
 801ba88:	4403      	add	r3, r0
 801ba8a:	9304      	str	r3, [sp, #16]
 801ba8c:	9b06      	ldr	r3, [sp, #24]
 801ba8e:	4406      	add	r6, r0
 801ba90:	4403      	add	r3, r0
 801ba92:	9306      	str	r3, [sp, #24]
 801ba94:	9b04      	ldr	r3, [sp, #16]
 801ba96:	2b00      	cmp	r3, #0
 801ba98:	dd05      	ble.n	801baa6 <_dtoa_r+0x756>
 801ba9a:	9901      	ldr	r1, [sp, #4]
 801ba9c:	461a      	mov	r2, r3
 801ba9e:	4648      	mov	r0, r9
 801baa0:	f001 f850 	bl	801cb44 <__lshift>
 801baa4:	9001      	str	r0, [sp, #4]
 801baa6:	9b06      	ldr	r3, [sp, #24]
 801baa8:	2b00      	cmp	r3, #0
 801baaa:	dd05      	ble.n	801bab8 <_dtoa_r+0x768>
 801baac:	4621      	mov	r1, r4
 801baae:	461a      	mov	r2, r3
 801bab0:	4648      	mov	r0, r9
 801bab2:	f001 f847 	bl	801cb44 <__lshift>
 801bab6:	4604      	mov	r4, r0
 801bab8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801baba:	2b00      	cmp	r3, #0
 801babc:	d060      	beq.n	801bb80 <_dtoa_r+0x830>
 801babe:	9801      	ldr	r0, [sp, #4]
 801bac0:	4621      	mov	r1, r4
 801bac2:	f001 f8ab 	bl	801cc1c <__mcmp>
 801bac6:	2800      	cmp	r0, #0
 801bac8:	da5a      	bge.n	801bb80 <_dtoa_r+0x830>
 801baca:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 801bace:	9305      	str	r3, [sp, #20]
 801bad0:	9901      	ldr	r1, [sp, #4]
 801bad2:	2300      	movs	r3, #0
 801bad4:	220a      	movs	r2, #10
 801bad6:	4648      	mov	r0, r9
 801bad8:	f000 fe46 	bl	801c768 <__multadd>
 801badc:	9b08      	ldr	r3, [sp, #32]
 801bade:	9001      	str	r0, [sp, #4]
 801bae0:	2b00      	cmp	r3, #0
 801bae2:	f000 8177 	beq.w	801bdd4 <_dtoa_r+0xa84>
 801bae6:	4629      	mov	r1, r5
 801bae8:	2300      	movs	r3, #0
 801baea:	220a      	movs	r2, #10
 801baec:	4648      	mov	r0, r9
 801baee:	f000 fe3b 	bl	801c768 <__multadd>
 801baf2:	f1bb 0f00 	cmp.w	fp, #0
 801baf6:	4605      	mov	r5, r0
 801baf8:	dc6e      	bgt.n	801bbd8 <_dtoa_r+0x888>
 801bafa:	9b07      	ldr	r3, [sp, #28]
 801bafc:	2b02      	cmp	r3, #2
 801bafe:	dc48      	bgt.n	801bb92 <_dtoa_r+0x842>
 801bb00:	e06a      	b.n	801bbd8 <_dtoa_r+0x888>
 801bb02:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801bb04:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801bb08:	e739      	b.n	801b97e <_dtoa_r+0x62e>
 801bb0a:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 801bb0e:	42a3      	cmp	r3, r4
 801bb10:	db07      	blt.n	801bb22 <_dtoa_r+0x7d2>
 801bb12:	f1ba 0f00 	cmp.w	sl, #0
 801bb16:	eba3 0404 	sub.w	r4, r3, r4
 801bb1a:	db0b      	blt.n	801bb34 <_dtoa_r+0x7e4>
 801bb1c:	9e04      	ldr	r6, [sp, #16]
 801bb1e:	4652      	mov	r2, sl
 801bb20:	e72f      	b.n	801b982 <_dtoa_r+0x632>
 801bb22:	1ae2      	subs	r2, r4, r3
 801bb24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801bb26:	9e04      	ldr	r6, [sp, #16]
 801bb28:	4413      	add	r3, r2
 801bb2a:	930a      	str	r3, [sp, #40]	@ 0x28
 801bb2c:	4652      	mov	r2, sl
 801bb2e:	4623      	mov	r3, r4
 801bb30:	2400      	movs	r4, #0
 801bb32:	e726      	b.n	801b982 <_dtoa_r+0x632>
 801bb34:	9a04      	ldr	r2, [sp, #16]
 801bb36:	eba2 060a 	sub.w	r6, r2, sl
 801bb3a:	2200      	movs	r2, #0
 801bb3c:	e721      	b.n	801b982 <_dtoa_r+0x632>
 801bb3e:	9e04      	ldr	r6, [sp, #16]
 801bb40:	9d08      	ldr	r5, [sp, #32]
 801bb42:	461c      	mov	r4, r3
 801bb44:	e72a      	b.n	801b99c <_dtoa_r+0x64c>
 801bb46:	9a01      	ldr	r2, [sp, #4]
 801bb48:	9205      	str	r2, [sp, #20]
 801bb4a:	e752      	b.n	801b9f2 <_dtoa_r+0x6a2>
 801bb4c:	9901      	ldr	r1, [sp, #4]
 801bb4e:	461a      	mov	r2, r3
 801bb50:	e751      	b.n	801b9f6 <_dtoa_r+0x6a6>
 801bb52:	9b05      	ldr	r3, [sp, #20]
 801bb54:	9301      	str	r3, [sp, #4]
 801bb56:	e752      	b.n	801b9fe <_dtoa_r+0x6ae>
 801bb58:	2300      	movs	r3, #0
 801bb5a:	e77b      	b.n	801ba54 <_dtoa_r+0x704>
 801bb5c:	9b02      	ldr	r3, [sp, #8]
 801bb5e:	e779      	b.n	801ba54 <_dtoa_r+0x704>
 801bb60:	920b      	str	r2, [sp, #44]	@ 0x2c
 801bb62:	e778      	b.n	801ba56 <_dtoa_r+0x706>
 801bb64:	2300      	movs	r3, #0
 801bb66:	930b      	str	r3, [sp, #44]	@ 0x2c
 801bb68:	e779      	b.n	801ba5e <_dtoa_r+0x70e>
 801bb6a:	d093      	beq.n	801ba94 <_dtoa_r+0x744>
 801bb6c:	9b04      	ldr	r3, [sp, #16]
 801bb6e:	321c      	adds	r2, #28
 801bb70:	4413      	add	r3, r2
 801bb72:	9304      	str	r3, [sp, #16]
 801bb74:	9b06      	ldr	r3, [sp, #24]
 801bb76:	4416      	add	r6, r2
 801bb78:	4413      	add	r3, r2
 801bb7a:	e78a      	b.n	801ba92 <_dtoa_r+0x742>
 801bb7c:	4602      	mov	r2, r0
 801bb7e:	e7f5      	b.n	801bb6c <_dtoa_r+0x81c>
 801bb80:	f1ba 0f00 	cmp.w	sl, #0
 801bb84:	f8cd 8014 	str.w	r8, [sp, #20]
 801bb88:	46d3      	mov	fp, sl
 801bb8a:	dc21      	bgt.n	801bbd0 <_dtoa_r+0x880>
 801bb8c:	9b07      	ldr	r3, [sp, #28]
 801bb8e:	2b02      	cmp	r3, #2
 801bb90:	dd1e      	ble.n	801bbd0 <_dtoa_r+0x880>
 801bb92:	f1bb 0f00 	cmp.w	fp, #0
 801bb96:	f47f addc 	bne.w	801b752 <_dtoa_r+0x402>
 801bb9a:	4621      	mov	r1, r4
 801bb9c:	465b      	mov	r3, fp
 801bb9e:	2205      	movs	r2, #5
 801bba0:	4648      	mov	r0, r9
 801bba2:	f000 fde1 	bl	801c768 <__multadd>
 801bba6:	4601      	mov	r1, r0
 801bba8:	4604      	mov	r4, r0
 801bbaa:	9801      	ldr	r0, [sp, #4]
 801bbac:	f001 f836 	bl	801cc1c <__mcmp>
 801bbb0:	2800      	cmp	r0, #0
 801bbb2:	f77f adce 	ble.w	801b752 <_dtoa_r+0x402>
 801bbb6:	463e      	mov	r6, r7
 801bbb8:	2331      	movs	r3, #49	@ 0x31
 801bbba:	f806 3b01 	strb.w	r3, [r6], #1
 801bbbe:	9b05      	ldr	r3, [sp, #20]
 801bbc0:	3301      	adds	r3, #1
 801bbc2:	9305      	str	r3, [sp, #20]
 801bbc4:	e5c9      	b.n	801b75a <_dtoa_r+0x40a>
 801bbc6:	f8cd 8014 	str.w	r8, [sp, #20]
 801bbca:	4654      	mov	r4, sl
 801bbcc:	4625      	mov	r5, r4
 801bbce:	e7f2      	b.n	801bbb6 <_dtoa_r+0x866>
 801bbd0:	9b08      	ldr	r3, [sp, #32]
 801bbd2:	2b00      	cmp	r3, #0
 801bbd4:	f000 8102 	beq.w	801bddc <_dtoa_r+0xa8c>
 801bbd8:	2e00      	cmp	r6, #0
 801bbda:	dd05      	ble.n	801bbe8 <_dtoa_r+0x898>
 801bbdc:	4629      	mov	r1, r5
 801bbde:	4632      	mov	r2, r6
 801bbe0:	4648      	mov	r0, r9
 801bbe2:	f000 ffaf 	bl	801cb44 <__lshift>
 801bbe6:	4605      	mov	r5, r0
 801bbe8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801bbea:	2b00      	cmp	r3, #0
 801bbec:	d058      	beq.n	801bca0 <_dtoa_r+0x950>
 801bbee:	6869      	ldr	r1, [r5, #4]
 801bbf0:	4648      	mov	r0, r9
 801bbf2:	f000 fd57 	bl	801c6a4 <_Balloc>
 801bbf6:	4606      	mov	r6, r0
 801bbf8:	b928      	cbnz	r0, 801bc06 <_dtoa_r+0x8b6>
 801bbfa:	4b82      	ldr	r3, [pc, #520]	@ (801be04 <_dtoa_r+0xab4>)
 801bbfc:	4602      	mov	r2, r0
 801bbfe:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801bc02:	f7ff bbbe 	b.w	801b382 <_dtoa_r+0x32>
 801bc06:	692a      	ldr	r2, [r5, #16]
 801bc08:	3202      	adds	r2, #2
 801bc0a:	0092      	lsls	r2, r2, #2
 801bc0c:	f105 010c 	add.w	r1, r5, #12
 801bc10:	300c      	adds	r0, #12
 801bc12:	f7ff faf6 	bl	801b202 <memcpy>
 801bc16:	2201      	movs	r2, #1
 801bc18:	4631      	mov	r1, r6
 801bc1a:	4648      	mov	r0, r9
 801bc1c:	f000 ff92 	bl	801cb44 <__lshift>
 801bc20:	1c7b      	adds	r3, r7, #1
 801bc22:	9304      	str	r3, [sp, #16]
 801bc24:	eb07 030b 	add.w	r3, r7, fp
 801bc28:	9309      	str	r3, [sp, #36]	@ 0x24
 801bc2a:	9b02      	ldr	r3, [sp, #8]
 801bc2c:	f003 0301 	and.w	r3, r3, #1
 801bc30:	46a8      	mov	r8, r5
 801bc32:	9308      	str	r3, [sp, #32]
 801bc34:	4605      	mov	r5, r0
 801bc36:	9b04      	ldr	r3, [sp, #16]
 801bc38:	9801      	ldr	r0, [sp, #4]
 801bc3a:	4621      	mov	r1, r4
 801bc3c:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 801bc40:	f7ff fafc 	bl	801b23c <quorem>
 801bc44:	4641      	mov	r1, r8
 801bc46:	9002      	str	r0, [sp, #8]
 801bc48:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801bc4c:	9801      	ldr	r0, [sp, #4]
 801bc4e:	f000 ffe5 	bl	801cc1c <__mcmp>
 801bc52:	462a      	mov	r2, r5
 801bc54:	9006      	str	r0, [sp, #24]
 801bc56:	4621      	mov	r1, r4
 801bc58:	4648      	mov	r0, r9
 801bc5a:	f000 fffb 	bl	801cc54 <__mdiff>
 801bc5e:	68c2      	ldr	r2, [r0, #12]
 801bc60:	4606      	mov	r6, r0
 801bc62:	b9fa      	cbnz	r2, 801bca4 <_dtoa_r+0x954>
 801bc64:	4601      	mov	r1, r0
 801bc66:	9801      	ldr	r0, [sp, #4]
 801bc68:	f000 ffd8 	bl	801cc1c <__mcmp>
 801bc6c:	4602      	mov	r2, r0
 801bc6e:	4631      	mov	r1, r6
 801bc70:	4648      	mov	r0, r9
 801bc72:	920a      	str	r2, [sp, #40]	@ 0x28
 801bc74:	f000 fd56 	bl	801c724 <_Bfree>
 801bc78:	9b07      	ldr	r3, [sp, #28]
 801bc7a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801bc7c:	9e04      	ldr	r6, [sp, #16]
 801bc7e:	ea42 0103 	orr.w	r1, r2, r3
 801bc82:	9b08      	ldr	r3, [sp, #32]
 801bc84:	4319      	orrs	r1, r3
 801bc86:	d10f      	bne.n	801bca8 <_dtoa_r+0x958>
 801bc88:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801bc8c:	d028      	beq.n	801bce0 <_dtoa_r+0x990>
 801bc8e:	9b06      	ldr	r3, [sp, #24]
 801bc90:	2b00      	cmp	r3, #0
 801bc92:	dd02      	ble.n	801bc9a <_dtoa_r+0x94a>
 801bc94:	9b02      	ldr	r3, [sp, #8]
 801bc96:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 801bc9a:	f88b a000 	strb.w	sl, [fp]
 801bc9e:	e55e      	b.n	801b75e <_dtoa_r+0x40e>
 801bca0:	4628      	mov	r0, r5
 801bca2:	e7bd      	b.n	801bc20 <_dtoa_r+0x8d0>
 801bca4:	2201      	movs	r2, #1
 801bca6:	e7e2      	b.n	801bc6e <_dtoa_r+0x91e>
 801bca8:	9b06      	ldr	r3, [sp, #24]
 801bcaa:	2b00      	cmp	r3, #0
 801bcac:	db04      	blt.n	801bcb8 <_dtoa_r+0x968>
 801bcae:	9907      	ldr	r1, [sp, #28]
 801bcb0:	430b      	orrs	r3, r1
 801bcb2:	9908      	ldr	r1, [sp, #32]
 801bcb4:	430b      	orrs	r3, r1
 801bcb6:	d120      	bne.n	801bcfa <_dtoa_r+0x9aa>
 801bcb8:	2a00      	cmp	r2, #0
 801bcba:	ddee      	ble.n	801bc9a <_dtoa_r+0x94a>
 801bcbc:	9901      	ldr	r1, [sp, #4]
 801bcbe:	2201      	movs	r2, #1
 801bcc0:	4648      	mov	r0, r9
 801bcc2:	f000 ff3f 	bl	801cb44 <__lshift>
 801bcc6:	4621      	mov	r1, r4
 801bcc8:	9001      	str	r0, [sp, #4]
 801bcca:	f000 ffa7 	bl	801cc1c <__mcmp>
 801bcce:	2800      	cmp	r0, #0
 801bcd0:	dc03      	bgt.n	801bcda <_dtoa_r+0x98a>
 801bcd2:	d1e2      	bne.n	801bc9a <_dtoa_r+0x94a>
 801bcd4:	f01a 0f01 	tst.w	sl, #1
 801bcd8:	d0df      	beq.n	801bc9a <_dtoa_r+0x94a>
 801bcda:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801bcde:	d1d9      	bne.n	801bc94 <_dtoa_r+0x944>
 801bce0:	2339      	movs	r3, #57	@ 0x39
 801bce2:	f88b 3000 	strb.w	r3, [fp]
 801bce6:	4633      	mov	r3, r6
 801bce8:	461e      	mov	r6, r3
 801bcea:	3b01      	subs	r3, #1
 801bcec:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801bcf0:	2a39      	cmp	r2, #57	@ 0x39
 801bcf2:	d052      	beq.n	801bd9a <_dtoa_r+0xa4a>
 801bcf4:	3201      	adds	r2, #1
 801bcf6:	701a      	strb	r2, [r3, #0]
 801bcf8:	e531      	b.n	801b75e <_dtoa_r+0x40e>
 801bcfa:	2a00      	cmp	r2, #0
 801bcfc:	dd07      	ble.n	801bd0e <_dtoa_r+0x9be>
 801bcfe:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801bd02:	d0ed      	beq.n	801bce0 <_dtoa_r+0x990>
 801bd04:	f10a 0301 	add.w	r3, sl, #1
 801bd08:	f88b 3000 	strb.w	r3, [fp]
 801bd0c:	e527      	b.n	801b75e <_dtoa_r+0x40e>
 801bd0e:	9b04      	ldr	r3, [sp, #16]
 801bd10:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801bd12:	f803 ac01 	strb.w	sl, [r3, #-1]
 801bd16:	4293      	cmp	r3, r2
 801bd18:	d029      	beq.n	801bd6e <_dtoa_r+0xa1e>
 801bd1a:	9901      	ldr	r1, [sp, #4]
 801bd1c:	2300      	movs	r3, #0
 801bd1e:	220a      	movs	r2, #10
 801bd20:	4648      	mov	r0, r9
 801bd22:	f000 fd21 	bl	801c768 <__multadd>
 801bd26:	45a8      	cmp	r8, r5
 801bd28:	9001      	str	r0, [sp, #4]
 801bd2a:	f04f 0300 	mov.w	r3, #0
 801bd2e:	f04f 020a 	mov.w	r2, #10
 801bd32:	4641      	mov	r1, r8
 801bd34:	4648      	mov	r0, r9
 801bd36:	d107      	bne.n	801bd48 <_dtoa_r+0x9f8>
 801bd38:	f000 fd16 	bl	801c768 <__multadd>
 801bd3c:	4680      	mov	r8, r0
 801bd3e:	4605      	mov	r5, r0
 801bd40:	9b04      	ldr	r3, [sp, #16]
 801bd42:	3301      	adds	r3, #1
 801bd44:	9304      	str	r3, [sp, #16]
 801bd46:	e776      	b.n	801bc36 <_dtoa_r+0x8e6>
 801bd48:	f000 fd0e 	bl	801c768 <__multadd>
 801bd4c:	4629      	mov	r1, r5
 801bd4e:	4680      	mov	r8, r0
 801bd50:	2300      	movs	r3, #0
 801bd52:	220a      	movs	r2, #10
 801bd54:	4648      	mov	r0, r9
 801bd56:	f000 fd07 	bl	801c768 <__multadd>
 801bd5a:	4605      	mov	r5, r0
 801bd5c:	e7f0      	b.n	801bd40 <_dtoa_r+0x9f0>
 801bd5e:	f1bb 0f00 	cmp.w	fp, #0
 801bd62:	bfcc      	ite	gt
 801bd64:	465e      	movgt	r6, fp
 801bd66:	2601      	movle	r6, #1
 801bd68:	443e      	add	r6, r7
 801bd6a:	f04f 0800 	mov.w	r8, #0
 801bd6e:	9901      	ldr	r1, [sp, #4]
 801bd70:	2201      	movs	r2, #1
 801bd72:	4648      	mov	r0, r9
 801bd74:	f000 fee6 	bl	801cb44 <__lshift>
 801bd78:	4621      	mov	r1, r4
 801bd7a:	9001      	str	r0, [sp, #4]
 801bd7c:	f000 ff4e 	bl	801cc1c <__mcmp>
 801bd80:	2800      	cmp	r0, #0
 801bd82:	dcb0      	bgt.n	801bce6 <_dtoa_r+0x996>
 801bd84:	d102      	bne.n	801bd8c <_dtoa_r+0xa3c>
 801bd86:	f01a 0f01 	tst.w	sl, #1
 801bd8a:	d1ac      	bne.n	801bce6 <_dtoa_r+0x996>
 801bd8c:	4633      	mov	r3, r6
 801bd8e:	461e      	mov	r6, r3
 801bd90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801bd94:	2a30      	cmp	r2, #48	@ 0x30
 801bd96:	d0fa      	beq.n	801bd8e <_dtoa_r+0xa3e>
 801bd98:	e4e1      	b.n	801b75e <_dtoa_r+0x40e>
 801bd9a:	429f      	cmp	r7, r3
 801bd9c:	d1a4      	bne.n	801bce8 <_dtoa_r+0x998>
 801bd9e:	9b05      	ldr	r3, [sp, #20]
 801bda0:	3301      	adds	r3, #1
 801bda2:	9305      	str	r3, [sp, #20]
 801bda4:	2331      	movs	r3, #49	@ 0x31
 801bda6:	703b      	strb	r3, [r7, #0]
 801bda8:	e4d9      	b.n	801b75e <_dtoa_r+0x40e>
 801bdaa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801bdac:	4f16      	ldr	r7, [pc, #88]	@ (801be08 <_dtoa_r+0xab8>)
 801bdae:	b11b      	cbz	r3, 801bdb8 <_dtoa_r+0xa68>
 801bdb0:	f107 0308 	add.w	r3, r7, #8
 801bdb4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801bdb6:	6013      	str	r3, [r2, #0]
 801bdb8:	4638      	mov	r0, r7
 801bdba:	b011      	add	sp, #68	@ 0x44
 801bdbc:	ecbd 8b02 	vpop	{d8}
 801bdc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bdc4:	9b07      	ldr	r3, [sp, #28]
 801bdc6:	2b01      	cmp	r3, #1
 801bdc8:	f77f ae2c 	ble.w	801ba24 <_dtoa_r+0x6d4>
 801bdcc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801bdce:	930b      	str	r3, [sp, #44]	@ 0x2c
 801bdd0:	2001      	movs	r0, #1
 801bdd2:	e64c      	b.n	801ba6e <_dtoa_r+0x71e>
 801bdd4:	f1bb 0f00 	cmp.w	fp, #0
 801bdd8:	f77f aed8 	ble.w	801bb8c <_dtoa_r+0x83c>
 801bddc:	463e      	mov	r6, r7
 801bdde:	9801      	ldr	r0, [sp, #4]
 801bde0:	4621      	mov	r1, r4
 801bde2:	f7ff fa2b 	bl	801b23c <quorem>
 801bde6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801bdea:	f806 ab01 	strb.w	sl, [r6], #1
 801bdee:	1bf2      	subs	r2, r6, r7
 801bdf0:	4593      	cmp	fp, r2
 801bdf2:	ddb4      	ble.n	801bd5e <_dtoa_r+0xa0e>
 801bdf4:	9901      	ldr	r1, [sp, #4]
 801bdf6:	2300      	movs	r3, #0
 801bdf8:	220a      	movs	r2, #10
 801bdfa:	4648      	mov	r0, r9
 801bdfc:	f000 fcb4 	bl	801c768 <__multadd>
 801be00:	9001      	str	r0, [sp, #4]
 801be02:	e7ec      	b.n	801bdde <_dtoa_r+0xa8e>
 801be04:	0801fad1 	.word	0x0801fad1
 801be08:	0801fa55 	.word	0x0801fa55

0801be0c <_free_r>:
 801be0c:	b538      	push	{r3, r4, r5, lr}
 801be0e:	4605      	mov	r5, r0
 801be10:	2900      	cmp	r1, #0
 801be12:	d041      	beq.n	801be98 <_free_r+0x8c>
 801be14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801be18:	1f0c      	subs	r4, r1, #4
 801be1a:	2b00      	cmp	r3, #0
 801be1c:	bfb8      	it	lt
 801be1e:	18e4      	addlt	r4, r4, r3
 801be20:	f000 fc34 	bl	801c68c <__malloc_lock>
 801be24:	4a1d      	ldr	r2, [pc, #116]	@ (801be9c <_free_r+0x90>)
 801be26:	6813      	ldr	r3, [r2, #0]
 801be28:	b933      	cbnz	r3, 801be38 <_free_r+0x2c>
 801be2a:	6063      	str	r3, [r4, #4]
 801be2c:	6014      	str	r4, [r2, #0]
 801be2e:	4628      	mov	r0, r5
 801be30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801be34:	f000 bc30 	b.w	801c698 <__malloc_unlock>
 801be38:	42a3      	cmp	r3, r4
 801be3a:	d908      	bls.n	801be4e <_free_r+0x42>
 801be3c:	6820      	ldr	r0, [r4, #0]
 801be3e:	1821      	adds	r1, r4, r0
 801be40:	428b      	cmp	r3, r1
 801be42:	bf01      	itttt	eq
 801be44:	6819      	ldreq	r1, [r3, #0]
 801be46:	685b      	ldreq	r3, [r3, #4]
 801be48:	1809      	addeq	r1, r1, r0
 801be4a:	6021      	streq	r1, [r4, #0]
 801be4c:	e7ed      	b.n	801be2a <_free_r+0x1e>
 801be4e:	461a      	mov	r2, r3
 801be50:	685b      	ldr	r3, [r3, #4]
 801be52:	b10b      	cbz	r3, 801be58 <_free_r+0x4c>
 801be54:	42a3      	cmp	r3, r4
 801be56:	d9fa      	bls.n	801be4e <_free_r+0x42>
 801be58:	6811      	ldr	r1, [r2, #0]
 801be5a:	1850      	adds	r0, r2, r1
 801be5c:	42a0      	cmp	r0, r4
 801be5e:	d10b      	bne.n	801be78 <_free_r+0x6c>
 801be60:	6820      	ldr	r0, [r4, #0]
 801be62:	4401      	add	r1, r0
 801be64:	1850      	adds	r0, r2, r1
 801be66:	4283      	cmp	r3, r0
 801be68:	6011      	str	r1, [r2, #0]
 801be6a:	d1e0      	bne.n	801be2e <_free_r+0x22>
 801be6c:	6818      	ldr	r0, [r3, #0]
 801be6e:	685b      	ldr	r3, [r3, #4]
 801be70:	6053      	str	r3, [r2, #4]
 801be72:	4408      	add	r0, r1
 801be74:	6010      	str	r0, [r2, #0]
 801be76:	e7da      	b.n	801be2e <_free_r+0x22>
 801be78:	d902      	bls.n	801be80 <_free_r+0x74>
 801be7a:	230c      	movs	r3, #12
 801be7c:	602b      	str	r3, [r5, #0]
 801be7e:	e7d6      	b.n	801be2e <_free_r+0x22>
 801be80:	6820      	ldr	r0, [r4, #0]
 801be82:	1821      	adds	r1, r4, r0
 801be84:	428b      	cmp	r3, r1
 801be86:	bf04      	itt	eq
 801be88:	6819      	ldreq	r1, [r3, #0]
 801be8a:	685b      	ldreq	r3, [r3, #4]
 801be8c:	6063      	str	r3, [r4, #4]
 801be8e:	bf04      	itt	eq
 801be90:	1809      	addeq	r1, r1, r0
 801be92:	6021      	streq	r1, [r4, #0]
 801be94:	6054      	str	r4, [r2, #4]
 801be96:	e7ca      	b.n	801be2e <_free_r+0x22>
 801be98:	bd38      	pop	{r3, r4, r5, pc}
 801be9a:	bf00      	nop
 801be9c:	24005d04 	.word	0x24005d04

0801bea0 <rshift>:
 801bea0:	6903      	ldr	r3, [r0, #16]
 801bea2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801bea6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801beaa:	ea4f 1261 	mov.w	r2, r1, asr #5
 801beae:	f100 0414 	add.w	r4, r0, #20
 801beb2:	dd45      	ble.n	801bf40 <rshift+0xa0>
 801beb4:	f011 011f 	ands.w	r1, r1, #31
 801beb8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801bebc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801bec0:	d10c      	bne.n	801bedc <rshift+0x3c>
 801bec2:	f100 0710 	add.w	r7, r0, #16
 801bec6:	4629      	mov	r1, r5
 801bec8:	42b1      	cmp	r1, r6
 801beca:	d334      	bcc.n	801bf36 <rshift+0x96>
 801becc:	1a9b      	subs	r3, r3, r2
 801bece:	009b      	lsls	r3, r3, #2
 801bed0:	1eea      	subs	r2, r5, #3
 801bed2:	4296      	cmp	r6, r2
 801bed4:	bf38      	it	cc
 801bed6:	2300      	movcc	r3, #0
 801bed8:	4423      	add	r3, r4
 801beda:	e015      	b.n	801bf08 <rshift+0x68>
 801bedc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801bee0:	f1c1 0820 	rsb	r8, r1, #32
 801bee4:	40cf      	lsrs	r7, r1
 801bee6:	f105 0e04 	add.w	lr, r5, #4
 801beea:	46a1      	mov	r9, r4
 801beec:	4576      	cmp	r6, lr
 801beee:	46f4      	mov	ip, lr
 801bef0:	d815      	bhi.n	801bf1e <rshift+0x7e>
 801bef2:	1a9a      	subs	r2, r3, r2
 801bef4:	0092      	lsls	r2, r2, #2
 801bef6:	3a04      	subs	r2, #4
 801bef8:	3501      	adds	r5, #1
 801befa:	42ae      	cmp	r6, r5
 801befc:	bf38      	it	cc
 801befe:	2200      	movcc	r2, #0
 801bf00:	18a3      	adds	r3, r4, r2
 801bf02:	50a7      	str	r7, [r4, r2]
 801bf04:	b107      	cbz	r7, 801bf08 <rshift+0x68>
 801bf06:	3304      	adds	r3, #4
 801bf08:	1b1a      	subs	r2, r3, r4
 801bf0a:	42a3      	cmp	r3, r4
 801bf0c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801bf10:	bf08      	it	eq
 801bf12:	2300      	moveq	r3, #0
 801bf14:	6102      	str	r2, [r0, #16]
 801bf16:	bf08      	it	eq
 801bf18:	6143      	streq	r3, [r0, #20]
 801bf1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bf1e:	f8dc c000 	ldr.w	ip, [ip]
 801bf22:	fa0c fc08 	lsl.w	ip, ip, r8
 801bf26:	ea4c 0707 	orr.w	r7, ip, r7
 801bf2a:	f849 7b04 	str.w	r7, [r9], #4
 801bf2e:	f85e 7b04 	ldr.w	r7, [lr], #4
 801bf32:	40cf      	lsrs	r7, r1
 801bf34:	e7da      	b.n	801beec <rshift+0x4c>
 801bf36:	f851 cb04 	ldr.w	ip, [r1], #4
 801bf3a:	f847 cf04 	str.w	ip, [r7, #4]!
 801bf3e:	e7c3      	b.n	801bec8 <rshift+0x28>
 801bf40:	4623      	mov	r3, r4
 801bf42:	e7e1      	b.n	801bf08 <rshift+0x68>

0801bf44 <__hexdig_fun>:
 801bf44:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801bf48:	2b09      	cmp	r3, #9
 801bf4a:	d802      	bhi.n	801bf52 <__hexdig_fun+0xe>
 801bf4c:	3820      	subs	r0, #32
 801bf4e:	b2c0      	uxtb	r0, r0
 801bf50:	4770      	bx	lr
 801bf52:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801bf56:	2b05      	cmp	r3, #5
 801bf58:	d801      	bhi.n	801bf5e <__hexdig_fun+0x1a>
 801bf5a:	3847      	subs	r0, #71	@ 0x47
 801bf5c:	e7f7      	b.n	801bf4e <__hexdig_fun+0xa>
 801bf5e:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801bf62:	2b05      	cmp	r3, #5
 801bf64:	d801      	bhi.n	801bf6a <__hexdig_fun+0x26>
 801bf66:	3827      	subs	r0, #39	@ 0x27
 801bf68:	e7f1      	b.n	801bf4e <__hexdig_fun+0xa>
 801bf6a:	2000      	movs	r0, #0
 801bf6c:	4770      	bx	lr
	...

0801bf70 <__gethex>:
 801bf70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf74:	b085      	sub	sp, #20
 801bf76:	468a      	mov	sl, r1
 801bf78:	9302      	str	r3, [sp, #8]
 801bf7a:	680b      	ldr	r3, [r1, #0]
 801bf7c:	9001      	str	r0, [sp, #4]
 801bf7e:	4690      	mov	r8, r2
 801bf80:	1c9c      	adds	r4, r3, #2
 801bf82:	46a1      	mov	r9, r4
 801bf84:	f814 0b01 	ldrb.w	r0, [r4], #1
 801bf88:	2830      	cmp	r0, #48	@ 0x30
 801bf8a:	d0fa      	beq.n	801bf82 <__gethex+0x12>
 801bf8c:	eba9 0303 	sub.w	r3, r9, r3
 801bf90:	f1a3 0b02 	sub.w	fp, r3, #2
 801bf94:	f7ff ffd6 	bl	801bf44 <__hexdig_fun>
 801bf98:	4605      	mov	r5, r0
 801bf9a:	2800      	cmp	r0, #0
 801bf9c:	d168      	bne.n	801c070 <__gethex+0x100>
 801bf9e:	49a0      	ldr	r1, [pc, #640]	@ (801c220 <__gethex+0x2b0>)
 801bfa0:	2201      	movs	r2, #1
 801bfa2:	4648      	mov	r0, r9
 801bfa4:	f7ff f845 	bl	801b032 <strncmp>
 801bfa8:	4607      	mov	r7, r0
 801bfaa:	2800      	cmp	r0, #0
 801bfac:	d167      	bne.n	801c07e <__gethex+0x10e>
 801bfae:	f899 0001 	ldrb.w	r0, [r9, #1]
 801bfb2:	4626      	mov	r6, r4
 801bfb4:	f7ff ffc6 	bl	801bf44 <__hexdig_fun>
 801bfb8:	2800      	cmp	r0, #0
 801bfba:	d062      	beq.n	801c082 <__gethex+0x112>
 801bfbc:	4623      	mov	r3, r4
 801bfbe:	7818      	ldrb	r0, [r3, #0]
 801bfc0:	2830      	cmp	r0, #48	@ 0x30
 801bfc2:	4699      	mov	r9, r3
 801bfc4:	f103 0301 	add.w	r3, r3, #1
 801bfc8:	d0f9      	beq.n	801bfbe <__gethex+0x4e>
 801bfca:	f7ff ffbb 	bl	801bf44 <__hexdig_fun>
 801bfce:	fab0 f580 	clz	r5, r0
 801bfd2:	096d      	lsrs	r5, r5, #5
 801bfd4:	f04f 0b01 	mov.w	fp, #1
 801bfd8:	464a      	mov	r2, r9
 801bfda:	4616      	mov	r6, r2
 801bfdc:	3201      	adds	r2, #1
 801bfde:	7830      	ldrb	r0, [r6, #0]
 801bfe0:	f7ff ffb0 	bl	801bf44 <__hexdig_fun>
 801bfe4:	2800      	cmp	r0, #0
 801bfe6:	d1f8      	bne.n	801bfda <__gethex+0x6a>
 801bfe8:	498d      	ldr	r1, [pc, #564]	@ (801c220 <__gethex+0x2b0>)
 801bfea:	2201      	movs	r2, #1
 801bfec:	4630      	mov	r0, r6
 801bfee:	f7ff f820 	bl	801b032 <strncmp>
 801bff2:	2800      	cmp	r0, #0
 801bff4:	d13f      	bne.n	801c076 <__gethex+0x106>
 801bff6:	b944      	cbnz	r4, 801c00a <__gethex+0x9a>
 801bff8:	1c74      	adds	r4, r6, #1
 801bffa:	4622      	mov	r2, r4
 801bffc:	4616      	mov	r6, r2
 801bffe:	3201      	adds	r2, #1
 801c000:	7830      	ldrb	r0, [r6, #0]
 801c002:	f7ff ff9f 	bl	801bf44 <__hexdig_fun>
 801c006:	2800      	cmp	r0, #0
 801c008:	d1f8      	bne.n	801bffc <__gethex+0x8c>
 801c00a:	1ba4      	subs	r4, r4, r6
 801c00c:	00a7      	lsls	r7, r4, #2
 801c00e:	7833      	ldrb	r3, [r6, #0]
 801c010:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 801c014:	2b50      	cmp	r3, #80	@ 0x50
 801c016:	d13e      	bne.n	801c096 <__gethex+0x126>
 801c018:	7873      	ldrb	r3, [r6, #1]
 801c01a:	2b2b      	cmp	r3, #43	@ 0x2b
 801c01c:	d033      	beq.n	801c086 <__gethex+0x116>
 801c01e:	2b2d      	cmp	r3, #45	@ 0x2d
 801c020:	d034      	beq.n	801c08c <__gethex+0x11c>
 801c022:	1c71      	adds	r1, r6, #1
 801c024:	2400      	movs	r4, #0
 801c026:	7808      	ldrb	r0, [r1, #0]
 801c028:	f7ff ff8c 	bl	801bf44 <__hexdig_fun>
 801c02c:	1e43      	subs	r3, r0, #1
 801c02e:	b2db      	uxtb	r3, r3
 801c030:	2b18      	cmp	r3, #24
 801c032:	d830      	bhi.n	801c096 <__gethex+0x126>
 801c034:	f1a0 0210 	sub.w	r2, r0, #16
 801c038:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801c03c:	f7ff ff82 	bl	801bf44 <__hexdig_fun>
 801c040:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 801c044:	fa5f fc8c 	uxtb.w	ip, ip
 801c048:	f1bc 0f18 	cmp.w	ip, #24
 801c04c:	f04f 030a 	mov.w	r3, #10
 801c050:	d91e      	bls.n	801c090 <__gethex+0x120>
 801c052:	b104      	cbz	r4, 801c056 <__gethex+0xe6>
 801c054:	4252      	negs	r2, r2
 801c056:	4417      	add	r7, r2
 801c058:	f8ca 1000 	str.w	r1, [sl]
 801c05c:	b1ed      	cbz	r5, 801c09a <__gethex+0x12a>
 801c05e:	f1bb 0f00 	cmp.w	fp, #0
 801c062:	bf0c      	ite	eq
 801c064:	2506      	moveq	r5, #6
 801c066:	2500      	movne	r5, #0
 801c068:	4628      	mov	r0, r5
 801c06a:	b005      	add	sp, #20
 801c06c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c070:	2500      	movs	r5, #0
 801c072:	462c      	mov	r4, r5
 801c074:	e7b0      	b.n	801bfd8 <__gethex+0x68>
 801c076:	2c00      	cmp	r4, #0
 801c078:	d1c7      	bne.n	801c00a <__gethex+0x9a>
 801c07a:	4627      	mov	r7, r4
 801c07c:	e7c7      	b.n	801c00e <__gethex+0x9e>
 801c07e:	464e      	mov	r6, r9
 801c080:	462f      	mov	r7, r5
 801c082:	2501      	movs	r5, #1
 801c084:	e7c3      	b.n	801c00e <__gethex+0x9e>
 801c086:	2400      	movs	r4, #0
 801c088:	1cb1      	adds	r1, r6, #2
 801c08a:	e7cc      	b.n	801c026 <__gethex+0xb6>
 801c08c:	2401      	movs	r4, #1
 801c08e:	e7fb      	b.n	801c088 <__gethex+0x118>
 801c090:	fb03 0002 	mla	r0, r3, r2, r0
 801c094:	e7ce      	b.n	801c034 <__gethex+0xc4>
 801c096:	4631      	mov	r1, r6
 801c098:	e7de      	b.n	801c058 <__gethex+0xe8>
 801c09a:	eba6 0309 	sub.w	r3, r6, r9
 801c09e:	3b01      	subs	r3, #1
 801c0a0:	4629      	mov	r1, r5
 801c0a2:	2b07      	cmp	r3, #7
 801c0a4:	dc0a      	bgt.n	801c0bc <__gethex+0x14c>
 801c0a6:	9801      	ldr	r0, [sp, #4]
 801c0a8:	f000 fafc 	bl	801c6a4 <_Balloc>
 801c0ac:	4604      	mov	r4, r0
 801c0ae:	b940      	cbnz	r0, 801c0c2 <__gethex+0x152>
 801c0b0:	4b5c      	ldr	r3, [pc, #368]	@ (801c224 <__gethex+0x2b4>)
 801c0b2:	4602      	mov	r2, r0
 801c0b4:	21e4      	movs	r1, #228	@ 0xe4
 801c0b6:	485c      	ldr	r0, [pc, #368]	@ (801c228 <__gethex+0x2b8>)
 801c0b8:	f001 ff90 	bl	801dfdc <__assert_func>
 801c0bc:	3101      	adds	r1, #1
 801c0be:	105b      	asrs	r3, r3, #1
 801c0c0:	e7ef      	b.n	801c0a2 <__gethex+0x132>
 801c0c2:	f100 0a14 	add.w	sl, r0, #20
 801c0c6:	2300      	movs	r3, #0
 801c0c8:	4655      	mov	r5, sl
 801c0ca:	469b      	mov	fp, r3
 801c0cc:	45b1      	cmp	r9, r6
 801c0ce:	d337      	bcc.n	801c140 <__gethex+0x1d0>
 801c0d0:	f845 bb04 	str.w	fp, [r5], #4
 801c0d4:	eba5 050a 	sub.w	r5, r5, sl
 801c0d8:	10ad      	asrs	r5, r5, #2
 801c0da:	6125      	str	r5, [r4, #16]
 801c0dc:	4658      	mov	r0, fp
 801c0de:	f000 fbd3 	bl	801c888 <__hi0bits>
 801c0e2:	016d      	lsls	r5, r5, #5
 801c0e4:	f8d8 6000 	ldr.w	r6, [r8]
 801c0e8:	1a2d      	subs	r5, r5, r0
 801c0ea:	42b5      	cmp	r5, r6
 801c0ec:	dd54      	ble.n	801c198 <__gethex+0x228>
 801c0ee:	1bad      	subs	r5, r5, r6
 801c0f0:	4629      	mov	r1, r5
 801c0f2:	4620      	mov	r0, r4
 801c0f4:	f000 ff5c 	bl	801cfb0 <__any_on>
 801c0f8:	4681      	mov	r9, r0
 801c0fa:	b178      	cbz	r0, 801c11c <__gethex+0x1ac>
 801c0fc:	1e6b      	subs	r3, r5, #1
 801c0fe:	1159      	asrs	r1, r3, #5
 801c100:	f003 021f 	and.w	r2, r3, #31
 801c104:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801c108:	f04f 0901 	mov.w	r9, #1
 801c10c:	fa09 f202 	lsl.w	r2, r9, r2
 801c110:	420a      	tst	r2, r1
 801c112:	d003      	beq.n	801c11c <__gethex+0x1ac>
 801c114:	454b      	cmp	r3, r9
 801c116:	dc36      	bgt.n	801c186 <__gethex+0x216>
 801c118:	f04f 0902 	mov.w	r9, #2
 801c11c:	4629      	mov	r1, r5
 801c11e:	4620      	mov	r0, r4
 801c120:	f7ff febe 	bl	801bea0 <rshift>
 801c124:	442f      	add	r7, r5
 801c126:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801c12a:	42bb      	cmp	r3, r7
 801c12c:	da42      	bge.n	801c1b4 <__gethex+0x244>
 801c12e:	9801      	ldr	r0, [sp, #4]
 801c130:	4621      	mov	r1, r4
 801c132:	f000 faf7 	bl	801c724 <_Bfree>
 801c136:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c138:	2300      	movs	r3, #0
 801c13a:	6013      	str	r3, [r2, #0]
 801c13c:	25a3      	movs	r5, #163	@ 0xa3
 801c13e:	e793      	b.n	801c068 <__gethex+0xf8>
 801c140:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 801c144:	2a2e      	cmp	r2, #46	@ 0x2e
 801c146:	d012      	beq.n	801c16e <__gethex+0x1fe>
 801c148:	2b20      	cmp	r3, #32
 801c14a:	d104      	bne.n	801c156 <__gethex+0x1e6>
 801c14c:	f845 bb04 	str.w	fp, [r5], #4
 801c150:	f04f 0b00 	mov.w	fp, #0
 801c154:	465b      	mov	r3, fp
 801c156:	7830      	ldrb	r0, [r6, #0]
 801c158:	9303      	str	r3, [sp, #12]
 801c15a:	f7ff fef3 	bl	801bf44 <__hexdig_fun>
 801c15e:	9b03      	ldr	r3, [sp, #12]
 801c160:	f000 000f 	and.w	r0, r0, #15
 801c164:	4098      	lsls	r0, r3
 801c166:	ea4b 0b00 	orr.w	fp, fp, r0
 801c16a:	3304      	adds	r3, #4
 801c16c:	e7ae      	b.n	801c0cc <__gethex+0x15c>
 801c16e:	45b1      	cmp	r9, r6
 801c170:	d8ea      	bhi.n	801c148 <__gethex+0x1d8>
 801c172:	492b      	ldr	r1, [pc, #172]	@ (801c220 <__gethex+0x2b0>)
 801c174:	9303      	str	r3, [sp, #12]
 801c176:	2201      	movs	r2, #1
 801c178:	4630      	mov	r0, r6
 801c17a:	f7fe ff5a 	bl	801b032 <strncmp>
 801c17e:	9b03      	ldr	r3, [sp, #12]
 801c180:	2800      	cmp	r0, #0
 801c182:	d1e1      	bne.n	801c148 <__gethex+0x1d8>
 801c184:	e7a2      	b.n	801c0cc <__gethex+0x15c>
 801c186:	1ea9      	subs	r1, r5, #2
 801c188:	4620      	mov	r0, r4
 801c18a:	f000 ff11 	bl	801cfb0 <__any_on>
 801c18e:	2800      	cmp	r0, #0
 801c190:	d0c2      	beq.n	801c118 <__gethex+0x1a8>
 801c192:	f04f 0903 	mov.w	r9, #3
 801c196:	e7c1      	b.n	801c11c <__gethex+0x1ac>
 801c198:	da09      	bge.n	801c1ae <__gethex+0x23e>
 801c19a:	1b75      	subs	r5, r6, r5
 801c19c:	4621      	mov	r1, r4
 801c19e:	9801      	ldr	r0, [sp, #4]
 801c1a0:	462a      	mov	r2, r5
 801c1a2:	f000 fccf 	bl	801cb44 <__lshift>
 801c1a6:	1b7f      	subs	r7, r7, r5
 801c1a8:	4604      	mov	r4, r0
 801c1aa:	f100 0a14 	add.w	sl, r0, #20
 801c1ae:	f04f 0900 	mov.w	r9, #0
 801c1b2:	e7b8      	b.n	801c126 <__gethex+0x1b6>
 801c1b4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801c1b8:	42bd      	cmp	r5, r7
 801c1ba:	dd6f      	ble.n	801c29c <__gethex+0x32c>
 801c1bc:	1bed      	subs	r5, r5, r7
 801c1be:	42ae      	cmp	r6, r5
 801c1c0:	dc34      	bgt.n	801c22c <__gethex+0x2bc>
 801c1c2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801c1c6:	2b02      	cmp	r3, #2
 801c1c8:	d022      	beq.n	801c210 <__gethex+0x2a0>
 801c1ca:	2b03      	cmp	r3, #3
 801c1cc:	d024      	beq.n	801c218 <__gethex+0x2a8>
 801c1ce:	2b01      	cmp	r3, #1
 801c1d0:	d115      	bne.n	801c1fe <__gethex+0x28e>
 801c1d2:	42ae      	cmp	r6, r5
 801c1d4:	d113      	bne.n	801c1fe <__gethex+0x28e>
 801c1d6:	2e01      	cmp	r6, #1
 801c1d8:	d10b      	bne.n	801c1f2 <__gethex+0x282>
 801c1da:	9a02      	ldr	r2, [sp, #8]
 801c1dc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801c1e0:	6013      	str	r3, [r2, #0]
 801c1e2:	2301      	movs	r3, #1
 801c1e4:	6123      	str	r3, [r4, #16]
 801c1e6:	f8ca 3000 	str.w	r3, [sl]
 801c1ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c1ec:	2562      	movs	r5, #98	@ 0x62
 801c1ee:	601c      	str	r4, [r3, #0]
 801c1f0:	e73a      	b.n	801c068 <__gethex+0xf8>
 801c1f2:	1e71      	subs	r1, r6, #1
 801c1f4:	4620      	mov	r0, r4
 801c1f6:	f000 fedb 	bl	801cfb0 <__any_on>
 801c1fa:	2800      	cmp	r0, #0
 801c1fc:	d1ed      	bne.n	801c1da <__gethex+0x26a>
 801c1fe:	9801      	ldr	r0, [sp, #4]
 801c200:	4621      	mov	r1, r4
 801c202:	f000 fa8f 	bl	801c724 <_Bfree>
 801c206:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c208:	2300      	movs	r3, #0
 801c20a:	6013      	str	r3, [r2, #0]
 801c20c:	2550      	movs	r5, #80	@ 0x50
 801c20e:	e72b      	b.n	801c068 <__gethex+0xf8>
 801c210:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c212:	2b00      	cmp	r3, #0
 801c214:	d1f3      	bne.n	801c1fe <__gethex+0x28e>
 801c216:	e7e0      	b.n	801c1da <__gethex+0x26a>
 801c218:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c21a:	2b00      	cmp	r3, #0
 801c21c:	d1dd      	bne.n	801c1da <__gethex+0x26a>
 801c21e:	e7ee      	b.n	801c1fe <__gethex+0x28e>
 801c220:	0801fa14 	.word	0x0801fa14
 801c224:	0801fad1 	.word	0x0801fad1
 801c228:	0801fae2 	.word	0x0801fae2
 801c22c:	1e6f      	subs	r7, r5, #1
 801c22e:	f1b9 0f00 	cmp.w	r9, #0
 801c232:	d130      	bne.n	801c296 <__gethex+0x326>
 801c234:	b127      	cbz	r7, 801c240 <__gethex+0x2d0>
 801c236:	4639      	mov	r1, r7
 801c238:	4620      	mov	r0, r4
 801c23a:	f000 feb9 	bl	801cfb0 <__any_on>
 801c23e:	4681      	mov	r9, r0
 801c240:	117a      	asrs	r2, r7, #5
 801c242:	2301      	movs	r3, #1
 801c244:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801c248:	f007 071f 	and.w	r7, r7, #31
 801c24c:	40bb      	lsls	r3, r7
 801c24e:	4213      	tst	r3, r2
 801c250:	4629      	mov	r1, r5
 801c252:	4620      	mov	r0, r4
 801c254:	bf18      	it	ne
 801c256:	f049 0902 	orrne.w	r9, r9, #2
 801c25a:	f7ff fe21 	bl	801bea0 <rshift>
 801c25e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801c262:	1b76      	subs	r6, r6, r5
 801c264:	2502      	movs	r5, #2
 801c266:	f1b9 0f00 	cmp.w	r9, #0
 801c26a:	d047      	beq.n	801c2fc <__gethex+0x38c>
 801c26c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801c270:	2b02      	cmp	r3, #2
 801c272:	d015      	beq.n	801c2a0 <__gethex+0x330>
 801c274:	2b03      	cmp	r3, #3
 801c276:	d017      	beq.n	801c2a8 <__gethex+0x338>
 801c278:	2b01      	cmp	r3, #1
 801c27a:	d109      	bne.n	801c290 <__gethex+0x320>
 801c27c:	f019 0f02 	tst.w	r9, #2
 801c280:	d006      	beq.n	801c290 <__gethex+0x320>
 801c282:	f8da 3000 	ldr.w	r3, [sl]
 801c286:	ea49 0903 	orr.w	r9, r9, r3
 801c28a:	f019 0f01 	tst.w	r9, #1
 801c28e:	d10e      	bne.n	801c2ae <__gethex+0x33e>
 801c290:	f045 0510 	orr.w	r5, r5, #16
 801c294:	e032      	b.n	801c2fc <__gethex+0x38c>
 801c296:	f04f 0901 	mov.w	r9, #1
 801c29a:	e7d1      	b.n	801c240 <__gethex+0x2d0>
 801c29c:	2501      	movs	r5, #1
 801c29e:	e7e2      	b.n	801c266 <__gethex+0x2f6>
 801c2a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c2a2:	f1c3 0301 	rsb	r3, r3, #1
 801c2a6:	930f      	str	r3, [sp, #60]	@ 0x3c
 801c2a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c2aa:	2b00      	cmp	r3, #0
 801c2ac:	d0f0      	beq.n	801c290 <__gethex+0x320>
 801c2ae:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801c2b2:	f104 0314 	add.w	r3, r4, #20
 801c2b6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801c2ba:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801c2be:	f04f 0c00 	mov.w	ip, #0
 801c2c2:	4618      	mov	r0, r3
 801c2c4:	f853 2b04 	ldr.w	r2, [r3], #4
 801c2c8:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801c2cc:	d01b      	beq.n	801c306 <__gethex+0x396>
 801c2ce:	3201      	adds	r2, #1
 801c2d0:	6002      	str	r2, [r0, #0]
 801c2d2:	2d02      	cmp	r5, #2
 801c2d4:	f104 0314 	add.w	r3, r4, #20
 801c2d8:	d13c      	bne.n	801c354 <__gethex+0x3e4>
 801c2da:	f8d8 2000 	ldr.w	r2, [r8]
 801c2de:	3a01      	subs	r2, #1
 801c2e0:	42b2      	cmp	r2, r6
 801c2e2:	d109      	bne.n	801c2f8 <__gethex+0x388>
 801c2e4:	1171      	asrs	r1, r6, #5
 801c2e6:	2201      	movs	r2, #1
 801c2e8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801c2ec:	f006 061f 	and.w	r6, r6, #31
 801c2f0:	fa02 f606 	lsl.w	r6, r2, r6
 801c2f4:	421e      	tst	r6, r3
 801c2f6:	d13a      	bne.n	801c36e <__gethex+0x3fe>
 801c2f8:	f045 0520 	orr.w	r5, r5, #32
 801c2fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c2fe:	601c      	str	r4, [r3, #0]
 801c300:	9b02      	ldr	r3, [sp, #8]
 801c302:	601f      	str	r7, [r3, #0]
 801c304:	e6b0      	b.n	801c068 <__gethex+0xf8>
 801c306:	4299      	cmp	r1, r3
 801c308:	f843 cc04 	str.w	ip, [r3, #-4]
 801c30c:	d8d9      	bhi.n	801c2c2 <__gethex+0x352>
 801c30e:	68a3      	ldr	r3, [r4, #8]
 801c310:	459b      	cmp	fp, r3
 801c312:	db17      	blt.n	801c344 <__gethex+0x3d4>
 801c314:	6861      	ldr	r1, [r4, #4]
 801c316:	9801      	ldr	r0, [sp, #4]
 801c318:	3101      	adds	r1, #1
 801c31a:	f000 f9c3 	bl	801c6a4 <_Balloc>
 801c31e:	4681      	mov	r9, r0
 801c320:	b918      	cbnz	r0, 801c32a <__gethex+0x3ba>
 801c322:	4b1a      	ldr	r3, [pc, #104]	@ (801c38c <__gethex+0x41c>)
 801c324:	4602      	mov	r2, r0
 801c326:	2184      	movs	r1, #132	@ 0x84
 801c328:	e6c5      	b.n	801c0b6 <__gethex+0x146>
 801c32a:	6922      	ldr	r2, [r4, #16]
 801c32c:	3202      	adds	r2, #2
 801c32e:	f104 010c 	add.w	r1, r4, #12
 801c332:	0092      	lsls	r2, r2, #2
 801c334:	300c      	adds	r0, #12
 801c336:	f7fe ff64 	bl	801b202 <memcpy>
 801c33a:	4621      	mov	r1, r4
 801c33c:	9801      	ldr	r0, [sp, #4]
 801c33e:	f000 f9f1 	bl	801c724 <_Bfree>
 801c342:	464c      	mov	r4, r9
 801c344:	6923      	ldr	r3, [r4, #16]
 801c346:	1c5a      	adds	r2, r3, #1
 801c348:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801c34c:	6122      	str	r2, [r4, #16]
 801c34e:	2201      	movs	r2, #1
 801c350:	615a      	str	r2, [r3, #20]
 801c352:	e7be      	b.n	801c2d2 <__gethex+0x362>
 801c354:	6922      	ldr	r2, [r4, #16]
 801c356:	455a      	cmp	r2, fp
 801c358:	dd0b      	ble.n	801c372 <__gethex+0x402>
 801c35a:	2101      	movs	r1, #1
 801c35c:	4620      	mov	r0, r4
 801c35e:	f7ff fd9f 	bl	801bea0 <rshift>
 801c362:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801c366:	3701      	adds	r7, #1
 801c368:	42bb      	cmp	r3, r7
 801c36a:	f6ff aee0 	blt.w	801c12e <__gethex+0x1be>
 801c36e:	2501      	movs	r5, #1
 801c370:	e7c2      	b.n	801c2f8 <__gethex+0x388>
 801c372:	f016 061f 	ands.w	r6, r6, #31
 801c376:	d0fa      	beq.n	801c36e <__gethex+0x3fe>
 801c378:	4453      	add	r3, sl
 801c37a:	f1c6 0620 	rsb	r6, r6, #32
 801c37e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801c382:	f000 fa81 	bl	801c888 <__hi0bits>
 801c386:	42b0      	cmp	r0, r6
 801c388:	dbe7      	blt.n	801c35a <__gethex+0x3ea>
 801c38a:	e7f0      	b.n	801c36e <__gethex+0x3fe>
 801c38c:	0801fad1 	.word	0x0801fad1

0801c390 <L_shift>:
 801c390:	f1c2 0208 	rsb	r2, r2, #8
 801c394:	0092      	lsls	r2, r2, #2
 801c396:	b570      	push	{r4, r5, r6, lr}
 801c398:	f1c2 0620 	rsb	r6, r2, #32
 801c39c:	6843      	ldr	r3, [r0, #4]
 801c39e:	6804      	ldr	r4, [r0, #0]
 801c3a0:	fa03 f506 	lsl.w	r5, r3, r6
 801c3a4:	432c      	orrs	r4, r5
 801c3a6:	40d3      	lsrs	r3, r2
 801c3a8:	6004      	str	r4, [r0, #0]
 801c3aa:	f840 3f04 	str.w	r3, [r0, #4]!
 801c3ae:	4288      	cmp	r0, r1
 801c3b0:	d3f4      	bcc.n	801c39c <L_shift+0xc>
 801c3b2:	bd70      	pop	{r4, r5, r6, pc}

0801c3b4 <__match>:
 801c3b4:	b530      	push	{r4, r5, lr}
 801c3b6:	6803      	ldr	r3, [r0, #0]
 801c3b8:	3301      	adds	r3, #1
 801c3ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c3be:	b914      	cbnz	r4, 801c3c6 <__match+0x12>
 801c3c0:	6003      	str	r3, [r0, #0]
 801c3c2:	2001      	movs	r0, #1
 801c3c4:	bd30      	pop	{r4, r5, pc}
 801c3c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c3ca:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801c3ce:	2d19      	cmp	r5, #25
 801c3d0:	bf98      	it	ls
 801c3d2:	3220      	addls	r2, #32
 801c3d4:	42a2      	cmp	r2, r4
 801c3d6:	d0f0      	beq.n	801c3ba <__match+0x6>
 801c3d8:	2000      	movs	r0, #0
 801c3da:	e7f3      	b.n	801c3c4 <__match+0x10>

0801c3dc <__hexnan>:
 801c3dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c3e0:	680b      	ldr	r3, [r1, #0]
 801c3e2:	6801      	ldr	r1, [r0, #0]
 801c3e4:	115e      	asrs	r6, r3, #5
 801c3e6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801c3ea:	f013 031f 	ands.w	r3, r3, #31
 801c3ee:	b087      	sub	sp, #28
 801c3f0:	bf18      	it	ne
 801c3f2:	3604      	addne	r6, #4
 801c3f4:	2500      	movs	r5, #0
 801c3f6:	1f37      	subs	r7, r6, #4
 801c3f8:	4682      	mov	sl, r0
 801c3fa:	4690      	mov	r8, r2
 801c3fc:	9301      	str	r3, [sp, #4]
 801c3fe:	f846 5c04 	str.w	r5, [r6, #-4]
 801c402:	46b9      	mov	r9, r7
 801c404:	463c      	mov	r4, r7
 801c406:	9502      	str	r5, [sp, #8]
 801c408:	46ab      	mov	fp, r5
 801c40a:	784a      	ldrb	r2, [r1, #1]
 801c40c:	1c4b      	adds	r3, r1, #1
 801c40e:	9303      	str	r3, [sp, #12]
 801c410:	b342      	cbz	r2, 801c464 <__hexnan+0x88>
 801c412:	4610      	mov	r0, r2
 801c414:	9105      	str	r1, [sp, #20]
 801c416:	9204      	str	r2, [sp, #16]
 801c418:	f7ff fd94 	bl	801bf44 <__hexdig_fun>
 801c41c:	2800      	cmp	r0, #0
 801c41e:	d151      	bne.n	801c4c4 <__hexnan+0xe8>
 801c420:	9a04      	ldr	r2, [sp, #16]
 801c422:	9905      	ldr	r1, [sp, #20]
 801c424:	2a20      	cmp	r2, #32
 801c426:	d818      	bhi.n	801c45a <__hexnan+0x7e>
 801c428:	9b02      	ldr	r3, [sp, #8]
 801c42a:	459b      	cmp	fp, r3
 801c42c:	dd13      	ble.n	801c456 <__hexnan+0x7a>
 801c42e:	454c      	cmp	r4, r9
 801c430:	d206      	bcs.n	801c440 <__hexnan+0x64>
 801c432:	2d07      	cmp	r5, #7
 801c434:	dc04      	bgt.n	801c440 <__hexnan+0x64>
 801c436:	462a      	mov	r2, r5
 801c438:	4649      	mov	r1, r9
 801c43a:	4620      	mov	r0, r4
 801c43c:	f7ff ffa8 	bl	801c390 <L_shift>
 801c440:	4544      	cmp	r4, r8
 801c442:	d952      	bls.n	801c4ea <__hexnan+0x10e>
 801c444:	2300      	movs	r3, #0
 801c446:	f1a4 0904 	sub.w	r9, r4, #4
 801c44a:	f844 3c04 	str.w	r3, [r4, #-4]
 801c44e:	f8cd b008 	str.w	fp, [sp, #8]
 801c452:	464c      	mov	r4, r9
 801c454:	461d      	mov	r5, r3
 801c456:	9903      	ldr	r1, [sp, #12]
 801c458:	e7d7      	b.n	801c40a <__hexnan+0x2e>
 801c45a:	2a29      	cmp	r2, #41	@ 0x29
 801c45c:	d157      	bne.n	801c50e <__hexnan+0x132>
 801c45e:	3102      	adds	r1, #2
 801c460:	f8ca 1000 	str.w	r1, [sl]
 801c464:	f1bb 0f00 	cmp.w	fp, #0
 801c468:	d051      	beq.n	801c50e <__hexnan+0x132>
 801c46a:	454c      	cmp	r4, r9
 801c46c:	d206      	bcs.n	801c47c <__hexnan+0xa0>
 801c46e:	2d07      	cmp	r5, #7
 801c470:	dc04      	bgt.n	801c47c <__hexnan+0xa0>
 801c472:	462a      	mov	r2, r5
 801c474:	4649      	mov	r1, r9
 801c476:	4620      	mov	r0, r4
 801c478:	f7ff ff8a 	bl	801c390 <L_shift>
 801c47c:	4544      	cmp	r4, r8
 801c47e:	d936      	bls.n	801c4ee <__hexnan+0x112>
 801c480:	f1a8 0204 	sub.w	r2, r8, #4
 801c484:	4623      	mov	r3, r4
 801c486:	f853 1b04 	ldr.w	r1, [r3], #4
 801c48a:	f842 1f04 	str.w	r1, [r2, #4]!
 801c48e:	429f      	cmp	r7, r3
 801c490:	d2f9      	bcs.n	801c486 <__hexnan+0xaa>
 801c492:	1b3b      	subs	r3, r7, r4
 801c494:	f023 0303 	bic.w	r3, r3, #3
 801c498:	3304      	adds	r3, #4
 801c49a:	3401      	adds	r4, #1
 801c49c:	3e03      	subs	r6, #3
 801c49e:	42b4      	cmp	r4, r6
 801c4a0:	bf88      	it	hi
 801c4a2:	2304      	movhi	r3, #4
 801c4a4:	4443      	add	r3, r8
 801c4a6:	2200      	movs	r2, #0
 801c4a8:	f843 2b04 	str.w	r2, [r3], #4
 801c4ac:	429f      	cmp	r7, r3
 801c4ae:	d2fb      	bcs.n	801c4a8 <__hexnan+0xcc>
 801c4b0:	683b      	ldr	r3, [r7, #0]
 801c4b2:	b91b      	cbnz	r3, 801c4bc <__hexnan+0xe0>
 801c4b4:	4547      	cmp	r7, r8
 801c4b6:	d128      	bne.n	801c50a <__hexnan+0x12e>
 801c4b8:	2301      	movs	r3, #1
 801c4ba:	603b      	str	r3, [r7, #0]
 801c4bc:	2005      	movs	r0, #5
 801c4be:	b007      	add	sp, #28
 801c4c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c4c4:	3501      	adds	r5, #1
 801c4c6:	2d08      	cmp	r5, #8
 801c4c8:	f10b 0b01 	add.w	fp, fp, #1
 801c4cc:	dd06      	ble.n	801c4dc <__hexnan+0x100>
 801c4ce:	4544      	cmp	r4, r8
 801c4d0:	d9c1      	bls.n	801c456 <__hexnan+0x7a>
 801c4d2:	2300      	movs	r3, #0
 801c4d4:	f844 3c04 	str.w	r3, [r4, #-4]
 801c4d8:	2501      	movs	r5, #1
 801c4da:	3c04      	subs	r4, #4
 801c4dc:	6822      	ldr	r2, [r4, #0]
 801c4de:	f000 000f 	and.w	r0, r0, #15
 801c4e2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801c4e6:	6020      	str	r0, [r4, #0]
 801c4e8:	e7b5      	b.n	801c456 <__hexnan+0x7a>
 801c4ea:	2508      	movs	r5, #8
 801c4ec:	e7b3      	b.n	801c456 <__hexnan+0x7a>
 801c4ee:	9b01      	ldr	r3, [sp, #4]
 801c4f0:	2b00      	cmp	r3, #0
 801c4f2:	d0dd      	beq.n	801c4b0 <__hexnan+0xd4>
 801c4f4:	f1c3 0320 	rsb	r3, r3, #32
 801c4f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801c4fc:	40da      	lsrs	r2, r3
 801c4fe:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801c502:	4013      	ands	r3, r2
 801c504:	f846 3c04 	str.w	r3, [r6, #-4]
 801c508:	e7d2      	b.n	801c4b0 <__hexnan+0xd4>
 801c50a:	3f04      	subs	r7, #4
 801c50c:	e7d0      	b.n	801c4b0 <__hexnan+0xd4>
 801c50e:	2004      	movs	r0, #4
 801c510:	e7d5      	b.n	801c4be <__hexnan+0xe2>
	...

0801c514 <malloc>:
 801c514:	4b02      	ldr	r3, [pc, #8]	@ (801c520 <malloc+0xc>)
 801c516:	4601      	mov	r1, r0
 801c518:	6818      	ldr	r0, [r3, #0]
 801c51a:	f000 b825 	b.w	801c568 <_malloc_r>
 801c51e:	bf00      	nop
 801c520:	240001a4 	.word	0x240001a4

0801c524 <sbrk_aligned>:
 801c524:	b570      	push	{r4, r5, r6, lr}
 801c526:	4e0f      	ldr	r6, [pc, #60]	@ (801c564 <sbrk_aligned+0x40>)
 801c528:	460c      	mov	r4, r1
 801c52a:	6831      	ldr	r1, [r6, #0]
 801c52c:	4605      	mov	r5, r0
 801c52e:	b911      	cbnz	r1, 801c536 <sbrk_aligned+0x12>
 801c530:	f001 fd44 	bl	801dfbc <_sbrk_r>
 801c534:	6030      	str	r0, [r6, #0]
 801c536:	4621      	mov	r1, r4
 801c538:	4628      	mov	r0, r5
 801c53a:	f001 fd3f 	bl	801dfbc <_sbrk_r>
 801c53e:	1c43      	adds	r3, r0, #1
 801c540:	d103      	bne.n	801c54a <sbrk_aligned+0x26>
 801c542:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801c546:	4620      	mov	r0, r4
 801c548:	bd70      	pop	{r4, r5, r6, pc}
 801c54a:	1cc4      	adds	r4, r0, #3
 801c54c:	f024 0403 	bic.w	r4, r4, #3
 801c550:	42a0      	cmp	r0, r4
 801c552:	d0f8      	beq.n	801c546 <sbrk_aligned+0x22>
 801c554:	1a21      	subs	r1, r4, r0
 801c556:	4628      	mov	r0, r5
 801c558:	f001 fd30 	bl	801dfbc <_sbrk_r>
 801c55c:	3001      	adds	r0, #1
 801c55e:	d1f2      	bne.n	801c546 <sbrk_aligned+0x22>
 801c560:	e7ef      	b.n	801c542 <sbrk_aligned+0x1e>
 801c562:	bf00      	nop
 801c564:	24005d00 	.word	0x24005d00

0801c568 <_malloc_r>:
 801c568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c56c:	1ccd      	adds	r5, r1, #3
 801c56e:	f025 0503 	bic.w	r5, r5, #3
 801c572:	3508      	adds	r5, #8
 801c574:	2d0c      	cmp	r5, #12
 801c576:	bf38      	it	cc
 801c578:	250c      	movcc	r5, #12
 801c57a:	2d00      	cmp	r5, #0
 801c57c:	4606      	mov	r6, r0
 801c57e:	db01      	blt.n	801c584 <_malloc_r+0x1c>
 801c580:	42a9      	cmp	r1, r5
 801c582:	d904      	bls.n	801c58e <_malloc_r+0x26>
 801c584:	230c      	movs	r3, #12
 801c586:	6033      	str	r3, [r6, #0]
 801c588:	2000      	movs	r0, #0
 801c58a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c58e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801c664 <_malloc_r+0xfc>
 801c592:	f000 f87b 	bl	801c68c <__malloc_lock>
 801c596:	f8d8 3000 	ldr.w	r3, [r8]
 801c59a:	461c      	mov	r4, r3
 801c59c:	bb44      	cbnz	r4, 801c5f0 <_malloc_r+0x88>
 801c59e:	4629      	mov	r1, r5
 801c5a0:	4630      	mov	r0, r6
 801c5a2:	f7ff ffbf 	bl	801c524 <sbrk_aligned>
 801c5a6:	1c43      	adds	r3, r0, #1
 801c5a8:	4604      	mov	r4, r0
 801c5aa:	d158      	bne.n	801c65e <_malloc_r+0xf6>
 801c5ac:	f8d8 4000 	ldr.w	r4, [r8]
 801c5b0:	4627      	mov	r7, r4
 801c5b2:	2f00      	cmp	r7, #0
 801c5b4:	d143      	bne.n	801c63e <_malloc_r+0xd6>
 801c5b6:	2c00      	cmp	r4, #0
 801c5b8:	d04b      	beq.n	801c652 <_malloc_r+0xea>
 801c5ba:	6823      	ldr	r3, [r4, #0]
 801c5bc:	4639      	mov	r1, r7
 801c5be:	4630      	mov	r0, r6
 801c5c0:	eb04 0903 	add.w	r9, r4, r3
 801c5c4:	f001 fcfa 	bl	801dfbc <_sbrk_r>
 801c5c8:	4581      	cmp	r9, r0
 801c5ca:	d142      	bne.n	801c652 <_malloc_r+0xea>
 801c5cc:	6821      	ldr	r1, [r4, #0]
 801c5ce:	1a6d      	subs	r5, r5, r1
 801c5d0:	4629      	mov	r1, r5
 801c5d2:	4630      	mov	r0, r6
 801c5d4:	f7ff ffa6 	bl	801c524 <sbrk_aligned>
 801c5d8:	3001      	adds	r0, #1
 801c5da:	d03a      	beq.n	801c652 <_malloc_r+0xea>
 801c5dc:	6823      	ldr	r3, [r4, #0]
 801c5de:	442b      	add	r3, r5
 801c5e0:	6023      	str	r3, [r4, #0]
 801c5e2:	f8d8 3000 	ldr.w	r3, [r8]
 801c5e6:	685a      	ldr	r2, [r3, #4]
 801c5e8:	bb62      	cbnz	r2, 801c644 <_malloc_r+0xdc>
 801c5ea:	f8c8 7000 	str.w	r7, [r8]
 801c5ee:	e00f      	b.n	801c610 <_malloc_r+0xa8>
 801c5f0:	6822      	ldr	r2, [r4, #0]
 801c5f2:	1b52      	subs	r2, r2, r5
 801c5f4:	d420      	bmi.n	801c638 <_malloc_r+0xd0>
 801c5f6:	2a0b      	cmp	r2, #11
 801c5f8:	d917      	bls.n	801c62a <_malloc_r+0xc2>
 801c5fa:	1961      	adds	r1, r4, r5
 801c5fc:	42a3      	cmp	r3, r4
 801c5fe:	6025      	str	r5, [r4, #0]
 801c600:	bf18      	it	ne
 801c602:	6059      	strne	r1, [r3, #4]
 801c604:	6863      	ldr	r3, [r4, #4]
 801c606:	bf08      	it	eq
 801c608:	f8c8 1000 	streq.w	r1, [r8]
 801c60c:	5162      	str	r2, [r4, r5]
 801c60e:	604b      	str	r3, [r1, #4]
 801c610:	4630      	mov	r0, r6
 801c612:	f000 f841 	bl	801c698 <__malloc_unlock>
 801c616:	f104 000b 	add.w	r0, r4, #11
 801c61a:	1d23      	adds	r3, r4, #4
 801c61c:	f020 0007 	bic.w	r0, r0, #7
 801c620:	1ac2      	subs	r2, r0, r3
 801c622:	bf1c      	itt	ne
 801c624:	1a1b      	subne	r3, r3, r0
 801c626:	50a3      	strne	r3, [r4, r2]
 801c628:	e7af      	b.n	801c58a <_malloc_r+0x22>
 801c62a:	6862      	ldr	r2, [r4, #4]
 801c62c:	42a3      	cmp	r3, r4
 801c62e:	bf0c      	ite	eq
 801c630:	f8c8 2000 	streq.w	r2, [r8]
 801c634:	605a      	strne	r2, [r3, #4]
 801c636:	e7eb      	b.n	801c610 <_malloc_r+0xa8>
 801c638:	4623      	mov	r3, r4
 801c63a:	6864      	ldr	r4, [r4, #4]
 801c63c:	e7ae      	b.n	801c59c <_malloc_r+0x34>
 801c63e:	463c      	mov	r4, r7
 801c640:	687f      	ldr	r7, [r7, #4]
 801c642:	e7b6      	b.n	801c5b2 <_malloc_r+0x4a>
 801c644:	461a      	mov	r2, r3
 801c646:	685b      	ldr	r3, [r3, #4]
 801c648:	42a3      	cmp	r3, r4
 801c64a:	d1fb      	bne.n	801c644 <_malloc_r+0xdc>
 801c64c:	2300      	movs	r3, #0
 801c64e:	6053      	str	r3, [r2, #4]
 801c650:	e7de      	b.n	801c610 <_malloc_r+0xa8>
 801c652:	230c      	movs	r3, #12
 801c654:	6033      	str	r3, [r6, #0]
 801c656:	4630      	mov	r0, r6
 801c658:	f000 f81e 	bl	801c698 <__malloc_unlock>
 801c65c:	e794      	b.n	801c588 <_malloc_r+0x20>
 801c65e:	6005      	str	r5, [r0, #0]
 801c660:	e7d6      	b.n	801c610 <_malloc_r+0xa8>
 801c662:	bf00      	nop
 801c664:	24005d04 	.word	0x24005d04

0801c668 <__ascii_mbtowc>:
 801c668:	b082      	sub	sp, #8
 801c66a:	b901      	cbnz	r1, 801c66e <__ascii_mbtowc+0x6>
 801c66c:	a901      	add	r1, sp, #4
 801c66e:	b142      	cbz	r2, 801c682 <__ascii_mbtowc+0x1a>
 801c670:	b14b      	cbz	r3, 801c686 <__ascii_mbtowc+0x1e>
 801c672:	7813      	ldrb	r3, [r2, #0]
 801c674:	600b      	str	r3, [r1, #0]
 801c676:	7812      	ldrb	r2, [r2, #0]
 801c678:	1e10      	subs	r0, r2, #0
 801c67a:	bf18      	it	ne
 801c67c:	2001      	movne	r0, #1
 801c67e:	b002      	add	sp, #8
 801c680:	4770      	bx	lr
 801c682:	4610      	mov	r0, r2
 801c684:	e7fb      	b.n	801c67e <__ascii_mbtowc+0x16>
 801c686:	f06f 0001 	mvn.w	r0, #1
 801c68a:	e7f8      	b.n	801c67e <__ascii_mbtowc+0x16>

0801c68c <__malloc_lock>:
 801c68c:	4801      	ldr	r0, [pc, #4]	@ (801c694 <__malloc_lock+0x8>)
 801c68e:	f7fe bdb6 	b.w	801b1fe <__retarget_lock_acquire_recursive>
 801c692:	bf00      	nop
 801c694:	24005cfc 	.word	0x24005cfc

0801c698 <__malloc_unlock>:
 801c698:	4801      	ldr	r0, [pc, #4]	@ (801c6a0 <__malloc_unlock+0x8>)
 801c69a:	f7fe bdb1 	b.w	801b200 <__retarget_lock_release_recursive>
 801c69e:	bf00      	nop
 801c6a0:	24005cfc 	.word	0x24005cfc

0801c6a4 <_Balloc>:
 801c6a4:	b570      	push	{r4, r5, r6, lr}
 801c6a6:	69c6      	ldr	r6, [r0, #28]
 801c6a8:	4604      	mov	r4, r0
 801c6aa:	460d      	mov	r5, r1
 801c6ac:	b976      	cbnz	r6, 801c6cc <_Balloc+0x28>
 801c6ae:	2010      	movs	r0, #16
 801c6b0:	f7ff ff30 	bl	801c514 <malloc>
 801c6b4:	4602      	mov	r2, r0
 801c6b6:	61e0      	str	r0, [r4, #28]
 801c6b8:	b920      	cbnz	r0, 801c6c4 <_Balloc+0x20>
 801c6ba:	4b18      	ldr	r3, [pc, #96]	@ (801c71c <_Balloc+0x78>)
 801c6bc:	4818      	ldr	r0, [pc, #96]	@ (801c720 <_Balloc+0x7c>)
 801c6be:	216b      	movs	r1, #107	@ 0x6b
 801c6c0:	f001 fc8c 	bl	801dfdc <__assert_func>
 801c6c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c6c8:	6006      	str	r6, [r0, #0]
 801c6ca:	60c6      	str	r6, [r0, #12]
 801c6cc:	69e6      	ldr	r6, [r4, #28]
 801c6ce:	68f3      	ldr	r3, [r6, #12]
 801c6d0:	b183      	cbz	r3, 801c6f4 <_Balloc+0x50>
 801c6d2:	69e3      	ldr	r3, [r4, #28]
 801c6d4:	68db      	ldr	r3, [r3, #12]
 801c6d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801c6da:	b9b8      	cbnz	r0, 801c70c <_Balloc+0x68>
 801c6dc:	2101      	movs	r1, #1
 801c6de:	fa01 f605 	lsl.w	r6, r1, r5
 801c6e2:	1d72      	adds	r2, r6, #5
 801c6e4:	0092      	lsls	r2, r2, #2
 801c6e6:	4620      	mov	r0, r4
 801c6e8:	f001 fc96 	bl	801e018 <_calloc_r>
 801c6ec:	b160      	cbz	r0, 801c708 <_Balloc+0x64>
 801c6ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801c6f2:	e00e      	b.n	801c712 <_Balloc+0x6e>
 801c6f4:	2221      	movs	r2, #33	@ 0x21
 801c6f6:	2104      	movs	r1, #4
 801c6f8:	4620      	mov	r0, r4
 801c6fa:	f001 fc8d 	bl	801e018 <_calloc_r>
 801c6fe:	69e3      	ldr	r3, [r4, #28]
 801c700:	60f0      	str	r0, [r6, #12]
 801c702:	68db      	ldr	r3, [r3, #12]
 801c704:	2b00      	cmp	r3, #0
 801c706:	d1e4      	bne.n	801c6d2 <_Balloc+0x2e>
 801c708:	2000      	movs	r0, #0
 801c70a:	bd70      	pop	{r4, r5, r6, pc}
 801c70c:	6802      	ldr	r2, [r0, #0]
 801c70e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c712:	2300      	movs	r3, #0
 801c714:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801c718:	e7f7      	b.n	801c70a <_Balloc+0x66>
 801c71a:	bf00      	nop
 801c71c:	0801fa62 	.word	0x0801fa62
 801c720:	0801fb42 	.word	0x0801fb42

0801c724 <_Bfree>:
 801c724:	b570      	push	{r4, r5, r6, lr}
 801c726:	69c6      	ldr	r6, [r0, #28]
 801c728:	4605      	mov	r5, r0
 801c72a:	460c      	mov	r4, r1
 801c72c:	b976      	cbnz	r6, 801c74c <_Bfree+0x28>
 801c72e:	2010      	movs	r0, #16
 801c730:	f7ff fef0 	bl	801c514 <malloc>
 801c734:	4602      	mov	r2, r0
 801c736:	61e8      	str	r0, [r5, #28]
 801c738:	b920      	cbnz	r0, 801c744 <_Bfree+0x20>
 801c73a:	4b09      	ldr	r3, [pc, #36]	@ (801c760 <_Bfree+0x3c>)
 801c73c:	4809      	ldr	r0, [pc, #36]	@ (801c764 <_Bfree+0x40>)
 801c73e:	218f      	movs	r1, #143	@ 0x8f
 801c740:	f001 fc4c 	bl	801dfdc <__assert_func>
 801c744:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c748:	6006      	str	r6, [r0, #0]
 801c74a:	60c6      	str	r6, [r0, #12]
 801c74c:	b13c      	cbz	r4, 801c75e <_Bfree+0x3a>
 801c74e:	69eb      	ldr	r3, [r5, #28]
 801c750:	6862      	ldr	r2, [r4, #4]
 801c752:	68db      	ldr	r3, [r3, #12]
 801c754:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801c758:	6021      	str	r1, [r4, #0]
 801c75a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801c75e:	bd70      	pop	{r4, r5, r6, pc}
 801c760:	0801fa62 	.word	0x0801fa62
 801c764:	0801fb42 	.word	0x0801fb42

0801c768 <__multadd>:
 801c768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c76c:	690d      	ldr	r5, [r1, #16]
 801c76e:	4607      	mov	r7, r0
 801c770:	460c      	mov	r4, r1
 801c772:	461e      	mov	r6, r3
 801c774:	f101 0c14 	add.w	ip, r1, #20
 801c778:	2000      	movs	r0, #0
 801c77a:	f8dc 3000 	ldr.w	r3, [ip]
 801c77e:	b299      	uxth	r1, r3
 801c780:	fb02 6101 	mla	r1, r2, r1, r6
 801c784:	0c1e      	lsrs	r6, r3, #16
 801c786:	0c0b      	lsrs	r3, r1, #16
 801c788:	fb02 3306 	mla	r3, r2, r6, r3
 801c78c:	b289      	uxth	r1, r1
 801c78e:	3001      	adds	r0, #1
 801c790:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801c794:	4285      	cmp	r5, r0
 801c796:	f84c 1b04 	str.w	r1, [ip], #4
 801c79a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801c79e:	dcec      	bgt.n	801c77a <__multadd+0x12>
 801c7a0:	b30e      	cbz	r6, 801c7e6 <__multadd+0x7e>
 801c7a2:	68a3      	ldr	r3, [r4, #8]
 801c7a4:	42ab      	cmp	r3, r5
 801c7a6:	dc19      	bgt.n	801c7dc <__multadd+0x74>
 801c7a8:	6861      	ldr	r1, [r4, #4]
 801c7aa:	4638      	mov	r0, r7
 801c7ac:	3101      	adds	r1, #1
 801c7ae:	f7ff ff79 	bl	801c6a4 <_Balloc>
 801c7b2:	4680      	mov	r8, r0
 801c7b4:	b928      	cbnz	r0, 801c7c2 <__multadd+0x5a>
 801c7b6:	4602      	mov	r2, r0
 801c7b8:	4b0c      	ldr	r3, [pc, #48]	@ (801c7ec <__multadd+0x84>)
 801c7ba:	480d      	ldr	r0, [pc, #52]	@ (801c7f0 <__multadd+0x88>)
 801c7bc:	21ba      	movs	r1, #186	@ 0xba
 801c7be:	f001 fc0d 	bl	801dfdc <__assert_func>
 801c7c2:	6922      	ldr	r2, [r4, #16]
 801c7c4:	3202      	adds	r2, #2
 801c7c6:	f104 010c 	add.w	r1, r4, #12
 801c7ca:	0092      	lsls	r2, r2, #2
 801c7cc:	300c      	adds	r0, #12
 801c7ce:	f7fe fd18 	bl	801b202 <memcpy>
 801c7d2:	4621      	mov	r1, r4
 801c7d4:	4638      	mov	r0, r7
 801c7d6:	f7ff ffa5 	bl	801c724 <_Bfree>
 801c7da:	4644      	mov	r4, r8
 801c7dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801c7e0:	3501      	adds	r5, #1
 801c7e2:	615e      	str	r6, [r3, #20]
 801c7e4:	6125      	str	r5, [r4, #16]
 801c7e6:	4620      	mov	r0, r4
 801c7e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c7ec:	0801fad1 	.word	0x0801fad1
 801c7f0:	0801fb42 	.word	0x0801fb42

0801c7f4 <__s2b>:
 801c7f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c7f8:	460c      	mov	r4, r1
 801c7fa:	4615      	mov	r5, r2
 801c7fc:	461f      	mov	r7, r3
 801c7fe:	2209      	movs	r2, #9
 801c800:	3308      	adds	r3, #8
 801c802:	4606      	mov	r6, r0
 801c804:	fb93 f3f2 	sdiv	r3, r3, r2
 801c808:	2100      	movs	r1, #0
 801c80a:	2201      	movs	r2, #1
 801c80c:	429a      	cmp	r2, r3
 801c80e:	db09      	blt.n	801c824 <__s2b+0x30>
 801c810:	4630      	mov	r0, r6
 801c812:	f7ff ff47 	bl	801c6a4 <_Balloc>
 801c816:	b940      	cbnz	r0, 801c82a <__s2b+0x36>
 801c818:	4602      	mov	r2, r0
 801c81a:	4b19      	ldr	r3, [pc, #100]	@ (801c880 <__s2b+0x8c>)
 801c81c:	4819      	ldr	r0, [pc, #100]	@ (801c884 <__s2b+0x90>)
 801c81e:	21d3      	movs	r1, #211	@ 0xd3
 801c820:	f001 fbdc 	bl	801dfdc <__assert_func>
 801c824:	0052      	lsls	r2, r2, #1
 801c826:	3101      	adds	r1, #1
 801c828:	e7f0      	b.n	801c80c <__s2b+0x18>
 801c82a:	9b08      	ldr	r3, [sp, #32]
 801c82c:	6143      	str	r3, [r0, #20]
 801c82e:	2d09      	cmp	r5, #9
 801c830:	f04f 0301 	mov.w	r3, #1
 801c834:	6103      	str	r3, [r0, #16]
 801c836:	dd16      	ble.n	801c866 <__s2b+0x72>
 801c838:	f104 0909 	add.w	r9, r4, #9
 801c83c:	46c8      	mov	r8, r9
 801c83e:	442c      	add	r4, r5
 801c840:	f818 3b01 	ldrb.w	r3, [r8], #1
 801c844:	4601      	mov	r1, r0
 801c846:	3b30      	subs	r3, #48	@ 0x30
 801c848:	220a      	movs	r2, #10
 801c84a:	4630      	mov	r0, r6
 801c84c:	f7ff ff8c 	bl	801c768 <__multadd>
 801c850:	45a0      	cmp	r8, r4
 801c852:	d1f5      	bne.n	801c840 <__s2b+0x4c>
 801c854:	f1a5 0408 	sub.w	r4, r5, #8
 801c858:	444c      	add	r4, r9
 801c85a:	1b2d      	subs	r5, r5, r4
 801c85c:	1963      	adds	r3, r4, r5
 801c85e:	42bb      	cmp	r3, r7
 801c860:	db04      	blt.n	801c86c <__s2b+0x78>
 801c862:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c866:	340a      	adds	r4, #10
 801c868:	2509      	movs	r5, #9
 801c86a:	e7f6      	b.n	801c85a <__s2b+0x66>
 801c86c:	f814 3b01 	ldrb.w	r3, [r4], #1
 801c870:	4601      	mov	r1, r0
 801c872:	3b30      	subs	r3, #48	@ 0x30
 801c874:	220a      	movs	r2, #10
 801c876:	4630      	mov	r0, r6
 801c878:	f7ff ff76 	bl	801c768 <__multadd>
 801c87c:	e7ee      	b.n	801c85c <__s2b+0x68>
 801c87e:	bf00      	nop
 801c880:	0801fad1 	.word	0x0801fad1
 801c884:	0801fb42 	.word	0x0801fb42

0801c888 <__hi0bits>:
 801c888:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801c88c:	4603      	mov	r3, r0
 801c88e:	bf36      	itet	cc
 801c890:	0403      	lslcc	r3, r0, #16
 801c892:	2000      	movcs	r0, #0
 801c894:	2010      	movcc	r0, #16
 801c896:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801c89a:	bf3c      	itt	cc
 801c89c:	021b      	lslcc	r3, r3, #8
 801c89e:	3008      	addcc	r0, #8
 801c8a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801c8a4:	bf3c      	itt	cc
 801c8a6:	011b      	lslcc	r3, r3, #4
 801c8a8:	3004      	addcc	r0, #4
 801c8aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801c8ae:	bf3c      	itt	cc
 801c8b0:	009b      	lslcc	r3, r3, #2
 801c8b2:	3002      	addcc	r0, #2
 801c8b4:	2b00      	cmp	r3, #0
 801c8b6:	db05      	blt.n	801c8c4 <__hi0bits+0x3c>
 801c8b8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801c8bc:	f100 0001 	add.w	r0, r0, #1
 801c8c0:	bf08      	it	eq
 801c8c2:	2020      	moveq	r0, #32
 801c8c4:	4770      	bx	lr

0801c8c6 <__lo0bits>:
 801c8c6:	6803      	ldr	r3, [r0, #0]
 801c8c8:	4602      	mov	r2, r0
 801c8ca:	f013 0007 	ands.w	r0, r3, #7
 801c8ce:	d00b      	beq.n	801c8e8 <__lo0bits+0x22>
 801c8d0:	07d9      	lsls	r1, r3, #31
 801c8d2:	d421      	bmi.n	801c918 <__lo0bits+0x52>
 801c8d4:	0798      	lsls	r0, r3, #30
 801c8d6:	bf49      	itett	mi
 801c8d8:	085b      	lsrmi	r3, r3, #1
 801c8da:	089b      	lsrpl	r3, r3, #2
 801c8dc:	2001      	movmi	r0, #1
 801c8de:	6013      	strmi	r3, [r2, #0]
 801c8e0:	bf5c      	itt	pl
 801c8e2:	6013      	strpl	r3, [r2, #0]
 801c8e4:	2002      	movpl	r0, #2
 801c8e6:	4770      	bx	lr
 801c8e8:	b299      	uxth	r1, r3
 801c8ea:	b909      	cbnz	r1, 801c8f0 <__lo0bits+0x2a>
 801c8ec:	0c1b      	lsrs	r3, r3, #16
 801c8ee:	2010      	movs	r0, #16
 801c8f0:	b2d9      	uxtb	r1, r3
 801c8f2:	b909      	cbnz	r1, 801c8f8 <__lo0bits+0x32>
 801c8f4:	3008      	adds	r0, #8
 801c8f6:	0a1b      	lsrs	r3, r3, #8
 801c8f8:	0719      	lsls	r1, r3, #28
 801c8fa:	bf04      	itt	eq
 801c8fc:	091b      	lsreq	r3, r3, #4
 801c8fe:	3004      	addeq	r0, #4
 801c900:	0799      	lsls	r1, r3, #30
 801c902:	bf04      	itt	eq
 801c904:	089b      	lsreq	r3, r3, #2
 801c906:	3002      	addeq	r0, #2
 801c908:	07d9      	lsls	r1, r3, #31
 801c90a:	d403      	bmi.n	801c914 <__lo0bits+0x4e>
 801c90c:	085b      	lsrs	r3, r3, #1
 801c90e:	f100 0001 	add.w	r0, r0, #1
 801c912:	d003      	beq.n	801c91c <__lo0bits+0x56>
 801c914:	6013      	str	r3, [r2, #0]
 801c916:	4770      	bx	lr
 801c918:	2000      	movs	r0, #0
 801c91a:	4770      	bx	lr
 801c91c:	2020      	movs	r0, #32
 801c91e:	4770      	bx	lr

0801c920 <__i2b>:
 801c920:	b510      	push	{r4, lr}
 801c922:	460c      	mov	r4, r1
 801c924:	2101      	movs	r1, #1
 801c926:	f7ff febd 	bl	801c6a4 <_Balloc>
 801c92a:	4602      	mov	r2, r0
 801c92c:	b928      	cbnz	r0, 801c93a <__i2b+0x1a>
 801c92e:	4b05      	ldr	r3, [pc, #20]	@ (801c944 <__i2b+0x24>)
 801c930:	4805      	ldr	r0, [pc, #20]	@ (801c948 <__i2b+0x28>)
 801c932:	f240 1145 	movw	r1, #325	@ 0x145
 801c936:	f001 fb51 	bl	801dfdc <__assert_func>
 801c93a:	2301      	movs	r3, #1
 801c93c:	6144      	str	r4, [r0, #20]
 801c93e:	6103      	str	r3, [r0, #16]
 801c940:	bd10      	pop	{r4, pc}
 801c942:	bf00      	nop
 801c944:	0801fad1 	.word	0x0801fad1
 801c948:	0801fb42 	.word	0x0801fb42

0801c94c <__multiply>:
 801c94c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c950:	4617      	mov	r7, r2
 801c952:	690a      	ldr	r2, [r1, #16]
 801c954:	693b      	ldr	r3, [r7, #16]
 801c956:	429a      	cmp	r2, r3
 801c958:	bfa8      	it	ge
 801c95a:	463b      	movge	r3, r7
 801c95c:	4689      	mov	r9, r1
 801c95e:	bfa4      	itt	ge
 801c960:	460f      	movge	r7, r1
 801c962:	4699      	movge	r9, r3
 801c964:	693d      	ldr	r5, [r7, #16]
 801c966:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801c96a:	68bb      	ldr	r3, [r7, #8]
 801c96c:	6879      	ldr	r1, [r7, #4]
 801c96e:	eb05 060a 	add.w	r6, r5, sl
 801c972:	42b3      	cmp	r3, r6
 801c974:	b085      	sub	sp, #20
 801c976:	bfb8      	it	lt
 801c978:	3101      	addlt	r1, #1
 801c97a:	f7ff fe93 	bl	801c6a4 <_Balloc>
 801c97e:	b930      	cbnz	r0, 801c98e <__multiply+0x42>
 801c980:	4602      	mov	r2, r0
 801c982:	4b41      	ldr	r3, [pc, #260]	@ (801ca88 <__multiply+0x13c>)
 801c984:	4841      	ldr	r0, [pc, #260]	@ (801ca8c <__multiply+0x140>)
 801c986:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801c98a:	f001 fb27 	bl	801dfdc <__assert_func>
 801c98e:	f100 0414 	add.w	r4, r0, #20
 801c992:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801c996:	4623      	mov	r3, r4
 801c998:	2200      	movs	r2, #0
 801c99a:	4573      	cmp	r3, lr
 801c99c:	d320      	bcc.n	801c9e0 <__multiply+0x94>
 801c99e:	f107 0814 	add.w	r8, r7, #20
 801c9a2:	f109 0114 	add.w	r1, r9, #20
 801c9a6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801c9aa:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801c9ae:	9302      	str	r3, [sp, #8]
 801c9b0:	1beb      	subs	r3, r5, r7
 801c9b2:	3b15      	subs	r3, #21
 801c9b4:	f023 0303 	bic.w	r3, r3, #3
 801c9b8:	3304      	adds	r3, #4
 801c9ba:	3715      	adds	r7, #21
 801c9bc:	42bd      	cmp	r5, r7
 801c9be:	bf38      	it	cc
 801c9c0:	2304      	movcc	r3, #4
 801c9c2:	9301      	str	r3, [sp, #4]
 801c9c4:	9b02      	ldr	r3, [sp, #8]
 801c9c6:	9103      	str	r1, [sp, #12]
 801c9c8:	428b      	cmp	r3, r1
 801c9ca:	d80c      	bhi.n	801c9e6 <__multiply+0x9a>
 801c9cc:	2e00      	cmp	r6, #0
 801c9ce:	dd03      	ble.n	801c9d8 <__multiply+0x8c>
 801c9d0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801c9d4:	2b00      	cmp	r3, #0
 801c9d6:	d055      	beq.n	801ca84 <__multiply+0x138>
 801c9d8:	6106      	str	r6, [r0, #16]
 801c9da:	b005      	add	sp, #20
 801c9dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c9e0:	f843 2b04 	str.w	r2, [r3], #4
 801c9e4:	e7d9      	b.n	801c99a <__multiply+0x4e>
 801c9e6:	f8b1 a000 	ldrh.w	sl, [r1]
 801c9ea:	f1ba 0f00 	cmp.w	sl, #0
 801c9ee:	d01f      	beq.n	801ca30 <__multiply+0xe4>
 801c9f0:	46c4      	mov	ip, r8
 801c9f2:	46a1      	mov	r9, r4
 801c9f4:	2700      	movs	r7, #0
 801c9f6:	f85c 2b04 	ldr.w	r2, [ip], #4
 801c9fa:	f8d9 3000 	ldr.w	r3, [r9]
 801c9fe:	fa1f fb82 	uxth.w	fp, r2
 801ca02:	b29b      	uxth	r3, r3
 801ca04:	fb0a 330b 	mla	r3, sl, fp, r3
 801ca08:	443b      	add	r3, r7
 801ca0a:	f8d9 7000 	ldr.w	r7, [r9]
 801ca0e:	0c12      	lsrs	r2, r2, #16
 801ca10:	0c3f      	lsrs	r7, r7, #16
 801ca12:	fb0a 7202 	mla	r2, sl, r2, r7
 801ca16:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801ca1a:	b29b      	uxth	r3, r3
 801ca1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801ca20:	4565      	cmp	r5, ip
 801ca22:	f849 3b04 	str.w	r3, [r9], #4
 801ca26:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801ca2a:	d8e4      	bhi.n	801c9f6 <__multiply+0xaa>
 801ca2c:	9b01      	ldr	r3, [sp, #4]
 801ca2e:	50e7      	str	r7, [r4, r3]
 801ca30:	9b03      	ldr	r3, [sp, #12]
 801ca32:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801ca36:	3104      	adds	r1, #4
 801ca38:	f1b9 0f00 	cmp.w	r9, #0
 801ca3c:	d020      	beq.n	801ca80 <__multiply+0x134>
 801ca3e:	6823      	ldr	r3, [r4, #0]
 801ca40:	4647      	mov	r7, r8
 801ca42:	46a4      	mov	ip, r4
 801ca44:	f04f 0a00 	mov.w	sl, #0
 801ca48:	f8b7 b000 	ldrh.w	fp, [r7]
 801ca4c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 801ca50:	fb09 220b 	mla	r2, r9, fp, r2
 801ca54:	4452      	add	r2, sl
 801ca56:	b29b      	uxth	r3, r3
 801ca58:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801ca5c:	f84c 3b04 	str.w	r3, [ip], #4
 801ca60:	f857 3b04 	ldr.w	r3, [r7], #4
 801ca64:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801ca68:	f8bc 3000 	ldrh.w	r3, [ip]
 801ca6c:	fb09 330a 	mla	r3, r9, sl, r3
 801ca70:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 801ca74:	42bd      	cmp	r5, r7
 801ca76:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801ca7a:	d8e5      	bhi.n	801ca48 <__multiply+0xfc>
 801ca7c:	9a01      	ldr	r2, [sp, #4]
 801ca7e:	50a3      	str	r3, [r4, r2]
 801ca80:	3404      	adds	r4, #4
 801ca82:	e79f      	b.n	801c9c4 <__multiply+0x78>
 801ca84:	3e01      	subs	r6, #1
 801ca86:	e7a1      	b.n	801c9cc <__multiply+0x80>
 801ca88:	0801fad1 	.word	0x0801fad1
 801ca8c:	0801fb42 	.word	0x0801fb42

0801ca90 <__pow5mult>:
 801ca90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ca94:	4615      	mov	r5, r2
 801ca96:	f012 0203 	ands.w	r2, r2, #3
 801ca9a:	4607      	mov	r7, r0
 801ca9c:	460e      	mov	r6, r1
 801ca9e:	d007      	beq.n	801cab0 <__pow5mult+0x20>
 801caa0:	4c25      	ldr	r4, [pc, #148]	@ (801cb38 <__pow5mult+0xa8>)
 801caa2:	3a01      	subs	r2, #1
 801caa4:	2300      	movs	r3, #0
 801caa6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801caaa:	f7ff fe5d 	bl	801c768 <__multadd>
 801caae:	4606      	mov	r6, r0
 801cab0:	10ad      	asrs	r5, r5, #2
 801cab2:	d03d      	beq.n	801cb30 <__pow5mult+0xa0>
 801cab4:	69fc      	ldr	r4, [r7, #28]
 801cab6:	b97c      	cbnz	r4, 801cad8 <__pow5mult+0x48>
 801cab8:	2010      	movs	r0, #16
 801caba:	f7ff fd2b 	bl	801c514 <malloc>
 801cabe:	4602      	mov	r2, r0
 801cac0:	61f8      	str	r0, [r7, #28]
 801cac2:	b928      	cbnz	r0, 801cad0 <__pow5mult+0x40>
 801cac4:	4b1d      	ldr	r3, [pc, #116]	@ (801cb3c <__pow5mult+0xac>)
 801cac6:	481e      	ldr	r0, [pc, #120]	@ (801cb40 <__pow5mult+0xb0>)
 801cac8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801cacc:	f001 fa86 	bl	801dfdc <__assert_func>
 801cad0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801cad4:	6004      	str	r4, [r0, #0]
 801cad6:	60c4      	str	r4, [r0, #12]
 801cad8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801cadc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801cae0:	b94c      	cbnz	r4, 801caf6 <__pow5mult+0x66>
 801cae2:	f240 2171 	movw	r1, #625	@ 0x271
 801cae6:	4638      	mov	r0, r7
 801cae8:	f7ff ff1a 	bl	801c920 <__i2b>
 801caec:	2300      	movs	r3, #0
 801caee:	f8c8 0008 	str.w	r0, [r8, #8]
 801caf2:	4604      	mov	r4, r0
 801caf4:	6003      	str	r3, [r0, #0]
 801caf6:	f04f 0900 	mov.w	r9, #0
 801cafa:	07eb      	lsls	r3, r5, #31
 801cafc:	d50a      	bpl.n	801cb14 <__pow5mult+0x84>
 801cafe:	4631      	mov	r1, r6
 801cb00:	4622      	mov	r2, r4
 801cb02:	4638      	mov	r0, r7
 801cb04:	f7ff ff22 	bl	801c94c <__multiply>
 801cb08:	4631      	mov	r1, r6
 801cb0a:	4680      	mov	r8, r0
 801cb0c:	4638      	mov	r0, r7
 801cb0e:	f7ff fe09 	bl	801c724 <_Bfree>
 801cb12:	4646      	mov	r6, r8
 801cb14:	106d      	asrs	r5, r5, #1
 801cb16:	d00b      	beq.n	801cb30 <__pow5mult+0xa0>
 801cb18:	6820      	ldr	r0, [r4, #0]
 801cb1a:	b938      	cbnz	r0, 801cb2c <__pow5mult+0x9c>
 801cb1c:	4622      	mov	r2, r4
 801cb1e:	4621      	mov	r1, r4
 801cb20:	4638      	mov	r0, r7
 801cb22:	f7ff ff13 	bl	801c94c <__multiply>
 801cb26:	6020      	str	r0, [r4, #0]
 801cb28:	f8c0 9000 	str.w	r9, [r0]
 801cb2c:	4604      	mov	r4, r0
 801cb2e:	e7e4      	b.n	801cafa <__pow5mult+0x6a>
 801cb30:	4630      	mov	r0, r6
 801cb32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cb36:	bf00      	nop
 801cb38:	0801fc58 	.word	0x0801fc58
 801cb3c:	0801fa62 	.word	0x0801fa62
 801cb40:	0801fb42 	.word	0x0801fb42

0801cb44 <__lshift>:
 801cb44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cb48:	460c      	mov	r4, r1
 801cb4a:	6849      	ldr	r1, [r1, #4]
 801cb4c:	6923      	ldr	r3, [r4, #16]
 801cb4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801cb52:	68a3      	ldr	r3, [r4, #8]
 801cb54:	4607      	mov	r7, r0
 801cb56:	4691      	mov	r9, r2
 801cb58:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801cb5c:	f108 0601 	add.w	r6, r8, #1
 801cb60:	42b3      	cmp	r3, r6
 801cb62:	db0b      	blt.n	801cb7c <__lshift+0x38>
 801cb64:	4638      	mov	r0, r7
 801cb66:	f7ff fd9d 	bl	801c6a4 <_Balloc>
 801cb6a:	4605      	mov	r5, r0
 801cb6c:	b948      	cbnz	r0, 801cb82 <__lshift+0x3e>
 801cb6e:	4602      	mov	r2, r0
 801cb70:	4b28      	ldr	r3, [pc, #160]	@ (801cc14 <__lshift+0xd0>)
 801cb72:	4829      	ldr	r0, [pc, #164]	@ (801cc18 <__lshift+0xd4>)
 801cb74:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801cb78:	f001 fa30 	bl	801dfdc <__assert_func>
 801cb7c:	3101      	adds	r1, #1
 801cb7e:	005b      	lsls	r3, r3, #1
 801cb80:	e7ee      	b.n	801cb60 <__lshift+0x1c>
 801cb82:	2300      	movs	r3, #0
 801cb84:	f100 0114 	add.w	r1, r0, #20
 801cb88:	f100 0210 	add.w	r2, r0, #16
 801cb8c:	4618      	mov	r0, r3
 801cb8e:	4553      	cmp	r3, sl
 801cb90:	db33      	blt.n	801cbfa <__lshift+0xb6>
 801cb92:	6920      	ldr	r0, [r4, #16]
 801cb94:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801cb98:	f104 0314 	add.w	r3, r4, #20
 801cb9c:	f019 091f 	ands.w	r9, r9, #31
 801cba0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801cba4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801cba8:	d02b      	beq.n	801cc02 <__lshift+0xbe>
 801cbaa:	f1c9 0e20 	rsb	lr, r9, #32
 801cbae:	468a      	mov	sl, r1
 801cbb0:	2200      	movs	r2, #0
 801cbb2:	6818      	ldr	r0, [r3, #0]
 801cbb4:	fa00 f009 	lsl.w	r0, r0, r9
 801cbb8:	4310      	orrs	r0, r2
 801cbba:	f84a 0b04 	str.w	r0, [sl], #4
 801cbbe:	f853 2b04 	ldr.w	r2, [r3], #4
 801cbc2:	459c      	cmp	ip, r3
 801cbc4:	fa22 f20e 	lsr.w	r2, r2, lr
 801cbc8:	d8f3      	bhi.n	801cbb2 <__lshift+0x6e>
 801cbca:	ebac 0304 	sub.w	r3, ip, r4
 801cbce:	3b15      	subs	r3, #21
 801cbd0:	f023 0303 	bic.w	r3, r3, #3
 801cbd4:	3304      	adds	r3, #4
 801cbd6:	f104 0015 	add.w	r0, r4, #21
 801cbda:	4560      	cmp	r0, ip
 801cbdc:	bf88      	it	hi
 801cbde:	2304      	movhi	r3, #4
 801cbe0:	50ca      	str	r2, [r1, r3]
 801cbe2:	b10a      	cbz	r2, 801cbe8 <__lshift+0xa4>
 801cbe4:	f108 0602 	add.w	r6, r8, #2
 801cbe8:	3e01      	subs	r6, #1
 801cbea:	4638      	mov	r0, r7
 801cbec:	612e      	str	r6, [r5, #16]
 801cbee:	4621      	mov	r1, r4
 801cbf0:	f7ff fd98 	bl	801c724 <_Bfree>
 801cbf4:	4628      	mov	r0, r5
 801cbf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cbfa:	f842 0f04 	str.w	r0, [r2, #4]!
 801cbfe:	3301      	adds	r3, #1
 801cc00:	e7c5      	b.n	801cb8e <__lshift+0x4a>
 801cc02:	3904      	subs	r1, #4
 801cc04:	f853 2b04 	ldr.w	r2, [r3], #4
 801cc08:	f841 2f04 	str.w	r2, [r1, #4]!
 801cc0c:	459c      	cmp	ip, r3
 801cc0e:	d8f9      	bhi.n	801cc04 <__lshift+0xc0>
 801cc10:	e7ea      	b.n	801cbe8 <__lshift+0xa4>
 801cc12:	bf00      	nop
 801cc14:	0801fad1 	.word	0x0801fad1
 801cc18:	0801fb42 	.word	0x0801fb42

0801cc1c <__mcmp>:
 801cc1c:	690a      	ldr	r2, [r1, #16]
 801cc1e:	4603      	mov	r3, r0
 801cc20:	6900      	ldr	r0, [r0, #16]
 801cc22:	1a80      	subs	r0, r0, r2
 801cc24:	b530      	push	{r4, r5, lr}
 801cc26:	d10e      	bne.n	801cc46 <__mcmp+0x2a>
 801cc28:	3314      	adds	r3, #20
 801cc2a:	3114      	adds	r1, #20
 801cc2c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801cc30:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801cc34:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801cc38:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801cc3c:	4295      	cmp	r5, r2
 801cc3e:	d003      	beq.n	801cc48 <__mcmp+0x2c>
 801cc40:	d205      	bcs.n	801cc4e <__mcmp+0x32>
 801cc42:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801cc46:	bd30      	pop	{r4, r5, pc}
 801cc48:	42a3      	cmp	r3, r4
 801cc4a:	d3f3      	bcc.n	801cc34 <__mcmp+0x18>
 801cc4c:	e7fb      	b.n	801cc46 <__mcmp+0x2a>
 801cc4e:	2001      	movs	r0, #1
 801cc50:	e7f9      	b.n	801cc46 <__mcmp+0x2a>
	...

0801cc54 <__mdiff>:
 801cc54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc58:	4689      	mov	r9, r1
 801cc5a:	4606      	mov	r6, r0
 801cc5c:	4611      	mov	r1, r2
 801cc5e:	4648      	mov	r0, r9
 801cc60:	4614      	mov	r4, r2
 801cc62:	f7ff ffdb 	bl	801cc1c <__mcmp>
 801cc66:	1e05      	subs	r5, r0, #0
 801cc68:	d112      	bne.n	801cc90 <__mdiff+0x3c>
 801cc6a:	4629      	mov	r1, r5
 801cc6c:	4630      	mov	r0, r6
 801cc6e:	f7ff fd19 	bl	801c6a4 <_Balloc>
 801cc72:	4602      	mov	r2, r0
 801cc74:	b928      	cbnz	r0, 801cc82 <__mdiff+0x2e>
 801cc76:	4b3f      	ldr	r3, [pc, #252]	@ (801cd74 <__mdiff+0x120>)
 801cc78:	f240 2137 	movw	r1, #567	@ 0x237
 801cc7c:	483e      	ldr	r0, [pc, #248]	@ (801cd78 <__mdiff+0x124>)
 801cc7e:	f001 f9ad 	bl	801dfdc <__assert_func>
 801cc82:	2301      	movs	r3, #1
 801cc84:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801cc88:	4610      	mov	r0, r2
 801cc8a:	b003      	add	sp, #12
 801cc8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cc90:	bfbc      	itt	lt
 801cc92:	464b      	movlt	r3, r9
 801cc94:	46a1      	movlt	r9, r4
 801cc96:	4630      	mov	r0, r6
 801cc98:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801cc9c:	bfba      	itte	lt
 801cc9e:	461c      	movlt	r4, r3
 801cca0:	2501      	movlt	r5, #1
 801cca2:	2500      	movge	r5, #0
 801cca4:	f7ff fcfe 	bl	801c6a4 <_Balloc>
 801cca8:	4602      	mov	r2, r0
 801ccaa:	b918      	cbnz	r0, 801ccb4 <__mdiff+0x60>
 801ccac:	4b31      	ldr	r3, [pc, #196]	@ (801cd74 <__mdiff+0x120>)
 801ccae:	f240 2145 	movw	r1, #581	@ 0x245
 801ccb2:	e7e3      	b.n	801cc7c <__mdiff+0x28>
 801ccb4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801ccb8:	6926      	ldr	r6, [r4, #16]
 801ccba:	60c5      	str	r5, [r0, #12]
 801ccbc:	f109 0310 	add.w	r3, r9, #16
 801ccc0:	f109 0514 	add.w	r5, r9, #20
 801ccc4:	f104 0e14 	add.w	lr, r4, #20
 801ccc8:	f100 0b14 	add.w	fp, r0, #20
 801cccc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801ccd0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801ccd4:	9301      	str	r3, [sp, #4]
 801ccd6:	46d9      	mov	r9, fp
 801ccd8:	f04f 0c00 	mov.w	ip, #0
 801ccdc:	9b01      	ldr	r3, [sp, #4]
 801ccde:	f85e 0b04 	ldr.w	r0, [lr], #4
 801cce2:	f853 af04 	ldr.w	sl, [r3, #4]!
 801cce6:	9301      	str	r3, [sp, #4]
 801cce8:	fa1f f38a 	uxth.w	r3, sl
 801ccec:	4619      	mov	r1, r3
 801ccee:	b283      	uxth	r3, r0
 801ccf0:	1acb      	subs	r3, r1, r3
 801ccf2:	0c00      	lsrs	r0, r0, #16
 801ccf4:	4463      	add	r3, ip
 801ccf6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801ccfa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801ccfe:	b29b      	uxth	r3, r3
 801cd00:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801cd04:	4576      	cmp	r6, lr
 801cd06:	f849 3b04 	str.w	r3, [r9], #4
 801cd0a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801cd0e:	d8e5      	bhi.n	801ccdc <__mdiff+0x88>
 801cd10:	1b33      	subs	r3, r6, r4
 801cd12:	3b15      	subs	r3, #21
 801cd14:	f023 0303 	bic.w	r3, r3, #3
 801cd18:	3415      	adds	r4, #21
 801cd1a:	3304      	adds	r3, #4
 801cd1c:	42a6      	cmp	r6, r4
 801cd1e:	bf38      	it	cc
 801cd20:	2304      	movcc	r3, #4
 801cd22:	441d      	add	r5, r3
 801cd24:	445b      	add	r3, fp
 801cd26:	461e      	mov	r6, r3
 801cd28:	462c      	mov	r4, r5
 801cd2a:	4544      	cmp	r4, r8
 801cd2c:	d30e      	bcc.n	801cd4c <__mdiff+0xf8>
 801cd2e:	f108 0103 	add.w	r1, r8, #3
 801cd32:	1b49      	subs	r1, r1, r5
 801cd34:	f021 0103 	bic.w	r1, r1, #3
 801cd38:	3d03      	subs	r5, #3
 801cd3a:	45a8      	cmp	r8, r5
 801cd3c:	bf38      	it	cc
 801cd3e:	2100      	movcc	r1, #0
 801cd40:	440b      	add	r3, r1
 801cd42:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801cd46:	b191      	cbz	r1, 801cd6e <__mdiff+0x11a>
 801cd48:	6117      	str	r7, [r2, #16]
 801cd4a:	e79d      	b.n	801cc88 <__mdiff+0x34>
 801cd4c:	f854 1b04 	ldr.w	r1, [r4], #4
 801cd50:	46e6      	mov	lr, ip
 801cd52:	0c08      	lsrs	r0, r1, #16
 801cd54:	fa1c fc81 	uxtah	ip, ip, r1
 801cd58:	4471      	add	r1, lr
 801cd5a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801cd5e:	b289      	uxth	r1, r1
 801cd60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801cd64:	f846 1b04 	str.w	r1, [r6], #4
 801cd68:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801cd6c:	e7dd      	b.n	801cd2a <__mdiff+0xd6>
 801cd6e:	3f01      	subs	r7, #1
 801cd70:	e7e7      	b.n	801cd42 <__mdiff+0xee>
 801cd72:	bf00      	nop
 801cd74:	0801fad1 	.word	0x0801fad1
 801cd78:	0801fb42 	.word	0x0801fb42

0801cd7c <__ulp>:
 801cd7c:	b082      	sub	sp, #8
 801cd7e:	ed8d 0b00 	vstr	d0, [sp]
 801cd82:	9a01      	ldr	r2, [sp, #4]
 801cd84:	4b0f      	ldr	r3, [pc, #60]	@ (801cdc4 <__ulp+0x48>)
 801cd86:	4013      	ands	r3, r2
 801cd88:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801cd8c:	2b00      	cmp	r3, #0
 801cd8e:	dc08      	bgt.n	801cda2 <__ulp+0x26>
 801cd90:	425b      	negs	r3, r3
 801cd92:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801cd96:	ea4f 5223 	mov.w	r2, r3, asr #20
 801cd9a:	da04      	bge.n	801cda6 <__ulp+0x2a>
 801cd9c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801cda0:	4113      	asrs	r3, r2
 801cda2:	2200      	movs	r2, #0
 801cda4:	e008      	b.n	801cdb8 <__ulp+0x3c>
 801cda6:	f1a2 0314 	sub.w	r3, r2, #20
 801cdaa:	2b1e      	cmp	r3, #30
 801cdac:	bfda      	itte	le
 801cdae:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801cdb2:	40da      	lsrle	r2, r3
 801cdb4:	2201      	movgt	r2, #1
 801cdb6:	2300      	movs	r3, #0
 801cdb8:	4619      	mov	r1, r3
 801cdba:	4610      	mov	r0, r2
 801cdbc:	ec41 0b10 	vmov	d0, r0, r1
 801cdc0:	b002      	add	sp, #8
 801cdc2:	4770      	bx	lr
 801cdc4:	7ff00000 	.word	0x7ff00000

0801cdc8 <__b2d>:
 801cdc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cdcc:	6906      	ldr	r6, [r0, #16]
 801cdce:	f100 0814 	add.w	r8, r0, #20
 801cdd2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801cdd6:	1f37      	subs	r7, r6, #4
 801cdd8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801cddc:	4610      	mov	r0, r2
 801cdde:	f7ff fd53 	bl	801c888 <__hi0bits>
 801cde2:	f1c0 0320 	rsb	r3, r0, #32
 801cde6:	280a      	cmp	r0, #10
 801cde8:	600b      	str	r3, [r1, #0]
 801cdea:	491b      	ldr	r1, [pc, #108]	@ (801ce58 <__b2d+0x90>)
 801cdec:	dc15      	bgt.n	801ce1a <__b2d+0x52>
 801cdee:	f1c0 0c0b 	rsb	ip, r0, #11
 801cdf2:	fa22 f30c 	lsr.w	r3, r2, ip
 801cdf6:	45b8      	cmp	r8, r7
 801cdf8:	ea43 0501 	orr.w	r5, r3, r1
 801cdfc:	bf34      	ite	cc
 801cdfe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801ce02:	2300      	movcs	r3, #0
 801ce04:	3015      	adds	r0, #21
 801ce06:	fa02 f000 	lsl.w	r0, r2, r0
 801ce0a:	fa23 f30c 	lsr.w	r3, r3, ip
 801ce0e:	4303      	orrs	r3, r0
 801ce10:	461c      	mov	r4, r3
 801ce12:	ec45 4b10 	vmov	d0, r4, r5
 801ce16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ce1a:	45b8      	cmp	r8, r7
 801ce1c:	bf3a      	itte	cc
 801ce1e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801ce22:	f1a6 0708 	subcc.w	r7, r6, #8
 801ce26:	2300      	movcs	r3, #0
 801ce28:	380b      	subs	r0, #11
 801ce2a:	d012      	beq.n	801ce52 <__b2d+0x8a>
 801ce2c:	f1c0 0120 	rsb	r1, r0, #32
 801ce30:	fa23 f401 	lsr.w	r4, r3, r1
 801ce34:	4082      	lsls	r2, r0
 801ce36:	4322      	orrs	r2, r4
 801ce38:	4547      	cmp	r7, r8
 801ce3a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801ce3e:	bf8c      	ite	hi
 801ce40:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801ce44:	2200      	movls	r2, #0
 801ce46:	4083      	lsls	r3, r0
 801ce48:	40ca      	lsrs	r2, r1
 801ce4a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801ce4e:	4313      	orrs	r3, r2
 801ce50:	e7de      	b.n	801ce10 <__b2d+0x48>
 801ce52:	ea42 0501 	orr.w	r5, r2, r1
 801ce56:	e7db      	b.n	801ce10 <__b2d+0x48>
 801ce58:	3ff00000 	.word	0x3ff00000

0801ce5c <__d2b>:
 801ce5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801ce60:	460f      	mov	r7, r1
 801ce62:	2101      	movs	r1, #1
 801ce64:	ec59 8b10 	vmov	r8, r9, d0
 801ce68:	4616      	mov	r6, r2
 801ce6a:	f7ff fc1b 	bl	801c6a4 <_Balloc>
 801ce6e:	4604      	mov	r4, r0
 801ce70:	b930      	cbnz	r0, 801ce80 <__d2b+0x24>
 801ce72:	4602      	mov	r2, r0
 801ce74:	4b23      	ldr	r3, [pc, #140]	@ (801cf04 <__d2b+0xa8>)
 801ce76:	4824      	ldr	r0, [pc, #144]	@ (801cf08 <__d2b+0xac>)
 801ce78:	f240 310f 	movw	r1, #783	@ 0x30f
 801ce7c:	f001 f8ae 	bl	801dfdc <__assert_func>
 801ce80:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801ce84:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801ce88:	b10d      	cbz	r5, 801ce8e <__d2b+0x32>
 801ce8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801ce8e:	9301      	str	r3, [sp, #4]
 801ce90:	f1b8 0300 	subs.w	r3, r8, #0
 801ce94:	d023      	beq.n	801cede <__d2b+0x82>
 801ce96:	4668      	mov	r0, sp
 801ce98:	9300      	str	r3, [sp, #0]
 801ce9a:	f7ff fd14 	bl	801c8c6 <__lo0bits>
 801ce9e:	e9dd 1200 	ldrd	r1, r2, [sp]
 801cea2:	b1d0      	cbz	r0, 801ceda <__d2b+0x7e>
 801cea4:	f1c0 0320 	rsb	r3, r0, #32
 801cea8:	fa02 f303 	lsl.w	r3, r2, r3
 801ceac:	430b      	orrs	r3, r1
 801ceae:	40c2      	lsrs	r2, r0
 801ceb0:	6163      	str	r3, [r4, #20]
 801ceb2:	9201      	str	r2, [sp, #4]
 801ceb4:	9b01      	ldr	r3, [sp, #4]
 801ceb6:	61a3      	str	r3, [r4, #24]
 801ceb8:	2b00      	cmp	r3, #0
 801ceba:	bf0c      	ite	eq
 801cebc:	2201      	moveq	r2, #1
 801cebe:	2202      	movne	r2, #2
 801cec0:	6122      	str	r2, [r4, #16]
 801cec2:	b1a5      	cbz	r5, 801ceee <__d2b+0x92>
 801cec4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801cec8:	4405      	add	r5, r0
 801ceca:	603d      	str	r5, [r7, #0]
 801cecc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801ced0:	6030      	str	r0, [r6, #0]
 801ced2:	4620      	mov	r0, r4
 801ced4:	b003      	add	sp, #12
 801ced6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ceda:	6161      	str	r1, [r4, #20]
 801cedc:	e7ea      	b.n	801ceb4 <__d2b+0x58>
 801cede:	a801      	add	r0, sp, #4
 801cee0:	f7ff fcf1 	bl	801c8c6 <__lo0bits>
 801cee4:	9b01      	ldr	r3, [sp, #4]
 801cee6:	6163      	str	r3, [r4, #20]
 801cee8:	3020      	adds	r0, #32
 801ceea:	2201      	movs	r2, #1
 801ceec:	e7e8      	b.n	801cec0 <__d2b+0x64>
 801ceee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801cef2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801cef6:	6038      	str	r0, [r7, #0]
 801cef8:	6918      	ldr	r0, [r3, #16]
 801cefa:	f7ff fcc5 	bl	801c888 <__hi0bits>
 801cefe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801cf02:	e7e5      	b.n	801ced0 <__d2b+0x74>
 801cf04:	0801fad1 	.word	0x0801fad1
 801cf08:	0801fb42 	.word	0x0801fb42

0801cf0c <__ratio>:
 801cf0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf10:	4688      	mov	r8, r1
 801cf12:	4669      	mov	r1, sp
 801cf14:	4681      	mov	r9, r0
 801cf16:	f7ff ff57 	bl	801cdc8 <__b2d>
 801cf1a:	a901      	add	r1, sp, #4
 801cf1c:	4640      	mov	r0, r8
 801cf1e:	ec55 4b10 	vmov	r4, r5, d0
 801cf22:	f7ff ff51 	bl	801cdc8 <__b2d>
 801cf26:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801cf2a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801cf2e:	1ad2      	subs	r2, r2, r3
 801cf30:	e9dd 3100 	ldrd	r3, r1, [sp]
 801cf34:	1a5b      	subs	r3, r3, r1
 801cf36:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801cf3a:	ec57 6b10 	vmov	r6, r7, d0
 801cf3e:	2b00      	cmp	r3, #0
 801cf40:	bfd6      	itet	le
 801cf42:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801cf46:	462a      	movgt	r2, r5
 801cf48:	463a      	movle	r2, r7
 801cf4a:	46ab      	mov	fp, r5
 801cf4c:	46a2      	mov	sl, r4
 801cf4e:	bfce      	itee	gt
 801cf50:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 801cf54:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 801cf58:	ee00 3a90 	vmovle	s1, r3
 801cf5c:	ec4b ab17 	vmov	d7, sl, fp
 801cf60:	ee87 0b00 	vdiv.f64	d0, d7, d0
 801cf64:	b003      	add	sp, #12
 801cf66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cf6a <__copybits>:
 801cf6a:	3901      	subs	r1, #1
 801cf6c:	b570      	push	{r4, r5, r6, lr}
 801cf6e:	1149      	asrs	r1, r1, #5
 801cf70:	6914      	ldr	r4, [r2, #16]
 801cf72:	3101      	adds	r1, #1
 801cf74:	f102 0314 	add.w	r3, r2, #20
 801cf78:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801cf7c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801cf80:	1f05      	subs	r5, r0, #4
 801cf82:	42a3      	cmp	r3, r4
 801cf84:	d30c      	bcc.n	801cfa0 <__copybits+0x36>
 801cf86:	1aa3      	subs	r3, r4, r2
 801cf88:	3b11      	subs	r3, #17
 801cf8a:	f023 0303 	bic.w	r3, r3, #3
 801cf8e:	3211      	adds	r2, #17
 801cf90:	42a2      	cmp	r2, r4
 801cf92:	bf88      	it	hi
 801cf94:	2300      	movhi	r3, #0
 801cf96:	4418      	add	r0, r3
 801cf98:	2300      	movs	r3, #0
 801cf9a:	4288      	cmp	r0, r1
 801cf9c:	d305      	bcc.n	801cfaa <__copybits+0x40>
 801cf9e:	bd70      	pop	{r4, r5, r6, pc}
 801cfa0:	f853 6b04 	ldr.w	r6, [r3], #4
 801cfa4:	f845 6f04 	str.w	r6, [r5, #4]!
 801cfa8:	e7eb      	b.n	801cf82 <__copybits+0x18>
 801cfaa:	f840 3b04 	str.w	r3, [r0], #4
 801cfae:	e7f4      	b.n	801cf9a <__copybits+0x30>

0801cfb0 <__any_on>:
 801cfb0:	f100 0214 	add.w	r2, r0, #20
 801cfb4:	6900      	ldr	r0, [r0, #16]
 801cfb6:	114b      	asrs	r3, r1, #5
 801cfb8:	4298      	cmp	r0, r3
 801cfba:	b510      	push	{r4, lr}
 801cfbc:	db11      	blt.n	801cfe2 <__any_on+0x32>
 801cfbe:	dd0a      	ble.n	801cfd6 <__any_on+0x26>
 801cfc0:	f011 011f 	ands.w	r1, r1, #31
 801cfc4:	d007      	beq.n	801cfd6 <__any_on+0x26>
 801cfc6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801cfca:	fa24 f001 	lsr.w	r0, r4, r1
 801cfce:	fa00 f101 	lsl.w	r1, r0, r1
 801cfd2:	428c      	cmp	r4, r1
 801cfd4:	d10b      	bne.n	801cfee <__any_on+0x3e>
 801cfd6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801cfda:	4293      	cmp	r3, r2
 801cfdc:	d803      	bhi.n	801cfe6 <__any_on+0x36>
 801cfde:	2000      	movs	r0, #0
 801cfe0:	bd10      	pop	{r4, pc}
 801cfe2:	4603      	mov	r3, r0
 801cfe4:	e7f7      	b.n	801cfd6 <__any_on+0x26>
 801cfe6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801cfea:	2900      	cmp	r1, #0
 801cfec:	d0f5      	beq.n	801cfda <__any_on+0x2a>
 801cfee:	2001      	movs	r0, #1
 801cff0:	e7f6      	b.n	801cfe0 <__any_on+0x30>
	...

0801cff4 <_strtol_l.isra.0>:
 801cff4:	2b24      	cmp	r3, #36	@ 0x24
 801cff6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cffa:	4686      	mov	lr, r0
 801cffc:	4690      	mov	r8, r2
 801cffe:	d801      	bhi.n	801d004 <_strtol_l.isra.0+0x10>
 801d000:	2b01      	cmp	r3, #1
 801d002:	d106      	bne.n	801d012 <_strtol_l.isra.0+0x1e>
 801d004:	f7fe f8d0 	bl	801b1a8 <__errno>
 801d008:	2316      	movs	r3, #22
 801d00a:	6003      	str	r3, [r0, #0]
 801d00c:	2000      	movs	r0, #0
 801d00e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d012:	4834      	ldr	r0, [pc, #208]	@ (801d0e4 <_strtol_l.isra.0+0xf0>)
 801d014:	460d      	mov	r5, r1
 801d016:	462a      	mov	r2, r5
 801d018:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d01c:	5d06      	ldrb	r6, [r0, r4]
 801d01e:	f016 0608 	ands.w	r6, r6, #8
 801d022:	d1f8      	bne.n	801d016 <_strtol_l.isra.0+0x22>
 801d024:	2c2d      	cmp	r4, #45	@ 0x2d
 801d026:	d110      	bne.n	801d04a <_strtol_l.isra.0+0x56>
 801d028:	782c      	ldrb	r4, [r5, #0]
 801d02a:	2601      	movs	r6, #1
 801d02c:	1c95      	adds	r5, r2, #2
 801d02e:	f033 0210 	bics.w	r2, r3, #16
 801d032:	d115      	bne.n	801d060 <_strtol_l.isra.0+0x6c>
 801d034:	2c30      	cmp	r4, #48	@ 0x30
 801d036:	d10d      	bne.n	801d054 <_strtol_l.isra.0+0x60>
 801d038:	782a      	ldrb	r2, [r5, #0]
 801d03a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801d03e:	2a58      	cmp	r2, #88	@ 0x58
 801d040:	d108      	bne.n	801d054 <_strtol_l.isra.0+0x60>
 801d042:	786c      	ldrb	r4, [r5, #1]
 801d044:	3502      	adds	r5, #2
 801d046:	2310      	movs	r3, #16
 801d048:	e00a      	b.n	801d060 <_strtol_l.isra.0+0x6c>
 801d04a:	2c2b      	cmp	r4, #43	@ 0x2b
 801d04c:	bf04      	itt	eq
 801d04e:	782c      	ldrbeq	r4, [r5, #0]
 801d050:	1c95      	addeq	r5, r2, #2
 801d052:	e7ec      	b.n	801d02e <_strtol_l.isra.0+0x3a>
 801d054:	2b00      	cmp	r3, #0
 801d056:	d1f6      	bne.n	801d046 <_strtol_l.isra.0+0x52>
 801d058:	2c30      	cmp	r4, #48	@ 0x30
 801d05a:	bf14      	ite	ne
 801d05c:	230a      	movne	r3, #10
 801d05e:	2308      	moveq	r3, #8
 801d060:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801d064:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 801d068:	2200      	movs	r2, #0
 801d06a:	fbbc f9f3 	udiv	r9, ip, r3
 801d06e:	4610      	mov	r0, r2
 801d070:	fb03 ca19 	mls	sl, r3, r9, ip
 801d074:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801d078:	2f09      	cmp	r7, #9
 801d07a:	d80f      	bhi.n	801d09c <_strtol_l.isra.0+0xa8>
 801d07c:	463c      	mov	r4, r7
 801d07e:	42a3      	cmp	r3, r4
 801d080:	dd1b      	ble.n	801d0ba <_strtol_l.isra.0+0xc6>
 801d082:	1c57      	adds	r7, r2, #1
 801d084:	d007      	beq.n	801d096 <_strtol_l.isra.0+0xa2>
 801d086:	4581      	cmp	r9, r0
 801d088:	d314      	bcc.n	801d0b4 <_strtol_l.isra.0+0xc0>
 801d08a:	d101      	bne.n	801d090 <_strtol_l.isra.0+0x9c>
 801d08c:	45a2      	cmp	sl, r4
 801d08e:	db11      	blt.n	801d0b4 <_strtol_l.isra.0+0xc0>
 801d090:	fb00 4003 	mla	r0, r0, r3, r4
 801d094:	2201      	movs	r2, #1
 801d096:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d09a:	e7eb      	b.n	801d074 <_strtol_l.isra.0+0x80>
 801d09c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801d0a0:	2f19      	cmp	r7, #25
 801d0a2:	d801      	bhi.n	801d0a8 <_strtol_l.isra.0+0xb4>
 801d0a4:	3c37      	subs	r4, #55	@ 0x37
 801d0a6:	e7ea      	b.n	801d07e <_strtol_l.isra.0+0x8a>
 801d0a8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801d0ac:	2f19      	cmp	r7, #25
 801d0ae:	d804      	bhi.n	801d0ba <_strtol_l.isra.0+0xc6>
 801d0b0:	3c57      	subs	r4, #87	@ 0x57
 801d0b2:	e7e4      	b.n	801d07e <_strtol_l.isra.0+0x8a>
 801d0b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801d0b8:	e7ed      	b.n	801d096 <_strtol_l.isra.0+0xa2>
 801d0ba:	1c53      	adds	r3, r2, #1
 801d0bc:	d108      	bne.n	801d0d0 <_strtol_l.isra.0+0xdc>
 801d0be:	2322      	movs	r3, #34	@ 0x22
 801d0c0:	f8ce 3000 	str.w	r3, [lr]
 801d0c4:	4660      	mov	r0, ip
 801d0c6:	f1b8 0f00 	cmp.w	r8, #0
 801d0ca:	d0a0      	beq.n	801d00e <_strtol_l.isra.0+0x1a>
 801d0cc:	1e69      	subs	r1, r5, #1
 801d0ce:	e006      	b.n	801d0de <_strtol_l.isra.0+0xea>
 801d0d0:	b106      	cbz	r6, 801d0d4 <_strtol_l.isra.0+0xe0>
 801d0d2:	4240      	negs	r0, r0
 801d0d4:	f1b8 0f00 	cmp.w	r8, #0
 801d0d8:	d099      	beq.n	801d00e <_strtol_l.isra.0+0x1a>
 801d0da:	2a00      	cmp	r2, #0
 801d0dc:	d1f6      	bne.n	801d0cc <_strtol_l.isra.0+0xd8>
 801d0de:	f8c8 1000 	str.w	r1, [r8]
 801d0e2:	e794      	b.n	801d00e <_strtol_l.isra.0+0x1a>
 801d0e4:	0801fd59 	.word	0x0801fd59

0801d0e8 <_strtol_r>:
 801d0e8:	f7ff bf84 	b.w	801cff4 <_strtol_l.isra.0>

0801d0ec <__ascii_wctomb>:
 801d0ec:	4603      	mov	r3, r0
 801d0ee:	4608      	mov	r0, r1
 801d0f0:	b141      	cbz	r1, 801d104 <__ascii_wctomb+0x18>
 801d0f2:	2aff      	cmp	r2, #255	@ 0xff
 801d0f4:	d904      	bls.n	801d100 <__ascii_wctomb+0x14>
 801d0f6:	228a      	movs	r2, #138	@ 0x8a
 801d0f8:	601a      	str	r2, [r3, #0]
 801d0fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d0fe:	4770      	bx	lr
 801d100:	700a      	strb	r2, [r1, #0]
 801d102:	2001      	movs	r0, #1
 801d104:	4770      	bx	lr

0801d106 <__ssputs_r>:
 801d106:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d10a:	688e      	ldr	r6, [r1, #8]
 801d10c:	461f      	mov	r7, r3
 801d10e:	42be      	cmp	r6, r7
 801d110:	680b      	ldr	r3, [r1, #0]
 801d112:	4682      	mov	sl, r0
 801d114:	460c      	mov	r4, r1
 801d116:	4690      	mov	r8, r2
 801d118:	d82d      	bhi.n	801d176 <__ssputs_r+0x70>
 801d11a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801d11e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801d122:	d026      	beq.n	801d172 <__ssputs_r+0x6c>
 801d124:	6965      	ldr	r5, [r4, #20]
 801d126:	6909      	ldr	r1, [r1, #16]
 801d128:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d12c:	eba3 0901 	sub.w	r9, r3, r1
 801d130:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801d134:	1c7b      	adds	r3, r7, #1
 801d136:	444b      	add	r3, r9
 801d138:	106d      	asrs	r5, r5, #1
 801d13a:	429d      	cmp	r5, r3
 801d13c:	bf38      	it	cc
 801d13e:	461d      	movcc	r5, r3
 801d140:	0553      	lsls	r3, r2, #21
 801d142:	d527      	bpl.n	801d194 <__ssputs_r+0x8e>
 801d144:	4629      	mov	r1, r5
 801d146:	f7ff fa0f 	bl	801c568 <_malloc_r>
 801d14a:	4606      	mov	r6, r0
 801d14c:	b360      	cbz	r0, 801d1a8 <__ssputs_r+0xa2>
 801d14e:	6921      	ldr	r1, [r4, #16]
 801d150:	464a      	mov	r2, r9
 801d152:	f7fe f856 	bl	801b202 <memcpy>
 801d156:	89a3      	ldrh	r3, [r4, #12]
 801d158:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801d15c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801d160:	81a3      	strh	r3, [r4, #12]
 801d162:	6126      	str	r6, [r4, #16]
 801d164:	6165      	str	r5, [r4, #20]
 801d166:	444e      	add	r6, r9
 801d168:	eba5 0509 	sub.w	r5, r5, r9
 801d16c:	6026      	str	r6, [r4, #0]
 801d16e:	60a5      	str	r5, [r4, #8]
 801d170:	463e      	mov	r6, r7
 801d172:	42be      	cmp	r6, r7
 801d174:	d900      	bls.n	801d178 <__ssputs_r+0x72>
 801d176:	463e      	mov	r6, r7
 801d178:	6820      	ldr	r0, [r4, #0]
 801d17a:	4632      	mov	r2, r6
 801d17c:	4641      	mov	r1, r8
 801d17e:	f7fd ff29 	bl	801afd4 <memmove>
 801d182:	68a3      	ldr	r3, [r4, #8]
 801d184:	1b9b      	subs	r3, r3, r6
 801d186:	60a3      	str	r3, [r4, #8]
 801d188:	6823      	ldr	r3, [r4, #0]
 801d18a:	4433      	add	r3, r6
 801d18c:	6023      	str	r3, [r4, #0]
 801d18e:	2000      	movs	r0, #0
 801d190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d194:	462a      	mov	r2, r5
 801d196:	f000 ff53 	bl	801e040 <_realloc_r>
 801d19a:	4606      	mov	r6, r0
 801d19c:	2800      	cmp	r0, #0
 801d19e:	d1e0      	bne.n	801d162 <__ssputs_r+0x5c>
 801d1a0:	6921      	ldr	r1, [r4, #16]
 801d1a2:	4650      	mov	r0, sl
 801d1a4:	f7fe fe32 	bl	801be0c <_free_r>
 801d1a8:	230c      	movs	r3, #12
 801d1aa:	f8ca 3000 	str.w	r3, [sl]
 801d1ae:	89a3      	ldrh	r3, [r4, #12]
 801d1b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d1b4:	81a3      	strh	r3, [r4, #12]
 801d1b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d1ba:	e7e9      	b.n	801d190 <__ssputs_r+0x8a>

0801d1bc <_svfiprintf_r>:
 801d1bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d1c0:	4698      	mov	r8, r3
 801d1c2:	898b      	ldrh	r3, [r1, #12]
 801d1c4:	061b      	lsls	r3, r3, #24
 801d1c6:	b09d      	sub	sp, #116	@ 0x74
 801d1c8:	4607      	mov	r7, r0
 801d1ca:	460d      	mov	r5, r1
 801d1cc:	4614      	mov	r4, r2
 801d1ce:	d510      	bpl.n	801d1f2 <_svfiprintf_r+0x36>
 801d1d0:	690b      	ldr	r3, [r1, #16]
 801d1d2:	b973      	cbnz	r3, 801d1f2 <_svfiprintf_r+0x36>
 801d1d4:	2140      	movs	r1, #64	@ 0x40
 801d1d6:	f7ff f9c7 	bl	801c568 <_malloc_r>
 801d1da:	6028      	str	r0, [r5, #0]
 801d1dc:	6128      	str	r0, [r5, #16]
 801d1de:	b930      	cbnz	r0, 801d1ee <_svfiprintf_r+0x32>
 801d1e0:	230c      	movs	r3, #12
 801d1e2:	603b      	str	r3, [r7, #0]
 801d1e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d1e8:	b01d      	add	sp, #116	@ 0x74
 801d1ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d1ee:	2340      	movs	r3, #64	@ 0x40
 801d1f0:	616b      	str	r3, [r5, #20]
 801d1f2:	2300      	movs	r3, #0
 801d1f4:	9309      	str	r3, [sp, #36]	@ 0x24
 801d1f6:	2320      	movs	r3, #32
 801d1f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801d1fc:	f8cd 800c 	str.w	r8, [sp, #12]
 801d200:	2330      	movs	r3, #48	@ 0x30
 801d202:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801d3a0 <_svfiprintf_r+0x1e4>
 801d206:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801d20a:	f04f 0901 	mov.w	r9, #1
 801d20e:	4623      	mov	r3, r4
 801d210:	469a      	mov	sl, r3
 801d212:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d216:	b10a      	cbz	r2, 801d21c <_svfiprintf_r+0x60>
 801d218:	2a25      	cmp	r2, #37	@ 0x25
 801d21a:	d1f9      	bne.n	801d210 <_svfiprintf_r+0x54>
 801d21c:	ebba 0b04 	subs.w	fp, sl, r4
 801d220:	d00b      	beq.n	801d23a <_svfiprintf_r+0x7e>
 801d222:	465b      	mov	r3, fp
 801d224:	4622      	mov	r2, r4
 801d226:	4629      	mov	r1, r5
 801d228:	4638      	mov	r0, r7
 801d22a:	f7ff ff6c 	bl	801d106 <__ssputs_r>
 801d22e:	3001      	adds	r0, #1
 801d230:	f000 80a7 	beq.w	801d382 <_svfiprintf_r+0x1c6>
 801d234:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d236:	445a      	add	r2, fp
 801d238:	9209      	str	r2, [sp, #36]	@ 0x24
 801d23a:	f89a 3000 	ldrb.w	r3, [sl]
 801d23e:	2b00      	cmp	r3, #0
 801d240:	f000 809f 	beq.w	801d382 <_svfiprintf_r+0x1c6>
 801d244:	2300      	movs	r3, #0
 801d246:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801d24a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d24e:	f10a 0a01 	add.w	sl, sl, #1
 801d252:	9304      	str	r3, [sp, #16]
 801d254:	9307      	str	r3, [sp, #28]
 801d256:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801d25a:	931a      	str	r3, [sp, #104]	@ 0x68
 801d25c:	4654      	mov	r4, sl
 801d25e:	2205      	movs	r2, #5
 801d260:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d264:	484e      	ldr	r0, [pc, #312]	@ (801d3a0 <_svfiprintf_r+0x1e4>)
 801d266:	f7e3 f863 	bl	8000330 <memchr>
 801d26a:	9a04      	ldr	r2, [sp, #16]
 801d26c:	b9d8      	cbnz	r0, 801d2a6 <_svfiprintf_r+0xea>
 801d26e:	06d0      	lsls	r0, r2, #27
 801d270:	bf44      	itt	mi
 801d272:	2320      	movmi	r3, #32
 801d274:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d278:	0711      	lsls	r1, r2, #28
 801d27a:	bf44      	itt	mi
 801d27c:	232b      	movmi	r3, #43	@ 0x2b
 801d27e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d282:	f89a 3000 	ldrb.w	r3, [sl]
 801d286:	2b2a      	cmp	r3, #42	@ 0x2a
 801d288:	d015      	beq.n	801d2b6 <_svfiprintf_r+0xfa>
 801d28a:	9a07      	ldr	r2, [sp, #28]
 801d28c:	4654      	mov	r4, sl
 801d28e:	2000      	movs	r0, #0
 801d290:	f04f 0c0a 	mov.w	ip, #10
 801d294:	4621      	mov	r1, r4
 801d296:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d29a:	3b30      	subs	r3, #48	@ 0x30
 801d29c:	2b09      	cmp	r3, #9
 801d29e:	d94b      	bls.n	801d338 <_svfiprintf_r+0x17c>
 801d2a0:	b1b0      	cbz	r0, 801d2d0 <_svfiprintf_r+0x114>
 801d2a2:	9207      	str	r2, [sp, #28]
 801d2a4:	e014      	b.n	801d2d0 <_svfiprintf_r+0x114>
 801d2a6:	eba0 0308 	sub.w	r3, r0, r8
 801d2aa:	fa09 f303 	lsl.w	r3, r9, r3
 801d2ae:	4313      	orrs	r3, r2
 801d2b0:	9304      	str	r3, [sp, #16]
 801d2b2:	46a2      	mov	sl, r4
 801d2b4:	e7d2      	b.n	801d25c <_svfiprintf_r+0xa0>
 801d2b6:	9b03      	ldr	r3, [sp, #12]
 801d2b8:	1d19      	adds	r1, r3, #4
 801d2ba:	681b      	ldr	r3, [r3, #0]
 801d2bc:	9103      	str	r1, [sp, #12]
 801d2be:	2b00      	cmp	r3, #0
 801d2c0:	bfbb      	ittet	lt
 801d2c2:	425b      	neglt	r3, r3
 801d2c4:	f042 0202 	orrlt.w	r2, r2, #2
 801d2c8:	9307      	strge	r3, [sp, #28]
 801d2ca:	9307      	strlt	r3, [sp, #28]
 801d2cc:	bfb8      	it	lt
 801d2ce:	9204      	strlt	r2, [sp, #16]
 801d2d0:	7823      	ldrb	r3, [r4, #0]
 801d2d2:	2b2e      	cmp	r3, #46	@ 0x2e
 801d2d4:	d10a      	bne.n	801d2ec <_svfiprintf_r+0x130>
 801d2d6:	7863      	ldrb	r3, [r4, #1]
 801d2d8:	2b2a      	cmp	r3, #42	@ 0x2a
 801d2da:	d132      	bne.n	801d342 <_svfiprintf_r+0x186>
 801d2dc:	9b03      	ldr	r3, [sp, #12]
 801d2de:	1d1a      	adds	r2, r3, #4
 801d2e0:	681b      	ldr	r3, [r3, #0]
 801d2e2:	9203      	str	r2, [sp, #12]
 801d2e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801d2e8:	3402      	adds	r4, #2
 801d2ea:	9305      	str	r3, [sp, #20]
 801d2ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801d3b0 <_svfiprintf_r+0x1f4>
 801d2f0:	7821      	ldrb	r1, [r4, #0]
 801d2f2:	2203      	movs	r2, #3
 801d2f4:	4650      	mov	r0, sl
 801d2f6:	f7e3 f81b 	bl	8000330 <memchr>
 801d2fa:	b138      	cbz	r0, 801d30c <_svfiprintf_r+0x150>
 801d2fc:	9b04      	ldr	r3, [sp, #16]
 801d2fe:	eba0 000a 	sub.w	r0, r0, sl
 801d302:	2240      	movs	r2, #64	@ 0x40
 801d304:	4082      	lsls	r2, r0
 801d306:	4313      	orrs	r3, r2
 801d308:	3401      	adds	r4, #1
 801d30a:	9304      	str	r3, [sp, #16]
 801d30c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d310:	4824      	ldr	r0, [pc, #144]	@ (801d3a4 <_svfiprintf_r+0x1e8>)
 801d312:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801d316:	2206      	movs	r2, #6
 801d318:	f7e3 f80a 	bl	8000330 <memchr>
 801d31c:	2800      	cmp	r0, #0
 801d31e:	d036      	beq.n	801d38e <_svfiprintf_r+0x1d2>
 801d320:	4b21      	ldr	r3, [pc, #132]	@ (801d3a8 <_svfiprintf_r+0x1ec>)
 801d322:	bb1b      	cbnz	r3, 801d36c <_svfiprintf_r+0x1b0>
 801d324:	9b03      	ldr	r3, [sp, #12]
 801d326:	3307      	adds	r3, #7
 801d328:	f023 0307 	bic.w	r3, r3, #7
 801d32c:	3308      	adds	r3, #8
 801d32e:	9303      	str	r3, [sp, #12]
 801d330:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d332:	4433      	add	r3, r6
 801d334:	9309      	str	r3, [sp, #36]	@ 0x24
 801d336:	e76a      	b.n	801d20e <_svfiprintf_r+0x52>
 801d338:	fb0c 3202 	mla	r2, ip, r2, r3
 801d33c:	460c      	mov	r4, r1
 801d33e:	2001      	movs	r0, #1
 801d340:	e7a8      	b.n	801d294 <_svfiprintf_r+0xd8>
 801d342:	2300      	movs	r3, #0
 801d344:	3401      	adds	r4, #1
 801d346:	9305      	str	r3, [sp, #20]
 801d348:	4619      	mov	r1, r3
 801d34a:	f04f 0c0a 	mov.w	ip, #10
 801d34e:	4620      	mov	r0, r4
 801d350:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d354:	3a30      	subs	r2, #48	@ 0x30
 801d356:	2a09      	cmp	r2, #9
 801d358:	d903      	bls.n	801d362 <_svfiprintf_r+0x1a6>
 801d35a:	2b00      	cmp	r3, #0
 801d35c:	d0c6      	beq.n	801d2ec <_svfiprintf_r+0x130>
 801d35e:	9105      	str	r1, [sp, #20]
 801d360:	e7c4      	b.n	801d2ec <_svfiprintf_r+0x130>
 801d362:	fb0c 2101 	mla	r1, ip, r1, r2
 801d366:	4604      	mov	r4, r0
 801d368:	2301      	movs	r3, #1
 801d36a:	e7f0      	b.n	801d34e <_svfiprintf_r+0x192>
 801d36c:	ab03      	add	r3, sp, #12
 801d36e:	9300      	str	r3, [sp, #0]
 801d370:	462a      	mov	r2, r5
 801d372:	4b0e      	ldr	r3, [pc, #56]	@ (801d3ac <_svfiprintf_r+0x1f0>)
 801d374:	a904      	add	r1, sp, #16
 801d376:	4638      	mov	r0, r7
 801d378:	f7fc fe26 	bl	8019fc8 <_printf_float>
 801d37c:	1c42      	adds	r2, r0, #1
 801d37e:	4606      	mov	r6, r0
 801d380:	d1d6      	bne.n	801d330 <_svfiprintf_r+0x174>
 801d382:	89ab      	ldrh	r3, [r5, #12]
 801d384:	065b      	lsls	r3, r3, #25
 801d386:	f53f af2d 	bmi.w	801d1e4 <_svfiprintf_r+0x28>
 801d38a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d38c:	e72c      	b.n	801d1e8 <_svfiprintf_r+0x2c>
 801d38e:	ab03      	add	r3, sp, #12
 801d390:	9300      	str	r3, [sp, #0]
 801d392:	462a      	mov	r2, r5
 801d394:	4b05      	ldr	r3, [pc, #20]	@ (801d3ac <_svfiprintf_r+0x1f0>)
 801d396:	a904      	add	r1, sp, #16
 801d398:	4638      	mov	r0, r7
 801d39a:	f7fd f89d 	bl	801a4d8 <_printf_i>
 801d39e:	e7ed      	b.n	801d37c <_svfiprintf_r+0x1c0>
 801d3a0:	0801fb9b 	.word	0x0801fb9b
 801d3a4:	0801fba5 	.word	0x0801fba5
 801d3a8:	08019fc9 	.word	0x08019fc9
 801d3ac:	0801d107 	.word	0x0801d107
 801d3b0:	0801fba1 	.word	0x0801fba1

0801d3b4 <_sungetc_r>:
 801d3b4:	b538      	push	{r3, r4, r5, lr}
 801d3b6:	1c4b      	adds	r3, r1, #1
 801d3b8:	4614      	mov	r4, r2
 801d3ba:	d103      	bne.n	801d3c4 <_sungetc_r+0x10>
 801d3bc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801d3c0:	4628      	mov	r0, r5
 801d3c2:	bd38      	pop	{r3, r4, r5, pc}
 801d3c4:	8993      	ldrh	r3, [r2, #12]
 801d3c6:	f023 0320 	bic.w	r3, r3, #32
 801d3ca:	8193      	strh	r3, [r2, #12]
 801d3cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801d3ce:	6852      	ldr	r2, [r2, #4]
 801d3d0:	b2cd      	uxtb	r5, r1
 801d3d2:	b18b      	cbz	r3, 801d3f8 <_sungetc_r+0x44>
 801d3d4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801d3d6:	4293      	cmp	r3, r2
 801d3d8:	dd08      	ble.n	801d3ec <_sungetc_r+0x38>
 801d3da:	6823      	ldr	r3, [r4, #0]
 801d3dc:	1e5a      	subs	r2, r3, #1
 801d3de:	6022      	str	r2, [r4, #0]
 801d3e0:	f803 5c01 	strb.w	r5, [r3, #-1]
 801d3e4:	6863      	ldr	r3, [r4, #4]
 801d3e6:	3301      	adds	r3, #1
 801d3e8:	6063      	str	r3, [r4, #4]
 801d3ea:	e7e9      	b.n	801d3c0 <_sungetc_r+0xc>
 801d3ec:	4621      	mov	r1, r4
 801d3ee:	f000 fd88 	bl	801df02 <__submore>
 801d3f2:	2800      	cmp	r0, #0
 801d3f4:	d0f1      	beq.n	801d3da <_sungetc_r+0x26>
 801d3f6:	e7e1      	b.n	801d3bc <_sungetc_r+0x8>
 801d3f8:	6921      	ldr	r1, [r4, #16]
 801d3fa:	6823      	ldr	r3, [r4, #0]
 801d3fc:	b151      	cbz	r1, 801d414 <_sungetc_r+0x60>
 801d3fe:	4299      	cmp	r1, r3
 801d400:	d208      	bcs.n	801d414 <_sungetc_r+0x60>
 801d402:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801d406:	42a9      	cmp	r1, r5
 801d408:	d104      	bne.n	801d414 <_sungetc_r+0x60>
 801d40a:	3b01      	subs	r3, #1
 801d40c:	3201      	adds	r2, #1
 801d40e:	6023      	str	r3, [r4, #0]
 801d410:	6062      	str	r2, [r4, #4]
 801d412:	e7d5      	b.n	801d3c0 <_sungetc_r+0xc>
 801d414:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 801d418:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801d41c:	6363      	str	r3, [r4, #52]	@ 0x34
 801d41e:	2303      	movs	r3, #3
 801d420:	63a3      	str	r3, [r4, #56]	@ 0x38
 801d422:	4623      	mov	r3, r4
 801d424:	f803 5f46 	strb.w	r5, [r3, #70]!
 801d428:	6023      	str	r3, [r4, #0]
 801d42a:	2301      	movs	r3, #1
 801d42c:	e7dc      	b.n	801d3e8 <_sungetc_r+0x34>

0801d42e <__ssrefill_r>:
 801d42e:	b510      	push	{r4, lr}
 801d430:	460c      	mov	r4, r1
 801d432:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801d434:	b169      	cbz	r1, 801d452 <__ssrefill_r+0x24>
 801d436:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801d43a:	4299      	cmp	r1, r3
 801d43c:	d001      	beq.n	801d442 <__ssrefill_r+0x14>
 801d43e:	f7fe fce5 	bl	801be0c <_free_r>
 801d442:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801d444:	6063      	str	r3, [r4, #4]
 801d446:	2000      	movs	r0, #0
 801d448:	6360      	str	r0, [r4, #52]	@ 0x34
 801d44a:	b113      	cbz	r3, 801d452 <__ssrefill_r+0x24>
 801d44c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801d44e:	6023      	str	r3, [r4, #0]
 801d450:	bd10      	pop	{r4, pc}
 801d452:	6923      	ldr	r3, [r4, #16]
 801d454:	6023      	str	r3, [r4, #0]
 801d456:	2300      	movs	r3, #0
 801d458:	6063      	str	r3, [r4, #4]
 801d45a:	89a3      	ldrh	r3, [r4, #12]
 801d45c:	f043 0320 	orr.w	r3, r3, #32
 801d460:	81a3      	strh	r3, [r4, #12]
 801d462:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d466:	e7f3      	b.n	801d450 <__ssrefill_r+0x22>

0801d468 <__ssvfiscanf_r>:
 801d468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d46c:	460c      	mov	r4, r1
 801d46e:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 801d472:	2100      	movs	r1, #0
 801d474:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 801d478:	49a6      	ldr	r1, [pc, #664]	@ (801d714 <__ssvfiscanf_r+0x2ac>)
 801d47a:	91a0      	str	r1, [sp, #640]	@ 0x280
 801d47c:	f10d 0804 	add.w	r8, sp, #4
 801d480:	49a5      	ldr	r1, [pc, #660]	@ (801d718 <__ssvfiscanf_r+0x2b0>)
 801d482:	4fa6      	ldr	r7, [pc, #664]	@ (801d71c <__ssvfiscanf_r+0x2b4>)
 801d484:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 801d488:	4606      	mov	r6, r0
 801d48a:	91a1      	str	r1, [sp, #644]	@ 0x284
 801d48c:	9300      	str	r3, [sp, #0]
 801d48e:	f892 9000 	ldrb.w	r9, [r2]
 801d492:	f1b9 0f00 	cmp.w	r9, #0
 801d496:	f000 8158 	beq.w	801d74a <__ssvfiscanf_r+0x2e2>
 801d49a:	f817 3009 	ldrb.w	r3, [r7, r9]
 801d49e:	f013 0308 	ands.w	r3, r3, #8
 801d4a2:	f102 0501 	add.w	r5, r2, #1
 801d4a6:	d019      	beq.n	801d4dc <__ssvfiscanf_r+0x74>
 801d4a8:	6863      	ldr	r3, [r4, #4]
 801d4aa:	2b00      	cmp	r3, #0
 801d4ac:	dd0f      	ble.n	801d4ce <__ssvfiscanf_r+0x66>
 801d4ae:	6823      	ldr	r3, [r4, #0]
 801d4b0:	781a      	ldrb	r2, [r3, #0]
 801d4b2:	5cba      	ldrb	r2, [r7, r2]
 801d4b4:	0712      	lsls	r2, r2, #28
 801d4b6:	d401      	bmi.n	801d4bc <__ssvfiscanf_r+0x54>
 801d4b8:	462a      	mov	r2, r5
 801d4ba:	e7e8      	b.n	801d48e <__ssvfiscanf_r+0x26>
 801d4bc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801d4be:	3201      	adds	r2, #1
 801d4c0:	9245      	str	r2, [sp, #276]	@ 0x114
 801d4c2:	6862      	ldr	r2, [r4, #4]
 801d4c4:	3301      	adds	r3, #1
 801d4c6:	3a01      	subs	r2, #1
 801d4c8:	6062      	str	r2, [r4, #4]
 801d4ca:	6023      	str	r3, [r4, #0]
 801d4cc:	e7ec      	b.n	801d4a8 <__ssvfiscanf_r+0x40>
 801d4ce:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801d4d0:	4621      	mov	r1, r4
 801d4d2:	4630      	mov	r0, r6
 801d4d4:	4798      	blx	r3
 801d4d6:	2800      	cmp	r0, #0
 801d4d8:	d0e9      	beq.n	801d4ae <__ssvfiscanf_r+0x46>
 801d4da:	e7ed      	b.n	801d4b8 <__ssvfiscanf_r+0x50>
 801d4dc:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 801d4e0:	f040 8085 	bne.w	801d5ee <__ssvfiscanf_r+0x186>
 801d4e4:	9341      	str	r3, [sp, #260]	@ 0x104
 801d4e6:	9343      	str	r3, [sp, #268]	@ 0x10c
 801d4e8:	7853      	ldrb	r3, [r2, #1]
 801d4ea:	2b2a      	cmp	r3, #42	@ 0x2a
 801d4ec:	bf02      	ittt	eq
 801d4ee:	2310      	moveq	r3, #16
 801d4f0:	1c95      	addeq	r5, r2, #2
 801d4f2:	9341      	streq	r3, [sp, #260]	@ 0x104
 801d4f4:	220a      	movs	r2, #10
 801d4f6:	46aa      	mov	sl, r5
 801d4f8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 801d4fc:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 801d500:	2b09      	cmp	r3, #9
 801d502:	d91e      	bls.n	801d542 <__ssvfiscanf_r+0xda>
 801d504:	f8df b218 	ldr.w	fp, [pc, #536]	@ 801d720 <__ssvfiscanf_r+0x2b8>
 801d508:	2203      	movs	r2, #3
 801d50a:	4658      	mov	r0, fp
 801d50c:	f7e2 ff10 	bl	8000330 <memchr>
 801d510:	b138      	cbz	r0, 801d522 <__ssvfiscanf_r+0xba>
 801d512:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801d514:	eba0 000b 	sub.w	r0, r0, fp
 801d518:	2301      	movs	r3, #1
 801d51a:	4083      	lsls	r3, r0
 801d51c:	4313      	orrs	r3, r2
 801d51e:	9341      	str	r3, [sp, #260]	@ 0x104
 801d520:	4655      	mov	r5, sl
 801d522:	f815 3b01 	ldrb.w	r3, [r5], #1
 801d526:	2b78      	cmp	r3, #120	@ 0x78
 801d528:	d806      	bhi.n	801d538 <__ssvfiscanf_r+0xd0>
 801d52a:	2b57      	cmp	r3, #87	@ 0x57
 801d52c:	d810      	bhi.n	801d550 <__ssvfiscanf_r+0xe8>
 801d52e:	2b25      	cmp	r3, #37	@ 0x25
 801d530:	d05d      	beq.n	801d5ee <__ssvfiscanf_r+0x186>
 801d532:	d857      	bhi.n	801d5e4 <__ssvfiscanf_r+0x17c>
 801d534:	2b00      	cmp	r3, #0
 801d536:	d075      	beq.n	801d624 <__ssvfiscanf_r+0x1bc>
 801d538:	2303      	movs	r3, #3
 801d53a:	9347      	str	r3, [sp, #284]	@ 0x11c
 801d53c:	230a      	movs	r3, #10
 801d53e:	9342      	str	r3, [sp, #264]	@ 0x108
 801d540:	e088      	b.n	801d654 <__ssvfiscanf_r+0x1ec>
 801d542:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 801d544:	fb02 1103 	mla	r1, r2, r3, r1
 801d548:	3930      	subs	r1, #48	@ 0x30
 801d54a:	9143      	str	r1, [sp, #268]	@ 0x10c
 801d54c:	4655      	mov	r5, sl
 801d54e:	e7d2      	b.n	801d4f6 <__ssvfiscanf_r+0x8e>
 801d550:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 801d554:	2a20      	cmp	r2, #32
 801d556:	d8ef      	bhi.n	801d538 <__ssvfiscanf_r+0xd0>
 801d558:	a101      	add	r1, pc, #4	@ (adr r1, 801d560 <__ssvfiscanf_r+0xf8>)
 801d55a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801d55e:	bf00      	nop
 801d560:	0801d633 	.word	0x0801d633
 801d564:	0801d539 	.word	0x0801d539
 801d568:	0801d539 	.word	0x0801d539
 801d56c:	0801d68d 	.word	0x0801d68d
 801d570:	0801d539 	.word	0x0801d539
 801d574:	0801d539 	.word	0x0801d539
 801d578:	0801d539 	.word	0x0801d539
 801d57c:	0801d539 	.word	0x0801d539
 801d580:	0801d539 	.word	0x0801d539
 801d584:	0801d539 	.word	0x0801d539
 801d588:	0801d539 	.word	0x0801d539
 801d58c:	0801d6a3 	.word	0x0801d6a3
 801d590:	0801d689 	.word	0x0801d689
 801d594:	0801d5eb 	.word	0x0801d5eb
 801d598:	0801d5eb 	.word	0x0801d5eb
 801d59c:	0801d5eb 	.word	0x0801d5eb
 801d5a0:	0801d539 	.word	0x0801d539
 801d5a4:	0801d645 	.word	0x0801d645
 801d5a8:	0801d539 	.word	0x0801d539
 801d5ac:	0801d539 	.word	0x0801d539
 801d5b0:	0801d539 	.word	0x0801d539
 801d5b4:	0801d539 	.word	0x0801d539
 801d5b8:	0801d6b3 	.word	0x0801d6b3
 801d5bc:	0801d64d 	.word	0x0801d64d
 801d5c0:	0801d62b 	.word	0x0801d62b
 801d5c4:	0801d539 	.word	0x0801d539
 801d5c8:	0801d539 	.word	0x0801d539
 801d5cc:	0801d6af 	.word	0x0801d6af
 801d5d0:	0801d539 	.word	0x0801d539
 801d5d4:	0801d689 	.word	0x0801d689
 801d5d8:	0801d539 	.word	0x0801d539
 801d5dc:	0801d539 	.word	0x0801d539
 801d5e0:	0801d633 	.word	0x0801d633
 801d5e4:	3b45      	subs	r3, #69	@ 0x45
 801d5e6:	2b02      	cmp	r3, #2
 801d5e8:	d8a6      	bhi.n	801d538 <__ssvfiscanf_r+0xd0>
 801d5ea:	2305      	movs	r3, #5
 801d5ec:	e031      	b.n	801d652 <__ssvfiscanf_r+0x1ea>
 801d5ee:	6863      	ldr	r3, [r4, #4]
 801d5f0:	2b00      	cmp	r3, #0
 801d5f2:	dd0d      	ble.n	801d610 <__ssvfiscanf_r+0x1a8>
 801d5f4:	6823      	ldr	r3, [r4, #0]
 801d5f6:	781a      	ldrb	r2, [r3, #0]
 801d5f8:	454a      	cmp	r2, r9
 801d5fa:	f040 80a6 	bne.w	801d74a <__ssvfiscanf_r+0x2e2>
 801d5fe:	3301      	adds	r3, #1
 801d600:	6862      	ldr	r2, [r4, #4]
 801d602:	6023      	str	r3, [r4, #0]
 801d604:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 801d606:	3a01      	subs	r2, #1
 801d608:	3301      	adds	r3, #1
 801d60a:	6062      	str	r2, [r4, #4]
 801d60c:	9345      	str	r3, [sp, #276]	@ 0x114
 801d60e:	e753      	b.n	801d4b8 <__ssvfiscanf_r+0x50>
 801d610:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801d612:	4621      	mov	r1, r4
 801d614:	4630      	mov	r0, r6
 801d616:	4798      	blx	r3
 801d618:	2800      	cmp	r0, #0
 801d61a:	d0eb      	beq.n	801d5f4 <__ssvfiscanf_r+0x18c>
 801d61c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801d61e:	2800      	cmp	r0, #0
 801d620:	f040 808b 	bne.w	801d73a <__ssvfiscanf_r+0x2d2>
 801d624:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d628:	e08b      	b.n	801d742 <__ssvfiscanf_r+0x2da>
 801d62a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801d62c:	f042 0220 	orr.w	r2, r2, #32
 801d630:	9241      	str	r2, [sp, #260]	@ 0x104
 801d632:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801d634:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801d638:	9241      	str	r2, [sp, #260]	@ 0x104
 801d63a:	2210      	movs	r2, #16
 801d63c:	2b6e      	cmp	r3, #110	@ 0x6e
 801d63e:	9242      	str	r2, [sp, #264]	@ 0x108
 801d640:	d902      	bls.n	801d648 <__ssvfiscanf_r+0x1e0>
 801d642:	e005      	b.n	801d650 <__ssvfiscanf_r+0x1e8>
 801d644:	2300      	movs	r3, #0
 801d646:	9342      	str	r3, [sp, #264]	@ 0x108
 801d648:	2303      	movs	r3, #3
 801d64a:	e002      	b.n	801d652 <__ssvfiscanf_r+0x1ea>
 801d64c:	2308      	movs	r3, #8
 801d64e:	9342      	str	r3, [sp, #264]	@ 0x108
 801d650:	2304      	movs	r3, #4
 801d652:	9347      	str	r3, [sp, #284]	@ 0x11c
 801d654:	6863      	ldr	r3, [r4, #4]
 801d656:	2b00      	cmp	r3, #0
 801d658:	dd39      	ble.n	801d6ce <__ssvfiscanf_r+0x266>
 801d65a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801d65c:	0659      	lsls	r1, r3, #25
 801d65e:	d404      	bmi.n	801d66a <__ssvfiscanf_r+0x202>
 801d660:	6823      	ldr	r3, [r4, #0]
 801d662:	781a      	ldrb	r2, [r3, #0]
 801d664:	5cba      	ldrb	r2, [r7, r2]
 801d666:	0712      	lsls	r2, r2, #28
 801d668:	d438      	bmi.n	801d6dc <__ssvfiscanf_r+0x274>
 801d66a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 801d66c:	2b02      	cmp	r3, #2
 801d66e:	dc47      	bgt.n	801d700 <__ssvfiscanf_r+0x298>
 801d670:	466b      	mov	r3, sp
 801d672:	4622      	mov	r2, r4
 801d674:	a941      	add	r1, sp, #260	@ 0x104
 801d676:	4630      	mov	r0, r6
 801d678:	f000 f9ae 	bl	801d9d8 <_scanf_chars>
 801d67c:	2801      	cmp	r0, #1
 801d67e:	d064      	beq.n	801d74a <__ssvfiscanf_r+0x2e2>
 801d680:	2802      	cmp	r0, #2
 801d682:	f47f af19 	bne.w	801d4b8 <__ssvfiscanf_r+0x50>
 801d686:	e7c9      	b.n	801d61c <__ssvfiscanf_r+0x1b4>
 801d688:	220a      	movs	r2, #10
 801d68a:	e7d7      	b.n	801d63c <__ssvfiscanf_r+0x1d4>
 801d68c:	4629      	mov	r1, r5
 801d68e:	4640      	mov	r0, r8
 801d690:	f000 fbfe 	bl	801de90 <__sccl>
 801d694:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801d696:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d69a:	9341      	str	r3, [sp, #260]	@ 0x104
 801d69c:	4605      	mov	r5, r0
 801d69e:	2301      	movs	r3, #1
 801d6a0:	e7d7      	b.n	801d652 <__ssvfiscanf_r+0x1ea>
 801d6a2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801d6a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d6a8:	9341      	str	r3, [sp, #260]	@ 0x104
 801d6aa:	2300      	movs	r3, #0
 801d6ac:	e7d1      	b.n	801d652 <__ssvfiscanf_r+0x1ea>
 801d6ae:	2302      	movs	r3, #2
 801d6b0:	e7cf      	b.n	801d652 <__ssvfiscanf_r+0x1ea>
 801d6b2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 801d6b4:	06c3      	lsls	r3, r0, #27
 801d6b6:	f53f aeff 	bmi.w	801d4b8 <__ssvfiscanf_r+0x50>
 801d6ba:	9b00      	ldr	r3, [sp, #0]
 801d6bc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801d6be:	1d19      	adds	r1, r3, #4
 801d6c0:	9100      	str	r1, [sp, #0]
 801d6c2:	681b      	ldr	r3, [r3, #0]
 801d6c4:	07c0      	lsls	r0, r0, #31
 801d6c6:	bf4c      	ite	mi
 801d6c8:	801a      	strhmi	r2, [r3, #0]
 801d6ca:	601a      	strpl	r2, [r3, #0]
 801d6cc:	e6f4      	b.n	801d4b8 <__ssvfiscanf_r+0x50>
 801d6ce:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801d6d0:	4621      	mov	r1, r4
 801d6d2:	4630      	mov	r0, r6
 801d6d4:	4798      	blx	r3
 801d6d6:	2800      	cmp	r0, #0
 801d6d8:	d0bf      	beq.n	801d65a <__ssvfiscanf_r+0x1f2>
 801d6da:	e79f      	b.n	801d61c <__ssvfiscanf_r+0x1b4>
 801d6dc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801d6de:	3201      	adds	r2, #1
 801d6e0:	9245      	str	r2, [sp, #276]	@ 0x114
 801d6e2:	6862      	ldr	r2, [r4, #4]
 801d6e4:	3a01      	subs	r2, #1
 801d6e6:	2a00      	cmp	r2, #0
 801d6e8:	6062      	str	r2, [r4, #4]
 801d6ea:	dd02      	ble.n	801d6f2 <__ssvfiscanf_r+0x28a>
 801d6ec:	3301      	adds	r3, #1
 801d6ee:	6023      	str	r3, [r4, #0]
 801d6f0:	e7b6      	b.n	801d660 <__ssvfiscanf_r+0x1f8>
 801d6f2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801d6f4:	4621      	mov	r1, r4
 801d6f6:	4630      	mov	r0, r6
 801d6f8:	4798      	blx	r3
 801d6fa:	2800      	cmp	r0, #0
 801d6fc:	d0b0      	beq.n	801d660 <__ssvfiscanf_r+0x1f8>
 801d6fe:	e78d      	b.n	801d61c <__ssvfiscanf_r+0x1b4>
 801d700:	2b04      	cmp	r3, #4
 801d702:	dc0f      	bgt.n	801d724 <__ssvfiscanf_r+0x2bc>
 801d704:	466b      	mov	r3, sp
 801d706:	4622      	mov	r2, r4
 801d708:	a941      	add	r1, sp, #260	@ 0x104
 801d70a:	4630      	mov	r0, r6
 801d70c:	f000 f9be 	bl	801da8c <_scanf_i>
 801d710:	e7b4      	b.n	801d67c <__ssvfiscanf_r+0x214>
 801d712:	bf00      	nop
 801d714:	0801d3b5 	.word	0x0801d3b5
 801d718:	0801d42f 	.word	0x0801d42f
 801d71c:	0801fd59 	.word	0x0801fd59
 801d720:	0801fba1 	.word	0x0801fba1
 801d724:	4b0a      	ldr	r3, [pc, #40]	@ (801d750 <__ssvfiscanf_r+0x2e8>)
 801d726:	2b00      	cmp	r3, #0
 801d728:	f43f aec6 	beq.w	801d4b8 <__ssvfiscanf_r+0x50>
 801d72c:	466b      	mov	r3, sp
 801d72e:	4622      	mov	r2, r4
 801d730:	a941      	add	r1, sp, #260	@ 0x104
 801d732:	4630      	mov	r0, r6
 801d734:	f7fc ffee 	bl	801a714 <_scanf_float>
 801d738:	e7a0      	b.n	801d67c <__ssvfiscanf_r+0x214>
 801d73a:	89a3      	ldrh	r3, [r4, #12]
 801d73c:	065b      	lsls	r3, r3, #25
 801d73e:	f53f af71 	bmi.w	801d624 <__ssvfiscanf_r+0x1bc>
 801d742:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 801d746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d74a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801d74c:	e7f9      	b.n	801d742 <__ssvfiscanf_r+0x2da>
 801d74e:	bf00      	nop
 801d750:	0801a715 	.word	0x0801a715

0801d754 <__sfputc_r>:
 801d754:	6893      	ldr	r3, [r2, #8]
 801d756:	3b01      	subs	r3, #1
 801d758:	2b00      	cmp	r3, #0
 801d75a:	b410      	push	{r4}
 801d75c:	6093      	str	r3, [r2, #8]
 801d75e:	da08      	bge.n	801d772 <__sfputc_r+0x1e>
 801d760:	6994      	ldr	r4, [r2, #24]
 801d762:	42a3      	cmp	r3, r4
 801d764:	db01      	blt.n	801d76a <__sfputc_r+0x16>
 801d766:	290a      	cmp	r1, #10
 801d768:	d103      	bne.n	801d772 <__sfputc_r+0x1e>
 801d76a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d76e:	f7fd bb9c 	b.w	801aeaa <__swbuf_r>
 801d772:	6813      	ldr	r3, [r2, #0]
 801d774:	1c58      	adds	r0, r3, #1
 801d776:	6010      	str	r0, [r2, #0]
 801d778:	7019      	strb	r1, [r3, #0]
 801d77a:	4608      	mov	r0, r1
 801d77c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d780:	4770      	bx	lr

0801d782 <__sfputs_r>:
 801d782:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d784:	4606      	mov	r6, r0
 801d786:	460f      	mov	r7, r1
 801d788:	4614      	mov	r4, r2
 801d78a:	18d5      	adds	r5, r2, r3
 801d78c:	42ac      	cmp	r4, r5
 801d78e:	d101      	bne.n	801d794 <__sfputs_r+0x12>
 801d790:	2000      	movs	r0, #0
 801d792:	e007      	b.n	801d7a4 <__sfputs_r+0x22>
 801d794:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d798:	463a      	mov	r2, r7
 801d79a:	4630      	mov	r0, r6
 801d79c:	f7ff ffda 	bl	801d754 <__sfputc_r>
 801d7a0:	1c43      	adds	r3, r0, #1
 801d7a2:	d1f3      	bne.n	801d78c <__sfputs_r+0xa>
 801d7a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801d7a8 <_vfiprintf_r>:
 801d7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d7ac:	460d      	mov	r5, r1
 801d7ae:	b09d      	sub	sp, #116	@ 0x74
 801d7b0:	4614      	mov	r4, r2
 801d7b2:	4698      	mov	r8, r3
 801d7b4:	4606      	mov	r6, r0
 801d7b6:	b118      	cbz	r0, 801d7c0 <_vfiprintf_r+0x18>
 801d7b8:	6a03      	ldr	r3, [r0, #32]
 801d7ba:	b90b      	cbnz	r3, 801d7c0 <_vfiprintf_r+0x18>
 801d7bc:	f7fd fa3c 	bl	801ac38 <__sinit>
 801d7c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d7c2:	07d9      	lsls	r1, r3, #31
 801d7c4:	d405      	bmi.n	801d7d2 <_vfiprintf_r+0x2a>
 801d7c6:	89ab      	ldrh	r3, [r5, #12]
 801d7c8:	059a      	lsls	r2, r3, #22
 801d7ca:	d402      	bmi.n	801d7d2 <_vfiprintf_r+0x2a>
 801d7cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d7ce:	f7fd fd16 	bl	801b1fe <__retarget_lock_acquire_recursive>
 801d7d2:	89ab      	ldrh	r3, [r5, #12]
 801d7d4:	071b      	lsls	r3, r3, #28
 801d7d6:	d501      	bpl.n	801d7dc <_vfiprintf_r+0x34>
 801d7d8:	692b      	ldr	r3, [r5, #16]
 801d7da:	b99b      	cbnz	r3, 801d804 <_vfiprintf_r+0x5c>
 801d7dc:	4629      	mov	r1, r5
 801d7de:	4630      	mov	r0, r6
 801d7e0:	f7fd fba2 	bl	801af28 <__swsetup_r>
 801d7e4:	b170      	cbz	r0, 801d804 <_vfiprintf_r+0x5c>
 801d7e6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d7e8:	07dc      	lsls	r4, r3, #31
 801d7ea:	d504      	bpl.n	801d7f6 <_vfiprintf_r+0x4e>
 801d7ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d7f0:	b01d      	add	sp, #116	@ 0x74
 801d7f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d7f6:	89ab      	ldrh	r3, [r5, #12]
 801d7f8:	0598      	lsls	r0, r3, #22
 801d7fa:	d4f7      	bmi.n	801d7ec <_vfiprintf_r+0x44>
 801d7fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d7fe:	f7fd fcff 	bl	801b200 <__retarget_lock_release_recursive>
 801d802:	e7f3      	b.n	801d7ec <_vfiprintf_r+0x44>
 801d804:	2300      	movs	r3, #0
 801d806:	9309      	str	r3, [sp, #36]	@ 0x24
 801d808:	2320      	movs	r3, #32
 801d80a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801d80e:	f8cd 800c 	str.w	r8, [sp, #12]
 801d812:	2330      	movs	r3, #48	@ 0x30
 801d814:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801d9c4 <_vfiprintf_r+0x21c>
 801d818:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801d81c:	f04f 0901 	mov.w	r9, #1
 801d820:	4623      	mov	r3, r4
 801d822:	469a      	mov	sl, r3
 801d824:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d828:	b10a      	cbz	r2, 801d82e <_vfiprintf_r+0x86>
 801d82a:	2a25      	cmp	r2, #37	@ 0x25
 801d82c:	d1f9      	bne.n	801d822 <_vfiprintf_r+0x7a>
 801d82e:	ebba 0b04 	subs.w	fp, sl, r4
 801d832:	d00b      	beq.n	801d84c <_vfiprintf_r+0xa4>
 801d834:	465b      	mov	r3, fp
 801d836:	4622      	mov	r2, r4
 801d838:	4629      	mov	r1, r5
 801d83a:	4630      	mov	r0, r6
 801d83c:	f7ff ffa1 	bl	801d782 <__sfputs_r>
 801d840:	3001      	adds	r0, #1
 801d842:	f000 80a7 	beq.w	801d994 <_vfiprintf_r+0x1ec>
 801d846:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d848:	445a      	add	r2, fp
 801d84a:	9209      	str	r2, [sp, #36]	@ 0x24
 801d84c:	f89a 3000 	ldrb.w	r3, [sl]
 801d850:	2b00      	cmp	r3, #0
 801d852:	f000 809f 	beq.w	801d994 <_vfiprintf_r+0x1ec>
 801d856:	2300      	movs	r3, #0
 801d858:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801d85c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d860:	f10a 0a01 	add.w	sl, sl, #1
 801d864:	9304      	str	r3, [sp, #16]
 801d866:	9307      	str	r3, [sp, #28]
 801d868:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801d86c:	931a      	str	r3, [sp, #104]	@ 0x68
 801d86e:	4654      	mov	r4, sl
 801d870:	2205      	movs	r2, #5
 801d872:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d876:	4853      	ldr	r0, [pc, #332]	@ (801d9c4 <_vfiprintf_r+0x21c>)
 801d878:	f7e2 fd5a 	bl	8000330 <memchr>
 801d87c:	9a04      	ldr	r2, [sp, #16]
 801d87e:	b9d8      	cbnz	r0, 801d8b8 <_vfiprintf_r+0x110>
 801d880:	06d1      	lsls	r1, r2, #27
 801d882:	bf44      	itt	mi
 801d884:	2320      	movmi	r3, #32
 801d886:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d88a:	0713      	lsls	r3, r2, #28
 801d88c:	bf44      	itt	mi
 801d88e:	232b      	movmi	r3, #43	@ 0x2b
 801d890:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d894:	f89a 3000 	ldrb.w	r3, [sl]
 801d898:	2b2a      	cmp	r3, #42	@ 0x2a
 801d89a:	d015      	beq.n	801d8c8 <_vfiprintf_r+0x120>
 801d89c:	9a07      	ldr	r2, [sp, #28]
 801d89e:	4654      	mov	r4, sl
 801d8a0:	2000      	movs	r0, #0
 801d8a2:	f04f 0c0a 	mov.w	ip, #10
 801d8a6:	4621      	mov	r1, r4
 801d8a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d8ac:	3b30      	subs	r3, #48	@ 0x30
 801d8ae:	2b09      	cmp	r3, #9
 801d8b0:	d94b      	bls.n	801d94a <_vfiprintf_r+0x1a2>
 801d8b2:	b1b0      	cbz	r0, 801d8e2 <_vfiprintf_r+0x13a>
 801d8b4:	9207      	str	r2, [sp, #28]
 801d8b6:	e014      	b.n	801d8e2 <_vfiprintf_r+0x13a>
 801d8b8:	eba0 0308 	sub.w	r3, r0, r8
 801d8bc:	fa09 f303 	lsl.w	r3, r9, r3
 801d8c0:	4313      	orrs	r3, r2
 801d8c2:	9304      	str	r3, [sp, #16]
 801d8c4:	46a2      	mov	sl, r4
 801d8c6:	e7d2      	b.n	801d86e <_vfiprintf_r+0xc6>
 801d8c8:	9b03      	ldr	r3, [sp, #12]
 801d8ca:	1d19      	adds	r1, r3, #4
 801d8cc:	681b      	ldr	r3, [r3, #0]
 801d8ce:	9103      	str	r1, [sp, #12]
 801d8d0:	2b00      	cmp	r3, #0
 801d8d2:	bfbb      	ittet	lt
 801d8d4:	425b      	neglt	r3, r3
 801d8d6:	f042 0202 	orrlt.w	r2, r2, #2
 801d8da:	9307      	strge	r3, [sp, #28]
 801d8dc:	9307      	strlt	r3, [sp, #28]
 801d8de:	bfb8      	it	lt
 801d8e0:	9204      	strlt	r2, [sp, #16]
 801d8e2:	7823      	ldrb	r3, [r4, #0]
 801d8e4:	2b2e      	cmp	r3, #46	@ 0x2e
 801d8e6:	d10a      	bne.n	801d8fe <_vfiprintf_r+0x156>
 801d8e8:	7863      	ldrb	r3, [r4, #1]
 801d8ea:	2b2a      	cmp	r3, #42	@ 0x2a
 801d8ec:	d132      	bne.n	801d954 <_vfiprintf_r+0x1ac>
 801d8ee:	9b03      	ldr	r3, [sp, #12]
 801d8f0:	1d1a      	adds	r2, r3, #4
 801d8f2:	681b      	ldr	r3, [r3, #0]
 801d8f4:	9203      	str	r2, [sp, #12]
 801d8f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801d8fa:	3402      	adds	r4, #2
 801d8fc:	9305      	str	r3, [sp, #20]
 801d8fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801d9d4 <_vfiprintf_r+0x22c>
 801d902:	7821      	ldrb	r1, [r4, #0]
 801d904:	2203      	movs	r2, #3
 801d906:	4650      	mov	r0, sl
 801d908:	f7e2 fd12 	bl	8000330 <memchr>
 801d90c:	b138      	cbz	r0, 801d91e <_vfiprintf_r+0x176>
 801d90e:	9b04      	ldr	r3, [sp, #16]
 801d910:	eba0 000a 	sub.w	r0, r0, sl
 801d914:	2240      	movs	r2, #64	@ 0x40
 801d916:	4082      	lsls	r2, r0
 801d918:	4313      	orrs	r3, r2
 801d91a:	3401      	adds	r4, #1
 801d91c:	9304      	str	r3, [sp, #16]
 801d91e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d922:	4829      	ldr	r0, [pc, #164]	@ (801d9c8 <_vfiprintf_r+0x220>)
 801d924:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801d928:	2206      	movs	r2, #6
 801d92a:	f7e2 fd01 	bl	8000330 <memchr>
 801d92e:	2800      	cmp	r0, #0
 801d930:	d03f      	beq.n	801d9b2 <_vfiprintf_r+0x20a>
 801d932:	4b26      	ldr	r3, [pc, #152]	@ (801d9cc <_vfiprintf_r+0x224>)
 801d934:	bb1b      	cbnz	r3, 801d97e <_vfiprintf_r+0x1d6>
 801d936:	9b03      	ldr	r3, [sp, #12]
 801d938:	3307      	adds	r3, #7
 801d93a:	f023 0307 	bic.w	r3, r3, #7
 801d93e:	3308      	adds	r3, #8
 801d940:	9303      	str	r3, [sp, #12]
 801d942:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d944:	443b      	add	r3, r7
 801d946:	9309      	str	r3, [sp, #36]	@ 0x24
 801d948:	e76a      	b.n	801d820 <_vfiprintf_r+0x78>
 801d94a:	fb0c 3202 	mla	r2, ip, r2, r3
 801d94e:	460c      	mov	r4, r1
 801d950:	2001      	movs	r0, #1
 801d952:	e7a8      	b.n	801d8a6 <_vfiprintf_r+0xfe>
 801d954:	2300      	movs	r3, #0
 801d956:	3401      	adds	r4, #1
 801d958:	9305      	str	r3, [sp, #20]
 801d95a:	4619      	mov	r1, r3
 801d95c:	f04f 0c0a 	mov.w	ip, #10
 801d960:	4620      	mov	r0, r4
 801d962:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d966:	3a30      	subs	r2, #48	@ 0x30
 801d968:	2a09      	cmp	r2, #9
 801d96a:	d903      	bls.n	801d974 <_vfiprintf_r+0x1cc>
 801d96c:	2b00      	cmp	r3, #0
 801d96e:	d0c6      	beq.n	801d8fe <_vfiprintf_r+0x156>
 801d970:	9105      	str	r1, [sp, #20]
 801d972:	e7c4      	b.n	801d8fe <_vfiprintf_r+0x156>
 801d974:	fb0c 2101 	mla	r1, ip, r1, r2
 801d978:	4604      	mov	r4, r0
 801d97a:	2301      	movs	r3, #1
 801d97c:	e7f0      	b.n	801d960 <_vfiprintf_r+0x1b8>
 801d97e:	ab03      	add	r3, sp, #12
 801d980:	9300      	str	r3, [sp, #0]
 801d982:	462a      	mov	r2, r5
 801d984:	4b12      	ldr	r3, [pc, #72]	@ (801d9d0 <_vfiprintf_r+0x228>)
 801d986:	a904      	add	r1, sp, #16
 801d988:	4630      	mov	r0, r6
 801d98a:	f7fc fb1d 	bl	8019fc8 <_printf_float>
 801d98e:	4607      	mov	r7, r0
 801d990:	1c78      	adds	r0, r7, #1
 801d992:	d1d6      	bne.n	801d942 <_vfiprintf_r+0x19a>
 801d994:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d996:	07d9      	lsls	r1, r3, #31
 801d998:	d405      	bmi.n	801d9a6 <_vfiprintf_r+0x1fe>
 801d99a:	89ab      	ldrh	r3, [r5, #12]
 801d99c:	059a      	lsls	r2, r3, #22
 801d99e:	d402      	bmi.n	801d9a6 <_vfiprintf_r+0x1fe>
 801d9a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d9a2:	f7fd fc2d 	bl	801b200 <__retarget_lock_release_recursive>
 801d9a6:	89ab      	ldrh	r3, [r5, #12]
 801d9a8:	065b      	lsls	r3, r3, #25
 801d9aa:	f53f af1f 	bmi.w	801d7ec <_vfiprintf_r+0x44>
 801d9ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d9b0:	e71e      	b.n	801d7f0 <_vfiprintf_r+0x48>
 801d9b2:	ab03      	add	r3, sp, #12
 801d9b4:	9300      	str	r3, [sp, #0]
 801d9b6:	462a      	mov	r2, r5
 801d9b8:	4b05      	ldr	r3, [pc, #20]	@ (801d9d0 <_vfiprintf_r+0x228>)
 801d9ba:	a904      	add	r1, sp, #16
 801d9bc:	4630      	mov	r0, r6
 801d9be:	f7fc fd8b 	bl	801a4d8 <_printf_i>
 801d9c2:	e7e4      	b.n	801d98e <_vfiprintf_r+0x1e6>
 801d9c4:	0801fb9b 	.word	0x0801fb9b
 801d9c8:	0801fba5 	.word	0x0801fba5
 801d9cc:	08019fc9 	.word	0x08019fc9
 801d9d0:	0801d783 	.word	0x0801d783
 801d9d4:	0801fba1 	.word	0x0801fba1

0801d9d8 <_scanf_chars>:
 801d9d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d9dc:	4615      	mov	r5, r2
 801d9de:	688a      	ldr	r2, [r1, #8]
 801d9e0:	4680      	mov	r8, r0
 801d9e2:	460c      	mov	r4, r1
 801d9e4:	b932      	cbnz	r2, 801d9f4 <_scanf_chars+0x1c>
 801d9e6:	698a      	ldr	r2, [r1, #24]
 801d9e8:	2a00      	cmp	r2, #0
 801d9ea:	bf14      	ite	ne
 801d9ec:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 801d9f0:	2201      	moveq	r2, #1
 801d9f2:	608a      	str	r2, [r1, #8]
 801d9f4:	6822      	ldr	r2, [r4, #0]
 801d9f6:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 801da88 <_scanf_chars+0xb0>
 801d9fa:	06d1      	lsls	r1, r2, #27
 801d9fc:	bf5f      	itttt	pl
 801d9fe:	681a      	ldrpl	r2, [r3, #0]
 801da00:	1d11      	addpl	r1, r2, #4
 801da02:	6019      	strpl	r1, [r3, #0]
 801da04:	6816      	ldrpl	r6, [r2, #0]
 801da06:	2700      	movs	r7, #0
 801da08:	69a0      	ldr	r0, [r4, #24]
 801da0a:	b188      	cbz	r0, 801da30 <_scanf_chars+0x58>
 801da0c:	2801      	cmp	r0, #1
 801da0e:	d107      	bne.n	801da20 <_scanf_chars+0x48>
 801da10:	682b      	ldr	r3, [r5, #0]
 801da12:	781a      	ldrb	r2, [r3, #0]
 801da14:	6963      	ldr	r3, [r4, #20]
 801da16:	5c9b      	ldrb	r3, [r3, r2]
 801da18:	b953      	cbnz	r3, 801da30 <_scanf_chars+0x58>
 801da1a:	2f00      	cmp	r7, #0
 801da1c:	d031      	beq.n	801da82 <_scanf_chars+0xaa>
 801da1e:	e022      	b.n	801da66 <_scanf_chars+0x8e>
 801da20:	2802      	cmp	r0, #2
 801da22:	d120      	bne.n	801da66 <_scanf_chars+0x8e>
 801da24:	682b      	ldr	r3, [r5, #0]
 801da26:	781b      	ldrb	r3, [r3, #0]
 801da28:	f819 3003 	ldrb.w	r3, [r9, r3]
 801da2c:	071b      	lsls	r3, r3, #28
 801da2e:	d41a      	bmi.n	801da66 <_scanf_chars+0x8e>
 801da30:	6823      	ldr	r3, [r4, #0]
 801da32:	06da      	lsls	r2, r3, #27
 801da34:	bf5e      	ittt	pl
 801da36:	682b      	ldrpl	r3, [r5, #0]
 801da38:	781b      	ldrbpl	r3, [r3, #0]
 801da3a:	f806 3b01 	strbpl.w	r3, [r6], #1
 801da3e:	682a      	ldr	r2, [r5, #0]
 801da40:	686b      	ldr	r3, [r5, #4]
 801da42:	3201      	adds	r2, #1
 801da44:	602a      	str	r2, [r5, #0]
 801da46:	68a2      	ldr	r2, [r4, #8]
 801da48:	3b01      	subs	r3, #1
 801da4a:	3a01      	subs	r2, #1
 801da4c:	606b      	str	r3, [r5, #4]
 801da4e:	3701      	adds	r7, #1
 801da50:	60a2      	str	r2, [r4, #8]
 801da52:	b142      	cbz	r2, 801da66 <_scanf_chars+0x8e>
 801da54:	2b00      	cmp	r3, #0
 801da56:	dcd7      	bgt.n	801da08 <_scanf_chars+0x30>
 801da58:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801da5c:	4629      	mov	r1, r5
 801da5e:	4640      	mov	r0, r8
 801da60:	4798      	blx	r3
 801da62:	2800      	cmp	r0, #0
 801da64:	d0d0      	beq.n	801da08 <_scanf_chars+0x30>
 801da66:	6823      	ldr	r3, [r4, #0]
 801da68:	f013 0310 	ands.w	r3, r3, #16
 801da6c:	d105      	bne.n	801da7a <_scanf_chars+0xa2>
 801da6e:	68e2      	ldr	r2, [r4, #12]
 801da70:	3201      	adds	r2, #1
 801da72:	60e2      	str	r2, [r4, #12]
 801da74:	69a2      	ldr	r2, [r4, #24]
 801da76:	b102      	cbz	r2, 801da7a <_scanf_chars+0xa2>
 801da78:	7033      	strb	r3, [r6, #0]
 801da7a:	6923      	ldr	r3, [r4, #16]
 801da7c:	443b      	add	r3, r7
 801da7e:	6123      	str	r3, [r4, #16]
 801da80:	2000      	movs	r0, #0
 801da82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801da86:	bf00      	nop
 801da88:	0801fd59 	.word	0x0801fd59

0801da8c <_scanf_i>:
 801da8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da90:	4698      	mov	r8, r3
 801da92:	4b74      	ldr	r3, [pc, #464]	@ (801dc64 <_scanf_i+0x1d8>)
 801da94:	460c      	mov	r4, r1
 801da96:	4682      	mov	sl, r0
 801da98:	4616      	mov	r6, r2
 801da9a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801da9e:	b087      	sub	sp, #28
 801daa0:	ab03      	add	r3, sp, #12
 801daa2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801daa6:	4b70      	ldr	r3, [pc, #448]	@ (801dc68 <_scanf_i+0x1dc>)
 801daa8:	69a1      	ldr	r1, [r4, #24]
 801daaa:	4a70      	ldr	r2, [pc, #448]	@ (801dc6c <_scanf_i+0x1e0>)
 801daac:	2903      	cmp	r1, #3
 801daae:	bf08      	it	eq
 801dab0:	461a      	moveq	r2, r3
 801dab2:	68a3      	ldr	r3, [r4, #8]
 801dab4:	9201      	str	r2, [sp, #4]
 801dab6:	1e5a      	subs	r2, r3, #1
 801dab8:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801dabc:	bf88      	it	hi
 801dabe:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801dac2:	4627      	mov	r7, r4
 801dac4:	bf82      	ittt	hi
 801dac6:	eb03 0905 	addhi.w	r9, r3, r5
 801daca:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801dace:	60a3      	strhi	r3, [r4, #8]
 801dad0:	f857 3b1c 	ldr.w	r3, [r7], #28
 801dad4:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 801dad8:	bf98      	it	ls
 801dada:	f04f 0900 	movls.w	r9, #0
 801dade:	6023      	str	r3, [r4, #0]
 801dae0:	463d      	mov	r5, r7
 801dae2:	f04f 0b00 	mov.w	fp, #0
 801dae6:	6831      	ldr	r1, [r6, #0]
 801dae8:	ab03      	add	r3, sp, #12
 801daea:	7809      	ldrb	r1, [r1, #0]
 801daec:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801daf0:	2202      	movs	r2, #2
 801daf2:	f7e2 fc1d 	bl	8000330 <memchr>
 801daf6:	b328      	cbz	r0, 801db44 <_scanf_i+0xb8>
 801daf8:	f1bb 0f01 	cmp.w	fp, #1
 801dafc:	d159      	bne.n	801dbb2 <_scanf_i+0x126>
 801dafe:	6862      	ldr	r2, [r4, #4]
 801db00:	b92a      	cbnz	r2, 801db0e <_scanf_i+0x82>
 801db02:	6822      	ldr	r2, [r4, #0]
 801db04:	2108      	movs	r1, #8
 801db06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801db0a:	6061      	str	r1, [r4, #4]
 801db0c:	6022      	str	r2, [r4, #0]
 801db0e:	6822      	ldr	r2, [r4, #0]
 801db10:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 801db14:	6022      	str	r2, [r4, #0]
 801db16:	68a2      	ldr	r2, [r4, #8]
 801db18:	1e51      	subs	r1, r2, #1
 801db1a:	60a1      	str	r1, [r4, #8]
 801db1c:	b192      	cbz	r2, 801db44 <_scanf_i+0xb8>
 801db1e:	6832      	ldr	r2, [r6, #0]
 801db20:	1c51      	adds	r1, r2, #1
 801db22:	6031      	str	r1, [r6, #0]
 801db24:	7812      	ldrb	r2, [r2, #0]
 801db26:	f805 2b01 	strb.w	r2, [r5], #1
 801db2a:	6872      	ldr	r2, [r6, #4]
 801db2c:	3a01      	subs	r2, #1
 801db2e:	2a00      	cmp	r2, #0
 801db30:	6072      	str	r2, [r6, #4]
 801db32:	dc07      	bgt.n	801db44 <_scanf_i+0xb8>
 801db34:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 801db38:	4631      	mov	r1, r6
 801db3a:	4650      	mov	r0, sl
 801db3c:	4790      	blx	r2
 801db3e:	2800      	cmp	r0, #0
 801db40:	f040 8085 	bne.w	801dc4e <_scanf_i+0x1c2>
 801db44:	f10b 0b01 	add.w	fp, fp, #1
 801db48:	f1bb 0f03 	cmp.w	fp, #3
 801db4c:	d1cb      	bne.n	801dae6 <_scanf_i+0x5a>
 801db4e:	6863      	ldr	r3, [r4, #4]
 801db50:	b90b      	cbnz	r3, 801db56 <_scanf_i+0xca>
 801db52:	230a      	movs	r3, #10
 801db54:	6063      	str	r3, [r4, #4]
 801db56:	6863      	ldr	r3, [r4, #4]
 801db58:	4945      	ldr	r1, [pc, #276]	@ (801dc70 <_scanf_i+0x1e4>)
 801db5a:	6960      	ldr	r0, [r4, #20]
 801db5c:	1ac9      	subs	r1, r1, r3
 801db5e:	f000 f997 	bl	801de90 <__sccl>
 801db62:	f04f 0b00 	mov.w	fp, #0
 801db66:	68a3      	ldr	r3, [r4, #8]
 801db68:	6822      	ldr	r2, [r4, #0]
 801db6a:	2b00      	cmp	r3, #0
 801db6c:	d03d      	beq.n	801dbea <_scanf_i+0x15e>
 801db6e:	6831      	ldr	r1, [r6, #0]
 801db70:	6960      	ldr	r0, [r4, #20]
 801db72:	f891 c000 	ldrb.w	ip, [r1]
 801db76:	f810 000c 	ldrb.w	r0, [r0, ip]
 801db7a:	2800      	cmp	r0, #0
 801db7c:	d035      	beq.n	801dbea <_scanf_i+0x15e>
 801db7e:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 801db82:	d124      	bne.n	801dbce <_scanf_i+0x142>
 801db84:	0510      	lsls	r0, r2, #20
 801db86:	d522      	bpl.n	801dbce <_scanf_i+0x142>
 801db88:	f10b 0b01 	add.w	fp, fp, #1
 801db8c:	f1b9 0f00 	cmp.w	r9, #0
 801db90:	d003      	beq.n	801db9a <_scanf_i+0x10e>
 801db92:	3301      	adds	r3, #1
 801db94:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 801db98:	60a3      	str	r3, [r4, #8]
 801db9a:	6873      	ldr	r3, [r6, #4]
 801db9c:	3b01      	subs	r3, #1
 801db9e:	2b00      	cmp	r3, #0
 801dba0:	6073      	str	r3, [r6, #4]
 801dba2:	dd1b      	ble.n	801dbdc <_scanf_i+0x150>
 801dba4:	6833      	ldr	r3, [r6, #0]
 801dba6:	3301      	adds	r3, #1
 801dba8:	6033      	str	r3, [r6, #0]
 801dbaa:	68a3      	ldr	r3, [r4, #8]
 801dbac:	3b01      	subs	r3, #1
 801dbae:	60a3      	str	r3, [r4, #8]
 801dbb0:	e7d9      	b.n	801db66 <_scanf_i+0xda>
 801dbb2:	f1bb 0f02 	cmp.w	fp, #2
 801dbb6:	d1ae      	bne.n	801db16 <_scanf_i+0x8a>
 801dbb8:	6822      	ldr	r2, [r4, #0]
 801dbba:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 801dbbe:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801dbc2:	d1c4      	bne.n	801db4e <_scanf_i+0xc2>
 801dbc4:	2110      	movs	r1, #16
 801dbc6:	6061      	str	r1, [r4, #4]
 801dbc8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801dbcc:	e7a2      	b.n	801db14 <_scanf_i+0x88>
 801dbce:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 801dbd2:	6022      	str	r2, [r4, #0]
 801dbd4:	780b      	ldrb	r3, [r1, #0]
 801dbd6:	f805 3b01 	strb.w	r3, [r5], #1
 801dbda:	e7de      	b.n	801db9a <_scanf_i+0x10e>
 801dbdc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801dbe0:	4631      	mov	r1, r6
 801dbe2:	4650      	mov	r0, sl
 801dbe4:	4798      	blx	r3
 801dbe6:	2800      	cmp	r0, #0
 801dbe8:	d0df      	beq.n	801dbaa <_scanf_i+0x11e>
 801dbea:	6823      	ldr	r3, [r4, #0]
 801dbec:	05d9      	lsls	r1, r3, #23
 801dbee:	d50d      	bpl.n	801dc0c <_scanf_i+0x180>
 801dbf0:	42bd      	cmp	r5, r7
 801dbf2:	d909      	bls.n	801dc08 <_scanf_i+0x17c>
 801dbf4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801dbf8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801dbfc:	4632      	mov	r2, r6
 801dbfe:	4650      	mov	r0, sl
 801dc00:	4798      	blx	r3
 801dc02:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 801dc06:	464d      	mov	r5, r9
 801dc08:	42bd      	cmp	r5, r7
 801dc0a:	d028      	beq.n	801dc5e <_scanf_i+0x1d2>
 801dc0c:	6822      	ldr	r2, [r4, #0]
 801dc0e:	f012 0210 	ands.w	r2, r2, #16
 801dc12:	d113      	bne.n	801dc3c <_scanf_i+0x1b0>
 801dc14:	702a      	strb	r2, [r5, #0]
 801dc16:	6863      	ldr	r3, [r4, #4]
 801dc18:	9e01      	ldr	r6, [sp, #4]
 801dc1a:	4639      	mov	r1, r7
 801dc1c:	4650      	mov	r0, sl
 801dc1e:	47b0      	blx	r6
 801dc20:	f8d8 3000 	ldr.w	r3, [r8]
 801dc24:	6821      	ldr	r1, [r4, #0]
 801dc26:	1d1a      	adds	r2, r3, #4
 801dc28:	f8c8 2000 	str.w	r2, [r8]
 801dc2c:	f011 0f20 	tst.w	r1, #32
 801dc30:	681b      	ldr	r3, [r3, #0]
 801dc32:	d00f      	beq.n	801dc54 <_scanf_i+0x1c8>
 801dc34:	6018      	str	r0, [r3, #0]
 801dc36:	68e3      	ldr	r3, [r4, #12]
 801dc38:	3301      	adds	r3, #1
 801dc3a:	60e3      	str	r3, [r4, #12]
 801dc3c:	6923      	ldr	r3, [r4, #16]
 801dc3e:	1bed      	subs	r5, r5, r7
 801dc40:	445d      	add	r5, fp
 801dc42:	442b      	add	r3, r5
 801dc44:	6123      	str	r3, [r4, #16]
 801dc46:	2000      	movs	r0, #0
 801dc48:	b007      	add	sp, #28
 801dc4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dc4e:	f04f 0b00 	mov.w	fp, #0
 801dc52:	e7ca      	b.n	801dbea <_scanf_i+0x15e>
 801dc54:	07ca      	lsls	r2, r1, #31
 801dc56:	bf4c      	ite	mi
 801dc58:	8018      	strhmi	r0, [r3, #0]
 801dc5a:	6018      	strpl	r0, [r3, #0]
 801dc5c:	e7eb      	b.n	801dc36 <_scanf_i+0x1aa>
 801dc5e:	2001      	movs	r0, #1
 801dc60:	e7f2      	b.n	801dc48 <_scanf_i+0x1bc>
 801dc62:	bf00      	nop
 801dc64:	0801f848 	.word	0x0801f848
 801dc68:	0801d0e9 	.word	0x0801d0e9
 801dc6c:	0801e179 	.word	0x0801e179
 801dc70:	0801fbbc 	.word	0x0801fbbc

0801dc74 <__sflush_r>:
 801dc74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801dc78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dc7c:	0716      	lsls	r6, r2, #28
 801dc7e:	4605      	mov	r5, r0
 801dc80:	460c      	mov	r4, r1
 801dc82:	d454      	bmi.n	801dd2e <__sflush_r+0xba>
 801dc84:	684b      	ldr	r3, [r1, #4]
 801dc86:	2b00      	cmp	r3, #0
 801dc88:	dc02      	bgt.n	801dc90 <__sflush_r+0x1c>
 801dc8a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801dc8c:	2b00      	cmp	r3, #0
 801dc8e:	dd48      	ble.n	801dd22 <__sflush_r+0xae>
 801dc90:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801dc92:	2e00      	cmp	r6, #0
 801dc94:	d045      	beq.n	801dd22 <__sflush_r+0xae>
 801dc96:	2300      	movs	r3, #0
 801dc98:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801dc9c:	682f      	ldr	r7, [r5, #0]
 801dc9e:	6a21      	ldr	r1, [r4, #32]
 801dca0:	602b      	str	r3, [r5, #0]
 801dca2:	d030      	beq.n	801dd06 <__sflush_r+0x92>
 801dca4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801dca6:	89a3      	ldrh	r3, [r4, #12]
 801dca8:	0759      	lsls	r1, r3, #29
 801dcaa:	d505      	bpl.n	801dcb8 <__sflush_r+0x44>
 801dcac:	6863      	ldr	r3, [r4, #4]
 801dcae:	1ad2      	subs	r2, r2, r3
 801dcb0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801dcb2:	b10b      	cbz	r3, 801dcb8 <__sflush_r+0x44>
 801dcb4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801dcb6:	1ad2      	subs	r2, r2, r3
 801dcb8:	2300      	movs	r3, #0
 801dcba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801dcbc:	6a21      	ldr	r1, [r4, #32]
 801dcbe:	4628      	mov	r0, r5
 801dcc0:	47b0      	blx	r6
 801dcc2:	1c43      	adds	r3, r0, #1
 801dcc4:	89a3      	ldrh	r3, [r4, #12]
 801dcc6:	d106      	bne.n	801dcd6 <__sflush_r+0x62>
 801dcc8:	6829      	ldr	r1, [r5, #0]
 801dcca:	291d      	cmp	r1, #29
 801dccc:	d82b      	bhi.n	801dd26 <__sflush_r+0xb2>
 801dcce:	4a2a      	ldr	r2, [pc, #168]	@ (801dd78 <__sflush_r+0x104>)
 801dcd0:	40ca      	lsrs	r2, r1
 801dcd2:	07d6      	lsls	r6, r2, #31
 801dcd4:	d527      	bpl.n	801dd26 <__sflush_r+0xb2>
 801dcd6:	2200      	movs	r2, #0
 801dcd8:	6062      	str	r2, [r4, #4]
 801dcda:	04d9      	lsls	r1, r3, #19
 801dcdc:	6922      	ldr	r2, [r4, #16]
 801dcde:	6022      	str	r2, [r4, #0]
 801dce0:	d504      	bpl.n	801dcec <__sflush_r+0x78>
 801dce2:	1c42      	adds	r2, r0, #1
 801dce4:	d101      	bne.n	801dcea <__sflush_r+0x76>
 801dce6:	682b      	ldr	r3, [r5, #0]
 801dce8:	b903      	cbnz	r3, 801dcec <__sflush_r+0x78>
 801dcea:	6560      	str	r0, [r4, #84]	@ 0x54
 801dcec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801dcee:	602f      	str	r7, [r5, #0]
 801dcf0:	b1b9      	cbz	r1, 801dd22 <__sflush_r+0xae>
 801dcf2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801dcf6:	4299      	cmp	r1, r3
 801dcf8:	d002      	beq.n	801dd00 <__sflush_r+0x8c>
 801dcfa:	4628      	mov	r0, r5
 801dcfc:	f7fe f886 	bl	801be0c <_free_r>
 801dd00:	2300      	movs	r3, #0
 801dd02:	6363      	str	r3, [r4, #52]	@ 0x34
 801dd04:	e00d      	b.n	801dd22 <__sflush_r+0xae>
 801dd06:	2301      	movs	r3, #1
 801dd08:	4628      	mov	r0, r5
 801dd0a:	47b0      	blx	r6
 801dd0c:	4602      	mov	r2, r0
 801dd0e:	1c50      	adds	r0, r2, #1
 801dd10:	d1c9      	bne.n	801dca6 <__sflush_r+0x32>
 801dd12:	682b      	ldr	r3, [r5, #0]
 801dd14:	2b00      	cmp	r3, #0
 801dd16:	d0c6      	beq.n	801dca6 <__sflush_r+0x32>
 801dd18:	2b1d      	cmp	r3, #29
 801dd1a:	d001      	beq.n	801dd20 <__sflush_r+0xac>
 801dd1c:	2b16      	cmp	r3, #22
 801dd1e:	d11e      	bne.n	801dd5e <__sflush_r+0xea>
 801dd20:	602f      	str	r7, [r5, #0]
 801dd22:	2000      	movs	r0, #0
 801dd24:	e022      	b.n	801dd6c <__sflush_r+0xf8>
 801dd26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801dd2a:	b21b      	sxth	r3, r3
 801dd2c:	e01b      	b.n	801dd66 <__sflush_r+0xf2>
 801dd2e:	690f      	ldr	r7, [r1, #16]
 801dd30:	2f00      	cmp	r7, #0
 801dd32:	d0f6      	beq.n	801dd22 <__sflush_r+0xae>
 801dd34:	0793      	lsls	r3, r2, #30
 801dd36:	680e      	ldr	r6, [r1, #0]
 801dd38:	bf08      	it	eq
 801dd3a:	694b      	ldreq	r3, [r1, #20]
 801dd3c:	600f      	str	r7, [r1, #0]
 801dd3e:	bf18      	it	ne
 801dd40:	2300      	movne	r3, #0
 801dd42:	eba6 0807 	sub.w	r8, r6, r7
 801dd46:	608b      	str	r3, [r1, #8]
 801dd48:	f1b8 0f00 	cmp.w	r8, #0
 801dd4c:	dde9      	ble.n	801dd22 <__sflush_r+0xae>
 801dd4e:	6a21      	ldr	r1, [r4, #32]
 801dd50:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801dd52:	4643      	mov	r3, r8
 801dd54:	463a      	mov	r2, r7
 801dd56:	4628      	mov	r0, r5
 801dd58:	47b0      	blx	r6
 801dd5a:	2800      	cmp	r0, #0
 801dd5c:	dc08      	bgt.n	801dd70 <__sflush_r+0xfc>
 801dd5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dd62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801dd66:	81a3      	strh	r3, [r4, #12]
 801dd68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801dd6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dd70:	4407      	add	r7, r0
 801dd72:	eba8 0800 	sub.w	r8, r8, r0
 801dd76:	e7e7      	b.n	801dd48 <__sflush_r+0xd4>
 801dd78:	20400001 	.word	0x20400001

0801dd7c <_fflush_r>:
 801dd7c:	b538      	push	{r3, r4, r5, lr}
 801dd7e:	690b      	ldr	r3, [r1, #16]
 801dd80:	4605      	mov	r5, r0
 801dd82:	460c      	mov	r4, r1
 801dd84:	b913      	cbnz	r3, 801dd8c <_fflush_r+0x10>
 801dd86:	2500      	movs	r5, #0
 801dd88:	4628      	mov	r0, r5
 801dd8a:	bd38      	pop	{r3, r4, r5, pc}
 801dd8c:	b118      	cbz	r0, 801dd96 <_fflush_r+0x1a>
 801dd8e:	6a03      	ldr	r3, [r0, #32]
 801dd90:	b90b      	cbnz	r3, 801dd96 <_fflush_r+0x1a>
 801dd92:	f7fc ff51 	bl	801ac38 <__sinit>
 801dd96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dd9a:	2b00      	cmp	r3, #0
 801dd9c:	d0f3      	beq.n	801dd86 <_fflush_r+0xa>
 801dd9e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801dda0:	07d0      	lsls	r0, r2, #31
 801dda2:	d404      	bmi.n	801ddae <_fflush_r+0x32>
 801dda4:	0599      	lsls	r1, r3, #22
 801dda6:	d402      	bmi.n	801ddae <_fflush_r+0x32>
 801dda8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ddaa:	f7fd fa28 	bl	801b1fe <__retarget_lock_acquire_recursive>
 801ddae:	4628      	mov	r0, r5
 801ddb0:	4621      	mov	r1, r4
 801ddb2:	f7ff ff5f 	bl	801dc74 <__sflush_r>
 801ddb6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ddb8:	07da      	lsls	r2, r3, #31
 801ddba:	4605      	mov	r5, r0
 801ddbc:	d4e4      	bmi.n	801dd88 <_fflush_r+0xc>
 801ddbe:	89a3      	ldrh	r3, [r4, #12]
 801ddc0:	059b      	lsls	r3, r3, #22
 801ddc2:	d4e1      	bmi.n	801dd88 <_fflush_r+0xc>
 801ddc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ddc6:	f7fd fa1b 	bl	801b200 <__retarget_lock_release_recursive>
 801ddca:	e7dd      	b.n	801dd88 <_fflush_r+0xc>

0801ddcc <__swhatbuf_r>:
 801ddcc:	b570      	push	{r4, r5, r6, lr}
 801ddce:	460c      	mov	r4, r1
 801ddd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ddd4:	2900      	cmp	r1, #0
 801ddd6:	b096      	sub	sp, #88	@ 0x58
 801ddd8:	4615      	mov	r5, r2
 801ddda:	461e      	mov	r6, r3
 801dddc:	da0d      	bge.n	801ddfa <__swhatbuf_r+0x2e>
 801ddde:	89a3      	ldrh	r3, [r4, #12]
 801dde0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801dde4:	f04f 0100 	mov.w	r1, #0
 801dde8:	bf14      	ite	ne
 801ddea:	2340      	movne	r3, #64	@ 0x40
 801ddec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801ddf0:	2000      	movs	r0, #0
 801ddf2:	6031      	str	r1, [r6, #0]
 801ddf4:	602b      	str	r3, [r5, #0]
 801ddf6:	b016      	add	sp, #88	@ 0x58
 801ddf8:	bd70      	pop	{r4, r5, r6, pc}
 801ddfa:	466a      	mov	r2, sp
 801ddfc:	f000 f8bc 	bl	801df78 <_fstat_r>
 801de00:	2800      	cmp	r0, #0
 801de02:	dbec      	blt.n	801ddde <__swhatbuf_r+0x12>
 801de04:	9901      	ldr	r1, [sp, #4]
 801de06:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801de0a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801de0e:	4259      	negs	r1, r3
 801de10:	4159      	adcs	r1, r3
 801de12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801de16:	e7eb      	b.n	801ddf0 <__swhatbuf_r+0x24>

0801de18 <__smakebuf_r>:
 801de18:	898b      	ldrh	r3, [r1, #12]
 801de1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801de1c:	079d      	lsls	r5, r3, #30
 801de1e:	4606      	mov	r6, r0
 801de20:	460c      	mov	r4, r1
 801de22:	d507      	bpl.n	801de34 <__smakebuf_r+0x1c>
 801de24:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801de28:	6023      	str	r3, [r4, #0]
 801de2a:	6123      	str	r3, [r4, #16]
 801de2c:	2301      	movs	r3, #1
 801de2e:	6163      	str	r3, [r4, #20]
 801de30:	b003      	add	sp, #12
 801de32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801de34:	ab01      	add	r3, sp, #4
 801de36:	466a      	mov	r2, sp
 801de38:	f7ff ffc8 	bl	801ddcc <__swhatbuf_r>
 801de3c:	9f00      	ldr	r7, [sp, #0]
 801de3e:	4605      	mov	r5, r0
 801de40:	4639      	mov	r1, r7
 801de42:	4630      	mov	r0, r6
 801de44:	f7fe fb90 	bl	801c568 <_malloc_r>
 801de48:	b948      	cbnz	r0, 801de5e <__smakebuf_r+0x46>
 801de4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801de4e:	059a      	lsls	r2, r3, #22
 801de50:	d4ee      	bmi.n	801de30 <__smakebuf_r+0x18>
 801de52:	f023 0303 	bic.w	r3, r3, #3
 801de56:	f043 0302 	orr.w	r3, r3, #2
 801de5a:	81a3      	strh	r3, [r4, #12]
 801de5c:	e7e2      	b.n	801de24 <__smakebuf_r+0xc>
 801de5e:	89a3      	ldrh	r3, [r4, #12]
 801de60:	6020      	str	r0, [r4, #0]
 801de62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801de66:	81a3      	strh	r3, [r4, #12]
 801de68:	9b01      	ldr	r3, [sp, #4]
 801de6a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801de6e:	b15b      	cbz	r3, 801de88 <__smakebuf_r+0x70>
 801de70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801de74:	4630      	mov	r0, r6
 801de76:	f000 f891 	bl	801df9c <_isatty_r>
 801de7a:	b128      	cbz	r0, 801de88 <__smakebuf_r+0x70>
 801de7c:	89a3      	ldrh	r3, [r4, #12]
 801de7e:	f023 0303 	bic.w	r3, r3, #3
 801de82:	f043 0301 	orr.w	r3, r3, #1
 801de86:	81a3      	strh	r3, [r4, #12]
 801de88:	89a3      	ldrh	r3, [r4, #12]
 801de8a:	431d      	orrs	r5, r3
 801de8c:	81a5      	strh	r5, [r4, #12]
 801de8e:	e7cf      	b.n	801de30 <__smakebuf_r+0x18>

0801de90 <__sccl>:
 801de90:	b570      	push	{r4, r5, r6, lr}
 801de92:	780b      	ldrb	r3, [r1, #0]
 801de94:	4604      	mov	r4, r0
 801de96:	2b5e      	cmp	r3, #94	@ 0x5e
 801de98:	bf0b      	itete	eq
 801de9a:	784b      	ldrbeq	r3, [r1, #1]
 801de9c:	1c4a      	addne	r2, r1, #1
 801de9e:	1c8a      	addeq	r2, r1, #2
 801dea0:	2100      	movne	r1, #0
 801dea2:	bf08      	it	eq
 801dea4:	2101      	moveq	r1, #1
 801dea6:	3801      	subs	r0, #1
 801dea8:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 801deac:	f800 1f01 	strb.w	r1, [r0, #1]!
 801deb0:	42a8      	cmp	r0, r5
 801deb2:	d1fb      	bne.n	801deac <__sccl+0x1c>
 801deb4:	b90b      	cbnz	r3, 801deba <__sccl+0x2a>
 801deb6:	1e50      	subs	r0, r2, #1
 801deb8:	bd70      	pop	{r4, r5, r6, pc}
 801deba:	f081 0101 	eor.w	r1, r1, #1
 801debe:	54e1      	strb	r1, [r4, r3]
 801dec0:	4610      	mov	r0, r2
 801dec2:	4602      	mov	r2, r0
 801dec4:	f812 5b01 	ldrb.w	r5, [r2], #1
 801dec8:	2d2d      	cmp	r5, #45	@ 0x2d
 801deca:	d005      	beq.n	801ded8 <__sccl+0x48>
 801decc:	2d5d      	cmp	r5, #93	@ 0x5d
 801dece:	d016      	beq.n	801defe <__sccl+0x6e>
 801ded0:	2d00      	cmp	r5, #0
 801ded2:	d0f1      	beq.n	801deb8 <__sccl+0x28>
 801ded4:	462b      	mov	r3, r5
 801ded6:	e7f2      	b.n	801debe <__sccl+0x2e>
 801ded8:	7846      	ldrb	r6, [r0, #1]
 801deda:	2e5d      	cmp	r6, #93	@ 0x5d
 801dedc:	d0fa      	beq.n	801ded4 <__sccl+0x44>
 801dede:	42b3      	cmp	r3, r6
 801dee0:	dcf8      	bgt.n	801ded4 <__sccl+0x44>
 801dee2:	3002      	adds	r0, #2
 801dee4:	461a      	mov	r2, r3
 801dee6:	3201      	adds	r2, #1
 801dee8:	4296      	cmp	r6, r2
 801deea:	54a1      	strb	r1, [r4, r2]
 801deec:	dcfb      	bgt.n	801dee6 <__sccl+0x56>
 801deee:	1af2      	subs	r2, r6, r3
 801def0:	3a01      	subs	r2, #1
 801def2:	1c5d      	adds	r5, r3, #1
 801def4:	42b3      	cmp	r3, r6
 801def6:	bfa8      	it	ge
 801def8:	2200      	movge	r2, #0
 801defa:	18ab      	adds	r3, r5, r2
 801defc:	e7e1      	b.n	801dec2 <__sccl+0x32>
 801defe:	4610      	mov	r0, r2
 801df00:	e7da      	b.n	801deb8 <__sccl+0x28>

0801df02 <__submore>:
 801df02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801df06:	460c      	mov	r4, r1
 801df08:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801df0a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801df0e:	4299      	cmp	r1, r3
 801df10:	d11d      	bne.n	801df4e <__submore+0x4c>
 801df12:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801df16:	f7fe fb27 	bl	801c568 <_malloc_r>
 801df1a:	b918      	cbnz	r0, 801df24 <__submore+0x22>
 801df1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801df20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801df24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801df28:	63a3      	str	r3, [r4, #56]	@ 0x38
 801df2a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 801df2e:	6360      	str	r0, [r4, #52]	@ 0x34
 801df30:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 801df34:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 801df38:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 801df3c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801df40:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 801df44:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 801df48:	6020      	str	r0, [r4, #0]
 801df4a:	2000      	movs	r0, #0
 801df4c:	e7e8      	b.n	801df20 <__submore+0x1e>
 801df4e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 801df50:	0077      	lsls	r7, r6, #1
 801df52:	463a      	mov	r2, r7
 801df54:	f000 f874 	bl	801e040 <_realloc_r>
 801df58:	4605      	mov	r5, r0
 801df5a:	2800      	cmp	r0, #0
 801df5c:	d0de      	beq.n	801df1c <__submore+0x1a>
 801df5e:	eb00 0806 	add.w	r8, r0, r6
 801df62:	4601      	mov	r1, r0
 801df64:	4632      	mov	r2, r6
 801df66:	4640      	mov	r0, r8
 801df68:	f7fd f94b 	bl	801b202 <memcpy>
 801df6c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 801df70:	f8c4 8000 	str.w	r8, [r4]
 801df74:	e7e9      	b.n	801df4a <__submore+0x48>
	...

0801df78 <_fstat_r>:
 801df78:	b538      	push	{r3, r4, r5, lr}
 801df7a:	4d07      	ldr	r5, [pc, #28]	@ (801df98 <_fstat_r+0x20>)
 801df7c:	2300      	movs	r3, #0
 801df7e:	4604      	mov	r4, r0
 801df80:	4608      	mov	r0, r1
 801df82:	4611      	mov	r1, r2
 801df84:	602b      	str	r3, [r5, #0]
 801df86:	f7e7 fcab 	bl	80058e0 <_fstat>
 801df8a:	1c43      	adds	r3, r0, #1
 801df8c:	d102      	bne.n	801df94 <_fstat_r+0x1c>
 801df8e:	682b      	ldr	r3, [r5, #0]
 801df90:	b103      	cbz	r3, 801df94 <_fstat_r+0x1c>
 801df92:	6023      	str	r3, [r4, #0]
 801df94:	bd38      	pop	{r3, r4, r5, pc}
 801df96:	bf00      	nop
 801df98:	24005cf8 	.word	0x24005cf8

0801df9c <_isatty_r>:
 801df9c:	b538      	push	{r3, r4, r5, lr}
 801df9e:	4d06      	ldr	r5, [pc, #24]	@ (801dfb8 <_isatty_r+0x1c>)
 801dfa0:	2300      	movs	r3, #0
 801dfa2:	4604      	mov	r4, r0
 801dfa4:	4608      	mov	r0, r1
 801dfa6:	602b      	str	r3, [r5, #0]
 801dfa8:	f7e7 fcaa 	bl	8005900 <_isatty>
 801dfac:	1c43      	adds	r3, r0, #1
 801dfae:	d102      	bne.n	801dfb6 <_isatty_r+0x1a>
 801dfb0:	682b      	ldr	r3, [r5, #0]
 801dfb2:	b103      	cbz	r3, 801dfb6 <_isatty_r+0x1a>
 801dfb4:	6023      	str	r3, [r4, #0]
 801dfb6:	bd38      	pop	{r3, r4, r5, pc}
 801dfb8:	24005cf8 	.word	0x24005cf8

0801dfbc <_sbrk_r>:
 801dfbc:	b538      	push	{r3, r4, r5, lr}
 801dfbe:	4d06      	ldr	r5, [pc, #24]	@ (801dfd8 <_sbrk_r+0x1c>)
 801dfc0:	2300      	movs	r3, #0
 801dfc2:	4604      	mov	r4, r0
 801dfc4:	4608      	mov	r0, r1
 801dfc6:	602b      	str	r3, [r5, #0]
 801dfc8:	f7e7 fcb2 	bl	8005930 <_sbrk>
 801dfcc:	1c43      	adds	r3, r0, #1
 801dfce:	d102      	bne.n	801dfd6 <_sbrk_r+0x1a>
 801dfd0:	682b      	ldr	r3, [r5, #0]
 801dfd2:	b103      	cbz	r3, 801dfd6 <_sbrk_r+0x1a>
 801dfd4:	6023      	str	r3, [r4, #0]
 801dfd6:	bd38      	pop	{r3, r4, r5, pc}
 801dfd8:	24005cf8 	.word	0x24005cf8

0801dfdc <__assert_func>:
 801dfdc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801dfde:	4614      	mov	r4, r2
 801dfe0:	461a      	mov	r2, r3
 801dfe2:	4b09      	ldr	r3, [pc, #36]	@ (801e008 <__assert_func+0x2c>)
 801dfe4:	681b      	ldr	r3, [r3, #0]
 801dfe6:	4605      	mov	r5, r0
 801dfe8:	68d8      	ldr	r0, [r3, #12]
 801dfea:	b14c      	cbz	r4, 801e000 <__assert_func+0x24>
 801dfec:	4b07      	ldr	r3, [pc, #28]	@ (801e00c <__assert_func+0x30>)
 801dfee:	9100      	str	r1, [sp, #0]
 801dff0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801dff4:	4906      	ldr	r1, [pc, #24]	@ (801e010 <__assert_func+0x34>)
 801dff6:	462b      	mov	r3, r5
 801dff8:	f000 f8c0 	bl	801e17c <fiprintf>
 801dffc:	f000 f8d0 	bl	801e1a0 <abort>
 801e000:	4b04      	ldr	r3, [pc, #16]	@ (801e014 <__assert_func+0x38>)
 801e002:	461c      	mov	r4, r3
 801e004:	e7f3      	b.n	801dfee <__assert_func+0x12>
 801e006:	bf00      	nop
 801e008:	240001a4 	.word	0x240001a4
 801e00c:	0801fbc7 	.word	0x0801fbc7
 801e010:	0801fbd4 	.word	0x0801fbd4
 801e014:	0801fc02 	.word	0x0801fc02

0801e018 <_calloc_r>:
 801e018:	b570      	push	{r4, r5, r6, lr}
 801e01a:	fba1 5402 	umull	r5, r4, r1, r2
 801e01e:	b934      	cbnz	r4, 801e02e <_calloc_r+0x16>
 801e020:	4629      	mov	r1, r5
 801e022:	f7fe faa1 	bl	801c568 <_malloc_r>
 801e026:	4606      	mov	r6, r0
 801e028:	b928      	cbnz	r0, 801e036 <_calloc_r+0x1e>
 801e02a:	4630      	mov	r0, r6
 801e02c:	bd70      	pop	{r4, r5, r6, pc}
 801e02e:	220c      	movs	r2, #12
 801e030:	6002      	str	r2, [r0, #0]
 801e032:	2600      	movs	r6, #0
 801e034:	e7f9      	b.n	801e02a <_calloc_r+0x12>
 801e036:	462a      	mov	r2, r5
 801e038:	4621      	mov	r1, r4
 801e03a:	f7fc ffe5 	bl	801b008 <memset>
 801e03e:	e7f4      	b.n	801e02a <_calloc_r+0x12>

0801e040 <_realloc_r>:
 801e040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e044:	4607      	mov	r7, r0
 801e046:	4614      	mov	r4, r2
 801e048:	460d      	mov	r5, r1
 801e04a:	b921      	cbnz	r1, 801e056 <_realloc_r+0x16>
 801e04c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e050:	4611      	mov	r1, r2
 801e052:	f7fe ba89 	b.w	801c568 <_malloc_r>
 801e056:	b92a      	cbnz	r2, 801e064 <_realloc_r+0x24>
 801e058:	f7fd fed8 	bl	801be0c <_free_r>
 801e05c:	4625      	mov	r5, r4
 801e05e:	4628      	mov	r0, r5
 801e060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e064:	f000 f8a3 	bl	801e1ae <_malloc_usable_size_r>
 801e068:	4284      	cmp	r4, r0
 801e06a:	4606      	mov	r6, r0
 801e06c:	d802      	bhi.n	801e074 <_realloc_r+0x34>
 801e06e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801e072:	d8f4      	bhi.n	801e05e <_realloc_r+0x1e>
 801e074:	4621      	mov	r1, r4
 801e076:	4638      	mov	r0, r7
 801e078:	f7fe fa76 	bl	801c568 <_malloc_r>
 801e07c:	4680      	mov	r8, r0
 801e07e:	b908      	cbnz	r0, 801e084 <_realloc_r+0x44>
 801e080:	4645      	mov	r5, r8
 801e082:	e7ec      	b.n	801e05e <_realloc_r+0x1e>
 801e084:	42b4      	cmp	r4, r6
 801e086:	4622      	mov	r2, r4
 801e088:	4629      	mov	r1, r5
 801e08a:	bf28      	it	cs
 801e08c:	4632      	movcs	r2, r6
 801e08e:	f7fd f8b8 	bl	801b202 <memcpy>
 801e092:	4629      	mov	r1, r5
 801e094:	4638      	mov	r0, r7
 801e096:	f7fd feb9 	bl	801be0c <_free_r>
 801e09a:	e7f1      	b.n	801e080 <_realloc_r+0x40>

0801e09c <_strtoul_l.isra.0>:
 801e09c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e0a0:	4e34      	ldr	r6, [pc, #208]	@ (801e174 <_strtoul_l.isra.0+0xd8>)
 801e0a2:	4686      	mov	lr, r0
 801e0a4:	460d      	mov	r5, r1
 801e0a6:	4628      	mov	r0, r5
 801e0a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 801e0ac:	5d37      	ldrb	r7, [r6, r4]
 801e0ae:	f017 0708 	ands.w	r7, r7, #8
 801e0b2:	d1f8      	bne.n	801e0a6 <_strtoul_l.isra.0+0xa>
 801e0b4:	2c2d      	cmp	r4, #45	@ 0x2d
 801e0b6:	d110      	bne.n	801e0da <_strtoul_l.isra.0+0x3e>
 801e0b8:	782c      	ldrb	r4, [r5, #0]
 801e0ba:	2701      	movs	r7, #1
 801e0bc:	1c85      	adds	r5, r0, #2
 801e0be:	f033 0010 	bics.w	r0, r3, #16
 801e0c2:	d115      	bne.n	801e0f0 <_strtoul_l.isra.0+0x54>
 801e0c4:	2c30      	cmp	r4, #48	@ 0x30
 801e0c6:	d10d      	bne.n	801e0e4 <_strtoul_l.isra.0+0x48>
 801e0c8:	7828      	ldrb	r0, [r5, #0]
 801e0ca:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801e0ce:	2858      	cmp	r0, #88	@ 0x58
 801e0d0:	d108      	bne.n	801e0e4 <_strtoul_l.isra.0+0x48>
 801e0d2:	786c      	ldrb	r4, [r5, #1]
 801e0d4:	3502      	adds	r5, #2
 801e0d6:	2310      	movs	r3, #16
 801e0d8:	e00a      	b.n	801e0f0 <_strtoul_l.isra.0+0x54>
 801e0da:	2c2b      	cmp	r4, #43	@ 0x2b
 801e0dc:	bf04      	itt	eq
 801e0de:	782c      	ldrbeq	r4, [r5, #0]
 801e0e0:	1c85      	addeq	r5, r0, #2
 801e0e2:	e7ec      	b.n	801e0be <_strtoul_l.isra.0+0x22>
 801e0e4:	2b00      	cmp	r3, #0
 801e0e6:	d1f6      	bne.n	801e0d6 <_strtoul_l.isra.0+0x3a>
 801e0e8:	2c30      	cmp	r4, #48	@ 0x30
 801e0ea:	bf14      	ite	ne
 801e0ec:	230a      	movne	r3, #10
 801e0ee:	2308      	moveq	r3, #8
 801e0f0:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801e0f4:	2600      	movs	r6, #0
 801e0f6:	fbb8 f8f3 	udiv	r8, r8, r3
 801e0fa:	fb03 f908 	mul.w	r9, r3, r8
 801e0fe:	ea6f 0909 	mvn.w	r9, r9
 801e102:	4630      	mov	r0, r6
 801e104:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801e108:	f1bc 0f09 	cmp.w	ip, #9
 801e10c:	d810      	bhi.n	801e130 <_strtoul_l.isra.0+0x94>
 801e10e:	4664      	mov	r4, ip
 801e110:	42a3      	cmp	r3, r4
 801e112:	dd1e      	ble.n	801e152 <_strtoul_l.isra.0+0xb6>
 801e114:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 801e118:	d007      	beq.n	801e12a <_strtoul_l.isra.0+0x8e>
 801e11a:	4580      	cmp	r8, r0
 801e11c:	d316      	bcc.n	801e14c <_strtoul_l.isra.0+0xb0>
 801e11e:	d101      	bne.n	801e124 <_strtoul_l.isra.0+0x88>
 801e120:	45a1      	cmp	r9, r4
 801e122:	db13      	blt.n	801e14c <_strtoul_l.isra.0+0xb0>
 801e124:	fb00 4003 	mla	r0, r0, r3, r4
 801e128:	2601      	movs	r6, #1
 801e12a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801e12e:	e7e9      	b.n	801e104 <_strtoul_l.isra.0+0x68>
 801e130:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801e134:	f1bc 0f19 	cmp.w	ip, #25
 801e138:	d801      	bhi.n	801e13e <_strtoul_l.isra.0+0xa2>
 801e13a:	3c37      	subs	r4, #55	@ 0x37
 801e13c:	e7e8      	b.n	801e110 <_strtoul_l.isra.0+0x74>
 801e13e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801e142:	f1bc 0f19 	cmp.w	ip, #25
 801e146:	d804      	bhi.n	801e152 <_strtoul_l.isra.0+0xb6>
 801e148:	3c57      	subs	r4, #87	@ 0x57
 801e14a:	e7e1      	b.n	801e110 <_strtoul_l.isra.0+0x74>
 801e14c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801e150:	e7eb      	b.n	801e12a <_strtoul_l.isra.0+0x8e>
 801e152:	1c73      	adds	r3, r6, #1
 801e154:	d106      	bne.n	801e164 <_strtoul_l.isra.0+0xc8>
 801e156:	2322      	movs	r3, #34	@ 0x22
 801e158:	f8ce 3000 	str.w	r3, [lr]
 801e15c:	4630      	mov	r0, r6
 801e15e:	b932      	cbnz	r2, 801e16e <_strtoul_l.isra.0+0xd2>
 801e160:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e164:	b107      	cbz	r7, 801e168 <_strtoul_l.isra.0+0xcc>
 801e166:	4240      	negs	r0, r0
 801e168:	2a00      	cmp	r2, #0
 801e16a:	d0f9      	beq.n	801e160 <_strtoul_l.isra.0+0xc4>
 801e16c:	b106      	cbz	r6, 801e170 <_strtoul_l.isra.0+0xd4>
 801e16e:	1e69      	subs	r1, r5, #1
 801e170:	6011      	str	r1, [r2, #0]
 801e172:	e7f5      	b.n	801e160 <_strtoul_l.isra.0+0xc4>
 801e174:	0801fd59 	.word	0x0801fd59

0801e178 <_strtoul_r>:
 801e178:	f7ff bf90 	b.w	801e09c <_strtoul_l.isra.0>

0801e17c <fiprintf>:
 801e17c:	b40e      	push	{r1, r2, r3}
 801e17e:	b503      	push	{r0, r1, lr}
 801e180:	4601      	mov	r1, r0
 801e182:	ab03      	add	r3, sp, #12
 801e184:	4805      	ldr	r0, [pc, #20]	@ (801e19c <fiprintf+0x20>)
 801e186:	f853 2b04 	ldr.w	r2, [r3], #4
 801e18a:	6800      	ldr	r0, [r0, #0]
 801e18c:	9301      	str	r3, [sp, #4]
 801e18e:	f7ff fb0b 	bl	801d7a8 <_vfiprintf_r>
 801e192:	b002      	add	sp, #8
 801e194:	f85d eb04 	ldr.w	lr, [sp], #4
 801e198:	b003      	add	sp, #12
 801e19a:	4770      	bx	lr
 801e19c:	240001a4 	.word	0x240001a4

0801e1a0 <abort>:
 801e1a0:	b508      	push	{r3, lr}
 801e1a2:	2006      	movs	r0, #6
 801e1a4:	f000 f834 	bl	801e210 <raise>
 801e1a8:	2001      	movs	r0, #1
 801e1aa:	f7e7 fb65 	bl	8005878 <_exit>

0801e1ae <_malloc_usable_size_r>:
 801e1ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e1b2:	1f18      	subs	r0, r3, #4
 801e1b4:	2b00      	cmp	r3, #0
 801e1b6:	bfbc      	itt	lt
 801e1b8:	580b      	ldrlt	r3, [r1, r0]
 801e1ba:	18c0      	addlt	r0, r0, r3
 801e1bc:	4770      	bx	lr

0801e1be <_raise_r>:
 801e1be:	291f      	cmp	r1, #31
 801e1c0:	b538      	push	{r3, r4, r5, lr}
 801e1c2:	4605      	mov	r5, r0
 801e1c4:	460c      	mov	r4, r1
 801e1c6:	d904      	bls.n	801e1d2 <_raise_r+0x14>
 801e1c8:	2316      	movs	r3, #22
 801e1ca:	6003      	str	r3, [r0, #0]
 801e1cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e1d0:	bd38      	pop	{r3, r4, r5, pc}
 801e1d2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801e1d4:	b112      	cbz	r2, 801e1dc <_raise_r+0x1e>
 801e1d6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e1da:	b94b      	cbnz	r3, 801e1f0 <_raise_r+0x32>
 801e1dc:	4628      	mov	r0, r5
 801e1de:	f000 f831 	bl	801e244 <_getpid_r>
 801e1e2:	4622      	mov	r2, r4
 801e1e4:	4601      	mov	r1, r0
 801e1e6:	4628      	mov	r0, r5
 801e1e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e1ec:	f000 b818 	b.w	801e220 <_kill_r>
 801e1f0:	2b01      	cmp	r3, #1
 801e1f2:	d00a      	beq.n	801e20a <_raise_r+0x4c>
 801e1f4:	1c59      	adds	r1, r3, #1
 801e1f6:	d103      	bne.n	801e200 <_raise_r+0x42>
 801e1f8:	2316      	movs	r3, #22
 801e1fa:	6003      	str	r3, [r0, #0]
 801e1fc:	2001      	movs	r0, #1
 801e1fe:	e7e7      	b.n	801e1d0 <_raise_r+0x12>
 801e200:	2100      	movs	r1, #0
 801e202:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801e206:	4620      	mov	r0, r4
 801e208:	4798      	blx	r3
 801e20a:	2000      	movs	r0, #0
 801e20c:	e7e0      	b.n	801e1d0 <_raise_r+0x12>
	...

0801e210 <raise>:
 801e210:	4b02      	ldr	r3, [pc, #8]	@ (801e21c <raise+0xc>)
 801e212:	4601      	mov	r1, r0
 801e214:	6818      	ldr	r0, [r3, #0]
 801e216:	f7ff bfd2 	b.w	801e1be <_raise_r>
 801e21a:	bf00      	nop
 801e21c:	240001a4 	.word	0x240001a4

0801e220 <_kill_r>:
 801e220:	b538      	push	{r3, r4, r5, lr}
 801e222:	4d07      	ldr	r5, [pc, #28]	@ (801e240 <_kill_r+0x20>)
 801e224:	2300      	movs	r3, #0
 801e226:	4604      	mov	r4, r0
 801e228:	4608      	mov	r0, r1
 801e22a:	4611      	mov	r1, r2
 801e22c:	602b      	str	r3, [r5, #0]
 801e22e:	f7e7 fb13 	bl	8005858 <_kill>
 801e232:	1c43      	adds	r3, r0, #1
 801e234:	d102      	bne.n	801e23c <_kill_r+0x1c>
 801e236:	682b      	ldr	r3, [r5, #0]
 801e238:	b103      	cbz	r3, 801e23c <_kill_r+0x1c>
 801e23a:	6023      	str	r3, [r4, #0]
 801e23c:	bd38      	pop	{r3, r4, r5, pc}
 801e23e:	bf00      	nop
 801e240:	24005cf8 	.word	0x24005cf8

0801e244 <_getpid_r>:
 801e244:	f7e7 bb00 	b.w	8005848 <_getpid>

0801e248 <_init>:
 801e248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e24a:	bf00      	nop
 801e24c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e24e:	bc08      	pop	{r3}
 801e250:	469e      	mov	lr, r3
 801e252:	4770      	bx	lr

0801e254 <_fini>:
 801e254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e256:	bf00      	nop
 801e258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e25a:	bc08      	pop	{r3}
 801e25c:	469e      	mov	lr, r3
 801e25e:	4770      	bx	lr
